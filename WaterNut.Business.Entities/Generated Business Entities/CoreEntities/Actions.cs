// <autogenerated>
//   This file was generated by T4 code generator AllBusinessEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;

using Core.Common.Business.Entities;
using WaterNut.Interfaces;
using TrackableEntities;

namespace CoreEntities.Business.Entities
{

    //[JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class Actions : BaseEntity<Actions>, ITrackable 
    {
        partial void AutoGenStartUp() //Actions()
        {
            this.FileTypeActions = new List<FileTypeActions>();
            this.SessionActions = new List<SessionActions>();
            this.ActionDocSetLogs = new List<ActionDocSetLogs>();
        }

        [DataMember]
        public int Id 
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        int _id;
        [DataMember]
        public string Name 
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _name;
        [DataMember]
        public bool TestMode 
        {
            get
            {
                return _testmode;
            }
            set
            {
                _testmode = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        bool _testmode;
        [DataMember]
        public Nullable<bool> IsDataSpecific 
        {
            get
            {
                return _isdataspecific;
            }
            set
            {
                _isdataspecific = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<bool> _isdataspecific;
        [DataMember]
        public List<FileTypeActions> FileTypeActions { get; set; }
        [DataMember]
        public List<SessionActions> SessionActions { get; set; }
        [DataMember]
        public List<ActionDocSetLogs> ActionDocSetLogs { get; set; }

 //       [DataMember]
 //       public TrackingState TrackingState { get; set; }
 //       [DataMember]
 //       public ICollection<string> ModifiedProperties { get; set; }
//        [DataMember]//JsonProperty,
 //       private Guid EntityIdentifier { get; set; }
    }
}



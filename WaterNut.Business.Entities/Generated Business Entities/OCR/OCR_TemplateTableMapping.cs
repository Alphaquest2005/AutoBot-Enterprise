// <autogenerated>
//   This file was generated by T4 code generator AllBusinessEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;

using Core.Common.Business.Entities;
using WaterNut.Interfaces;
using TrackableEntities;

namespace OCR.Business.Entities
{

    //[JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class OCR_TemplateTableMapping : BaseEntity<OCR_TemplateTableMapping>, ITrackable 
    {
        partial void AutoGenStartUp() //OCR_TemplateTableMapping()
        {
            this.OCR_KeywordDetectionLog = new List<OCR_KeywordDetectionLog>();
            this.OCR_TemplateTableMapping1 = new List<OCR_TemplateTableMapping>();
        }

        [DataMember]
        public int Id 
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        int _id;
        [DataMember]
        public string DocumentType 
        {
            get
            {
                return _documenttype;
            }
            set
            {
                _documenttype = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _documenttype;
        [DataMember]
        public string TargetTable 
        {
            get
            {
                return _targettable;
            }
            set
            {
                _targettable = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _targettable;
        [DataMember]
        public Nullable<int> ParentId 
        {
            get
            {
                return _parentid;
            }
            set
            {
                _parentid = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<int> _parentid;
        [DataMember]
        public string Keywords 
        {
            get
            {
                return _keywords;
            }
            set
            {
                _keywords = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _keywords;
        [DataMember]
        public string RequiredFields 
        {
            get
            {
                return _requiredfields;
            }
            set
            {
                _requiredfields = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _requiredfields;
        [DataMember]
        public string TemplatePrefix 
        {
            get
            {
                return _templateprefix;
            }
            set
            {
                _templateprefix = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _templateprefix;
        [DataMember]
        public int Priority 
        {
            get
            {
                return _priority;
            }
            set
            {
                _priority = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        int _priority;
        [DataMember]
        public bool IsActive 
        {
            get
            {
                return _isactive;
            }
            set
            {
                _isactive = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        bool _isactive;
        [DataMember]
        public string Description 
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _description;
        [DataMember]
        public Nullable<int> ParentTemplateTableId 
        {
            get
            {
                return _parenttemplatetableid;
            }
            set
            {
                _parenttemplatetableid = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<int> _parenttemplatetableid;
        [DataMember]
        public string OptionalFields 
        {
            get
            {
                return _optionalfields;
            }
            set
            {
                _optionalfields = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _optionalfields;
        [DataMember]
        public decimal MatchThreshold 
        {
            get
            {
                return _matchthreshold;
            }
            set
            {
                _matchthreshold = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        decimal _matchthreshold;
        [DataMember]
        public bool IsSystemEntity 
        {
            get
            {
                return _issystementity;
            }
            set
            {
                _issystementity = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        bool _issystementity;
        [DataMember]
        public System.DateTime CreatedDate 
        {
            get
            {
                return _createddate;
            }
            set
            {
                _createddate = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        System.DateTime _createddate;
        [DataMember]
        public System.DateTime LastUpdated 
        {
            get
            {
                return _lastupdated;
            }
            set
            {
                _lastupdated = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        System.DateTime _lastupdated;
        [DataMember]
        public string CreatedBy 
        {
            get
            {
                return _createdby;
            }
            set
            {
                _createdby = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _createdby;
        [DataMember]
        public string ProcessingNotes 
        {
            get
            {
                return _processingnotes;
            }
            set
            {
                _processingnotes = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _processingnotes;
        [DataMember]
        public Nullable<int> FileTypeId 
        {
            get
            {
                return _filetypeid;
            }
            set
            {
                _filetypeid = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<int> _filetypeid;
        [DataMember]
        public List<OCR_KeywordDetectionLog> OCR_KeywordDetectionLog { get; set; }
        [DataMember]
        public List<OCR_TemplateTableMapping> OCR_TemplateTableMapping1 { get; set; }
        [DataMember]
        public OCR_TemplateTableMapping OCR_TemplateTableMapping2 { get; set; }

 //       [DataMember]
 //       public TrackingState TrackingState { get; set; }
 //       [DataMember]
 //       public ICollection<string> ModifiedProperties { get; set; }
//        [DataMember]//JsonProperty,
 //       private Guid EntityIdentifier { get; set; }
    }
}



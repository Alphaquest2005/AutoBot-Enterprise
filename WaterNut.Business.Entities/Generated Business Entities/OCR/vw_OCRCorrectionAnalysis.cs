// <autogenerated>
//   This file was generated by T4 code generator AllBusinessEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;

using Core.Common.Business.Entities;
using WaterNut.Interfaces;
using TrackableEntities;

namespace OCR.Business.Entities
{

    //[JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class vw_OCRCorrectionAnalysis : BaseEntity<vw_OCRCorrectionAnalysis>, ITrackable 
    {
        [DataMember]
        public string FieldName 
        {
            get
            {
                return _fieldname;
            }
            set
            {
                _fieldname = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _fieldname;
        [DataMember]
        public string CorrectionType 
        {
            get
            {
                return _correctiontype;
            }
            set
            {
                _correctiontype = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _correctiontype;
        [DataMember]
        public Nullable<int> TotalCorrections 
        {
            get
            {
                return _totalcorrections;
            }
            set
            {
                _totalcorrections = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<int> _totalcorrections;
        [DataMember]
        public Nullable<double> AvgConfidence 
        {
            get
            {
                return _avgconfidence;
            }
            set
            {
                _avgconfidence = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _avgconfidence;
        [DataMember]
        public Nullable<int> SuccessfulCorrections 
        {
            get
            {
                return _successfulcorrections;
            }
            set
            {
                _successfulcorrections = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<int> _successfulcorrections;
        [DataMember]
        public Nullable<int> FailedCorrections 
        {
            get
            {
                return _failedcorrections;
            }
            set
            {
                _failedcorrections = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<int> _failedcorrections;
        [DataMember]
        public Nullable<double> SuccessRate 
        {
            get
            {
                return _successrate;
            }
            set
            {
                _successrate = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _successrate;
        [DataMember]
        public Nullable<System.DateTime> FirstCorrection 
        {
            get
            {
                return _firstcorrection;
            }
            set
            {
                _firstcorrection = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<System.DateTime> _firstcorrection;
        [DataMember]
        public Nullable<System.DateTime> LastCorrection 
        {
            get
            {
                return _lastcorrection;
            }
            set
            {
                _lastcorrection = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<System.DateTime> _lastcorrection;

 //       [DataMember]
 //       public TrackingState TrackingState { get; set; }
 //       [DataMember]
 //       public ICollection<string> ModifiedProperties { get; set; }
//        [DataMember]//JsonProperty,
 //       private Guid EntityIdentifier { get; set; }
    }
}



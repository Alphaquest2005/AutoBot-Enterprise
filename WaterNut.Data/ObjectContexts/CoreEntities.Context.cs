// <autogenerated>
//   This file was generated by T4 code generator AllObjectContext.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

            


using System.Data.Entity;
using CoreEntities.Business.Entities;
using System.Data.Entity.Infrastructure;
using CoreEntities.Business.Entities.Mapping;
using WaterNut.Data;
using System.Data.Entity.Core.Objects;



namespace CoreEntities.Business.Entities
{
    [DbConfigurationType(typeof(DBConfiguration))] 
    public partial class CoreEntitiesContext : DbContext
    {
        static CoreEntitiesContext()
        {
            var x = typeof(System.Data.Entity.SqlServer.SqlProviderServices);
            Database.SetInitializer<CoreEntitiesContext>(null);
        }

        public CoreEntitiesContext()
            : base("Name=CoreEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
            this.Configuration.ProxyCreationEnabled = false;
               // Get the ObjectContext related to this DbContext
            var objectContext = (this as IObjectContextAdapter).ObjectContext;

            // Sets the command timeout for all the commands
            objectContext.CommandTimeout = 120;

            objectContext.ObjectMaterialized += ObjectContext_OnObjectMaterialized;
        }
        
        public bool StartTracking { get; set; }

        private void ObjectContext_OnObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            if (StartTracking == true) ((dynamic)e.Entity).StartTracking();
        }

        public DbSet<ApplicationSettings> ApplicationSettings { get; set; }
     
        public DbSet<AsycudaDocument> AsycudaDocuments { get; set; }
     
        public DbSet<AsycudaDocumentItem> AsycudaDocumentItems { get; set; }
     
        public DbSet<Customs_Procedure> Customs_Procedure { get; set; }
     
        public DbSet<Document_Type> Document_Type { get; set; }
     
        public DbSet<AsycudaDocumentSetEx> AsycudaDocumentSetExs { get; set; }
     
        public DbSet<LicenceSummary> LicenceSummary { get; set; }
     
        public DbSet<SubItems> SubItems { get; set; }
     
        public DbSet<EntryPreviousItems> EntryPreviousItems { get; set; }
     
        public DbSet<xcuda_Supplementary_unit> xcuda_Supplementary_unit { get; set; }
     
        public DbSet<AsycudaDocumentItemEntryDataDetails> AsycudaDocumentItemEntryDataDetails { get; set; }
     
        public DbSet<InventoryItemX> InventoryItemX { get; set; }
     
        public DbSet<InventoryItemAliasX> InventoryItemAliasX { get; set; }
     
        public DbSet<FileTypes> FileTypes { get; set; }
     
        public DbSet<FileTypeMappings> FileTypeMappings { get; set; }
     
        public DbSet<AsycudaDocumentSet_Attachments> AsycudaDocumentSet_Attachments { get; set; }
     
        public DbSet<InfoMapping> InfoMapping { get; set; }
     
        public DbSet<Attachments> Attachments { get; set; }
     
        public DbSet<EmailMapping> EmailMapping { get; set; }
     
        public DbSet<TODO_UnallocatedSales> TODO_UnallocatedSales { get; set; }
     
        public DbSet<Contacts> Contacts { get; set; }
     
        public DbSet<TODO_CreateEx9> TODO_CreateEx9 { get; set; }
     
        public DbSet<TODO_DeleteDocumentSet> TODO_DeleteDocumentSet { get; set; }
     
        public DbSet<TODO_DocumentsToDelete> TODO_DocumentsToDelete { get; set; }
     
        public DbSet<TODO_PODocSet> TODO_PODocSet { get; set; }
     
        public DbSet<Actions> Actions { get; set; }
     
        public DbSet<FileTypeActions> FileTypeActions { get; set; }
     
        public DbSet<FileTypeContacts> FileTypeContacts { get; set; }
     


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new ApplicationSettingsMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentItemMap());
         
            modelBuilder.Configurations.Add(new Customs_ProcedureMap());
         
            modelBuilder.Configurations.Add(new Document_TypeMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentSetExMap());
         
            modelBuilder.Configurations.Add(new LicenceSummaryMap());
         
            modelBuilder.Configurations.Add(new SubItemsMap());
         
            modelBuilder.Configurations.Add(new EntryPreviousItemsMap());
         
            modelBuilder.Configurations.Add(new xcuda_Supplementary_unitMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentItemEntryDataDetailsMap());
         
            modelBuilder.Configurations.Add(new InventoryItemXMap());
         
            modelBuilder.Configurations.Add(new InventoryItemAliasXMap());
         
            modelBuilder.Configurations.Add(new FileTypesMap());
         
            modelBuilder.Configurations.Add(new FileTypeMappingsMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentSet_AttachmentsMap());
         
            modelBuilder.Configurations.Add(new InfoMappingMap());
         
            modelBuilder.Configurations.Add(new AttachmentsMap());
         
            modelBuilder.Configurations.Add(new EmailMappingMap());
         
            modelBuilder.Configurations.Add(new TODO_UnallocatedSalesMap());
         
            modelBuilder.Configurations.Add(new ContactsMap());
         
            modelBuilder.Configurations.Add(new TODO_CreateEx9Map());
         
            modelBuilder.Configurations.Add(new TODO_DeleteDocumentSetMap());
         
            modelBuilder.Configurations.Add(new TODO_DocumentsToDeleteMap());
         
            modelBuilder.Configurations.Add(new TODO_PODocSetMap());
         
            modelBuilder.Configurations.Add(new ActionsMap());
         
            modelBuilder.Configurations.Add(new FileTypeActionsMap());
         
            modelBuilder.Configurations.Add(new FileTypeContactsMap());
         
			OnModelCreatingExtentsion(modelBuilder);

        }
		partial void OnModelCreatingExtentsion(DbModelBuilder modelBuilder);
    }
}

 	

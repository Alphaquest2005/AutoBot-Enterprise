// <autogenerated>
//   This file was generated by T4 code generator AllObjectContext.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

            


using System.Data.Entity;
using CoreEntities.Business.Entities;
using System.Data.Entity.Infrastructure;
using CoreEntities.Business.Entities.Mapping;
using WaterNut.Data;
using System.Data.Entity.Core.Objects;



namespace CoreEntities.Business.Entities
{
    [DbConfigurationType(typeof(DBConfiguration))] 
    public partial class CoreEntitiesContext : DbContext
    {
        static CoreEntitiesContext()
        {
            var x = typeof(System.Data.Entity.SqlServer.SqlProviderServices);
            Database.SetInitializer<CoreEntitiesContext>(null);
        }

        public CoreEntitiesContext()
            : base("Name=CoreEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
            this.Configuration.ProxyCreationEnabled = false;
               // Get the ObjectContext related to this DbContext
            var objectContext = (this as IObjectContextAdapter).ObjectContext;

            // Sets the command timeout for all the commands
            objectContext.CommandTimeout = 120;

            objectContext.ObjectMaterialized += ObjectContext_OnObjectMaterialized;
        }
        
        public bool StartTracking { get; set; }

        private void ObjectContext_OnObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            if (StartTracking == true) ((dynamic)e.Entity).StartTracking();
        }

        public DbSet<ApplicationSettings> ApplicationSettings { get; set; }
     
        public DbSet<AsycudaDocument> AsycudaDocuments { get; set; }
     
        public DbSet<AsycudaDocumentItem> AsycudaDocumentItems { get; set; }
     
        public DbSet<Customs_Procedure> Customs_Procedure { get; set; }
     
        public DbSet<Document_Type> Document_Type { get; set; }
     
        public DbSet<AsycudaDocumentSetEx> AsycudaDocumentSetExs { get; set; }
     
        public DbSet<LicenceSummary> LicenceSummary { get; set; }
     
        public DbSet<SubItems> SubItems { get; set; }
     
        public DbSet<EntryPreviousItems> EntryPreviousItems { get; set; }
     
        public DbSet<xcuda_Supplementary_unit> xcuda_Supplementary_unit { get; set; }
     
        public DbSet<AsycudaDocumentItemEntryDataDetails> AsycudaDocumentItemEntryDataDetails { get; set; }
     
        public DbSet<InventoryItemX> InventoryItemX { get; set; }
     
        public DbSet<InventoryItemAliasX> InventoryItemAliasX { get; set; }
     
        public DbSet<FileTypes> FileTypes { get; set; }
     
        public DbSet<FileTypeMappings> FileTypeMappings { get; set; }
     
        public DbSet<AsycudaDocumentSet_Attachments> AsycudaDocumentSet_Attachments { get; set; }
     
        public DbSet<InfoMapping> InfoMapping { get; set; }
     
        public DbSet<Attachments> Attachments { get; set; }
     
        public DbSet<EmailMapping> EmailMapping { get; set; }
     
        public DbSet<TODO_UnallocatedSales> TODO_UnallocatedSales { get; set; }
     
        public DbSet<Contacts> Contacts { get; set; }
     
        public DbSet<TODO_DeleteDocumentSet> TODO_DeleteDocumentSet { get; set; }
     
        public DbSet<TODO_DocumentsToDelete> TODO_DocumentsToDelete { get; set; }
     
        public DbSet<Actions> Actions { get; set; }
     
        public DbSet<FileTypeActions> FileTypeActions { get; set; }
     
        public DbSet<FileTypeContacts> FileTypeContacts { get; set; }
     
        public DbSet<TODO_UnallocatedShorts> TODO_UnallocatedShorts { get; set; }
     
        public DbSet<SessionActions> SessionActions { get; set; }
     
        public DbSet<Sessions> Sessions { get; set; }
     
        public DbSet<AttachmentLog> AttachmentLog { get; set; }
     
        public DbSet<TODO_CreateDiscrepancyEntries> TODO_CreateDiscrepancyEntries { get; set; }
     
        public DbSet<Emails> Emails { get; set; }
     
        public DbSet<FileGroups> FileGroups { get; set; }
     
        public DbSet<TODO_DiscrepanciesToSubmit> TODO_DiscrepanciesToSubmit { get; set; }
     
        public DbSet<SessionSchedule> SessionSchedule { get; set; }
     
        public DbSet<TODO_SubmitXMLToCustoms> TODO_SubmitXMLToCustoms { get; set; }
     
        public DbSet<TODO_DiscrepanciesToAssess> TODO_DiscrepanciesToAssess { get; set; }
     
        public DbSet<TODO_SubmitDiscrepanciesToCustoms> TODO_SubmitDiscrepanciesToCustoms { get; set; }
     
        public DbSet<AsycudaDocument_Attachments> AsycudaDocument_Attachments { get; set; }
     
        public DbSet<TODO_Error_DuplicateEntry> TODO_Error_DuplicateEntry { get; set; }
     
        public DbSet<TODO_Error_IncompleteImport> TODO_Error_IncompleteImport { get; set; }
     
        public DbSet<TODO_Error_IncompleteItems> TODO_Error_IncompleteItems { get; set; }
     
        public DbSet<TODO_ERRReport_Allocations> TODO_ERRReport_Allocations { get; set; }
     
        public DbSet<TODO_ERRReport_AsycudaEntries> TODO_ERRReport_AsycudaEntries { get; set; }
     
        public DbSet<TODO_ERRReport_AsycudaLines> TODO_ERRReport_AsycudaLines { get; set; }
     
        public DbSet<TODO_ERRReport_ByItemNumber> TODO_ERRReport_ByItemNumber { get; set; }
     
        public DbSet<TODO_ERRReport_EntryDataDetails> TODO_ERRReport_EntryDataDetails { get; set; }
     
        public DbSet<TODO_ERRReport_UnmappedItems> TODO_ERRReport_UnmappedItems { get; set; }
     
        public DbSet<ToDo_POToXML> ToDo_POToXML { get; set; }
     
        public DbSet<TODO_EntriesExpiringNextMonth> TODO_EntriesExpiringNextMonth { get; set; }
     
        public DbSet<TODO_ERRReport_SubmitWarehouseErrors> TODO_ERRReport_SubmitWarehouseErrors { get; set; }
     
        public DbSet<TODO_C71ToXML> TODO_C71ToXML { get; set; }
     
        public DbSet<TODO_LicenseToXML> TODO_LicenseToXML { get; set; }
     
        public DbSet<TODO_SubmitIncompleteEntryData> TODO_SubmitIncompleteEntryData { get; set; }
     
        public DbSet<TODO_PODocSet> TODO_PODocSet { get; set; }
     
        public DbSet<TODO_SubmitDocSetWithIncompleteInvoices> TODO_SubmitDocSetWithIncompleteInvoices { get; set; }
     
        public DbSet<TODO_SubmitUnclassifiedItems> TODO_SubmitUnclassifiedItems { get; set; }
     
        public DbSet<TODO_SubmitInadequatePackages> TODO_SubmitInadequatePackages { get; set; }
     
        public DbSet<TODO_PODocSetToExport> TODO_PODocSetToExport { get; set; }
     
        public DbSet<TODO_CreateEx9> TODO_CreateEx9 { get; set; }
     
        public DbSet<TODO_ImportCompleteEntries> TODO_ImportCompleteEntries { get; set; }
     
        public DbSet<TODO_AdjustmentsAlreadyXMLed> TODO_AdjustmentsAlreadyXMLed { get; set; }
     
        public DbSet<TODO_DiscrepancyPreExecutionReport> TODO_DiscrepancyPreExecutionReport { get; set; }
     
        public DbSet<TODO_SubmitDiscrepanciesErrorReport> TODO_SubmitDiscrepanciesErrorReport { get; set; }
     
        public DbSet<TODO_TotalAdjustmentsToProcess> TODO_TotalAdjustmentsToProcess { get; set; }
     
        public DbSet<TODO_DiscrepanciesAlreadyXMLed> TODO_DiscrepanciesAlreadyXMLed { get; set; }
     
        public DbSet<EmailFileTypes> EmailFileTypes { get; set; }
     
        public DbSet<InfoMappingRegEx> InfoMappingRegEx { get; set; }
     
        public DbSet<ActionDocSetLogs> ActionDocSetLogs { get; set; }
     
        public DbSet<TODO_SubmitIncompleteSupplierInfo> TODO_SubmitIncompleteSupplierInfo { get; set; }
     
        public DbSet<TODO_C71ToCreate> TODO_C71ToCreate { get; set; }
     
        public DbSet<TODO_LICToCreate> TODO_LICToCreate { get; set; }
     


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new ApplicationSettingsMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentItemMap());
         
            modelBuilder.Configurations.Add(new Customs_ProcedureMap());
         
            modelBuilder.Configurations.Add(new Document_TypeMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentSetExMap());
         
            modelBuilder.Configurations.Add(new LicenceSummaryMap());
         
            modelBuilder.Configurations.Add(new SubItemsMap());
         
            modelBuilder.Configurations.Add(new EntryPreviousItemsMap());
         
            modelBuilder.Configurations.Add(new xcuda_Supplementary_unitMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentItemEntryDataDetailsMap());
         
            modelBuilder.Configurations.Add(new InventoryItemXMap());
         
            modelBuilder.Configurations.Add(new InventoryItemAliasXMap());
         
            modelBuilder.Configurations.Add(new FileTypesMap());
         
            modelBuilder.Configurations.Add(new FileTypeMappingsMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentSet_AttachmentsMap());
         
            modelBuilder.Configurations.Add(new InfoMappingMap());
         
            modelBuilder.Configurations.Add(new AttachmentsMap());
         
            modelBuilder.Configurations.Add(new EmailMappingMap());
         
            modelBuilder.Configurations.Add(new TODO_UnallocatedSalesMap());
         
            modelBuilder.Configurations.Add(new ContactsMap());
         
            modelBuilder.Configurations.Add(new TODO_DeleteDocumentSetMap());
         
            modelBuilder.Configurations.Add(new TODO_DocumentsToDeleteMap());
         
            modelBuilder.Configurations.Add(new ActionsMap());
         
            modelBuilder.Configurations.Add(new FileTypeActionsMap());
         
            modelBuilder.Configurations.Add(new FileTypeContactsMap());
         
            modelBuilder.Configurations.Add(new TODO_UnallocatedShortsMap());
         
            modelBuilder.Configurations.Add(new SessionActionsMap());
         
            modelBuilder.Configurations.Add(new SessionsMap());
         
            modelBuilder.Configurations.Add(new AttachmentLogMap());
         
            modelBuilder.Configurations.Add(new TODO_CreateDiscrepancyEntriesMap());
         
            modelBuilder.Configurations.Add(new EmailsMap());
         
            modelBuilder.Configurations.Add(new FileGroupsMap());
         
            modelBuilder.Configurations.Add(new TODO_DiscrepanciesToSubmitMap());
         
            modelBuilder.Configurations.Add(new SessionScheduleMap());
         
            modelBuilder.Configurations.Add(new TODO_SubmitXMLToCustomsMap());
         
            modelBuilder.Configurations.Add(new TODO_DiscrepanciesToAssessMap());
         
            modelBuilder.Configurations.Add(new TODO_SubmitDiscrepanciesToCustomsMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocument_AttachmentsMap());
         
            modelBuilder.Configurations.Add(new TODO_Error_DuplicateEntryMap());
         
            modelBuilder.Configurations.Add(new TODO_Error_IncompleteImportMap());
         
            modelBuilder.Configurations.Add(new TODO_Error_IncompleteItemsMap());
         
            modelBuilder.Configurations.Add(new TODO_ERRReport_AllocationsMap());
         
            modelBuilder.Configurations.Add(new TODO_ERRReport_AsycudaEntriesMap());
         
            modelBuilder.Configurations.Add(new TODO_ERRReport_AsycudaLinesMap());
         
            modelBuilder.Configurations.Add(new TODO_ERRReport_ByItemNumberMap());
         
            modelBuilder.Configurations.Add(new TODO_ERRReport_EntryDataDetailsMap());
         
            modelBuilder.Configurations.Add(new TODO_ERRReport_UnmappedItemsMap());
         
            modelBuilder.Configurations.Add(new ToDo_POToXMLMap());
         
            modelBuilder.Configurations.Add(new TODO_EntriesExpiringNextMonthMap());
         
            modelBuilder.Configurations.Add(new TODO_ERRReport_SubmitWarehouseErrorsMap());
         
            modelBuilder.Configurations.Add(new TODO_C71ToXMLMap());
         
            modelBuilder.Configurations.Add(new TODO_LicenseToXMLMap());
         
            modelBuilder.Configurations.Add(new TODO_SubmitIncompleteEntryDataMap());
         
            modelBuilder.Configurations.Add(new TODO_PODocSetMap());
         
            modelBuilder.Configurations.Add(new TODO_SubmitDocSetWithIncompleteInvoicesMap());
         
            modelBuilder.Configurations.Add(new TODO_SubmitUnclassifiedItemsMap());
         
            modelBuilder.Configurations.Add(new TODO_SubmitInadequatePackagesMap());
         
            modelBuilder.Configurations.Add(new TODO_PODocSetToExportMap());
         
            modelBuilder.Configurations.Add(new TODO_CreateEx9Map());
         
            modelBuilder.Configurations.Add(new TODO_ImportCompleteEntriesMap());
         
            modelBuilder.Configurations.Add(new TODO_AdjustmentsAlreadyXMLedMap());
         
            modelBuilder.Configurations.Add(new TODO_DiscrepancyPreExecutionReportMap());
         
            modelBuilder.Configurations.Add(new TODO_SubmitDiscrepanciesErrorReportMap());
         
            modelBuilder.Configurations.Add(new TODO_TotalAdjustmentsToProcessMap());
         
            modelBuilder.Configurations.Add(new TODO_DiscrepanciesAlreadyXMLedMap());
         
            modelBuilder.Configurations.Add(new EmailFileTypesMap());
         
            modelBuilder.Configurations.Add(new InfoMappingRegExMap());
         
            modelBuilder.Configurations.Add(new ActionDocSetLogsMap());
         
            modelBuilder.Configurations.Add(new TODO_SubmitIncompleteSupplierInfoMap());
         
            modelBuilder.Configurations.Add(new TODO_C71ToCreateMap());
         
            modelBuilder.Configurations.Add(new TODO_LICToCreateMap());
         
			OnModelCreatingExtentsion(modelBuilder);

        }
		partial void OnModelCreatingExtentsion(DbModelBuilder modelBuilder);
    }
}

 	

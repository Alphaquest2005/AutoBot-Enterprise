// <autogenerated>
//   This file was generated by T4 code generator AllObjectContext.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

            


using System.Data.Entity;
using CoreEntities.Business.Entities;
using System.Data.Entity.Infrastructure;
using EntryDataDS.Business.Entities.Mapping;
using WaterNut.Data;
using System.Data.Entity.Core.Objects;



namespace EntryDataDS.Business.Entities
{
    [DbConfigurationType(typeof(DBConfiguration))] 
    public partial class EntryDataDSContext : DbContext
    {
        static EntryDataDSContext()
        {
            var x = typeof(System.Data.Entity.SqlServer.SqlProviderServices);
            Database.SetInitializer<EntryDataDSContext>(null);
        }

        public EntryDataDSContext()
            : base("Name=EntryDataDS")
        {
            this.Configuration.LazyLoadingEnabled = false;
            this.Configuration.ProxyCreationEnabled = false;
               // Get the ObjectContext related to this DbContext
            var objectContext = (this as IObjectContextAdapter).ObjectContext;

            // Sets the command timeout for all the commands
            objectContext.CommandTimeout = 120;

            objectContext.ObjectMaterialized += ObjectContext_OnObjectMaterialized;
        }
        
        public bool StartTracking { get; set; }

        private void ObjectContext_OnObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            if (StartTracking == true) ((dynamic)e.Entity).StartTracking();
        }

        public DbSet<EntryData> EntryData { get; set; }
     
        public DbSet<EntryDataDetails> EntryDataDetails { get; set; }
     
        public DbSet<InventoryItemsEx> InventoryItemsEx { get; set; }
     
        public DbSet<EntryDataDetailsEx> EntryDataDetailsEx { get; set; }
     
        public DbSet<AsycudaDocumentEntryData> AsycudaDocumentEntryData { get; set; }
     
        public DbSet<AsycudaDocumentSetEntryData> AsycudaDocumentSetEntryData { get; set; }
     
        public DbSet<PackageTypes> PackageTypes { get; set; }
     
        public DbSet<Suppliers> Suppliers { get; set; }
     
        public DbSet<FileTypes> FileTypes { get; set; }
     
        public DbSet<InventoryItems_NonStock> InventoryItems_NonStock { get; set; }
     
        public DbSet<InventoryItems> InventoryItems { get; set; }
     
        public DbSet<EntryDataExTotals> EntryDataExTotals { get; set; }
     
        public DbSet<EntryDataEx> EntryDataEx { get; set; }
     
        public DbSet<EDDocumentTypes> EDDocumentType { get; set; }
     
        public DbSet<InventorySources> InventorySources { get; set; }
     
        public DbSet<InventoryItemSource> InventoryItemSourceSet { get; set; }
     
        public DbSet<EntryDataFiles> EntryDataFiles { get; set; }
     
        public DbSet<WarehouseInfo> WarehouseInfo { get; set; }
     
        public DbSet<ShimentBLCharges> ShimentBLCharges { get; set; }
     
        public DbSet<ShipmentBL> ShipmentBL { get; set; }
     
        public DbSet<ShipmentBLDetails> ShipmentBLDetails { get; set; }
     
        public DbSet<ShipmentRider> ShipmentRider { get; set; }
     
        public DbSet<ShipmentFreight> ShipmentFreight { get; set; }
     
        public DbSet<ShipmentRiderDetails> ShipmentRiderDetails { get; set; }
     
        public DbSet<ShipmentFreightDetails> ShipmentFreightDetails { get; set; }
     
        public DbSet<ShipmentInvoice> ShipmentInvoice { get; set; }
     
        public DbSet<InvoiceDetails> ShipmentInvoiceDetails { get; set; }
     
        public DbSet<InvoiceExtraInfo> ShipmentInvoiceExtraInfo { get; set; }
     
        public DbSet<ShipmentRiderBLs> ShipmentRiderBLs { get; set; }
     
        public DbSet<ShipmentRiderInvoice> ShipmentRiderInvoice { get; set; }
     
        public DbSet<ShipmentAttachedBL> ShipmentAttachedBL { get; set; }
     
        public DbSet<ShipmentAttachedFreight> ShipmentAttachedFreight { get; set; }
     
        public DbSet<ShipmentAttachedInvoices> ShipmentAttachedInvoices { get; set; }
     
        public DbSet<ShipmentAttachedRider> ShipmentAttachedRider { get; set; }
     
        public DbSet<ShipmentAttachedManifest> ShipmentAttachedManifest { get; set; }
     
        public DbSet<ShipmentManifestDetails> ShipmentManifestDetails { get; set; }
     
        public DbSet<Shipment> Shipment { get; set; }
     
        public DbSet<ShipmentAttachments> ShipmentAttachments { get; set; }
     
        public DbSet<Attachments> Attachments { get; set; }
     
        public DbSet<ShipmentFreightBLs> ShipmentFreightBLs { get; set; }
     
        public DbSet<ShipmentManifest> ShipmentManifest { get; set; }
     
        public DbSet<ShipmentManifestBLs> ShipmentManifestBLs { get; set; }
     
        public DbSet<ShipmentBLFreight> ShipmentBLFreight { get; set; }
     
        public DbSet<ShipmentInvoicePOs> ShipmentInvoicePOs { get; set; }
     
        public DbSet<ShipmentInvoicePOItemQueryMatches> ShipmentInvoicePOItemQueryMatches { get; set; }
     
        public DbSet<ShipmentInvoicePOItemMISMatches> ShipmentInvoicePOItemMISMatches { get; set; }
     
        public DbSet<ShipmentAttachedPOs> ShipmentAttachedPOs { get; set; }
     
        public DbSet<ShipmentInvoicePOManualMatches> ShipmentInvoicePOManualMatches { get; set; }
     
        public DbSet<ShipmentInvoiceRiderDetails> ShipmentInvoiceRiderDetails { get; set; }
     
        public DbSet<ShipmentInvoiceRiderManualMatches> ShipmentInvoiceRiderManualMatches { get; set; }
     
        public DbSet<ShipmentMIS_Invoices> ShipmentMIS_Invoices { get; set; }
     
        public DbSet<ShipmentMIS_POs> ShipmentMIS_POs { get; set; }
     
        public DbSet<ShipmentRiderEx> ShipmentRiderEx { get; set; }
     
        public DbSet<InventoryItemAlias> InventoryItemAlias { get; set; }
     
        public DbSet<ShipmentInvoicePOItemData> ShipmentInvoicePOItemData { get; set; }
     
        public DbSet<ShipmentInvoiceDetailsItemAlias> ShipmentInvoiceDetailsItemAlias { get; set; }
     
        public DbSet<InvoiceDetailsVolume> InvoiceDetailsVolume { get; set; }
     
        public DbSet<VolumeUnits> VolumeUnits { get; set; }
     
        public DbSet<ShipmentRiderManifests> ShipmentRiderManifests { get; set; }
     
        public DbSet<ShipmentFreightManifests> ShipmentFreightManifests { get; set; }
     
        public DbSet<ShipmentPOs> ShipmentPOs { get; set; }
     
        public DbSet<ShipmentErrors_RepeatInvoices> ShipmentErrors_RepeatInvoices { get; set; }
     
        public DbSet<ShipmentErrors_RepeatMarks> ShipmentErrors_RepeatMarks { get; set; }
     
        public DbSet<xSalesDetails> xSalesDetails { get; set; }
     
        public DbSet<xSalesFiles> xSalesFiles { get; set; }
     
        public DbSet<SupportingDetail> SupportingDetails { get; set; }
     
        public DbSet<AsycudaDocumentEntryDataLine> AsycudaDocumentEntryDataLine { get; set; }
     
        public DbSet<SupplierItemDescription> SupplierItemDescription { get; set; }
     
        public DbSet<SupplierItemDescriptionRegEx> SupplierItemDescriptionRegEx { get; set; }
     


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new EntryDataMap());
         
            modelBuilder.Configurations.Add(new EntryDataDetailsMap());
         
            modelBuilder.Configurations.Add(new InventoryItemsExMap());
         
            modelBuilder.Configurations.Add(new EntryDataDetailsExMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentEntryDataMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentSetEntryDataMap());
         
            modelBuilder.Configurations.Add(new PackageTypesMap());
         
            modelBuilder.Configurations.Add(new SuppliersMap());
         
            modelBuilder.Configurations.Add(new FileTypesMap());
         
            modelBuilder.Configurations.Add(new InventoryItems_NonStockMap());
         
            modelBuilder.Configurations.Add(new InventoryItemsMap());
         
            modelBuilder.Configurations.Add(new EntryDataExTotalsMap());
         
            modelBuilder.Configurations.Add(new EntryDataExMap());
         
            modelBuilder.Configurations.Add(new EDDocumentTypesMap());
         
            modelBuilder.Configurations.Add(new InventorySourcesMap());
         
            modelBuilder.Configurations.Add(new InventoryItemSourceMap());
         
            modelBuilder.Configurations.Add(new EntryDataFilesMap());
         
            modelBuilder.Configurations.Add(new WarehouseInfoMap());
         
            modelBuilder.Configurations.Add(new ShimentBLChargesMap());
         
            modelBuilder.Configurations.Add(new ShipmentBLMap());
         
            modelBuilder.Configurations.Add(new ShipmentBLDetailsMap());
         
            modelBuilder.Configurations.Add(new ShipmentRiderMap());
         
            modelBuilder.Configurations.Add(new ShipmentFreightMap());
         
            modelBuilder.Configurations.Add(new ShipmentRiderDetailsMap());
         
            modelBuilder.Configurations.Add(new ShipmentFreightDetailsMap());
         
            modelBuilder.Configurations.Add(new ShipmentInvoiceMap());
         
            modelBuilder.Configurations.Add(new InvoiceDetailsMap());
         
            modelBuilder.Configurations.Add(new InvoiceExtraInfoMap());
         
            modelBuilder.Configurations.Add(new ShipmentRiderBLsMap());
         
            modelBuilder.Configurations.Add(new ShipmentRiderInvoiceMap());
         
            modelBuilder.Configurations.Add(new ShipmentAttachedBLMap());
         
            modelBuilder.Configurations.Add(new ShipmentAttachedFreightMap());
         
            modelBuilder.Configurations.Add(new ShipmentAttachedInvoicesMap());
         
            modelBuilder.Configurations.Add(new ShipmentAttachedRiderMap());
         
            modelBuilder.Configurations.Add(new ShipmentAttachedManifestMap());
         
            modelBuilder.Configurations.Add(new ShipmentManifestDetailsMap());
         
            modelBuilder.Configurations.Add(new ShipmentMap());
         
            modelBuilder.Configurations.Add(new ShipmentAttachmentsMap());
         
            modelBuilder.Configurations.Add(new AttachmentsMap());
         
            modelBuilder.Configurations.Add(new ShipmentFreightBLsMap());
         
            modelBuilder.Configurations.Add(new ShipmentManifestMap());
         
            modelBuilder.Configurations.Add(new ShipmentManifestBLsMap());
         
            modelBuilder.Configurations.Add(new ShipmentBLFreightMap());
         
            modelBuilder.Configurations.Add(new ShipmentInvoicePOsMap());
         
            modelBuilder.Configurations.Add(new ShipmentInvoicePOItemQueryMatchesMap());
         
            modelBuilder.Configurations.Add(new ShipmentInvoicePOItemMISMatchesMap());
         
            modelBuilder.Configurations.Add(new ShipmentAttachedPOsMap());
         
            modelBuilder.Configurations.Add(new ShipmentInvoicePOManualMatchesMap());
         
            modelBuilder.Configurations.Add(new ShipmentInvoiceRiderDetailsMap());
         
            modelBuilder.Configurations.Add(new ShipmentInvoiceRiderManualMatchesMap());
         
            modelBuilder.Configurations.Add(new ShipmentMIS_InvoicesMap());
         
            modelBuilder.Configurations.Add(new ShipmentMIS_POsMap());
         
            modelBuilder.Configurations.Add(new ShipmentRiderExMap());
         
            modelBuilder.Configurations.Add(new InventoryItemAliasMap());
         
            modelBuilder.Configurations.Add(new ShipmentInvoicePOItemDataMap());
         
            modelBuilder.Configurations.Add(new ShipmentInvoiceDetailsItemAliasMap());
         
            modelBuilder.Configurations.Add(new InvoiceDetailsVolumeMap());
         
            modelBuilder.Configurations.Add(new VolumeUnitsMap());
         
            modelBuilder.Configurations.Add(new ShipmentRiderManifestsMap());
         
            modelBuilder.Configurations.Add(new ShipmentFreightManifestsMap());
         
            modelBuilder.Configurations.Add(new ShipmentPOsMap());
         
            modelBuilder.Configurations.Add(new ShipmentErrors_RepeatInvoicesMap());
         
            modelBuilder.Configurations.Add(new ShipmentErrors_RepeatMarksMap());
         
            modelBuilder.Configurations.Add(new xSalesDetailsMap());
         
            modelBuilder.Configurations.Add(new xSalesFilesMap());
         
            modelBuilder.Configurations.Add(new SupportingDetailMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentEntryDataLineMap());
         
            modelBuilder.Configurations.Add(new SupplierItemDescriptionMap());
         
            modelBuilder.Configurations.Add(new SupplierItemDescriptionRegExMap());
         
            modelBuilder.Configurations.Add(new AdjustmentsMap());
      
            modelBuilder.Configurations.Add(new InvoicesMap());
      
            modelBuilder.Configurations.Add(new OpeningStockMap());
      
            modelBuilder.Configurations.Add(new PurchaseOrdersMap());
      
            modelBuilder.Configurations.Add(new SalesMap());
      
            modelBuilder.Entity<Adjustments>().ToTable("EntryData_Adjustments");
      
            modelBuilder.Entity<Invoices>().ToTable("EntryData_Invoices");
      
            modelBuilder.Entity<OpeningStock>().ToTable("EntryData_OpeningStock");
      
            modelBuilder.Entity<PurchaseOrders>().ToTable("EntryData_PurchaseOrders");
      
            modelBuilder.Entity<Sales>().ToTable("EntryData_Sales");
      
			OnModelCreatingExtentsion(modelBuilder);

        }
		partial void OnModelCreatingExtentsion(DbModelBuilder modelBuilder);
    }
}

 	

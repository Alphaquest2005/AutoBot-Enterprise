// <autogenerated>
//   This file was generated by T4 code generator AllObjectContext.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

            


using System.Data.Entity;
using CoreEntities.Business.Entities;
using System.Data.Entity.Infrastructure;
using EntryDataDS.Business.Entities.Mapping;
using WaterNut.Data;
using System.Data.Entity.Core.Objects;



namespace EntryDataDS.Business.Entities
{
    [DbConfigurationType(typeof(DBConfiguration))] 
    public partial class EntryDataDSContext : DbContext
    {
        static EntryDataDSContext()
        {
            var x = typeof(System.Data.Entity.SqlServer.SqlProviderServices);
            Database.SetInitializer<EntryDataDSContext>(null);
        }

        public EntryDataDSContext()
            : base("Name=EntryDataDS")
        {
            this.Configuration.LazyLoadingEnabled = false;
            this.Configuration.ProxyCreationEnabled = false;
               // Get the ObjectContext related to this DbContext
            var objectContext = (this as IObjectContextAdapter).ObjectContext;

            // Sets the command timeout for all the commands
            objectContext.CommandTimeout = 120;

            objectContext.ObjectMaterialized += ObjectContext_OnObjectMaterialized;
        }
        
        public bool StartTracking { get; set; }

        private void ObjectContext_OnObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            if (StartTracking == true) ((dynamic)e.Entity).StartTracking();
        }

        public DbSet<EntryData> EntryData { get; set; }
     
        public DbSet<EntryDataDetails> EntryDataDetails { get; set; }
     
        public DbSet<InventoryItemsEx> InventoryItemsEx { get; set; }
     
        public DbSet<EntryDataDetailsEx> EntryDataDetailsEx { get; set; }
     
        public DbSet<AsycudaDocumentEntryData> AsycudaDocumentEntryData { get; set; }
     
        public DbSet<AsycudaDocumentSetEntryData> AsycudaDocumentSetEntryData { get; set; }
     
        public DbSet<PackageTypes> PackageTypes { get; set; }
     
        public DbSet<Suppliers> Suppliers { get; set; }
     
        public DbSet<FileTypes> FileTypes { get; set; }
     
        public DbSet<InventoryItems_NonStock> InventoryItems_NonStock { get; set; }
     
        public DbSet<InventoryItems> InventoryItems { get; set; }
     
        public DbSet<EntryDataExTotals> EntryDataExTotals { get; set; }
     
        public DbSet<EntryDataEx> EntryDataEx { get; set; }
     
        public DbSet<EDDocumentTypes> EDDocumentType { get; set; }
     
        public DbSet<InventorySources> InventorySources { get; set; }
     
        public DbSet<InventoryItemSource> InventoryItemSourceSet { get; set; }
     
        public DbSet<EntryDataFiles> EntryDataFiles { get; set; }
     
        public DbSet<WarehouseInfo> WarehouseInfo { get; set; }
     
        public DbSet<ShimentBLCharges> ShimentBLCharges { get; set; }
     
        public DbSet<ShipmentBL> ShipmentBL { get; set; }
     
        public DbSet<ShipmentBLDetails> ShipmentBLDetails { get; set; }
     
        public DbSet<ShipmentManifest> ShipmentManifest { get; set; }
     
        public DbSet<ShipmentManifestDetails> ShipmentManifestDetails { get; set; }
     
        public DbSet<ShipmentRider> ShipmentRider { get; set; }
     
        public DbSet<ShipmentFreight> ShipmentFreight { get; set; }
     
        public DbSet<ShipmentRiderDetails> ShipmentRiderDetails { get; set; }
     
        public DbSet<ShipmentFreightDetails> ShipmentFreightDetails { get; set; }
     
        public DbSet<ShipmentInvoice> ShipmentInvoice { get; set; }
     
        public DbSet<InvoiceDetails> ShipmentInvoiceDetails { get; set; }
     
        public DbSet<InvoiceExtraInfo> ShipmentInvoiceExtraInfo { get; set; }
     


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new EntryDataMap());
         
            modelBuilder.Configurations.Add(new EntryDataDetailsMap());
         
            modelBuilder.Configurations.Add(new InventoryItemsExMap());
         
            modelBuilder.Configurations.Add(new EntryDataDetailsExMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentEntryDataMap());
         
            modelBuilder.Configurations.Add(new AsycudaDocumentSetEntryDataMap());
         
            modelBuilder.Configurations.Add(new PackageTypesMap());
         
            modelBuilder.Configurations.Add(new SuppliersMap());
         
            modelBuilder.Configurations.Add(new FileTypesMap());
         
            modelBuilder.Configurations.Add(new InventoryItems_NonStockMap());
         
            modelBuilder.Configurations.Add(new InventoryItemsMap());
         
            modelBuilder.Configurations.Add(new EntryDataExTotalsMap());
         
            modelBuilder.Configurations.Add(new EntryDataExMap());
         
            modelBuilder.Configurations.Add(new EDDocumentTypesMap());
         
            modelBuilder.Configurations.Add(new InventorySourcesMap());
         
            modelBuilder.Configurations.Add(new InventoryItemSourceMap());
         
            modelBuilder.Configurations.Add(new EntryDataFilesMap());
         
            modelBuilder.Configurations.Add(new WarehouseInfoMap());
         
            modelBuilder.Configurations.Add(new ShimentBLChargesMap());
         
            modelBuilder.Configurations.Add(new ShipmentBLMap());
         
            modelBuilder.Configurations.Add(new ShipmentBLDetailsMap());
         
            modelBuilder.Configurations.Add(new ShipmentManifestMap());
         
            modelBuilder.Configurations.Add(new ShipmentManifestDetailsMap());
         
            modelBuilder.Configurations.Add(new ShipmentRiderMap());
         
            modelBuilder.Configurations.Add(new ShipmentFreightMap());
         
            modelBuilder.Configurations.Add(new ShipmentRiderDetailsMap());
         
            modelBuilder.Configurations.Add(new ShipmentFreightDetailsMap());
         
            modelBuilder.Configurations.Add(new ShipmentInvoiceMap());
         
            modelBuilder.Configurations.Add(new InvoiceDetailsMap());
         
            modelBuilder.Configurations.Add(new InvoiceExtraInfoMap());
         
            modelBuilder.Configurations.Add(new AdjustmentsMap());
      
            modelBuilder.Configurations.Add(new InvoicesMap());
      
            modelBuilder.Configurations.Add(new OpeningStockMap());
      
            modelBuilder.Configurations.Add(new PurchaseOrdersMap());
      
            modelBuilder.Configurations.Add(new SalesMap());
      
            modelBuilder.Entity<Adjustments>().ToTable("EntryData_Adjustments");
      
            modelBuilder.Entity<Invoices>().ToTable("EntryData_Invoices");
      
            modelBuilder.Entity<OpeningStock>().ToTable("EntryData_OpeningStock");
      
            modelBuilder.Entity<PurchaseOrders>().ToTable("EntryData_PurchaseOrders");
      
            modelBuilder.Entity<Sales>().ToTable("EntryData_Sales");
      
			OnModelCreatingExtentsion(modelBuilder);

        }
		partial void OnModelCreatingExtentsion(DbModelBuilder modelBuilder);
    }
}

 	

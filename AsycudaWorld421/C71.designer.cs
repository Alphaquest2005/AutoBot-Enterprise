// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.1.29995 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>Asycuda421</NameSpace><Collection>ObservableCollection</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>True</OrderXMLAttrib><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Asycuda421
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_form")]
    public partial class Value_declaration_form : System.ComponentModel.INotifyPropertyChanged
    {

        private Value_declaration_formIdentification_segment identification_segmentField;

        private ObservableCollection<Value_declaration_formItem> itemField;

        private uint idField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_form()
        {
            this.itemField = new ObservableCollection<Value_declaration_formItem>();
            this.identification_segmentField = new Value_declaration_formIdentification_segment();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formIdentification_segment Identification_segment
        {
            get
            {
                return this.identification_segmentField;
            }
            set
            {
                if ((this.identification_segmentField != null))
                {
                    if ((identification_segmentField.Equals(value) != true))
                    {
                        this.identification_segmentField = value;
                        this.OnPropertyChanged("Identification_segment");
                    }
                }
                else
                {
                    this.identification_segmentField = value;
                    this.OnPropertyChanged("Identification_segment");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Item", Order = 1)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<Value_declaration_formItem> Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                if ((this.itemField != null))
                {
                    if ((itemField.Equals(value) != true))
                    {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else
                {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint id
        {
            get
            {
                return this.idField;
            }
            set
            {
                if ((this.idField != null))
                {
                    if ((idField.Equals(value) != true))
                    {
                        this.idField = value;
                        this.OnPropertyChanged("id");
                    }
                }
                else
                {
                    this.idField = value;
                    this.OnPropertyChanged("id");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_form));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_form object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_form object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_form object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_form obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_form);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_form obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_form Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_form)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_form object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_form object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_form object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_form obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_form);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_form obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_form obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_form LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_form LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_form object
        /// </summary>
        public virtual Value_declaration_form Clone()
        {
            return ((Value_declaration_form)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formIdentification_segment")]
    public partial class Value_declaration_formIdentification_segment : System.ComponentModel.INotifyPropertyChanged
    {

        private Value_declaration_formIdentification_segmentSeller_segment seller_segmentField;

        private Value_declaration_formIdentification_segmentBuyer_segment buyer_segmentField;

        private Value_declaration_formIdentification_segmentDeclarant_segment declarant_segmentField;

        private Value_declaration_formIdentification_segmentContract_Number contract_NumberField;

        private object contract_DateField;

        private Value_declaration_formIdentification_segmentCustoms_Decision_Number customs_Decision_NumberField;

        private object customs_Decision_DateField;

        private bool yes_7AField;

        private bool no_7AField;

        private bool yes_7BField;

        private bool no_7BField;

        private bool yes_7CField;

        private bool no_7CField;

        private Value_declaration_formIdentification_segmentBox7_Details box7_DetailsField;

        private bool yes_8AField;

        private bool no_8AField;

        private bool yes_8BField;

        private bool no_8BField;

        private Value_declaration_formIdentification_segmentBox8_Details box8_DetailsField;

        private bool yes_9AField;

        private bool no_9AField;

        private bool yes_9BField;

        private bool no_9BField;

        private Value_declaration_formIdentification_segmentBox9_Details box9_DetailsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formIdentification_segment()
        {
            this.box9_DetailsField = new Value_declaration_formIdentification_segmentBox9_Details();
            this.box8_DetailsField = new Value_declaration_formIdentification_segmentBox8_Details();
            this.box7_DetailsField = new Value_declaration_formIdentification_segmentBox7_Details();
            this.customs_Decision_NumberField = new Value_declaration_formIdentification_segmentCustoms_Decision_Number();
            this.contract_NumberField = new Value_declaration_formIdentification_segmentContract_Number();
            this.declarant_segmentField = new Value_declaration_formIdentification_segmentDeclarant_segment();
            this.buyer_segmentField = new Value_declaration_formIdentification_segmentBuyer_segment();
            this.seller_segmentField = new Value_declaration_formIdentification_segmentSeller_segment();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formIdentification_segmentSeller_segment Seller_segment
        {
            get
            {
                return this.seller_segmentField;
            }
            set
            {
                if ((this.seller_segmentField != null))
                {
                    if ((seller_segmentField.Equals(value) != true))
                    {
                        this.seller_segmentField = value;
                        this.OnPropertyChanged("Seller_segment");
                    }
                }
                else
                {
                    this.seller_segmentField = value;
                    this.OnPropertyChanged("Seller_segment");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formIdentification_segmentBuyer_segment Buyer_segment
        {
            get
            {
                return this.buyer_segmentField;
            }
            set
            {
                if ((this.buyer_segmentField != null))
                {
                    if ((buyer_segmentField.Equals(value) != true))
                    {
                        this.buyer_segmentField = value;
                        this.OnPropertyChanged("Buyer_segment");
                    }
                }
                else
                {
                    this.buyer_segmentField = value;
                    this.OnPropertyChanged("Buyer_segment");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formIdentification_segmentDeclarant_segment Declarant_segment
        {
            get
            {
                return this.declarant_segmentField;
            }
            set
            {
                if ((this.declarant_segmentField != null))
                {
                    if ((declarant_segmentField.Equals(value) != true))
                    {
                        this.declarant_segmentField = value;
                        this.OnPropertyChanged("Declarant_segment");
                    }
                }
                else
                {
                    this.declarant_segmentField = value;
                    this.OnPropertyChanged("Declarant_segment");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formIdentification_segmentContract_Number Contract_Number
        {
            get
            {
                return this.contract_NumberField;
            }
            set
            {
                if ((this.contract_NumberField != null))
                {
                    if ((contract_NumberField.Equals(value) != true))
                    {
                        this.contract_NumberField = value;
                        this.OnPropertyChanged("Contract_Number");
                    }
                }
                else
                {
                    this.contract_NumberField = value;
                    this.OnPropertyChanged("Contract_Number");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Contract_Date
        {
            get
            {
                return this.contract_DateField;
            }
            set
            {
                if ((this.contract_DateField != null))
                {
                    if ((contract_DateField.Equals(value) != true))
                    {
                        this.contract_DateField = value;
                        this.OnPropertyChanged("Contract_Date");
                    }
                }
                else
                {
                    this.contract_DateField = value;
                    this.OnPropertyChanged("Contract_Date");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formIdentification_segmentCustoms_Decision_Number Customs_Decision_Number
        {
            get
            {
                return this.customs_Decision_NumberField;
            }
            set
            {
                if ((this.customs_Decision_NumberField != null))
                {
                    if ((customs_Decision_NumberField.Equals(value) != true))
                    {
                        this.customs_Decision_NumberField = value;
                        this.OnPropertyChanged("Customs_Decision_Number");
                    }
                }
                else
                {
                    this.customs_Decision_NumberField = value;
                    this.OnPropertyChanged("Customs_Decision_Number");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Customs_Decision_Date
        {
            get
            {
                return this.customs_Decision_DateField;
            }
            set
            {
                if ((this.customs_Decision_DateField != null))
                {
                    if ((customs_Decision_DateField.Equals(value) != true))
                    {
                        this.customs_Decision_DateField = value;
                        this.OnPropertyChanged("Customs_Decision_Date");
                    }
                }
                else
                {
                    this.customs_Decision_DateField = value;
                    this.OnPropertyChanged("Customs_Decision_Date");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Yes_7A
        {
            get
            {
                return this.yes_7AField;
            }
            set
            {
                if ((yes_7AField.Equals(value) != true))
                {
                    this.yes_7AField = value;
                    this.OnPropertyChanged("Yes_7A");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool No_7A
        {
            get
            {
                return this.no_7AField;
            }
            set
            {
                if ((no_7AField.Equals(value) != true))
                {
                    this.no_7AField = value;
                    this.OnPropertyChanged("No_7A");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Yes_7B
        {
            get
            {
                return this.yes_7BField;
            }
            set
            {
                if ((yes_7BField.Equals(value) != true))
                {
                    this.yes_7BField = value;
                    this.OnPropertyChanged("Yes_7B");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool No_7B
        {
            get
            {
                return this.no_7BField;
            }
            set
            {
                if ((no_7BField.Equals(value) != true))
                {
                    this.no_7BField = value;
                    this.OnPropertyChanged("No_7B");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Yes_7C
        {
            get
            {
                return this.yes_7CField;
            }
            set
            {
                if ((yes_7CField.Equals(value) != true))
                {
                    this.yes_7CField = value;
                    this.OnPropertyChanged("Yes_7C");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool No_7C
        {
            get
            {
                return this.no_7CField;
            }
            set
            {
                if ((no_7CField.Equals(value) != true))
                {
                    this.no_7CField = value;
                    this.OnPropertyChanged("No_7C");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formIdentification_segmentBox7_Details Box7_Details
        {
            get
            {
                return this.box7_DetailsField;
            }
            set
            {
                if ((this.box7_DetailsField != null))
                {
                    if ((box7_DetailsField.Equals(value) != true))
                    {
                        this.box7_DetailsField = value;
                        this.OnPropertyChanged("Box7_Details");
                    }
                }
                else
                {
                    this.box7_DetailsField = value;
                    this.OnPropertyChanged("Box7_Details");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Yes_8A
        {
            get
            {
                return this.yes_8AField;
            }
            set
            {
                if ((yes_8AField.Equals(value) != true))
                {
                    this.yes_8AField = value;
                    this.OnPropertyChanged("Yes_8A");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool No_8A
        {
            get
            {
                return this.no_8AField;
            }
            set
            {
                if ((no_8AField.Equals(value) != true))
                {
                    this.no_8AField = value;
                    this.OnPropertyChanged("No_8A");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Yes_8B
        {
            get
            {
                return this.yes_8BField;
            }
            set
            {
                if ((yes_8BField.Equals(value) != true))
                {
                    this.yes_8BField = value;
                    this.OnPropertyChanged("Yes_8B");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 17)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool No_8B
        {
            get
            {
                return this.no_8BField;
            }
            set
            {
                if ((no_8BField.Equals(value) != true))
                {
                    this.no_8BField = value;
                    this.OnPropertyChanged("No_8B");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formIdentification_segmentBox8_Details Box8_Details
        {
            get
            {
                return this.box8_DetailsField;
            }
            set
            {
                if ((this.box8_DetailsField != null))
                {
                    if ((box8_DetailsField.Equals(value) != true))
                    {
                        this.box8_DetailsField = value;
                        this.OnPropertyChanged("Box8_Details");
                    }
                }
                else
                {
                    this.box8_DetailsField = value;
                    this.OnPropertyChanged("Box8_Details");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 19)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Yes_9A
        {
            get
            {
                return this.yes_9AField;
            }
            set
            {
                if ((yes_9AField.Equals(value) != true))
                {
                    this.yes_9AField = value;
                    this.OnPropertyChanged("Yes_9A");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 20)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool No_9A
        {
            get
            {
                return this.no_9AField;
            }
            set
            {
                if ((no_9AField.Equals(value) != true))
                {
                    this.no_9AField = value;
                    this.OnPropertyChanged("No_9A");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 21)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Yes_9B
        {
            get
            {
                return this.yes_9BField;
            }
            set
            {
                if ((yes_9BField.Equals(value) != true))
                {
                    this.yes_9BField = value;
                    this.OnPropertyChanged("Yes_9B");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 22)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool No_9B
        {
            get
            {
                return this.no_9BField;
            }
            set
            {
                if ((no_9BField.Equals(value) != true))
                {
                    this.no_9BField = value;
                    this.OnPropertyChanged("No_9B");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 23)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formIdentification_segmentBox9_Details Box9_Details
        {
            get
            {
                return this.box9_DetailsField;
            }
            set
            {
                if ((this.box9_DetailsField != null))
                {
                    if ((box9_DetailsField.Equals(value) != true))
                    {
                        this.box9_DetailsField = value;
                        this.OnPropertyChanged("Box9_Details");
                    }
                }
                else
                {
                    this.box9_DetailsField = value;
                    this.OnPropertyChanged("Box9_Details");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formIdentification_segment));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segment object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formIdentification_segment object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segment);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segment obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segment Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formIdentification_segment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formIdentification_segment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formIdentification_segment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segment);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segment obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segment LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formIdentification_segment LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formIdentification_segment object
        /// </summary>
        public virtual Value_declaration_formIdentification_segment Clone()
        {
            return ((Value_declaration_formIdentification_segment)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formIdentification_segmentSeller_segment")]
    public partial class Value_declaration_formIdentification_segmentSeller_segment : System.ComponentModel.INotifyPropertyChanged
    {

        private string nameField;

        private string addressField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.addressField;
            }
            set
            {
                if ((this.addressField != null))
                {
                    if ((addressField.Equals(value) != true))
                    {
                        this.addressField = value;
                        this.OnPropertyChanged("Address");
                    }
                }
                else
                {
                    this.addressField = value;
                    this.OnPropertyChanged("Address");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formIdentification_segmentSeller_segment));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentSeller_segment object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formIdentification_segmentSeller_segment object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentSeller_segment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentSeller_segment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentSeller_segment);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentSeller_segment obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentSeller_segment Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formIdentification_segmentSeller_segment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentSeller_segment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formIdentification_segmentSeller_segment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentSeller_segment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formIdentification_segmentSeller_segment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentSeller_segment);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentSeller_segment obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentSeller_segment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentSeller_segment LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formIdentification_segmentSeller_segment LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formIdentification_segmentSeller_segment object
        /// </summary>
        public virtual Value_declaration_formIdentification_segmentSeller_segment Clone()
        {
            return ((Value_declaration_formIdentification_segmentSeller_segment)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formIdentification_segmentBuyer_segment")]
    public partial class Value_declaration_formIdentification_segmentBuyer_segment : System.ComponentModel.INotifyPropertyChanged
    {

        private ulong codeField;

        private string nameField;

        private string addressField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Code
        {
            get
            {
                return this.codeField;
            }
            set
            {
                if ((this.codeField != null))
                {
                    if ((codeField.Equals(value) != true))
                    {
                        this.codeField = value;
                        this.OnPropertyChanged("Code");
                    }
                }
                else
                {
                    this.codeField = value;
                    this.OnPropertyChanged("Code");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.addressField;
            }
            set
            {
                if ((this.addressField != null))
                {
                    if ((addressField.Equals(value) != true))
                    {
                        this.addressField = value;
                        this.OnPropertyChanged("Address");
                    }
                }
                else
                {
                    this.addressField = value;
                    this.OnPropertyChanged("Address");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formIdentification_segmentBuyer_segment));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentBuyer_segment object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formIdentification_segmentBuyer_segment object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentBuyer_segment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentBuyer_segment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentBuyer_segment);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentBuyer_segment obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentBuyer_segment Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formIdentification_segmentBuyer_segment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentBuyer_segment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formIdentification_segmentBuyer_segment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentBuyer_segment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formIdentification_segmentBuyer_segment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentBuyer_segment);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentBuyer_segment obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentBuyer_segment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentBuyer_segment LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formIdentification_segmentBuyer_segment LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formIdentification_segmentBuyer_segment object
        /// </summary>
        public virtual Value_declaration_formIdentification_segmentBuyer_segment Clone()
        {
            return ((Value_declaration_formIdentification_segmentBuyer_segment)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formIdentification_segmentDeclarant_segment")]
    public partial class Value_declaration_formIdentification_segmentDeclarant_segment : System.ComponentModel.INotifyPropertyChanged
    {

        private ulong codeField;

        private string nameField;

        private string addressField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Code
        {
            get
            {
                return this.codeField;
            }
            set
            {
                if ((this.codeField != null))
                {
                    if ((codeField.Equals(value) != true))
                    {
                        this.codeField = value;
                        this.OnPropertyChanged("Code");
                    }
                }
                else
                {
                    this.codeField = value;
                    this.OnPropertyChanged("Code");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.addressField;
            }
            set
            {
                if ((this.addressField != null))
                {
                    if ((addressField.Equals(value) != true))
                    {
                        this.addressField = value;
                        this.OnPropertyChanged("Address");
                    }
                }
                else
                {
                    this.addressField = value;
                    this.OnPropertyChanged("Address");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formIdentification_segmentDeclarant_segment));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentDeclarant_segment object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formIdentification_segmentDeclarant_segment object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentDeclarant_segment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentDeclarant_segment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentDeclarant_segment);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentDeclarant_segment obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentDeclarant_segment Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formIdentification_segmentDeclarant_segment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentDeclarant_segment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formIdentification_segmentDeclarant_segment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentDeclarant_segment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formIdentification_segmentDeclarant_segment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentDeclarant_segment);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentDeclarant_segment obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentDeclarant_segment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentDeclarant_segment LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formIdentification_segmentDeclarant_segment LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formIdentification_segmentDeclarant_segment object
        /// </summary>
        public virtual Value_declaration_formIdentification_segmentDeclarant_segment Clone()
        {
            return ((Value_declaration_formIdentification_segmentDeclarant_segment)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formIdentification_segmentContract_Number")]
    public partial class Value_declaration_formIdentification_segmentContract_Number : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formIdentification_segmentContract_Number()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formIdentification_segmentContract_Number));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentContract_Number object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formIdentification_segmentContract_Number object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentContract_Number object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentContract_Number obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentContract_Number);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentContract_Number obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentContract_Number Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formIdentification_segmentContract_Number)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentContract_Number object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formIdentification_segmentContract_Number object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentContract_Number object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formIdentification_segmentContract_Number obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentContract_Number);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentContract_Number obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentContract_Number obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentContract_Number LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formIdentification_segmentContract_Number LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formIdentification_segmentContract_Number object
        /// </summary>
        public virtual Value_declaration_formIdentification_segmentContract_Number Clone()
        {
            return ((Value_declaration_formIdentification_segmentContract_Number)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formIdentification_segmentCustoms_Decision_Number")]
    public partial class Value_declaration_formIdentification_segmentCustoms_Decision_Number : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formIdentification_segmentCustoms_Decision_Number()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formIdentification_segmentCustoms_Decision_Number));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentCustoms_Decision_Number object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formIdentification_segmentCustoms_Decision_Number object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentCustoms_Decision_Number object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentCustoms_Decision_Number obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentCustoms_Decision_Number);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentCustoms_Decision_Number obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentCustoms_Decision_Number Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formIdentification_segmentCustoms_Decision_Number)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentCustoms_Decision_Number object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formIdentification_segmentCustoms_Decision_Number object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentCustoms_Decision_Number object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formIdentification_segmentCustoms_Decision_Number obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentCustoms_Decision_Number);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentCustoms_Decision_Number obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentCustoms_Decision_Number obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentCustoms_Decision_Number LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formIdentification_segmentCustoms_Decision_Number LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formIdentification_segmentCustoms_Decision_Number object
        /// </summary>
        public virtual Value_declaration_formIdentification_segmentCustoms_Decision_Number Clone()
        {
            return ((Value_declaration_formIdentification_segmentCustoms_Decision_Number)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formIdentification_segmentBox7_Details")]
    public partial class Value_declaration_formIdentification_segmentBox7_Details : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formIdentification_segmentBox7_Details()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formIdentification_segmentBox7_Details));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentBox7_Details object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formIdentification_segmentBox7_Details object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentBox7_Details object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentBox7_Details obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentBox7_Details);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentBox7_Details obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentBox7_Details Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formIdentification_segmentBox7_Details)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentBox7_Details object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formIdentification_segmentBox7_Details object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentBox7_Details object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formIdentification_segmentBox7_Details obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentBox7_Details);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentBox7_Details obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentBox7_Details obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentBox7_Details LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formIdentification_segmentBox7_Details LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formIdentification_segmentBox7_Details object
        /// </summary>
        public virtual Value_declaration_formIdentification_segmentBox7_Details Clone()
        {
            return ((Value_declaration_formIdentification_segmentBox7_Details)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formIdentification_segmentBox8_Details")]
    public partial class Value_declaration_formIdentification_segmentBox8_Details : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formIdentification_segmentBox8_Details()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formIdentification_segmentBox8_Details));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentBox8_Details object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formIdentification_segmentBox8_Details object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentBox8_Details object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentBox8_Details obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentBox8_Details);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentBox8_Details obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentBox8_Details Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formIdentification_segmentBox8_Details)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentBox8_Details object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formIdentification_segmentBox8_Details object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentBox8_Details object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formIdentification_segmentBox8_Details obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentBox8_Details);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentBox8_Details obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentBox8_Details obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentBox8_Details LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formIdentification_segmentBox8_Details LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formIdentification_segmentBox8_Details object
        /// </summary>
        public virtual Value_declaration_formIdentification_segmentBox8_Details Clone()
        {
            return ((Value_declaration_formIdentification_segmentBox8_Details)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formIdentification_segmentBox9_Details")]
    public partial class Value_declaration_formIdentification_segmentBox9_Details : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formIdentification_segmentBox9_Details()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formIdentification_segmentBox9_Details));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentBox9_Details object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formIdentification_segmentBox9_Details object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentBox9_Details object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentBox9_Details obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentBox9_Details);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formIdentification_segmentBox9_Details obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentBox9_Details Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formIdentification_segmentBox9_Details)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formIdentification_segmentBox9_Details object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formIdentification_segmentBox9_Details object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formIdentification_segmentBox9_Details object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formIdentification_segmentBox9_Details obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formIdentification_segmentBox9_Details);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentBox9_Details obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formIdentification_segmentBox9_Details obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formIdentification_segmentBox9_Details LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formIdentification_segmentBox9_Details LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formIdentification_segmentBox9_Details object
        /// </summary>
        public virtual Value_declaration_formIdentification_segmentBox9_Details Clone()
        {
            return ((Value_declaration_formIdentification_segmentBox9_Details)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItem")]
    public partial class Value_declaration_formItem : System.ComponentModel.INotifyPropertyChanged
    {

        private string terms_of_Delivery_CodeField;

        private string terms_of_Delivery_DescField;

        private uint invoice_NumberField;

        private string invoice_DateField;

        private Value_declaration_formItemCurrency_code_ind currency_code_indField;

        private Value_declaration_formItemCurrency_Name_ind currency_Name_indField;

        private byte currency_Rate_indField;

        private ushort net_PriceField;

        private string currency_code_netField;

        private string currency_Name_netField;

        private byte currency_Rate_netField;

        private byte indirect_PaymentsField;

        private Value_declaration_formItemCurrency_code_com currency_code_comField;

        private Value_declaration_formItemCurrency_Name_com currency_Name_comField;

        private byte currency_Rate_comField;

        private byte commissionsField;

        private Value_declaration_formItemCurrency_code_brg currency_code_brgField;

        private Value_declaration_formItemCurrency_Name_brg currency_Name_brgField;

        private byte currency_Rate_brgField;

        private byte brokerageField;

        private Value_declaration_formItemCurrency_code_cap currency_code_capField;

        private Value_declaration_formItemCurrency_Name_cap currency_Name_capField;

        private byte currency_Rate_capField;

        private byte containers_PackagingField;

        private Value_declaration_formItemCurrency_code_mcp currency_code_mcpField;

        private Value_declaration_formItemCurrency_Name_mcp currency_Name_mcpField;

        private byte currency_Rate_mcpField;

        private byte material_ComponentsField;

        private Value_declaration_formItemCurrency_code_tls currency_code_tlsField;

        private Value_declaration_formItemCurrency_Name_tls currency_Name_tlsField;

        private byte currency_Rate_tlsField;

        private byte tool_DiesField;

        private Value_declaration_formItemCurrency_code_mcg currency_code_mcgField;

        private Value_declaration_formItemCurrency_Name_mcg currency_Name_mcgField;

        private byte currency_Rate_mcgField;

        private byte materials_ConsumedField;

        private Value_declaration_formItemCurrency_code_eng currency_code_engField;

        private Value_declaration_formItemCurrency_Name_eng currency_Name_engField;

        private byte currency_Rate_engField;

        private byte engineering_DevelopmentField;

        private Value_declaration_formItemCurrency_code_roy currency_code_royField;

        private Value_declaration_formItemCurrency_Name_roy currency_Name_royField;

        private byte currency_Rate_royField;

        private byte royalties_licence_feesField;

        private Value_declaration_formItemCurrency_code_pro currency_code_proField;

        private Value_declaration_formItemCurrency_Name_pro currency_Name_proField;

        private byte currency_Rate_proField;

        private byte proceedsField;

        private string currency_code_tptField;

        private string currency_Name_tptField;

        private byte currency_Rate_tptField;

        private byte transportField;

        private Value_declaration_formItemCurrency_code_lhc currency_code_lhcField;

        private Value_declaration_formItemCurrency_Name_lhc currency_Name_lhcField;

        private byte currency_Rate_lhcField;

        private byte loading_handlingField;

        private Value_declaration_formItemCurrency_code_ins currency_code_insField;

        private Value_declaration_formItemCurrency_Name_ins currency_Name_insField;

        private byte currency_Rate_insField;

        private byte insuranceField;

        private Value_declaration_formItemCurrency_code_aim currency_code_aimField;

        private Value_declaration_formItemCurrency_Name_aim currency_Name_aimField;

        private byte currency_Rate_aimField;

        private byte transport_after_importField;

        private Value_declaration_formItemCurrency_code_cfc currency_code_cfcField;

        private Value_declaration_formItemCurrency_Name_cfc currency_Name_cfcField;

        private byte currency_Rate_cfcField;

        private byte constructionField;

        private Value_declaration_formItemCurrency_code_oth currency_code_othField;

        private Value_declaration_formItemCurrency_Name_oth currency_Name_othField;

        private byte currency_Rate_othField;

        private byte other_chargesField;

        private Value_declaration_formItemOther_specify other_specifyField;

        private Value_declaration_formItemCurrency_code_txs currency_code_txsField;

        private Value_declaration_formItemCurrency_Name_txs currency_Name_txsField;

        private byte currency_Rate_txsField;

        private byte customs_duties_taxesField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItem()
        {
            this.currency_Name_txsField = new Value_declaration_formItemCurrency_Name_txs();
            this.currency_code_txsField = new Value_declaration_formItemCurrency_code_txs();
            this.other_specifyField = new Value_declaration_formItemOther_specify();
            this.currency_Name_othField = new Value_declaration_formItemCurrency_Name_oth();
            this.currency_code_othField = new Value_declaration_formItemCurrency_code_oth();
            this.currency_Name_cfcField = new Value_declaration_formItemCurrency_Name_cfc();
            this.currency_code_cfcField = new Value_declaration_formItemCurrency_code_cfc();
            this.currency_Name_aimField = new Value_declaration_formItemCurrency_Name_aim();
            this.currency_code_aimField = new Value_declaration_formItemCurrency_code_aim();
            this.currency_Name_insField = new Value_declaration_formItemCurrency_Name_ins();
            this.currency_code_insField = new Value_declaration_formItemCurrency_code_ins();
            this.currency_Name_lhcField = new Value_declaration_formItemCurrency_Name_lhc();
            this.currency_code_lhcField = new Value_declaration_formItemCurrency_code_lhc();
            this.currency_Name_proField = new Value_declaration_formItemCurrency_Name_pro();
            this.currency_code_proField = new Value_declaration_formItemCurrency_code_pro();
            this.currency_Name_royField = new Value_declaration_formItemCurrency_Name_roy();
            this.currency_code_royField = new Value_declaration_formItemCurrency_code_roy();
            this.currency_Name_engField = new Value_declaration_formItemCurrency_Name_eng();
            this.currency_code_engField = new Value_declaration_formItemCurrency_code_eng();
            this.currency_Name_mcgField = new Value_declaration_formItemCurrency_Name_mcg();
            this.currency_code_mcgField = new Value_declaration_formItemCurrency_code_mcg();
            this.currency_Name_tlsField = new Value_declaration_formItemCurrency_Name_tls();
            this.currency_code_tlsField = new Value_declaration_formItemCurrency_code_tls();
            this.currency_Name_mcpField = new Value_declaration_formItemCurrency_Name_mcp();
            this.currency_code_mcpField = new Value_declaration_formItemCurrency_code_mcp();
            this.currency_Name_capField = new Value_declaration_formItemCurrency_Name_cap();
            this.currency_code_capField = new Value_declaration_formItemCurrency_code_cap();
            this.currency_Name_brgField = new Value_declaration_formItemCurrency_Name_brg();
            this.currency_code_brgField = new Value_declaration_formItemCurrency_code_brg();
            this.currency_Name_comField = new Value_declaration_formItemCurrency_Name_com();
            this.currency_code_comField = new Value_declaration_formItemCurrency_code_com();
            this.currency_Name_indField = new Value_declaration_formItemCurrency_Name_ind();
            this.currency_code_indField = new Value_declaration_formItemCurrency_code_ind();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Terms_of_Delivery_Code
        {
            get
            {
                return this.terms_of_Delivery_CodeField;
            }
            set
            {
                if ((this.terms_of_Delivery_CodeField != null))
                {
                    if ((terms_of_Delivery_CodeField.Equals(value) != true))
                    {
                        this.terms_of_Delivery_CodeField = value;
                        this.OnPropertyChanged("Terms_of_Delivery_Code");
                    }
                }
                else
                {
                    this.terms_of_Delivery_CodeField = value;
                    this.OnPropertyChanged("Terms_of_Delivery_Code");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Terms_of_Delivery_Desc
        {
            get
            {
                return this.terms_of_Delivery_DescField;
            }
            set
            {
                if ((this.terms_of_Delivery_DescField != null))
                {
                    if ((terms_of_Delivery_DescField.Equals(value) != true))
                    {
                        this.terms_of_Delivery_DescField = value;
                        this.OnPropertyChanged("Terms_of_Delivery_Desc");
                    }
                }
                else
                {
                    this.terms_of_Delivery_DescField = value;
                    this.OnPropertyChanged("Terms_of_Delivery_Desc");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Invoice_Number
        {
            get
            {
                return this.invoice_NumberField;
            }
            set
            {
                if ((this.invoice_NumberField != null))
                {
                    if ((invoice_NumberField.Equals(value) != true))
                    {
                        this.invoice_NumberField = value;
                        this.OnPropertyChanged("Invoice_Number");
                    }
                }
                else
                {
                    this.invoice_NumberField = value;
                    this.OnPropertyChanged("Invoice_Number");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Invoice_Date
        {
            get
            {
                return this.invoice_DateField;
            }
            set
            {
                if ((this.invoice_DateField != null))
                {
                    if ((invoice_DateField.Equals(value) != true))
                    {
                        this.invoice_DateField = value;
                        this.OnPropertyChanged("Invoice_Date");
                    }
                }
                else
                {
                    this.invoice_DateField = value;
                    this.OnPropertyChanged("Invoice_Date");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_ind Currency_code_ind
        {
            get
            {
                return this.currency_code_indField;
            }
            set
            {
                if ((this.currency_code_indField != null))
                {
                    if ((currency_code_indField.Equals(value) != true))
                    {
                        this.currency_code_indField = value;
                        this.OnPropertyChanged("Currency_code_ind");
                    }
                }
                else
                {
                    this.currency_code_indField = value;
                    this.OnPropertyChanged("Currency_code_ind");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_ind Currency_Name_ind
        {
            get
            {
                return this.currency_Name_indField;
            }
            set
            {
                if ((this.currency_Name_indField != null))
                {
                    if ((currency_Name_indField.Equals(value) != true))
                    {
                        this.currency_Name_indField = value;
                        this.OnPropertyChanged("Currency_Name_ind");
                    }
                }
                else
                {
                    this.currency_Name_indField = value;
                    this.OnPropertyChanged("Currency_Name_ind");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_ind
        {
            get
            {
                return this.currency_Rate_indField;
            }
            set
            {
                if ((this.currency_Rate_indField != null))
                {
                    if ((currency_Rate_indField.Equals(value) != true))
                    {
                        this.currency_Rate_indField = value;
                        this.OnPropertyChanged("Currency_Rate_ind");
                    }
                }
                else
                {
                    this.currency_Rate_indField = value;
                    this.OnPropertyChanged("Currency_Rate_ind");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort Net_Price
        {
            get
            {
                return this.net_PriceField;
            }
            set
            {
                if ((this.net_PriceField != null))
                {
                    if ((net_PriceField.Equals(value) != true))
                    {
                        this.net_PriceField = value;
                        this.OnPropertyChanged("Net_Price");
                    }
                }
                else
                {
                    this.net_PriceField = value;
                    this.OnPropertyChanged("Net_Price");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency_code_net
        {
            get
            {
                return this.currency_code_netField;
            }
            set
            {
                if ((this.currency_code_netField != null))
                {
                    if ((currency_code_netField.Equals(value) != true))
                    {
                        this.currency_code_netField = value;
                        this.OnPropertyChanged("Currency_code_net");
                    }
                }
                else
                {
                    this.currency_code_netField = value;
                    this.OnPropertyChanged("Currency_code_net");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency_Name_net
        {
            get
            {
                return this.currency_Name_netField;
            }
            set
            {
                if ((this.currency_Name_netField != null))
                {
                    if ((currency_Name_netField.Equals(value) != true))
                    {
                        this.currency_Name_netField = value;
                        this.OnPropertyChanged("Currency_Name_net");
                    }
                }
                else
                {
                    this.currency_Name_netField = value;
                    this.OnPropertyChanged("Currency_Name_net");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_net
        {
            get
            {
                return this.currency_Rate_netField;
            }
            set
            {
                if ((this.currency_Rate_netField != null))
                {
                    if ((currency_Rate_netField.Equals(value) != true))
                    {
                        this.currency_Rate_netField = value;
                        this.OnPropertyChanged("Currency_Rate_net");
                    }
                }
                else
                {
                    this.currency_Rate_netField = value;
                    this.OnPropertyChanged("Currency_Rate_net");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Indirect_Payments
        {
            get
            {
                return this.indirect_PaymentsField;
            }
            set
            {
                if ((this.indirect_PaymentsField != null))
                {
                    if ((indirect_PaymentsField.Equals(value) != true))
                    {
                        this.indirect_PaymentsField = value;
                        this.OnPropertyChanged("Indirect_Payments");
                    }
                }
                else
                {
                    this.indirect_PaymentsField = value;
                    this.OnPropertyChanged("Indirect_Payments");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_com Currency_code_com
        {
            get
            {
                return this.currency_code_comField;
            }
            set
            {
                if ((this.currency_code_comField != null))
                {
                    if ((currency_code_comField.Equals(value) != true))
                    {
                        this.currency_code_comField = value;
                        this.OnPropertyChanged("Currency_code_com");
                    }
                }
                else
                {
                    this.currency_code_comField = value;
                    this.OnPropertyChanged("Currency_code_com");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_com Currency_Name_com
        {
            get
            {
                return this.currency_Name_comField;
            }
            set
            {
                if ((this.currency_Name_comField != null))
                {
                    if ((currency_Name_comField.Equals(value) != true))
                    {
                        this.currency_Name_comField = value;
                        this.OnPropertyChanged("Currency_Name_com");
                    }
                }
                else
                {
                    this.currency_Name_comField = value;
                    this.OnPropertyChanged("Currency_Name_com");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_com
        {
            get
            {
                return this.currency_Rate_comField;
            }
            set
            {
                if ((this.currency_Rate_comField != null))
                {
                    if ((currency_Rate_comField.Equals(value) != true))
                    {
                        this.currency_Rate_comField = value;
                        this.OnPropertyChanged("Currency_Rate_com");
                    }
                }
                else
                {
                    this.currency_Rate_comField = value;
                    this.OnPropertyChanged("Currency_Rate_com");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Commissions
        {
            get
            {
                return this.commissionsField;
            }
            set
            {
                if ((this.commissionsField != null))
                {
                    if ((commissionsField.Equals(value) != true))
                    {
                        this.commissionsField = value;
                        this.OnPropertyChanged("Commissions");
                    }
                }
                else
                {
                    this.commissionsField = value;
                    this.OnPropertyChanged("Commissions");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_brg Currency_code_brg
        {
            get
            {
                return this.currency_code_brgField;
            }
            set
            {
                if ((this.currency_code_brgField != null))
                {
                    if ((currency_code_brgField.Equals(value) != true))
                    {
                        this.currency_code_brgField = value;
                        this.OnPropertyChanged("Currency_code_brg");
                    }
                }
                else
                {
                    this.currency_code_brgField = value;
                    this.OnPropertyChanged("Currency_code_brg");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 17)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_brg Currency_Name_brg
        {
            get
            {
                return this.currency_Name_brgField;
            }
            set
            {
                if ((this.currency_Name_brgField != null))
                {
                    if ((currency_Name_brgField.Equals(value) != true))
                    {
                        this.currency_Name_brgField = value;
                        this.OnPropertyChanged("Currency_Name_brg");
                    }
                }
                else
                {
                    this.currency_Name_brgField = value;
                    this.OnPropertyChanged("Currency_Name_brg");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_brg
        {
            get
            {
                return this.currency_Rate_brgField;
            }
            set
            {
                if ((this.currency_Rate_brgField != null))
                {
                    if ((currency_Rate_brgField.Equals(value) != true))
                    {
                        this.currency_Rate_brgField = value;
                        this.OnPropertyChanged("Currency_Rate_brg");
                    }
                }
                else
                {
                    this.currency_Rate_brgField = value;
                    this.OnPropertyChanged("Currency_Rate_brg");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 19)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Brokerage
        {
            get
            {
                return this.brokerageField;
            }
            set
            {
                if ((this.brokerageField != null))
                {
                    if ((brokerageField.Equals(value) != true))
                    {
                        this.brokerageField = value;
                        this.OnPropertyChanged("Brokerage");
                    }
                }
                else
                {
                    this.brokerageField = value;
                    this.OnPropertyChanged("Brokerage");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 20)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_cap Currency_code_cap
        {
            get
            {
                return this.currency_code_capField;
            }
            set
            {
                if ((this.currency_code_capField != null))
                {
                    if ((currency_code_capField.Equals(value) != true))
                    {
                        this.currency_code_capField = value;
                        this.OnPropertyChanged("Currency_code_cap");
                    }
                }
                else
                {
                    this.currency_code_capField = value;
                    this.OnPropertyChanged("Currency_code_cap");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 21)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_cap Currency_Name_cap
        {
            get
            {
                return this.currency_Name_capField;
            }
            set
            {
                if ((this.currency_Name_capField != null))
                {
                    if ((currency_Name_capField.Equals(value) != true))
                    {
                        this.currency_Name_capField = value;
                        this.OnPropertyChanged("Currency_Name_cap");
                    }
                }
                else
                {
                    this.currency_Name_capField = value;
                    this.OnPropertyChanged("Currency_Name_cap");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 22)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_cap
        {
            get
            {
                return this.currency_Rate_capField;
            }
            set
            {
                if ((this.currency_Rate_capField != null))
                {
                    if ((currency_Rate_capField.Equals(value) != true))
                    {
                        this.currency_Rate_capField = value;
                        this.OnPropertyChanged("Currency_Rate_cap");
                    }
                }
                else
                {
                    this.currency_Rate_capField = value;
                    this.OnPropertyChanged("Currency_Rate_cap");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 23)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Containers_Packaging
        {
            get
            {
                return this.containers_PackagingField;
            }
            set
            {
                if ((this.containers_PackagingField != null))
                {
                    if ((containers_PackagingField.Equals(value) != true))
                    {
                        this.containers_PackagingField = value;
                        this.OnPropertyChanged("Containers_Packaging");
                    }
                }
                else
                {
                    this.containers_PackagingField = value;
                    this.OnPropertyChanged("Containers_Packaging");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 24)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_mcp Currency_code_mcp
        {
            get
            {
                return this.currency_code_mcpField;
            }
            set
            {
                if ((this.currency_code_mcpField != null))
                {
                    if ((currency_code_mcpField.Equals(value) != true))
                    {
                        this.currency_code_mcpField = value;
                        this.OnPropertyChanged("Currency_code_mcp");
                    }
                }
                else
                {
                    this.currency_code_mcpField = value;
                    this.OnPropertyChanged("Currency_code_mcp");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 25)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_mcp Currency_Name_mcp
        {
            get
            {
                return this.currency_Name_mcpField;
            }
            set
            {
                if ((this.currency_Name_mcpField != null))
                {
                    if ((currency_Name_mcpField.Equals(value) != true))
                    {
                        this.currency_Name_mcpField = value;
                        this.OnPropertyChanged("Currency_Name_mcp");
                    }
                }
                else
                {
                    this.currency_Name_mcpField = value;
                    this.OnPropertyChanged("Currency_Name_mcp");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 26)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_mcp
        {
            get
            {
                return this.currency_Rate_mcpField;
            }
            set
            {
                if ((this.currency_Rate_mcpField != null))
                {
                    if ((currency_Rate_mcpField.Equals(value) != true))
                    {
                        this.currency_Rate_mcpField = value;
                        this.OnPropertyChanged("Currency_Rate_mcp");
                    }
                }
                else
                {
                    this.currency_Rate_mcpField = value;
                    this.OnPropertyChanged("Currency_Rate_mcp");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 27)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Material_Components
        {
            get
            {
                return this.material_ComponentsField;
            }
            set
            {
                if ((this.material_ComponentsField != null))
                {
                    if ((material_ComponentsField.Equals(value) != true))
                    {
                        this.material_ComponentsField = value;
                        this.OnPropertyChanged("Material_Components");
                    }
                }
                else
                {
                    this.material_ComponentsField = value;
                    this.OnPropertyChanged("Material_Components");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 28)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_tls Currency_code_tls
        {
            get
            {
                return this.currency_code_tlsField;
            }
            set
            {
                if ((this.currency_code_tlsField != null))
                {
                    if ((currency_code_tlsField.Equals(value) != true))
                    {
                        this.currency_code_tlsField = value;
                        this.OnPropertyChanged("Currency_code_tls");
                    }
                }
                else
                {
                    this.currency_code_tlsField = value;
                    this.OnPropertyChanged("Currency_code_tls");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 29)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_tls Currency_Name_tls
        {
            get
            {
                return this.currency_Name_tlsField;
            }
            set
            {
                if ((this.currency_Name_tlsField != null))
                {
                    if ((currency_Name_tlsField.Equals(value) != true))
                    {
                        this.currency_Name_tlsField = value;
                        this.OnPropertyChanged("Currency_Name_tls");
                    }
                }
                else
                {
                    this.currency_Name_tlsField = value;
                    this.OnPropertyChanged("Currency_Name_tls");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 30)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_tls
        {
            get
            {
                return this.currency_Rate_tlsField;
            }
            set
            {
                if ((this.currency_Rate_tlsField != null))
                {
                    if ((currency_Rate_tlsField.Equals(value) != true))
                    {
                        this.currency_Rate_tlsField = value;
                        this.OnPropertyChanged("Currency_Rate_tls");
                    }
                }
                else
                {
                    this.currency_Rate_tlsField = value;
                    this.OnPropertyChanged("Currency_Rate_tls");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 31)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Tool_Dies
        {
            get
            {
                return this.tool_DiesField;
            }
            set
            {
                if ((this.tool_DiesField != null))
                {
                    if ((tool_DiesField.Equals(value) != true))
                    {
                        this.tool_DiesField = value;
                        this.OnPropertyChanged("Tool_Dies");
                    }
                }
                else
                {
                    this.tool_DiesField = value;
                    this.OnPropertyChanged("Tool_Dies");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 32)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_mcg Currency_code_mcg
        {
            get
            {
                return this.currency_code_mcgField;
            }
            set
            {
                if ((this.currency_code_mcgField != null))
                {
                    if ((currency_code_mcgField.Equals(value) != true))
                    {
                        this.currency_code_mcgField = value;
                        this.OnPropertyChanged("Currency_code_mcg");
                    }
                }
                else
                {
                    this.currency_code_mcgField = value;
                    this.OnPropertyChanged("Currency_code_mcg");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 33)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_mcg Currency_Name_mcg
        {
            get
            {
                return this.currency_Name_mcgField;
            }
            set
            {
                if ((this.currency_Name_mcgField != null))
                {
                    if ((currency_Name_mcgField.Equals(value) != true))
                    {
                        this.currency_Name_mcgField = value;
                        this.OnPropertyChanged("Currency_Name_mcg");
                    }
                }
                else
                {
                    this.currency_Name_mcgField = value;
                    this.OnPropertyChanged("Currency_Name_mcg");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 34)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_mcg
        {
            get
            {
                return this.currency_Rate_mcgField;
            }
            set
            {
                if ((this.currency_Rate_mcgField != null))
                {
                    if ((currency_Rate_mcgField.Equals(value) != true))
                    {
                        this.currency_Rate_mcgField = value;
                        this.OnPropertyChanged("Currency_Rate_mcg");
                    }
                }
                else
                {
                    this.currency_Rate_mcgField = value;
                    this.OnPropertyChanged("Currency_Rate_mcg");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 35)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Materials_Consumed
        {
            get
            {
                return this.materials_ConsumedField;
            }
            set
            {
                if ((this.materials_ConsumedField != null))
                {
                    if ((materials_ConsumedField.Equals(value) != true))
                    {
                        this.materials_ConsumedField = value;
                        this.OnPropertyChanged("Materials_Consumed");
                    }
                }
                else
                {
                    this.materials_ConsumedField = value;
                    this.OnPropertyChanged("Materials_Consumed");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 36)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_eng Currency_code_eng
        {
            get
            {
                return this.currency_code_engField;
            }
            set
            {
                if ((this.currency_code_engField != null))
                {
                    if ((currency_code_engField.Equals(value) != true))
                    {
                        this.currency_code_engField = value;
                        this.OnPropertyChanged("Currency_code_eng");
                    }
                }
                else
                {
                    this.currency_code_engField = value;
                    this.OnPropertyChanged("Currency_code_eng");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 37)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_eng Currency_Name_eng
        {
            get
            {
                return this.currency_Name_engField;
            }
            set
            {
                if ((this.currency_Name_engField != null))
                {
                    if ((currency_Name_engField.Equals(value) != true))
                    {
                        this.currency_Name_engField = value;
                        this.OnPropertyChanged("Currency_Name_eng");
                    }
                }
                else
                {
                    this.currency_Name_engField = value;
                    this.OnPropertyChanged("Currency_Name_eng");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 38)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_eng
        {
            get
            {
                return this.currency_Rate_engField;
            }
            set
            {
                if ((this.currency_Rate_engField != null))
                {
                    if ((currency_Rate_engField.Equals(value) != true))
                    {
                        this.currency_Rate_engField = value;
                        this.OnPropertyChanged("Currency_Rate_eng");
                    }
                }
                else
                {
                    this.currency_Rate_engField = value;
                    this.OnPropertyChanged("Currency_Rate_eng");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 39)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Engineering_Development
        {
            get
            {
                return this.engineering_DevelopmentField;
            }
            set
            {
                if ((this.engineering_DevelopmentField != null))
                {
                    if ((engineering_DevelopmentField.Equals(value) != true))
                    {
                        this.engineering_DevelopmentField = value;
                        this.OnPropertyChanged("Engineering_Development");
                    }
                }
                else
                {
                    this.engineering_DevelopmentField = value;
                    this.OnPropertyChanged("Engineering_Development");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 40)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_roy Currency_code_roy
        {
            get
            {
                return this.currency_code_royField;
            }
            set
            {
                if ((this.currency_code_royField != null))
                {
                    if ((currency_code_royField.Equals(value) != true))
                    {
                        this.currency_code_royField = value;
                        this.OnPropertyChanged("Currency_code_roy");
                    }
                }
                else
                {
                    this.currency_code_royField = value;
                    this.OnPropertyChanged("Currency_code_roy");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 41)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_roy Currency_Name_roy
        {
            get
            {
                return this.currency_Name_royField;
            }
            set
            {
                if ((this.currency_Name_royField != null))
                {
                    if ((currency_Name_royField.Equals(value) != true))
                    {
                        this.currency_Name_royField = value;
                        this.OnPropertyChanged("Currency_Name_roy");
                    }
                }
                else
                {
                    this.currency_Name_royField = value;
                    this.OnPropertyChanged("Currency_Name_roy");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 42)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_roy
        {
            get
            {
                return this.currency_Rate_royField;
            }
            set
            {
                if ((this.currency_Rate_royField != null))
                {
                    if ((currency_Rate_royField.Equals(value) != true))
                    {
                        this.currency_Rate_royField = value;
                        this.OnPropertyChanged("Currency_Rate_roy");
                    }
                }
                else
                {
                    this.currency_Rate_royField = value;
                    this.OnPropertyChanged("Currency_Rate_roy");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 43)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Royalties_licence_fees
        {
            get
            {
                return this.royalties_licence_feesField;
            }
            set
            {
                if ((this.royalties_licence_feesField != null))
                {
                    if ((royalties_licence_feesField.Equals(value) != true))
                    {
                        this.royalties_licence_feesField = value;
                        this.OnPropertyChanged("Royalties_licence_fees");
                    }
                }
                else
                {
                    this.royalties_licence_feesField = value;
                    this.OnPropertyChanged("Royalties_licence_fees");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 44)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_pro Currency_code_pro
        {
            get
            {
                return this.currency_code_proField;
            }
            set
            {
                if ((this.currency_code_proField != null))
                {
                    if ((currency_code_proField.Equals(value) != true))
                    {
                        this.currency_code_proField = value;
                        this.OnPropertyChanged("Currency_code_pro");
                    }
                }
                else
                {
                    this.currency_code_proField = value;
                    this.OnPropertyChanged("Currency_code_pro");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 45)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_pro Currency_Name_pro
        {
            get
            {
                return this.currency_Name_proField;
            }
            set
            {
                if ((this.currency_Name_proField != null))
                {
                    if ((currency_Name_proField.Equals(value) != true))
                    {
                        this.currency_Name_proField = value;
                        this.OnPropertyChanged("Currency_Name_pro");
                    }
                }
                else
                {
                    this.currency_Name_proField = value;
                    this.OnPropertyChanged("Currency_Name_pro");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 46)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_pro
        {
            get
            {
                return this.currency_Rate_proField;
            }
            set
            {
                if ((this.currency_Rate_proField != null))
                {
                    if ((currency_Rate_proField.Equals(value) != true))
                    {
                        this.currency_Rate_proField = value;
                        this.OnPropertyChanged("Currency_Rate_pro");
                    }
                }
                else
                {
                    this.currency_Rate_proField = value;
                    this.OnPropertyChanged("Currency_Rate_pro");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 47)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Proceeds
        {
            get
            {
                return this.proceedsField;
            }
            set
            {
                if ((this.proceedsField != null))
                {
                    if ((proceedsField.Equals(value) != true))
                    {
                        this.proceedsField = value;
                        this.OnPropertyChanged("Proceeds");
                    }
                }
                else
                {
                    this.proceedsField = value;
                    this.OnPropertyChanged("Proceeds");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 48)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency_code_tpt
        {
            get
            {
                return this.currency_code_tptField;
            }
            set
            {
                if ((this.currency_code_tptField != null))
                {
                    if ((currency_code_tptField.Equals(value) != true))
                    {
                        this.currency_code_tptField = value;
                        this.OnPropertyChanged("Currency_code_tpt");
                    }
                }
                else
                {
                    this.currency_code_tptField = value;
                    this.OnPropertyChanged("Currency_code_tpt");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 49)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency_Name_tpt
        {
            get
            {
                return this.currency_Name_tptField;
            }
            set
            {
                if ((this.currency_Name_tptField != null))
                {
                    if ((currency_Name_tptField.Equals(value) != true))
                    {
                        this.currency_Name_tptField = value;
                        this.OnPropertyChanged("Currency_Name_tpt");
                    }
                }
                else
                {
                    this.currency_Name_tptField = value;
                    this.OnPropertyChanged("Currency_Name_tpt");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 50)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_tpt
        {
            get
            {
                return this.currency_Rate_tptField;
            }
            set
            {
                if ((this.currency_Rate_tptField != null))
                {
                    if ((currency_Rate_tptField.Equals(value) != true))
                    {
                        this.currency_Rate_tptField = value;
                        this.OnPropertyChanged("Currency_Rate_tpt");
                    }
                }
                else
                {
                    this.currency_Rate_tptField = value;
                    this.OnPropertyChanged("Currency_Rate_tpt");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 51)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Transport
        {
            get
            {
                return this.transportField;
            }
            set
            {
                if ((this.transportField != null))
                {
                    if ((transportField.Equals(value) != true))
                    {
                        this.transportField = value;
                        this.OnPropertyChanged("Transport");
                    }
                }
                else
                {
                    this.transportField = value;
                    this.OnPropertyChanged("Transport");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 52)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_lhc Currency_code_lhc
        {
            get
            {
                return this.currency_code_lhcField;
            }
            set
            {
                if ((this.currency_code_lhcField != null))
                {
                    if ((currency_code_lhcField.Equals(value) != true))
                    {
                        this.currency_code_lhcField = value;
                        this.OnPropertyChanged("Currency_code_lhc");
                    }
                }
                else
                {
                    this.currency_code_lhcField = value;
                    this.OnPropertyChanged("Currency_code_lhc");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 53)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_lhc Currency_Name_lhc
        {
            get
            {
                return this.currency_Name_lhcField;
            }
            set
            {
                if ((this.currency_Name_lhcField != null))
                {
                    if ((currency_Name_lhcField.Equals(value) != true))
                    {
                        this.currency_Name_lhcField = value;
                        this.OnPropertyChanged("Currency_Name_lhc");
                    }
                }
                else
                {
                    this.currency_Name_lhcField = value;
                    this.OnPropertyChanged("Currency_Name_lhc");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 54)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_lhc
        {
            get
            {
                return this.currency_Rate_lhcField;
            }
            set
            {
                if ((this.currency_Rate_lhcField != null))
                {
                    if ((currency_Rate_lhcField.Equals(value) != true))
                    {
                        this.currency_Rate_lhcField = value;
                        this.OnPropertyChanged("Currency_Rate_lhc");
                    }
                }
                else
                {
                    this.currency_Rate_lhcField = value;
                    this.OnPropertyChanged("Currency_Rate_lhc");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 55)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Loading_handling
        {
            get
            {
                return this.loading_handlingField;
            }
            set
            {
                if ((this.loading_handlingField != null))
                {
                    if ((loading_handlingField.Equals(value) != true))
                    {
                        this.loading_handlingField = value;
                        this.OnPropertyChanged("Loading_handling");
                    }
                }
                else
                {
                    this.loading_handlingField = value;
                    this.OnPropertyChanged("Loading_handling");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 56)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_ins Currency_code_ins
        {
            get
            {
                return this.currency_code_insField;
            }
            set
            {
                if ((this.currency_code_insField != null))
                {
                    if ((currency_code_insField.Equals(value) != true))
                    {
                        this.currency_code_insField = value;
                        this.OnPropertyChanged("Currency_code_ins");
                    }
                }
                else
                {
                    this.currency_code_insField = value;
                    this.OnPropertyChanged("Currency_code_ins");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 57)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_ins Currency_Name_ins
        {
            get
            {
                return this.currency_Name_insField;
            }
            set
            {
                if ((this.currency_Name_insField != null))
                {
                    if ((currency_Name_insField.Equals(value) != true))
                    {
                        this.currency_Name_insField = value;
                        this.OnPropertyChanged("Currency_Name_ins");
                    }
                }
                else
                {
                    this.currency_Name_insField = value;
                    this.OnPropertyChanged("Currency_Name_ins");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 58)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_ins
        {
            get
            {
                return this.currency_Rate_insField;
            }
            set
            {
                if ((this.currency_Rate_insField != null))
                {
                    if ((currency_Rate_insField.Equals(value) != true))
                    {
                        this.currency_Rate_insField = value;
                        this.OnPropertyChanged("Currency_Rate_ins");
                    }
                }
                else
                {
                    this.currency_Rate_insField = value;
                    this.OnPropertyChanged("Currency_Rate_ins");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 59)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Insurance
        {
            get
            {
                return this.insuranceField;
            }
            set
            {
                if ((this.insuranceField != null))
                {
                    if ((insuranceField.Equals(value) != true))
                    {
                        this.insuranceField = value;
                        this.OnPropertyChanged("Insurance");
                    }
                }
                else
                {
                    this.insuranceField = value;
                    this.OnPropertyChanged("Insurance");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 60)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_aim Currency_code_aim
        {
            get
            {
                return this.currency_code_aimField;
            }
            set
            {
                if ((this.currency_code_aimField != null))
                {
                    if ((currency_code_aimField.Equals(value) != true))
                    {
                        this.currency_code_aimField = value;
                        this.OnPropertyChanged("Currency_code_aim");
                    }
                }
                else
                {
                    this.currency_code_aimField = value;
                    this.OnPropertyChanged("Currency_code_aim");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 61)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_aim Currency_Name_aim
        {
            get
            {
                return this.currency_Name_aimField;
            }
            set
            {
                if ((this.currency_Name_aimField != null))
                {
                    if ((currency_Name_aimField.Equals(value) != true))
                    {
                        this.currency_Name_aimField = value;
                        this.OnPropertyChanged("Currency_Name_aim");
                    }
                }
                else
                {
                    this.currency_Name_aimField = value;
                    this.OnPropertyChanged("Currency_Name_aim");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 62)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_aim
        {
            get
            {
                return this.currency_Rate_aimField;
            }
            set
            {
                if ((this.currency_Rate_aimField != null))
                {
                    if ((currency_Rate_aimField.Equals(value) != true))
                    {
                        this.currency_Rate_aimField = value;
                        this.OnPropertyChanged("Currency_Rate_aim");
                    }
                }
                else
                {
                    this.currency_Rate_aimField = value;
                    this.OnPropertyChanged("Currency_Rate_aim");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 63)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Transport_after_import
        {
            get
            {
                return this.transport_after_importField;
            }
            set
            {
                if ((this.transport_after_importField != null))
                {
                    if ((transport_after_importField.Equals(value) != true))
                    {
                        this.transport_after_importField = value;
                        this.OnPropertyChanged("Transport_after_import");
                    }
                }
                else
                {
                    this.transport_after_importField = value;
                    this.OnPropertyChanged("Transport_after_import");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 64)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_cfc Currency_code_cfc
        {
            get
            {
                return this.currency_code_cfcField;
            }
            set
            {
                if ((this.currency_code_cfcField != null))
                {
                    if ((currency_code_cfcField.Equals(value) != true))
                    {
                        this.currency_code_cfcField = value;
                        this.OnPropertyChanged("Currency_code_cfc");
                    }
                }
                else
                {
                    this.currency_code_cfcField = value;
                    this.OnPropertyChanged("Currency_code_cfc");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 65)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_cfc Currency_Name_cfc
        {
            get
            {
                return this.currency_Name_cfcField;
            }
            set
            {
                if ((this.currency_Name_cfcField != null))
                {
                    if ((currency_Name_cfcField.Equals(value) != true))
                    {
                        this.currency_Name_cfcField = value;
                        this.OnPropertyChanged("Currency_Name_cfc");
                    }
                }
                else
                {
                    this.currency_Name_cfcField = value;
                    this.OnPropertyChanged("Currency_Name_cfc");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 66)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_cfc
        {
            get
            {
                return this.currency_Rate_cfcField;
            }
            set
            {
                if ((this.currency_Rate_cfcField != null))
                {
                    if ((currency_Rate_cfcField.Equals(value) != true))
                    {
                        this.currency_Rate_cfcField = value;
                        this.OnPropertyChanged("Currency_Rate_cfc");
                    }
                }
                else
                {
                    this.currency_Rate_cfcField = value;
                    this.OnPropertyChanged("Currency_Rate_cfc");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 67)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Construction
        {
            get
            {
                return this.constructionField;
            }
            set
            {
                if ((this.constructionField != null))
                {
                    if ((constructionField.Equals(value) != true))
                    {
                        this.constructionField = value;
                        this.OnPropertyChanged("Construction");
                    }
                }
                else
                {
                    this.constructionField = value;
                    this.OnPropertyChanged("Construction");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 68)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_oth Currency_code_oth
        {
            get
            {
                return this.currency_code_othField;
            }
            set
            {
                if ((this.currency_code_othField != null))
                {
                    if ((currency_code_othField.Equals(value) != true))
                    {
                        this.currency_code_othField = value;
                        this.OnPropertyChanged("Currency_code_oth");
                    }
                }
                else
                {
                    this.currency_code_othField = value;
                    this.OnPropertyChanged("Currency_code_oth");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 69)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_oth Currency_Name_oth
        {
            get
            {
                return this.currency_Name_othField;
            }
            set
            {
                if ((this.currency_Name_othField != null))
                {
                    if ((currency_Name_othField.Equals(value) != true))
                    {
                        this.currency_Name_othField = value;
                        this.OnPropertyChanged("Currency_Name_oth");
                    }
                }
                else
                {
                    this.currency_Name_othField = value;
                    this.OnPropertyChanged("Currency_Name_oth");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 70)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_oth
        {
            get
            {
                return this.currency_Rate_othField;
            }
            set
            {
                if ((this.currency_Rate_othField != null))
                {
                    if ((currency_Rate_othField.Equals(value) != true))
                    {
                        this.currency_Rate_othField = value;
                        this.OnPropertyChanged("Currency_Rate_oth");
                    }
                }
                else
                {
                    this.currency_Rate_othField = value;
                    this.OnPropertyChanged("Currency_Rate_oth");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 71)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Other_charges
        {
            get
            {
                return this.other_chargesField;
            }
            set
            {
                if ((this.other_chargesField != null))
                {
                    if ((other_chargesField.Equals(value) != true))
                    {
                        this.other_chargesField = value;
                        this.OnPropertyChanged("Other_charges");
                    }
                }
                else
                {
                    this.other_chargesField = value;
                    this.OnPropertyChanged("Other_charges");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 72)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemOther_specify Other_specify
        {
            get
            {
                return this.other_specifyField;
            }
            set
            {
                if ((this.other_specifyField != null))
                {
                    if ((other_specifyField.Equals(value) != true))
                    {
                        this.other_specifyField = value;
                        this.OnPropertyChanged("Other_specify");
                    }
                }
                else
                {
                    this.other_specifyField = value;
                    this.OnPropertyChanged("Other_specify");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 73)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_code_txs Currency_code_txs
        {
            get
            {
                return this.currency_code_txsField;
            }
            set
            {
                if ((this.currency_code_txsField != null))
                {
                    if ((currency_code_txsField.Equals(value) != true))
                    {
                        this.currency_code_txsField = value;
                        this.OnPropertyChanged("Currency_code_txs");
                    }
                }
                else
                {
                    this.currency_code_txsField = value;
                    this.OnPropertyChanged("Currency_code_txs");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 74)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Value_declaration_formItemCurrency_Name_txs Currency_Name_txs
        {
            get
            {
                return this.currency_Name_txsField;
            }
            set
            {
                if ((this.currency_Name_txsField != null))
                {
                    if ((currency_Name_txsField.Equals(value) != true))
                    {
                        this.currency_Name_txsField = value;
                        this.OnPropertyChanged("Currency_Name_txs");
                    }
                }
                else
                {
                    this.currency_Name_txsField = value;
                    this.OnPropertyChanged("Currency_Name_txs");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 75)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Currency_Rate_txs
        {
            get
            {
                return this.currency_Rate_txsField;
            }
            set
            {
                if ((this.currency_Rate_txsField != null))
                {
                    if ((currency_Rate_txsField.Equals(value) != true))
                    {
                        this.currency_Rate_txsField = value;
                        this.OnPropertyChanged("Currency_Rate_txs");
                    }
                }
                else
                {
                    this.currency_Rate_txsField = value;
                    this.OnPropertyChanged("Currency_Rate_txs");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 76)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Customs_duties_taxes
        {
            get
            {
                return this.customs_duties_taxesField;
            }
            set
            {
                if ((this.customs_duties_taxesField != null))
                {
                    if ((customs_duties_taxesField.Equals(value) != true))
                    {
                        this.customs_duties_taxesField = value;
                        this.OnPropertyChanged("Customs_duties_taxes");
                    }
                }
                else
                {
                    this.customs_duties_taxesField = value;
                    this.OnPropertyChanged("Customs_duties_taxes");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItem));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItem object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItem object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItem);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItem obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItem Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItem);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItem obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItem obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItem LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItem LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItem object
        /// </summary>
        public virtual Value_declaration_formItem Clone()
        {
            return ((Value_declaration_formItem)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_ind")]
    public partial class Value_declaration_formItemCurrency_code_ind : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_ind));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_ind object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_ind object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_ind object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_ind obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_ind);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_ind obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_ind Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_ind)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_ind object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_ind object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_ind object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_ind obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_ind);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_ind obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_ind obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_ind LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_ind LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_ind object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_ind Clone()
        {
            return ((Value_declaration_formItemCurrency_code_ind)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_ind")]
    public partial class Value_declaration_formItemCurrency_Name_ind : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_Name_ind()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_ind));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_ind object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_ind object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_ind object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_ind obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_ind);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_ind obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_ind Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_ind)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_ind object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_ind object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_ind object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_ind obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_ind);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_ind obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_ind obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_ind LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_ind LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_ind object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_ind Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_ind)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_com")]
    public partial class Value_declaration_formItemCurrency_code_com : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_code_com()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_com));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_com object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_com object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_com object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_com obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_com);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_com obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_com Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_com)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_com object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_com object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_com object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_com obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_com);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_com obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_com obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_com LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_com LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_com object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_com Clone()
        {
            return ((Value_declaration_formItemCurrency_code_com)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_com")]
    public partial class Value_declaration_formItemCurrency_Name_com : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_Name_com()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_com));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_com object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_com object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_com object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_com obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_com);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_com obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_com Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_com)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_com object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_com object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_com object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_com obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_com);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_com obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_com obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_com LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_com LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_com object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_com Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_com)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_brg")]
    public partial class Value_declaration_formItemCurrency_code_brg : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_code_brg()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_brg));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_brg object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_brg object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_brg object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_brg obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_brg);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_brg obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_brg Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_brg)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_brg object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_brg object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_brg object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_brg obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_brg);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_brg obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_brg obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_brg LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_brg LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_brg object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_brg Clone()
        {
            return ((Value_declaration_formItemCurrency_code_brg)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_brg")]
    public partial class Value_declaration_formItemCurrency_Name_brg : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_Name_brg()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_brg));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_brg object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_brg object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_brg object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_brg obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_brg);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_brg obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_brg Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_brg)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_brg object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_brg object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_brg object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_brg obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_brg);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_brg obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_brg obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_brg LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_brg LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_brg object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_brg Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_brg)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_cap")]
    public partial class Value_declaration_formItemCurrency_code_cap : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_code_cap()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_cap));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_cap object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_cap object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_cap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_cap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_cap);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_cap obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_cap Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_cap)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_cap object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_cap object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_cap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_cap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_cap);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_cap obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_cap obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_cap LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_cap LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_cap object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_cap Clone()
        {
            return ((Value_declaration_formItemCurrency_code_cap)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_cap")]
    public partial class Value_declaration_formItemCurrency_Name_cap : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_Name_cap()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_cap));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_cap object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_cap object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_cap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_cap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_cap);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_cap obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_cap Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_cap)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_cap object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_cap object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_cap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_cap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_cap);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_cap obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_cap obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_cap LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_cap LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_cap object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_cap Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_cap)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_mcp")]
    public partial class Value_declaration_formItemCurrency_code_mcp : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_code_mcp()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_mcp));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_mcp object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_mcp object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_mcp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_mcp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_mcp);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_mcp obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_mcp Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_mcp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_mcp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_mcp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_mcp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_mcp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_mcp);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_mcp obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_mcp obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_mcp LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_mcp LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_mcp object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_mcp Clone()
        {
            return ((Value_declaration_formItemCurrency_code_mcp)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_mcp")]
    public partial class Value_declaration_formItemCurrency_Name_mcp : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_Name_mcp()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_mcp));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_mcp object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_mcp object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_mcp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_mcp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_mcp);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_mcp obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_mcp Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_mcp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_mcp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_mcp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_mcp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_mcp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_mcp);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_mcp obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_mcp obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_mcp LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_mcp LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_mcp object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_mcp Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_mcp)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_tls")]
    public partial class Value_declaration_formItemCurrency_code_tls : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_code_tls()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_tls));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_tls object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_tls object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_tls object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_tls obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_tls);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_tls obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_tls Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_tls)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_tls object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_tls object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_tls object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_tls obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_tls);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_tls obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_tls obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_tls LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_tls LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_tls object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_tls Clone()
        {
            return ((Value_declaration_formItemCurrency_code_tls)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_tls")]
    public partial class Value_declaration_formItemCurrency_Name_tls : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_Name_tls()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_tls));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_tls object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_tls object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_tls object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_tls obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_tls);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_tls obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_tls Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_tls)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_tls object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_tls object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_tls object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_tls obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_tls);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_tls obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_tls obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_tls LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_tls LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_tls object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_tls Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_tls)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_mcg")]
    public partial class Value_declaration_formItemCurrency_code_mcg : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_code_mcg()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_mcg));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_mcg object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_mcg object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_mcg object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_mcg obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_mcg);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_mcg obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_mcg Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_mcg)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_mcg object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_mcg object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_mcg object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_mcg obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_mcg);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_mcg obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_mcg obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_mcg LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_mcg LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_mcg object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_mcg Clone()
        {
            return ((Value_declaration_formItemCurrency_code_mcg)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_mcg")]
    public partial class Value_declaration_formItemCurrency_Name_mcg : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_Name_mcg()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_mcg));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_mcg object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_mcg object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_mcg object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_mcg obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_mcg);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_mcg obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_mcg Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_mcg)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_mcg object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_mcg object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_mcg object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_mcg obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_mcg);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_mcg obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_mcg obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_mcg LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_mcg LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_mcg object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_mcg Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_mcg)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_eng")]
    public partial class Value_declaration_formItemCurrency_code_eng : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_code_eng()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_eng));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_eng object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_eng object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_eng object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_eng obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_eng);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_eng obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_eng Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_eng)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_eng object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_eng object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_eng object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_eng obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_eng);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_eng obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_eng obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_eng LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_eng LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_eng object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_eng Clone()
        {
            return ((Value_declaration_formItemCurrency_code_eng)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_eng")]
    public partial class Value_declaration_formItemCurrency_Name_eng : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private ObservableCollection<string> textField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Value_declaration_formItemCurrency_Name_eng()
        {
            this.textField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ObservableCollection<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_eng));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_eng object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_eng object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_eng object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_eng obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_eng);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_eng obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_eng Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_eng)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_eng object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_eng object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_eng object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_eng obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_eng);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_eng obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_eng obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_eng LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_eng LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_eng object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_eng Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_eng)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_roy")]
    public partial class Value_declaration_formItemCurrency_code_roy : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_roy));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_roy object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_roy object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_roy object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_roy obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_roy);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_roy obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_roy Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_roy)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_roy object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_roy object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_roy object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_roy obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_roy);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_roy obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_roy obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_roy LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_roy LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_roy object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_roy Clone()
        {
            return ((Value_declaration_formItemCurrency_code_roy)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_roy")]
    public partial class Value_declaration_formItemCurrency_Name_roy : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_roy));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_roy object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_roy object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_roy object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_roy obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_roy);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_roy obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_roy Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_roy)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_roy object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_roy object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_roy object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_roy obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_roy);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_roy obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_roy obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_roy LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_roy LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_roy object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_roy Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_roy)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_pro")]
    public partial class Value_declaration_formItemCurrency_code_pro : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_pro));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_pro object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_pro object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_pro object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_pro obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_pro);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_pro obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_pro Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_pro)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_pro object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_pro object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_pro object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_pro obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_pro);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_pro obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_pro obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_pro LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_pro LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_pro object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_pro Clone()
        {
            return ((Value_declaration_formItemCurrency_code_pro)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_pro")]
    public partial class Value_declaration_formItemCurrency_Name_pro : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_pro));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_pro object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_pro object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_pro object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_pro obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_pro);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_pro obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_pro Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_pro)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_pro object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_pro object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_pro object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_pro obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_pro);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_pro obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_pro obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_pro LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_pro LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_pro object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_pro Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_pro)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_lhc")]
    public partial class Value_declaration_formItemCurrency_code_lhc : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_lhc));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_lhc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_lhc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_lhc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_lhc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_lhc);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_lhc obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_lhc Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_lhc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_lhc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_lhc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_lhc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_lhc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_lhc);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_lhc obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_lhc obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_lhc LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_lhc LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_lhc object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_lhc Clone()
        {
            return ((Value_declaration_formItemCurrency_code_lhc)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_lhc")]
    public partial class Value_declaration_formItemCurrency_Name_lhc : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_lhc));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_lhc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_lhc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_lhc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_lhc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_lhc);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_lhc obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_lhc Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_lhc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_lhc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_lhc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_lhc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_lhc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_lhc);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_lhc obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_lhc obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_lhc LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_lhc LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_lhc object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_lhc Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_lhc)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_ins")]
    public partial class Value_declaration_formItemCurrency_code_ins : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_ins));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_ins object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_ins object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_ins object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_ins obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_ins);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_ins obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_ins Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_ins)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_ins object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_ins object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_ins object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_ins obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_ins);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_ins obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_ins obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_ins LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_ins LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_ins object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_ins Clone()
        {
            return ((Value_declaration_formItemCurrency_code_ins)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_ins")]
    public partial class Value_declaration_formItemCurrency_Name_ins : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_ins));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_ins object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_ins object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_ins object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_ins obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_ins);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_ins obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_ins Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_ins)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_ins object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_ins object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_ins object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_ins obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_ins);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_ins obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_ins obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_ins LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_ins LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_ins object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_ins Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_ins)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_aim")]
    public partial class Value_declaration_formItemCurrency_code_aim : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_aim));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_aim object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_aim object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_aim object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_aim obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_aim);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_aim obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_aim Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_aim)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_aim object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_aim object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_aim object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_aim obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_aim);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_aim obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_aim obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_aim LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_aim LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_aim object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_aim Clone()
        {
            return ((Value_declaration_formItemCurrency_code_aim)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_aim")]
    public partial class Value_declaration_formItemCurrency_Name_aim : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_aim));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_aim object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_aim object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_aim object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_aim obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_aim);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_aim obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_aim Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_aim)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_aim object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_aim object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_aim object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_aim obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_aim);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_aim obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_aim obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_aim LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_aim LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_aim object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_aim Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_aim)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_cfc")]
    public partial class Value_declaration_formItemCurrency_code_cfc : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_cfc));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_cfc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_cfc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_cfc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_cfc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_cfc);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_cfc obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_cfc Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_cfc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_cfc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_cfc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_cfc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_cfc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_cfc);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_cfc obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_cfc obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_cfc LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_cfc LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_cfc object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_cfc Clone()
        {
            return ((Value_declaration_formItemCurrency_code_cfc)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_cfc")]
    public partial class Value_declaration_formItemCurrency_Name_cfc : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_cfc));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_cfc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_cfc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_cfc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_cfc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_cfc);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_cfc obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_cfc Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_cfc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_cfc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_cfc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_cfc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_cfc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_cfc);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_cfc obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_cfc obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_cfc LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_cfc LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_cfc object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_cfc Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_cfc)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_oth")]
    public partial class Value_declaration_formItemCurrency_code_oth : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_oth));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_oth object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_oth object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_oth object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_oth obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_oth);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_oth obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_oth Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_oth)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_oth object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_oth object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_oth object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_oth obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_oth);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_oth obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_oth obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_oth LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_oth LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_oth object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_oth Clone()
        {
            return ((Value_declaration_formItemCurrency_code_oth)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_oth")]
    public partial class Value_declaration_formItemCurrency_Name_oth : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_oth));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_oth object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_oth object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_oth object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_oth obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_oth);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_oth obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_oth Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_oth)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_oth object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_oth object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_oth object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_oth obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_oth);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_oth obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_oth obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_oth LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_oth LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_oth object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_oth Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_oth)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemOther_specify")]
    public partial class Value_declaration_formItemOther_specify : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemOther_specify));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemOther_specify object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemOther_specify object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemOther_specify object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemOther_specify obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemOther_specify);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemOther_specify obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemOther_specify Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemOther_specify)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemOther_specify object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemOther_specify object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemOther_specify object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemOther_specify obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemOther_specify);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemOther_specify obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemOther_specify obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemOther_specify LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemOther_specify LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemOther_specify object
        /// </summary>
        public virtual Value_declaration_formItemOther_specify Clone()
        {
            return ((Value_declaration_formItemOther_specify)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_code_txs")]
    public partial class Value_declaration_formItemCurrency_code_txs : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_code_txs));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_txs object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_code_txs object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_txs object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_txs obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_txs);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_code_txs obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_txs Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_code_txs)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_code_txs object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_code_txs object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_code_txs object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_code_txs obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_code_txs);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_txs obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_code_txs obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_code_txs LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_code_txs LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_code_txs object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_code_txs Clone()
        {
            return ((Value_declaration_formItemCurrency_code_txs)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Value_declaration_formItemCurrency_Name_txs")]
    public partial class Value_declaration_formItemCurrency_Name_txs : System.ComponentModel.INotifyPropertyChanged
    {

        private object nullField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object @null
        {
            get
            {
                return this.nullField;
            }
            set
            {
                if ((this.nullField != null))
                {
                    if ((nullField.Equals(value) != true))
                    {
                        this.nullField = value;
                        this.OnPropertyChanged("null");
                    }
                }
                else
                {
                    this.nullField = value;
                    this.OnPropertyChanged("null");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Value_declaration_formItemCurrency_Name_txs));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_txs object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Value_declaration_formItemCurrency_Name_txs object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_txs object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_txs obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_txs);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Value_declaration_formItemCurrency_Name_txs obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_txs Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Value_declaration_formItemCurrency_Name_txs)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Value_declaration_formItemCurrency_Name_txs object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Value_declaration_formItemCurrency_Name_txs object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Value_declaration_formItemCurrency_Name_txs object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Value_declaration_formItemCurrency_Name_txs obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Value_declaration_formItemCurrency_Name_txs);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_txs obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Value_declaration_formItemCurrency_Name_txs obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Value_declaration_formItemCurrency_Name_txs LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Value_declaration_formItemCurrency_Name_txs LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Value_declaration_formItemCurrency_Name_txs object
        /// </summary>
        public virtual Value_declaration_formItemCurrency_Name_txs Clone()
        {
            return ((Value_declaration_formItemCurrency_Name_txs)(this.MemberwiseClone()));
        }
        #endregion
    }
}

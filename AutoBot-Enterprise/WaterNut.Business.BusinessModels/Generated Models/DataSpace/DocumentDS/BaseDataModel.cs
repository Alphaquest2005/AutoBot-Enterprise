// <autogenerated>
//   This file was generated by T4 code generator AllDataSpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;

using DocumentDS.Business.Entities;
using DocumentDS.Business.Services;

using System.Threading.Tasks;
using System.Collections.Generic;


//using WaterNut.Business.Repositories;



namespace WaterNut.DataSpace.DocumentDS.DataModels
{
	 public partial class BaseDataModel 
	{
        private static readonly BaseDataModel instance;
        static BaseDataModel()
        {
            instance = new BaseDataModel();
        }

        public static  BaseDataModel Instance
        {
            get { return instance; }
        }

       //Search Entities
   
        public async Task<IEnumerable<AsycudaDocumentSet>> SearchAsycudaDocumentSet(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new AsycudaDocumentSetService())
            {
                return await ctx.GetAsycudaDocumentSetsByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task SaveAsycudaDocumentSet(AsycudaDocumentSet i)
        {
            if (i == null) return;
            using (var ctx = new AsycudaDocumentSetService())
            {
                await ctx.UpdateAsycudaDocumentSet(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<Customs_Procedure>> SearchCustoms_Procedure(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new Customs_ProcedureService())
            {
                return await ctx.GetCustoms_ProcedureByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task SaveCustoms_Procedure(Customs_Procedure i)
        {
            if (i == null) return;
            using (var ctx = new Customs_ProcedureService())
            {
                await ctx.UpdateCustoms_Procedure(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<Document_Type>> SearchDocument_Type(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new Document_TypeService())
            {
                return await ctx.GetDocument_TypeByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task SaveDocument_Type(Document_Type i)
        {
            if (i == null) return;
            using (var ctx = new Document_TypeService())
            {
                await ctx.UpdateDocument_Type(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<ExportTemplate>> SearchExportTemplate(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new ExportTemplateService())
            {
                return await ctx.GetExportTemplatesByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task SaveExportTemplate(ExportTemplate i)
        {
            if (i == null) return;
            using (var ctx = new ExportTemplateService())
            {
                await ctx.UpdateExportTemplate(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Assessment>> Searchxcuda_Assessment(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_AssessmentService())
            {
                return await ctx.Getxcuda_AssessmentByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Assessment(xcuda_Assessment i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_AssessmentService())
            {
                await ctx.Updatexcuda_Assessment(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Assessment_notice>> Searchxcuda_Assessment_notice(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Assessment_noticeService())
            {
                return await ctx.Getxcuda_Assessment_noticeByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Assessment_notice(xcuda_Assessment_notice i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Assessment_noticeService())
            {
                await ctx.Updatexcuda_Assessment_notice(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_ASYCUDA>> Searchxcuda_ASYCUDA(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_ASYCUDAService())
            {
                return await ctx.Getxcuda_ASYCUDAByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_ASYCUDA(xcuda_ASYCUDA i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_ASYCUDAService())
            {
                await ctx.Updatexcuda_ASYCUDA(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_ASYCUDA_ExtendedProperties>> Searchxcuda_ASYCUDA_ExtendedProperties(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_ASYCUDA_ExtendedPropertiesService())
            {
                return await ctx.Getxcuda_ASYCUDA_ExtendedPropertiesByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_ASYCUDA_ExtendedProperties(xcuda_ASYCUDA_ExtendedProperties i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_ASYCUDA_ExtendedPropertiesService())
            {
                await ctx.Updatexcuda_ASYCUDA_ExtendedProperties(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_ASYCUDAEx>> Searchxcuda_ASYCUDAEx(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_ASYCUDAExService())
            {
                return await ctx.Getxcuda_ASYCUDAExByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_ASYCUDAEx(xcuda_ASYCUDAEx i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_ASYCUDAExService())
            {
                await ctx.Updatexcuda_ASYCUDAEx(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Border_information>> Searchxcuda_Border_information(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Border_informationService())
            {
                return await ctx.Getxcuda_Border_informationByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Border_information(xcuda_Border_information i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Border_informationService())
            {
                await ctx.Updatexcuda_Border_information(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Border_office>> Searchxcuda_Border_office(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Border_officeService())
            {
                return await ctx.Getxcuda_Border_officeByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Border_office(xcuda_Border_office i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Border_officeService())
            {
                await ctx.Updatexcuda_Border_office(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Consignee>> Searchxcuda_Consignee(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_ConsigneeService())
            {
                return await ctx.Getxcuda_ConsigneeByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Consignee(xcuda_Consignee i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_ConsigneeService())
            {
                await ctx.Updatexcuda_Consignee(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Container>> Searchxcuda_Container(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_ContainerService())
            {
                return await ctx.Getxcuda_ContainerByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Container(xcuda_Container i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_ContainerService())
            {
                await ctx.Updatexcuda_Container(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Country>> Searchxcuda_Country(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_CountryService())
            {
                return await ctx.Getxcuda_CountryByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Country(xcuda_Country i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_CountryService())
            {
                await ctx.Updatexcuda_Country(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Declarant>> Searchxcuda_Declarant(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_DeclarantService())
            {
                return await ctx.Getxcuda_DeclarantByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Declarant(xcuda_Declarant i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_DeclarantService())
            {
                await ctx.Updatexcuda_Declarant(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Delivery_terms>> Searchxcuda_Delivery_terms(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Delivery_termsService())
            {
                return await ctx.Getxcuda_Delivery_termsByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Delivery_terms(xcuda_Delivery_terms i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Delivery_termsService())
            {
                await ctx.Updatexcuda_Delivery_terms(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Departure_arrival_information>> Searchxcuda_Departure_arrival_information(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Departure_arrival_informationService())
            {
                return await ctx.Getxcuda_Departure_arrival_informationByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Departure_arrival_information(xcuda_Departure_arrival_information i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Departure_arrival_informationService())
            {
                await ctx.Updatexcuda_Departure_arrival_information(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Destination>> Searchxcuda_Destination(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_DestinationService())
            {
                return await ctx.Getxcuda_DestinationByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Destination(xcuda_Destination i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_DestinationService())
            {
                await ctx.Updatexcuda_Destination(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Export>> Searchxcuda_Export(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_ExportService())
            {
                return await ctx.Getxcuda_ExportByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Export(xcuda_Export i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_ExportService())
            {
                await ctx.Updatexcuda_Export(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Export_release>> Searchxcuda_Export_release(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Export_releaseService())
            {
                return await ctx.Getxcuda_Export_releaseByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Export_release(xcuda_Export_release i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Export_releaseService())
            {
                await ctx.Updatexcuda_Export_release(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Exporter>> Searchxcuda_Exporter(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_ExporterService())
            {
                return await ctx.Getxcuda_ExporterByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Exporter(xcuda_Exporter i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_ExporterService())
            {
                await ctx.Updatexcuda_Exporter(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Financial>> Searchxcuda_Financial(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_FinancialService())
            {
                return await ctx.Getxcuda_FinancialByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Financial(xcuda_Financial i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_FinancialService())
            {
                await ctx.Updatexcuda_Financial(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Financial_Amounts>> Searchxcuda_Financial_Amounts(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Financial_AmountsService())
            {
                return await ctx.Getxcuda_Financial_AmountsByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Financial_Amounts(xcuda_Financial_Amounts i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Financial_AmountsService())
            {
                await ctx.Updatexcuda_Financial_Amounts(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Financial_Guarantee>> Searchxcuda_Financial_Guarantee(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Financial_GuaranteeService())
            {
                return await ctx.Getxcuda_Financial_GuaranteeByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Financial_Guarantee(xcuda_Financial_Guarantee i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Financial_GuaranteeService())
            {
                await ctx.Updatexcuda_Financial_Guarantee(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Forms>> Searchxcuda_Forms(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_FormsService())
            {
                return await ctx.Getxcuda_FormsByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Forms(xcuda_Forms i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_FormsService())
            {
                await ctx.Updatexcuda_Forms(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_General_information>> Searchxcuda_General_information(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_General_informationService())
            {
                return await ctx.Getxcuda_General_informationByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_General_information(xcuda_General_information i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_General_informationService())
            {
                await ctx.Updatexcuda_General_information(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Global_taxes>> Searchxcuda_Global_taxes(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Global_taxesService())
            {
                return await ctx.Getxcuda_Global_taxesByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Global_taxes(xcuda_Global_taxes i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Global_taxesService())
            {
                await ctx.Updatexcuda_Global_taxes(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Gs_deduction>> Searchxcuda_Gs_deduction(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Gs_deductionService())
            {
                return await ctx.Getxcuda_Gs_deductionByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Gs_deduction(xcuda_Gs_deduction i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Gs_deductionService())
            {
                await ctx.Updatexcuda_Gs_deduction(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Gs_external_freight>> Searchxcuda_Gs_external_freight(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Gs_external_freightService())
            {
                return await ctx.Getxcuda_Gs_external_freightByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Gs_external_freight(xcuda_Gs_external_freight i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Gs_external_freightService())
            {
                await ctx.Updatexcuda_Gs_external_freight(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Gs_insurance>> Searchxcuda_Gs_insurance(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Gs_insuranceService())
            {
                return await ctx.Getxcuda_Gs_insuranceByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Gs_insurance(xcuda_Gs_insurance i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Gs_insuranceService())
            {
                await ctx.Updatexcuda_Gs_insurance(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Gs_internal_freight>> Searchxcuda_Gs_internal_freight(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Gs_internal_freightService())
            {
                return await ctx.Getxcuda_Gs_internal_freightByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Gs_internal_freight(xcuda_Gs_internal_freight i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Gs_internal_freightService())
            {
                await ctx.Updatexcuda_Gs_internal_freight(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Gs_Invoice>> Searchxcuda_Gs_Invoice(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Gs_InvoiceService())
            {
                return await ctx.Getxcuda_Gs_InvoiceByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Gs_Invoice(xcuda_Gs_Invoice i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Gs_InvoiceService())
            {
                await ctx.Updatexcuda_Gs_Invoice(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Gs_other_cost>> Searchxcuda_Gs_other_cost(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Gs_other_costService())
            {
                return await ctx.Getxcuda_Gs_other_costByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Gs_other_cost(xcuda_Gs_other_cost i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Gs_other_costService())
            {
                await ctx.Updatexcuda_Gs_other_cost(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Identification>> Searchxcuda_Identification(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_IdentificationService())
            {
                return await ctx.Getxcuda_IdentificationByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Identification(xcuda_Identification i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_IdentificationService())
            {
                await ctx.Updatexcuda_Identification(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Means_of_transport>> Searchxcuda_Means_of_transport(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Means_of_transportService())
            {
                return await ctx.Getxcuda_Means_of_transportByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Means_of_transport(xcuda_Means_of_transport i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Means_of_transportService())
            {
                await ctx.Updatexcuda_Means_of_transport(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Nbers>> Searchxcuda_Nbers(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_NbersService())
            {
                return await ctx.Getxcuda_NbersByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Nbers(xcuda_Nbers i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_NbersService())
            {
                await ctx.Updatexcuda_Nbers(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Office_segment>> Searchxcuda_Office_segment(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Office_segmentService())
            {
                return await ctx.Getxcuda_Office_segmentByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Office_segment(xcuda_Office_segment i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Office_segmentService())
            {
                await ctx.Updatexcuda_Office_segment(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Place_of_loading>> Searchxcuda_Place_of_loading(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Place_of_loadingService())
            {
                return await ctx.Getxcuda_Place_of_loadingByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Place_of_loading(xcuda_Place_of_loading i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Place_of_loadingService())
            {
                await ctx.Updatexcuda_Place_of_loading(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_PreviousItem>> Searchxcuda_PreviousItem(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_PreviousItemService())
            {
                return await ctx.Getxcuda_PreviousItemByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_PreviousItem(xcuda_PreviousItem i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_PreviousItemService())
            {
                await ctx.Updatexcuda_PreviousItem(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Principal>> Searchxcuda_Principal(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_PrincipalService())
            {
                return await ctx.Getxcuda_PrincipalByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Principal(xcuda_Principal i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_PrincipalService())
            {
                await ctx.Updatexcuda_Principal(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Property>> Searchxcuda_Property(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_PropertyService())
            {
                return await ctx.Getxcuda_PropertyByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Property(xcuda_Property i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_PropertyService())
            {
                await ctx.Updatexcuda_Property(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_receipt>> Searchxcuda_receipt(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_receiptService())
            {
                return await ctx.Getxcuda_receiptByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_receipt(xcuda_receipt i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_receiptService())
            {
                await ctx.Updatexcuda_receipt(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Registration>> Searchxcuda_Registration(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_RegistrationService())
            {
                return await ctx.Getxcuda_RegistrationByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Registration(xcuda_Registration i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_RegistrationService())
            {
                await ctx.Updatexcuda_Registration(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Seals>> Searchxcuda_Seals(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_SealsService())
            {
                return await ctx.Getxcuda_SealsByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Seals(xcuda_Seals i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_SealsService())
            {
                await ctx.Updatexcuda_Seals(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Signature>> Searchxcuda_Signature(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_SignatureService())
            {
                return await ctx.Getxcuda_SignatureByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Signature(xcuda_Signature i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_SignatureService())
            {
                await ctx.Updatexcuda_Signature(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Suppliers_documents>> Searchxcuda_Suppliers_documents(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Suppliers_documentsService())
            {
                return await ctx.Getxcuda_Suppliers_documentsByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Suppliers_documents(xcuda_Suppliers_documents i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Suppliers_documentsService())
            {
                await ctx.Updatexcuda_Suppliers_documents(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Total>> Searchxcuda_Total(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_TotalService())
            {
                return await ctx.Getxcuda_TotalByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Total(xcuda_Total i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_TotalService())
            {
                await ctx.Updatexcuda_Total(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Traders>> Searchxcuda_Traders(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_TradersService())
            {
                return await ctx.Getxcuda_TradersByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Traders(xcuda_Traders i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_TradersService())
            {
                await ctx.Updatexcuda_Traders(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Traders_Financial>> Searchxcuda_Traders_Financial(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Traders_FinancialService())
            {
                return await ctx.Getxcuda_Traders_FinancialByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Traders_Financial(xcuda_Traders_Financial i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Traders_FinancialService())
            {
                await ctx.Updatexcuda_Traders_Financial(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Transit>> Searchxcuda_Transit(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_TransitService())
            {
                return await ctx.Getxcuda_TransitByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Transit(xcuda_Transit i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_TransitService())
            {
                await ctx.Updatexcuda_Transit(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Transit_Destination>> Searchxcuda_Transit_Destination(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Transit_DestinationService())
            {
                return await ctx.Getxcuda_Transit_DestinationByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Transit_Destination(xcuda_Transit_Destination i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Transit_DestinationService())
            {
                await ctx.Updatexcuda_Transit_Destination(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Transport>> Searchxcuda_Transport(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_TransportService())
            {
                return await ctx.Getxcuda_TransportByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Transport(xcuda_Transport i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_TransportService())
            {
                await ctx.Updatexcuda_Transport(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Type>> Searchxcuda_Type(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_TypeService())
            {
                return await ctx.Getxcuda_TypeByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Type(xcuda_Type i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_TypeService())
            {
                await ctx.Updatexcuda_Type(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Valuation>> Searchxcuda_Valuation(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_ValuationService())
            {
                return await ctx.Getxcuda_ValuationByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Valuation(xcuda_Valuation i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_ValuationService())
            {
                await ctx.Updatexcuda_Valuation(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Warehouse>> Searchxcuda_Warehouse(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_WarehouseService())
            {
                return await ctx.Getxcuda_WarehouseByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Warehouse(xcuda_Warehouse i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_WarehouseService())
            {
                await ctx.Updatexcuda_Warehouse(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Weight>> Searchxcuda_Weight(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_WeightService())
            {
                return await ctx.Getxcuda_WeightByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Weight(xcuda_Weight i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_WeightService())
            {
                await ctx.Updatexcuda_Weight(i).ConfigureAwait(false);
            }
        }
   
    

    }		
}

// <autogenerated>
//   This file was generated by T4 code generator AllDataSpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;

using InventoryDS.Business.Entities;
using InventoryDS.Business.Services;

using System.Threading.Tasks;
using System.Collections.Generic;


//using WaterNut.Business.Repositories;



namespace WaterNut.DataSpace.InventoryDS.DataModels
{
	 public partial class BaseDataModel 
	{
        private static readonly BaseDataModel instance;
        static BaseDataModel()
        {
            instance = new BaseDataModel();
        }

        public static  BaseDataModel Instance
        {
            get { return instance; }
        }

       //Search Entities
   
        public async Task<IEnumerable<InventoryItem>> SearchInventoryItem(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new InventoryItemService())
            {
                return await ctx.GetInventoryItemsByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task SaveInventoryItem(InventoryItem i)
        {
            if (i == null) return;
            using (var ctx = new InventoryItemService())
            {
                await ctx.UpdateInventoryItem(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<TariffCategory>> SearchTariffCategory(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new TariffCategoryService())
            {
                return await ctx.GetTariffCategoriesByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task SaveTariffCategory(TariffCategory i)
        {
            if (i == null) return;
            using (var ctx = new TariffCategoryService())
            {
                await ctx.UpdateTariffCategory(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<TariffCode>> SearchTariffCode(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new TariffCodeService())
            {
                return await ctx.GetTariffCodesByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task SaveTariffCode(TariffCode i)
        {
            if (i == null) return;
            using (var ctx = new TariffCodeService())
            {
                await ctx.UpdateTariffCode(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<TariffSupUnitLkp>> SearchTariffSupUnitLkp(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new TariffSupUnitLkpService())
            {
                return await ctx.GetTariffSupUnitLkpsByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task SaveTariffSupUnitLkp(TariffSupUnitLkp i)
        {
            if (i == null) return;
            using (var ctx = new TariffSupUnitLkpService())
            {
                await ctx.UpdateTariffSupUnitLkp(i).ConfigureAwait(false);
            }
        }
   
    

    }		
}

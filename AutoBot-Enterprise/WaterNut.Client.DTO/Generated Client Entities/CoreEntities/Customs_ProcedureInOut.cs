// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class Customs_ProcedureInOut : BaseEntity<Customs_ProcedureInOut>, ITrackable, IEquatable<Customs_ProcedureInOut>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int WarehouseCustomsProcedureId
		{ 
		    get { return _WarehouseCustomsProcedureId; }
			set
			{
			    if (value == _WarehouseCustomsProcedureId) return;
				_WarehouseCustomsProcedureId = value;
				NotifyPropertyChanged();//m => this.WarehouseCustomsProcedureId
			}
		}
        private int _WarehouseCustomsProcedureId;

        [DataMember]
        public int ExwarehouseCustomsProcedureId
		{ 
		    get { return _ExwarehouseCustomsProcedureId; }
			set
			{
			    if (value == _ExwarehouseCustomsProcedureId) return;
				_ExwarehouseCustomsProcedureId = value;
				NotifyPropertyChanged();//m => this.ExwarehouseCustomsProcedureId
			}
		}
        private int _ExwarehouseCustomsProcedureId;

       
        [DataMember]
        public Customs_Procedure InCustomsProcedure
		{
		    get { return _InCustomsProcedure; }
			set
			{
			    if (value == _InCustomsProcedure) return;
				_InCustomsProcedure = value;
                InCustomsProcedureChangeTracker = _InCustomsProcedure == null ? null
                    : new ChangeTrackingCollection<Customs_Procedure> { _InCustomsProcedure };
				NotifyPropertyChanged();//m => this.InCustomsProcedure
			}
		}
        private Customs_Procedure _InCustomsProcedure;
        private ChangeTrackingCollection<Customs_Procedure> InCustomsProcedureChangeTracker { get; set; }

        [DataMember]
        public Customs_Procedure OutCustomsProcedure
		{
		    get { return _OutCustomsProcedure; }
			set
			{
			    if (value == _OutCustomsProcedure) return;
				_OutCustomsProcedure = value;
                OutCustomsProcedureChangeTracker = _OutCustomsProcedure == null ? null
                    : new ChangeTrackingCollection<Customs_Procedure> { _OutCustomsProcedure };
				NotifyPropertyChanged();//m => this.OutCustomsProcedure
			}
		}
        private Customs_Procedure _OutCustomsProcedure;
        private ChangeTrackingCollection<Customs_Procedure> OutCustomsProcedureChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<Customs_ProcedureInOut>.Equals(Customs_ProcedureInOut other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




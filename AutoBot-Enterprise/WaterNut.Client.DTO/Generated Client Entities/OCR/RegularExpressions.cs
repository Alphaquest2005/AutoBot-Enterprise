// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class RegularExpressions : BaseEntity<RegularExpressions>, ITrackable, IEquatable<RegularExpressions>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public string RegEx
		{ 
		    get { return _RegEx; }
			set
			{
			    if (value == _RegEx) return;
				_RegEx = value;
				NotifyPropertyChanged();//m => this.RegEx
			}
		}
        private string _RegEx;

        [DataMember]
        public Nullable<bool> MultiLine
		{ 
		    get { return _MultiLine; }
			set
			{
			    if (value == _MultiLine) return;
				_MultiLine = value;
				NotifyPropertyChanged();//m => this.MultiLine
			}
		}
        private Nullable<bool> _MultiLine;

        [DataMember]
        public Nullable<int> MaxLines
		{ 
		    get { return _MaxLines; }
			set
			{
			    if (value == _MaxLines) return;
				_MaxLines = value;
				NotifyPropertyChanged();//m => this.MaxLines
			}
		}
        private Nullable<int> _MaxLines;

       
        [DataMember]
        public ChangeTrackingCollection<End> End
		{
		    get { return _End; }
			set
			{
			    if (Equals(value, _End)) return;
				_End = value;
				NotifyPropertyChanged();//m => this.End
			}
		}
        private ChangeTrackingCollection<End> _End = new ChangeTrackingCollection<End>();

        [DataMember]
        public ChangeTrackingCollection<Lines> Lines
		{
		    get { return _Lines; }
			set
			{
			    if (Equals(value, _Lines)) return;
				_Lines = value;
				NotifyPropertyChanged();//m => this.Lines
			}
		}
        private ChangeTrackingCollection<Lines> _Lines = new ChangeTrackingCollection<Lines>();

        [DataMember]
        public ChangeTrackingCollection<Start> Start
		{
		    get { return _Start; }
			set
			{
			    if (Equals(value, _Start)) return;
				_Start = value;
				NotifyPropertyChanged();//m => this.Start
			}
		}
        private ChangeTrackingCollection<Start> _Start = new ChangeTrackingCollection<Start>();

        [DataMember]
        public ChangeTrackingCollection<InvoiceRegEx> InvoiceRegEx
		{
		    get { return _InvoiceRegEx; }
			set
			{
			    if (Equals(value, _InvoiceRegEx)) return;
				_InvoiceRegEx = value;
				NotifyPropertyChanged();//m => this.InvoiceRegEx
			}
		}
        private ChangeTrackingCollection<InvoiceRegEx> _InvoiceRegEx = new ChangeTrackingCollection<InvoiceRegEx>();

        [DataMember]
        public ChangeTrackingCollection<InvoiceRegEx> InvoiceRepRegEx
		{
		    get { return _InvoiceRepRegEx; }
			set
			{
			    if (Equals(value, _InvoiceRepRegEx)) return;
				_InvoiceRepRegEx = value;
				NotifyPropertyChanged();//m => this.InvoiceRepRegEx
			}
		}
        private ChangeTrackingCollection<InvoiceRegEx> _InvoiceRepRegEx = new ChangeTrackingCollection<InvoiceRegEx>();

        [DataMember]
        public ChangeTrackingCollection<FieldFormatRegEx> FieldFormatRegEx
		{
		    get { return _FieldFormatRegEx; }
			set
			{
			    if (Equals(value, _FieldFormatRegEx)) return;
				_FieldFormatRegEx = value;
				NotifyPropertyChanged();//m => this.FieldFormatRegEx
			}
		}
        private ChangeTrackingCollection<FieldFormatRegEx> _FieldFormatRegEx = new ChangeTrackingCollection<FieldFormatRegEx>();

        [DataMember]
        public ChangeTrackingCollection<FieldFormatRegEx> FieldFormatRepRegEx
		{
		    get { return _FieldFormatRepRegEx; }
			set
			{
			    if (Equals(value, _FieldFormatRepRegEx)) return;
				_FieldFormatRepRegEx = value;
				NotifyPropertyChanged();//m => this.FieldFormatRepRegEx
			}
		}
        private ChangeTrackingCollection<FieldFormatRegEx> _FieldFormatRepRegEx = new ChangeTrackingCollection<FieldFormatRegEx>();

        [DataMember]
        public ChangeTrackingCollection<InvoiceIdentificatonRegEx> InvoiceIdentificatonRegEx
		{
		    get { return _InvoiceIdentificatonRegEx; }
			set
			{
			    if (Equals(value, _InvoiceIdentificatonRegEx)) return;
				_InvoiceIdentificatonRegEx = value;
				NotifyPropertyChanged();//m => this.InvoiceIdentificatonRegEx
			}
		}
        private ChangeTrackingCollection<InvoiceIdentificatonRegEx> _InvoiceIdentificatonRegEx = new ChangeTrackingCollection<InvoiceIdentificatonRegEx>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<RegularExpressions>.Equals(RegularExpressions other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class Parts : BaseEntity<Parts>, ITrackable, IEquatable<Parts>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int TemplateId
		{ 
		    get { return _TemplateId; }
			set
			{
			    if (value == _TemplateId) return;
				_TemplateId = value;
				NotifyPropertyChanged();//m => this.TemplateId
			}
		}
        private int _TemplateId;

        [DataMember]
        public int PartTypeId
		{ 
		    get { return _PartTypeId; }
			set
			{
			    if (value == _PartTypeId) return;
				_PartTypeId = value;
				NotifyPropertyChanged();//m => this.PartTypeId
			}
		}
        private int _PartTypeId;

       
        [DataMember]
        public ChangeTrackingCollection<End> End
		{
		    get { return _End; }
			set
			{
			    if (Equals(value, _End)) return;
				_End = value;
				NotifyPropertyChanged();//m => this.End
			}
		}
        private ChangeTrackingCollection<End> _End = new ChangeTrackingCollection<End>();

        [DataMember]
        public Invoices Invoices
		{
		    get { return _Invoices; }
			set
			{
			    if (value == _Invoices) return;
				_Invoices = value;
                InvoicesChangeTracker = _Invoices == null ? null
                    : new ChangeTrackingCollection<Invoices> { _Invoices };
				NotifyPropertyChanged();//m => this.Invoices
			}
		}
        private Invoices _Invoices;
        private ChangeTrackingCollection<Invoices> InvoicesChangeTracker { get; set; }

        [DataMember]
        public PartTypes PartTypes
		{
		    get { return _PartTypes; }
			set
			{
			    if (value == _PartTypes) return;
				_PartTypes = value;
                PartTypesChangeTracker = _PartTypes == null ? null
                    : new ChangeTrackingCollection<PartTypes> { _PartTypes };
				NotifyPropertyChanged();//m => this.PartTypes
			}
		}
        private PartTypes _PartTypes;
        private ChangeTrackingCollection<PartTypes> PartTypesChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<Start> Start
		{
		    get { return _Start; }
			set
			{
			    if (Equals(value, _Start)) return;
				_Start = value;
				NotifyPropertyChanged();//m => this.Start
			}
		}
        private ChangeTrackingCollection<Start> _Start = new ChangeTrackingCollection<Start>();

        [DataMember]
        public ChangeTrackingCollection<Lines> Lines
		{
		    get { return _Lines; }
			set
			{
			    if (Equals(value, _Lines)) return;
				_Lines = value;
				NotifyPropertyChanged();//m => this.Lines
			}
		}
        private ChangeTrackingCollection<Lines> _Lines = new ChangeTrackingCollection<Lines>();

        [DataMember]
        public RecuringPart RecuringPart
		{
		    get { return _RecuringPart; }
			set
			{
			    if (value == _RecuringPart) return;
				_RecuringPart = value;
                RecuringPartChangeTracker = _RecuringPart == null ? null
                    : new ChangeTrackingCollection<RecuringPart> { _RecuringPart };
				NotifyPropertyChanged();//m => this.RecuringPart
			}
		}
        private RecuringPart _RecuringPart;
        private ChangeTrackingCollection<RecuringPart> RecuringPartChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<ChildParts> ChildParts
		{
		    get { return _ChildParts; }
			set
			{
			    if (Equals(value, _ChildParts)) return;
				_ChildParts = value;
				NotifyPropertyChanged();//m => this.ChildParts
			}
		}
        private ChangeTrackingCollection<ChildParts> _ChildParts = new ChangeTrackingCollection<ChildParts>();

        [DataMember]
        public ChangeTrackingCollection<ChildParts> ParentParts
		{
		    get { return _ParentParts; }
			set
			{
			    if (Equals(value, _ParentParts)) return;
				_ParentParts = value;
				NotifyPropertyChanged();//m => this.ParentParts
			}
		}
        private ChangeTrackingCollection<ChildParts> _ParentParts = new ChangeTrackingCollection<ChildParts>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<Parts>.Equals(Parts other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




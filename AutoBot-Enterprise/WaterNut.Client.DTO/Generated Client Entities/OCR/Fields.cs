// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class Fields : BaseEntity<Fields>, ITrackable, IEquatable<Fields>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int LineId
		{ 
		    get { return _LineId; }
			set
			{
			    if (value == _LineId) return;
				_LineId = value;
				NotifyPropertyChanged();//m => this.LineId
			}
		}
        private int _LineId;

        [DataMember]
        public string Key
		{ 
		    get { return _Key; }
			set
			{
			    if (value == _Key) return;
				_Key = value;
				NotifyPropertyChanged();//m => this.Key
			}
		}
        private string _Key;

        [DataMember]
        public string Field
		{ 
		    get { return _Field; }
			set
			{
			    if (value == _Field) return;
				_Field = value;
				NotifyPropertyChanged();//m => this.Field
			}
		}
        private string _Field;

        [DataMember]
        public string EntityType
		{ 
		    get { return _EntityType; }
			set
			{
			    if (value == _EntityType) return;
				_EntityType = value;
				NotifyPropertyChanged();//m => this.EntityType
			}
		}
        private string _EntityType;

        [DataMember]
        public bool IsRequired
		{ 
		    get { return _IsRequired; }
			set
			{
			    if (value == _IsRequired) return;
				_IsRequired = value;
				NotifyPropertyChanged();//m => this.IsRequired
			}
		}
        private bool _IsRequired;

        [DataMember]
        public string DataType
		{ 
		    get { return _DataType; }
			set
			{
			    if (value == _DataType) return;
				_DataType = value;
				NotifyPropertyChanged();//m => this.DataType
			}
		}
        private string _DataType;

        [DataMember]
        public Nullable<int> ParentId
		{ 
		    get { return _ParentId; }
			set
			{
			    if (value == _ParentId) return;
				_ParentId = value;
				NotifyPropertyChanged();//m => this.ParentId
			}
		}
        private Nullable<int> _ParentId;

        [DataMember]
        public Nullable<bool> AppendValues
		{ 
		    get { return _AppendValues; }
			set
			{
			    if (value == _AppendValues) return;
				_AppendValues = value;
				NotifyPropertyChanged();//m => this.AppendValues
			}
		}
        private Nullable<bool> _AppendValues;

       
        [DataMember]
        public ChangeTrackingCollection<OCR_FailedFields> FailedFields
		{
		    get { return _FailedFields; }
			set
			{
			    if (Equals(value, _FailedFields)) return;
				_FailedFields = value;
				NotifyPropertyChanged();//m => this.FailedFields
			}
		}
        private ChangeTrackingCollection<OCR_FailedFields> _FailedFields = new ChangeTrackingCollection<OCR_FailedFields>();

        [DataMember]
        public ChangeTrackingCollection<FieldFormatRegEx> FormatRegEx
		{
		    get { return _FormatRegEx; }
			set
			{
			    if (Equals(value, _FormatRegEx)) return;
				_FormatRegEx = value;
				NotifyPropertyChanged();//m => this.FormatRegEx
			}
		}
        private ChangeTrackingCollection<FieldFormatRegEx> _FormatRegEx = new ChangeTrackingCollection<FieldFormatRegEx>();

        [DataMember]
        public ChangeTrackingCollection<Fields> ChildFields
		{
		    get { return _ChildFields; }
			set
			{
			    if (Equals(value, _ChildFields)) return;
				_ChildFields = value;
				NotifyPropertyChanged();//m => this.ChildFields
			}
		}
        private ChangeTrackingCollection<Fields> _ChildFields = new ChangeTrackingCollection<Fields>();

        [DataMember]
        public Fields ParentField
		{
		    get { return _ParentField; }
			set
			{
			    if (value == _ParentField) return;
				_ParentField = value;
                ParentFieldChangeTracker = _ParentField == null ? null
                    : new ChangeTrackingCollection<Fields> { _ParentField };
				NotifyPropertyChanged();//m => this.ParentField
			}
		}
        private Fields _ParentField;
        private ChangeTrackingCollection<Fields> ParentFieldChangeTracker { get; set; }

        [DataMember]
        public Lines Lines
		{
		    get { return _Lines; }
			set
			{
			    if (value == _Lines) return;
				_Lines = value;
                LinesChangeTracker = _Lines == null ? null
                    : new ChangeTrackingCollection<Lines> { _Lines };
				NotifyPropertyChanged();//m => this.Lines
			}
		}
        private Lines _Lines;
        private ChangeTrackingCollection<Lines> LinesChangeTracker { get; set; }

        [DataMember]
        public OCR_FieldValue FieldValue
		{
		    get { return _FieldValue; }
			set
			{
			    if (value == _FieldValue) return;
				_FieldValue = value;
                FieldValueChangeTracker = _FieldValue == null ? null
                    : new ChangeTrackingCollection<OCR_FieldValue> { _FieldValue };
				NotifyPropertyChanged();//m => this.FieldValue
			}
		}
        private OCR_FieldValue _FieldValue;
        private ChangeTrackingCollection<OCR_FieldValue> FieldValueChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<Fields>.Equals(Fields other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




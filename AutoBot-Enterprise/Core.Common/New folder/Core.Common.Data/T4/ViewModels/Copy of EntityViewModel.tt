<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#@ import namespace="Core.Common.Data.Contracts" #>
<#@ assembly name="C:\Prism Projects\Quick Inventory Manager\Core.Common.Data\bin\Debug\Core.Common.Data.dll" #>

<#+ 
  // Note: You can call this method from the outside of the template,
  //       please add parameters as needed.	
  // To include this templaate just drag this file on another editor
  // then call this.Template_NewTemplate1_Render()
  void CreateEntityModel(string contextName, EntityType mainEntity, string mainEntitySet, EntityContainer container, EntityFrameworkTemplateFileManager fileManager )
    {	
       
       CodeGenerationTools code = new CodeGenerationTools(this);
       
	   fileManager.StartNewFile(contextName + '.' + code.Escape(mainEntity) + "ViewModel.cs");
#>
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using Core.Common.Data;
using <#=contextName #>;


namespace InvManager.<#=contextName #>.ViewModels
{
	public partial class <#=code.Escape(mainEntity)#>ViewModel : BaseViewModel
	{

<#+     
        var mlst= mainEntity.NavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many);
       
#>  

        public <#=code.Escape(mainEntity)#>ViewModel()
        {
            RegisterToReceiveMessages<<#=code.Escape(mainEntity)#>>(MessageToken.Current<#=code.Escape(mainEntity)#>Changed, OnCurrent<#=code.Escape(mainEntity)#>Changed);
            RegisterToReceiveMessages(MessageToken.<#=code.Escape(mainEntitySet)#>Changed, On<#=code.Escape(mainEntitySet)#>Changed);
<#+ 
        if(mlst.Any() == true)
        {
            foreach (string mEntity in mlst.Select(x=> ((EntityType)x.ToEndMember.GetEntityType()).Name).Distinct())
            {
//string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
if(mainEntity.Name != mEntity)
{
 #> 
            RegisterToReceiveMessages<<#=mEntity#>>(MessageToken.Current<#=mEntity#>Changed, OnCurrent<#=mEntity#>Changed);
<#+    
}
            }
        }
 #>
            OnCreated();

        }

        partial void OnCreated();


        private void OnCurrent<#=code.Escape(mainEntity)#>Changed(object sender, NotificationEventArgs<<#=code.Escape(mainEntity)#>> e)
        {

            NotifyPropertyChanged(x => this.Current<#=code.Escape(mainEntity)#>);
        }   

        private void On<#=mainEntitySet#>Changed(object sender, NotificationEventArgs e)
        {

            NotifyPropertyChanged(x => this.<#=mainEntitySet#>);
        }   

<#+ 
        if(mlst.Any() == true)
        {


            foreach (string mEntity in mlst.Select(x=> ((EntityType)x.ToEndMember.GetEntityType()).Name).Distinct())
            {
//string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
if(mainEntity.Name != mEntity)
{
 #> 
            private void OnCurrent<#=    mEntity#>Changed(object sender, NotificationEventArgs<<#=    mEntity#>> e)
{

    NotifyPropertyChanged(x => this.Current<#=    mEntity#>);
} 
<#+    
}
            }
        }
 #>

             
<#+     
        var nplst= mainEntity.NavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many);
       
#>           



        # region "New Line Properties"

<#+ 
        if(nplst.Any() == true)
        {
            foreach (NavigationProperty navProperty in nplst.Where(x=> x.Name.StartsWith("Lkp")))
            {
var et = ((EntityType)navProperty.ToEndMember.GetEntityType()).BaseType == null?((EntityType)navProperty.ToEndMember.GetEntityType()):((EntityType)navProperty.ToEndMember.GetEntityType()).BaseType;
 #>     
        string _new<#=((EntityType)navProperty.ToEndMember.GetEntityType()).Name#>;
        public string New<#=((EntityType)navProperty.ToEndMember.GetEntityType()).Name#>
        {
            get 
            {
return _new<#=((EntityType)navProperty.ToEndMember.GetEntityType()).Name#>;
            }
            set
            {
               if (string.IsNullOrEmpty(value)) return;
               if (<#=container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType == et).FirstOrDefault().Name#>.FirstOrDefault(x => x.EntityName == value) != null)
{
    _new<#=((EntityType)navProperty.ToEndMember.GetEntityType()).Name#> = value;
    return;
}
if (!string.IsNullOrEmpty(value))
{
  var c = new <#=((EntityType)navProperty.ToEndMember.GetEntityType()).Name#>().CreateEntityFromString(value);
  c.<#=mainEntitySet#>.Add(Current<#=code.Escape(mainEntity)#>);
  Current<#=code.Escape(mainEntity)#>.<#=((EntityType)navProperty.ToEndMember.GetEntityType()).Name#> = c;
  _new<#=((EntityType)navProperty.ToEndMember.GetEntityType()).Name#> = value;
}
            }
        }

        
               
<#+    
            }
        }
 #>
        
#endregion



        #region "Crud Ops"
<#+
         if(mainEntity.MetadataProperties.FirstOrDefault(x => x.Name.Contains("ReadOnlyProperty")) == null)
            {
#>
        public void New<#=code.Escape(mainEntity)#>()
        {
            Current<#=code.Escape(mainEntity)#> = new <#=code.Escape(mainEntity)#>(){<#+
if(mlst.Any() == true)
        {

            var z = 0;
            foreach (string mEntity in mlst.Select(x=> ((EntityType)x.ToEndMember.GetEntityType()).Name).Distinct())
            {

//string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
if(mainEntity.Name != mEntity)
{
z += 1;
 #>
<#=z > 1?", ":"" #> 
<#=mEntity#> = Current<#=mEntity#><#+   
}
            }
        }
 #>};
             <#=mainEntitySet#>.Add(Current<#=code.Escape(mainEntity)#>);
           // SendMessage(MessageToken.<#=mainEntitySet#>Changed, new NotificationEventArgs());

        }

        public void Delete<#=code.Escape(mainEntity)#>()
        {
             if (Current<#=code.Escape(mainEntity)#> == null <#+
if(mlst.Any() == true)
        {

            var z = 0;
            foreach (string mEntity in mlst.Select(x=> ((EntityType)x.ToEndMember.GetEntityType()).Name).Distinct())
            {
z += 1;
//string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
if(mainEntity.Name != mEntity)
{
 #>
<#=z > 0?"| ":"" #>Current<#=mEntity#> == null<#+    
}
            }
        }
 #>) return;
            Current<#=code.Escape(mainEntity)#>.MarkAsDeleted();
            using (<#=contextName#>Repository ctx = new <#=contextName#>Repository())
            {
ctx.SaveChanges(Current<#=code.Escape(mainEntity)#>);
<#+ 
            if(mlst.Any() == true)
            {


foreach (string mEntity in mlst.Select(x=> ((EntityType)x.ToEndMember.GetEntityType()).Name).Distinct())
{
    //string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
    if(mainEntity.Name != mEntity)
    {
 #> 
ctx.SaveChanges<<#=mEntity#>>(Current<#=        mEntity#>);
NotifyPropertyChanged(x => this.Current<#=        mEntity#>);
               
<#+    
    }
}
            }
 #>
              
            }
            Current<#=code.Escape(mainEntity)#> = null;
            SendMessage(MessageToken.<#=mainEntitySet#>Changed, new NotificationEventArgs());
            
        }

        public void Save<#=code.Escape(mainEntity)#>()
        {
            if (Current<#=code.Escape(mainEntity)#> == null <#+
            if(mlst.Any() == true)
            {

var z = 0;
foreach (string mEntity in mlst.Select(x=> ((EntityType)x.ToEndMember.GetEntityType()).Name).Distinct())
{
    z += 1;
    //string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
    if(mainEntity.Name != mEntity)
    {
 #>
<#=        z > 0?"| ":"" #>Current<#=        mEntity#> == null<#+    
    }
}
            }
 #>) return;
            using (<#=contextName#>Repository ctx = new <#=contextName#>Repository())
            {
ctx.SaveChanges<<#=code.Escape((mainEntity.BaseType == null?mainEntity:mainEntity.BaseType))#>>(Current<#= code.Escape(mainEntity)#>);
<#+ 
            if(mlst.Any() == true)
            {


foreach (var mEntity in mlst.Select(x=> ((EntityType)x.ToEndMember.GetEntityType())).Distinct())
{
    //string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
    if(mainEntity.Name != mEntity.Name)
    {
 #> 
ctx.SaveChanges<<#=code.Escape((mEntity.BaseType == null?mEntity:mEntity.BaseType))#>>(Current<#=mEntity.Name#>);
NotifyPropertyChanged(x => this.Current<#=mEntity.Name#>);
               
<#+    
    }
}
            }
 #>


            }
            SendMessage(MessageToken.<#=mainEntitySet#>Changed, new NotificationEventArgs());
            NotifyPropertyChanged(x => this.<#=mainEntitySet#>);
        }
<#+        
        } 
#>      
        #endregion

    }
}
		
<#+
      fileManager.EndBlock(); 
	}	
#>
<#+
// <copyright file="Template1.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

    public class ClientEntityTPL : CSharpTemplate
    {
        public EntityType entity; 
        public CodeGenerationTools code;
        public MetadataLoader loader;
        public CodeRegion region;
        public MetadataTools ef;

        public string inputFile;
        public MetadataWorkspace metadataWorkspace;
        public bool allMetadataLoaded;
        public EdmItemCollection ItemCollection;
        public OriginalValueMembers originalValueMembers;
        public string namespaceName;
        public EntityContainer container;

        public MetadataWorkspace COREmetadataWorkspace;
        public bool COREallMetadataLoaded;
        public EdmItemCollection COREItemCollection;
        public EntityContainer COREcontainer;

 
       
        
        

        public override string TransformText()
        {
            base.TransformText();
            var collectionNavigations = entity.NavigationProperties.Where(
                np => np.DeclaringType == entity
                && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
            string dto = code.Escape(entity).ToLower() + "Dto";
#>

using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using InvManager.Client.Entities;
using <#=container.Name#>.Client.DTO;
using TrackableEntities.Client;

namespace <#=                code.EscapeNamespace(namespaceName)#>.Client.Entities
{
   <#+ //[JsonObject(IsReference = true)]
    //[DataContract(IsReference = true)]#>
    public partial class <#=entity.Name #>: BaseEntity<<#=entity.Name #>>
    {
        <#= code.Escape(entity) #>DTO <#=dto#>;
        public <#= code.Escape(entity) #>(<#= code.Escape(entity) #>DTO dto )
        {
             <#=dto#> = dto;
             _changeTracker = new ChangeTrackingCollection<<#=entity.Name #>DTO>(<#=dto#>);
        }

        public <#= code.Escape(entity) #>DTO DTO
        {
            get
            {
             return <#=dto#>;
            }
            set
            {
                <#=dto#> = value;
            }
        }
<#+

            // Add a ctor to initialize any collections
             if  (collectionNavigations.Any())
            {
#>
        


<#+
            }
        
            foreach (var property in entity.Properties)
            {
                var typeUsage = code.Escape(property.TypeUsage);

                // Fix-up spatial types for EF6
                if (//efHost.EntityFrameworkVersion >= new Version(6, 0) && 
                    typeUsage.StartsWith("System.Data.Spatial."))
                {
                    typeUsage = typeUsage.Replace(
                        "System.Data.Spatial.",
                        "System.Data.Entity.Spatial.");
                }
                   #>
       
        <#=Accessibility.ForProperty(property) #> <#=typeUsage #> <#=code.Escape(property) #>
		{ 
		    get { return this.<#=dto#>.<#=code.Escape(property)#>; }
			set
			{
			    if (value == this.<#=dto#>.<#=code.Escape(property) #>) return;
				this.<#=dto#>.<#=                code.Escape(property) #> = value;
                this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("<#=code.Escape(property) #>");
			}
		}
     

<#+
            }

            foreach (var navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
            {
                if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
                {
#>
       
        public ObservableCollection<<#=code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#=code.Escape(navProperty) #>
		{
            
		    get { return new ObservableCollection<<#=code.Escape(navProperty.ToEndMember.GetEntityType()) #>>(this.<#=dto#>.<#=code.Escape(navProperty) #>.Select(x => new <#=code.Escape(navProperty.ToEndMember.GetEntityType()) #>(x))); }
			set
			{
			    if (Equals(value, this.<#=dto#>.<#=code.Escape(navProperty) #>)) return;
                this.<#=dto#>.<#=code.Escape(navProperty) #> = new ChangeTrackingCollection<<#=code.Escape(navProperty.ToEndMember.GetEntityType()) #>DTO>(value.Select(x => x.DTO));
				this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
               
				NotifyPropertyChanged("<#=code.Escape(navProperty) #>");
			}
		}
        
        

<#+
                }
                else
                {
#>
        
        public <#=code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#=code.Escape(navProperty) #>
		{
		    get { return _<#=code.Escape(navProperty) #>; }
			set
			{
			    if (value == _<#=code.Escape(navProperty) #>) return;
				_<#=code.Escape(navProperty) #> = value;
                <#=dto#>.<#=code.Escape(navProperty) #> = value.DTO;
				NotifyPropertyChanged("<#=code.Escape(navProperty) #>");
			}
		}
        private <#=code.Escape(navProperty.ToEndMember.GetEntityType()) #> _<#=code.Escape(navProperty) #>;

<#+
                }
            }
#>

        ChangeTrackingCollection<<#=entity.Name#>DTO> _changeTracker;    
        public ChangeTrackingCollection<<#=entity.Name#>DTO> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

    }
}


<#+
            return this.GenerationEnvironment.ToString();
        }
        
    }

#>

<#+
// <copyright file="Template1.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

    public class ClientEntityRepositoryTPL : CSharpTemplate
    {
        public EntityType entity; 
        public EntitySet entitySet;
        public EntityContainer container;
        public CodeGenerationTools code;
        string eSet;

        public override string TransformText()
        {
            base.TransformText();
           if(entitySet != null)
            {
                eSet = entitySet.Name;
            }
            else
            {
                eSet = "All" + entity.Name;
            }

       
#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using InvManager.Client.Services;
using <#=container.Name #>.Client.Entities;
using System.Linq;
using Core.Common;

namespace InvManager.Client.Repositories 
{
   
    public partial class <#=entity.Name#>Repository : BaseRepository<<#=entity.Name#>Repository>
    {
        
        public IQueryable<<#=entity.Name#>> <#=eSet#>()
        {
            using (<#=code.GetTypeName(entity)#>Client t = ClientObjectBase.ClientFactory.CreateClient<<#=code.GetTypeName(entity)#>Client>())
                {
                    return t.Get<#=eSet#>().Result.Select(x => new <#=code.GetTypeName(entity)#>(x)).AsQueryable();
                }
        }

        public <#=entity.Name#> Get<#=entity.Name#>(string id)
        {
             using (<#=code.GetTypeName(entity)#>Client t = ClientObjectBase.ClientFactory.CreateClient<<#=code.GetTypeName(entity)#>Client>())
                {
                    return new <#=entity.Name#>(t.Get<#=entity.Name#>(id).Result);                    
                }
        }

        public <#=entity.Name#> Update<#=entity.Name#>(<#=entity.Name#> entity)
        {
            var entitychanges = entity.ChangeTracker.GetChanges().FirstOrDefault();
            if (entitychanges != null)
            {
                using (<#=code.GetTypeName(entity)#>Client t = ClientObjectBase.ClientFactory.CreateClient<<#=code.GetTypeName(entity)#>Client>())
                {
<#+
            foreach( var np in entity.NavigationProperties.Where(
                np => np.DeclaringType == entity
                && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One))
            {
 #>          
                   if (entitychanges.<#=np.Name#>.TrackingState == TrackableEntities.TrackingState.Unchanged) entitychanges.<#=np.Name#> = null;
<#+
            }
 #>       
                   var updatedEntity = t.Update<#=entity.Name#>(entitychanges).Result;

                    //var dto = entity.DTO;
                    //entity.ChangeTracker.MergeChanges(ref dto, updatedEntity);
                    //return new <#=entity.Name#>(entity.DTO);

                     entity.DTO.TrackingState = TrackableEntities.TrackingState.Unchanged;
                     return entity; 
                }
            }
            else
            {
                return entity;
            }

        }

        public <#=entity.Name#> Create<#=entity.Name#>(<#=entity.Name#> entity)
        {
            using (<#=code.GetTypeName(entity)#>Client t = ClientObjectBase.ClientFactory.CreateClient<<#=code.GetTypeName(entity)#>Client>())
                {
                    return new <#=entity.Name#>(t.Create<#=entity.Name#>(entity.DTO).Result);
                }
        }

        public bool Delete<#=entity.Name#>(string id)
        {
             using (<#=code.GetTypeName(entity)#>Client t = ClientObjectBase.ClientFactory.CreateClient<<#=code.GetTypeName(entity)#>Client>())
                {
                    return t.Delete<#=entity.Name#>(id).Result;
                }
           
        }
        
    }
}

<#+
            return this.GenerationEnvironment.ToString();
        }
        
    }

#>

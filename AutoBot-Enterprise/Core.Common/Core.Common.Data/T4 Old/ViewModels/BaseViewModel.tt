<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#+ 
  // Note: You can call this method from the outside of the template,
  //       please add parameters as needed.	
  // To include this templaate just drag this file on another editor
  // then call this.Template_NewTemplate1_Render()

    public class BaseViewTPL : CSharpTemplate
    {
        public string contextName;
        public string projectName;
        public EntityContainer container; 
        public List<EntityType> entityCollection; 
        public EntityContainer COREcontainer;
        public List<EntityType> COREentityCollection;
        
        
        public override string TransformText()
        {
            base.TransformText();

            CodeGenerationTools code = new CodeGenerationTools(this);
            MetadataTools ef = new MetadataTools(this);
       
	   
#>
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using <#=contextName #>.Client.Entities;
using <#=contextName #>.Client.Repositories;
using <#=projectName #>.Client.Repositories;



namespace <#=projectName #>.<#=            contextName#>.ViewModels
{
	 public partial class BaseViewModel : <#=            (container.Name == COREcontainer.Name?"ViewModelBase<BaseViewModel>":"CoreEntities.ViewModels.BaseViewModel")#>
	{
       
        
        class <#=            contextName#>OnCreated: BaseViewModel
        {
           // Load Repository
                public <#=            contextName#>OnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
<#+
            foreach (EntitySetBase eSet in container.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet && es.ElementType.Abstract != true ))
            {
                        
 #>                      
                         RegisterToReceiveMessages(MessageToken.<#=                eSet.Name#>Changed, On<#=                eSet.Name#>Changed);
<#+
            }
 #>
<#+
            foreach (EntityType dEntity in entityCollection.Where(x => x.BaseType != null))
            {
#>
                        RegisterToReceiveMessages(MessageToken.<#=                dEntity.Name#>Changed, On<#=                dEntity.Name#>Changed);
<#+
            }
#>    

<#+
            foreach (EntityType entity in entityCollection)
            {
                    if(entity.Abstract == true) continue; 
#>
                        RegisterToReceiveMessages<string>(MessageToken.Current<#=entity.Name#>IDChanged, OnCurrent<#=entity.Name#>IDChanged);
<#+
            }
#>       

            
<#+
            foreach (EntitySetBase eSet in container.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet  && es.ElementType.Abstract != true))
            {
                if(container.Name != COREcontainer.Name && COREcontainer.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet).FirstOrDefault(x=>x.Name == eSet.Name)!= null) continue;
 #>     
            using (<#=((EntityType)eSet.ElementType).Name#>Repository ctx = new <#=((EntityType)eSet.ElementType).Name#>Repository())
            {  
                    _<#=eSet.Name.ToLower()#> = new ObservableCollection<<#=((EntityType)eSet.ElementType).Name#>>(ctx.<#=eSet.Name#>().ToList());
            }
<#+
            }
 #>
<#+
            foreach (EntityType dEntity in entityCollection.Where(x => x.BaseType != null))
            {
                EntityType dBaseEntity = dEntity.BaseType as EntityType;
                if(container.Name != COREcontainer.Name && COREcontainer.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet).FirstOrDefault(x=>x.Name == dBaseEntity.Name)!= null) continue;
                var eSet = container.BaseEntitySets.FirstOrDefault(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet  && es.ElementType.Name == dEntity.BaseType.Name);
#>
            using (<#=dEntity.Name#>Repository ctx = new <#=dEntity.Name#>Repository())
            {        
                    _<#=dEntity.Name.ToLower()#> = new ObservableCollection<<#=dEntity.Name#>>(ctx.<#=eSet.Name#>().ToList());
            }
<#+
            }
#> 
              }
            catch (Exception ex)
            {
                throw;
            }  
            }

        }





<#+
            foreach (EntitySetBase eSet in container.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet  && es.ElementType.Abstract != true))
            {
                if(container.Name != COREcontainer.Name && COREcontainer.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet).FirstOrDefault(x=>x.Name == eSet.Name)!= null) continue;
 #>     
                        private void On<#=                eSet.Name#>Changed(object sender, NotificationEventArgs e)
                        {
                            using (<#=((EntityType)eSet.ElementType).Name#>Repository ctx = new <#=((EntityType)eSet.ElementType).Name#>Repository())
                            {
                                _<#=eSet.Name.ToLower()#> = new ObservableCollection<<#=((EntityType)eSet.ElementType).Name#>>(ctx.<#=eSet.Name#>());
                            }
                            NotifyPropertyChanged(m => <#=eSet.Name#>);
                        }
<#+
            }
 #>

<#+
            foreach (EntityType dEntity in entityCollection.Where(x => x.BaseType != null))
            {
                EntityType dBaseEntity = dEntity.BaseType as EntityType;
                if(container.Name != COREcontainer.Name && COREcontainer.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet).FirstOrDefault(x=>x.Name == dBaseEntity.Name)!= null) continue;
                var eSet = container.BaseEntitySets.FirstOrDefault(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet  && es.ElementType.Name == dEntity.BaseType.Name);
#>
                        private void On<#=dEntity.Name#>Changed(object sender, NotificationEventArgs e)
                        {
                            using (<#=dEntity.Name#>Repository ctx = new <#=dEntity.Name#>Repository())
                            {
                                _<#=dEntity.Name.ToLower()#> = new ObservableCollection<<#=dEntity.Name#>>(ctx.<#=eSet.Name#>());
                            }
                            NotifyPropertyChanged(m => <#=dEntity.Name#>);
                        }
<#+
            }
#> 


<#+
            foreach (EntityType entity in entityCollection)
            {
              
                if(entity.Abstract == true) continue;        
#>
                        private void OnCurrent<#=entity.Name#>IDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (<#=entity.Name#>Repository ctx = new <#=entity.Name#>Repository())
                            {
                                Current<#=entity.Name#> = ctx.Get<#=entity.Name#>(e.Data);;
                            }
                            NotifyPropertyChanged(m => Current<#=entity.Name#>);
                        }

                        public static string _current<#=entity.Name#>ID = "";
                        public string Current<#=entity.Name#>ID
                        {
                            get
                            {
                                return _current<#=entity.Name#>ID;
                            }
                            set
                            {
                                if (_current<#=entity.Name#>ID != value)
                                {
                                    _current<#=entity.Name#>ID = value;
                                    if (!string.IsNullOrEmpty(_current<#=entity.Name#>ID)) SendMessage(MessageToken.Current<#=entity.Name#>IDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.Current<#=entity.Name#>IDChanged, _current<#=entity.Name#>ID));
                                    NotifyPropertyChanged(x => this.Current<#=entity.Name#>ID);  
                                }
                            }
                        }
<#+
            }
#> 


<#+
            foreach (EntitySetBase eSet in container.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet  && es.ElementType.Abstract != true))
            {
                if(container.Name != COREcontainer.Name && COREcontainer.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet).FirstOrDefault(x=>x.Name == eSet.Name)!= null) continue;
 #>                     
                                public static ObservableCollection<<#=((EntityType)eSet.ElementType).Name#>> _<#=eSet.Name.ToLower()#> = new ObservableCollection<<#=((EntityType)eSet.ElementType).Name#>>();
                                public ObservableCollection<<#=                ((EntityType)eSet.ElementType).Name#>> <#=                eSet.Name#>
                                {
                                    get
                                    {
                                        return _<#=                eSet.Name.ToLower()#>;
                                    }  
                                    set
                                    {
                                        if(_<#=                eSet.Name.ToLower()#> != value)
                                        _<#=                eSet.Name.ToLower()#> = value;
                                    }           
                                }                           
<#+
            }
 #>

<#+
            foreach (EntityType dEntity in entityCollection.Where(x => x.BaseType != null))
            {
                            
                EntityType dBaseEntity = dEntity.BaseType as EntityType;
                if(container.Name != COREcontainer.Name && COREcontainer.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet).FirstOrDefault(x=>x.Name == dBaseEntity.Name)!= null) continue;
 #>                     
                                public static ObservableCollection<<#=                dEntity.Name#>> _<#=                dEntity.Name.ToLower()#>;
                                public ObservableCollection<<#=                dEntity.Name#>> <#=                dEntity.Name#>
                                {
                                    get
                                    {
                                        return _<#=                dEntity.Name.ToLower()#>;
                                    }  
                                    set
                                    {
                                        if(_<#=                dEntity.Name.ToLower()#> != value)
                                        _<#=                dEntity.Name.ToLower()#> = value;
                                    }           
                                }                           
<#+
            }
 #>

<#+
            foreach (EntityType mainEntity in entityCollection.Where(x => x.Abstract != true))
            {
                if(container.Name != COREcontainer.Name && COREentityCollection.FirstOrDefault(x=>x.Name == mainEntity.Name)!= null) continue;
 #>                     
       

        private void OnCurrent<#=                code.Escape(mainEntity)#>(object sender, SimpleMvvmToolkit.NotificationEventArgs<<#=                code.Escape(mainEntity)#>> e)
        {
            Current<#=                code.Escape(mainEntity)#> = e.Data;
            NotifyPropertyChanged(m => this.Current<#=                code.Escape(mainEntity)#>);
        }

        public static <#=                code.Escape(mainEntity)#> _current<#=                code.Escape(mainEntity)#>;
        public <#=                code.Escape(mainEntity)#> Current<#=                code.Escape(mainEntity)#>
        {
            get
            {
                return _current<#=                code.Escape(mainEntity)#>;
            }
            set
            {
                if (_current<#=code.Escape(mainEntity)#> != value)
                {
                    _current<#=code.Escape(mainEntity)#> = value;
                    SendMessage(MessageToken.Current<#=code.Escape(mainEntity)#>Changed,
                                                     new NotificationEventArgs<<#=code.Escape(mainEntity)#>>(MessageToken.Current<#=code.Escape(mainEntity)#>Changed, _current<#=code.Escape(mainEntity)#>)); 
                    NotifyPropertyChanged(x => this.Current<#=code.Escape(mainEntity)#>);    
                    // all current navigation properties = null
<#+
                    foreach (var navEntity in mainEntity.NavigationProperties.Where(np => np.DeclaringType == mainEntity && np.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many).Select(x => x.ToEndMember.GetEntityType()).Distinct() )
                        {
                           ///foreach (var fromProperty in ef.GetPrincipalProperties(navprop))
                          if(navEntity.Name != mainEntity.Name)
                               {
 #>                 Current<#=navEntity.Name #> = null;
<#+
                                 }
                             //}
                        }
 #>   
                }
            }
        }

<#+
            }
 #>

        static <#=contextName#>OnCreated new<#=contextName#>OnCreated = new <#=contextName#>OnCreated();
    }		
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }	
#>
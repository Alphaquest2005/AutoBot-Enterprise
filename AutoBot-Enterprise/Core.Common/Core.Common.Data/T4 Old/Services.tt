<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" debug="True" #>
<#@ output extension=".cs"#>
<#@ include file="EF.Utility.CS.ttinclude" once="true"#>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="C:\Prism Projects\Core.Common\Core.Common.Data\T4\Services\ServiceContractTemplate.tt" once="true"#>		
<#@ include file="C:\Prism Projects\Core.Common\Core.Common.Data\T4\Services\ServiceTemplate.tt" once="true"#>
<#@ include file="C:\Prism Projects\Core.Common\Core.Common.Data\T4\Services\ClientServiceContractTemplate.tt" once="true"#>		
<#@ include file="C:\Prism Projects\Core.Common\Core.Common.Data\T4\Services\ClientServiceTemplate.tt" once="true"#>

				
<#+ 
  // Note: You can call this method from the outside of the template,
  //       please add parameters as needed.	
  // To include this templaate just drag this file on another editor
  // then call this.Template_NewTemplate1_Render()
  void CreateServices(string projectName,string inputFile, string coreEdmx, string businessServicesProject, string clientContractsProject, string clientServicesProject)
    {	
        EntityType MainEntity = null;
        string MainEntitySet = "";
        

        //CreateSummaryListViewModel(MainEntity, MainEntitySet, fileManager);

        CodeGenerationTools code = new CodeGenerationTools(this);
        MetadataLoader loader = new MetadataLoader(this);
        CodeRegion region = new CodeRegion(this, 1);
        MetadataTools ef = new MetadataTools(this);

       
        MetadataWorkspace metadataWorkspace = null;
        bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
        EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);
        EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
     
        MetadataWorkspace COREmetadataWorkspace = null;
        bool COREallMetadataLoaded =loader.TryLoadAllMetadata(coreEdmx, out COREmetadataWorkspace);
        EdmItemCollection COREItemCollection = (EdmItemCollection)COREmetadataWorkspace.GetItemCollection(DataSpace.CSpace);
        EntityContainer COREcontainer = COREItemCollection.GetItems<EntityContainer>().FirstOrDefault();

        string namespaceName = code.VsNamespaceSuggestion();

         MainEntity = code.GetItemsToGenerate<EntityType>(ItemCollection).Where(x=>x.MetadataProperties.Where(z => z.Name.Contains("MainEntityProperty") && z.Value.ToString().Contains("True")).ToList().Any() == true).FirstOrDefault();
         

        if(MainEntity != null)
        {
            MainEntitySet = container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType == (MainEntity.BaseType == null?MainEntity:MainEntity.BaseType)).FirstOrDefault().Name;
        }
           
       

        foreach (EntityType entity in code.GetItemsToGenerate<EntityType>(ItemCollection).OrderBy(e => e.Name))
        {
            if(container.Name != COREcontainer.Name && code.GetItemsToGenerate<EntityType>(COREItemCollection).FirstOrDefault(x=> x.Name == entity.Name)!=null)continue;
            
            if(entity.Abstract) continue;

            ServiceContractTPL sc = new ServiceContractTPL();
            sc.container = container;
            sc.projectName = projectName;
            sc.entity = entity;
            sc.Output.Project = businessServicesProject;
            sc.Output.File = @"Contracts\" + code.Escape(container) + @"\I" + entity.Name + "Service.cs";
            sc.Render();

            ServiceTPL s = new ServiceTPL();
            s.container = container;
            s.projectName = projectName;
            s.entity = entity;
            s.Output.Project = businessServicesProject;
            s.Output.File = @"Services\" + code.Escape(container) + @"\" + entity.Name + "Service.cs";
            s.Render();


            ClientServiceContractTPL csc = new ClientServiceContractTPL();
            csc.container = container;
            csc.projectName = projectName;
            csc.entity = entity;
            csc.Output.Project = clientContractsProject;
            csc.Output.File =  code.Escape(container) + @"\I" + entity.Name + "Service.cs";
            csc.Render();
          
            ClientServiceTPL cp = new ClientServiceTPL();
            cp.container = container;
            cp.projectName = projectName;
            cp.entity = entity;
            cp.Output.Project = clientServicesProject;
            cp.Output.File = code.Escape(container) + @"\" + entity.Name + "Client.cs";
            cp.Render();
            

            
           
        }

      
        
#>
<#+
	}	
#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ include file="EF.Utility.CS.ttinclude" once="true"#>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="C:\Prism Projects\Core.Common\Core.Common.Data\T4\Models\Business\IIdentifiableEntityTemplate.tt" once="true"#>	
<#@ include file="C:\Prism Projects\Core.Common\Core.Common.Data\T4\Models\Business\MyNavPropTemplate.tt" once="true"#>	
<#@ include file="C:\Prism Projects\Core.Common\Core.Common.Data\T4\Models\Business\EntityConstructorTemplate.tt" once="true"#>	
<#@ include file="C:\Prism Projects\Core.Common\Core.Common.Data\T4\Models\Business\IEntityWithKeyTemplate.tt" once="true"#>


<#+ 
  // Note: You can call this method from the outside of the template,
  //       please add parameters as needed.	
  // To include this templaate just drag this file on another editor
  // then call this.Template_NewTemplate1_Render()
  void CreateBusinessModels(string inputFile, string coreEdmx, string outputProject)
    {	
        //string MainEntity = "Employee";
        //string MainEntitySet = "Employees";
        

        //CreateSummaryListViewModel(MainEntity, MainEntitySet, fileManager);

        CodeGenerationTools code = new CodeGenerationTools(this);
        MetadataLoader loader = new MetadataLoader(this);
        CodeRegion region = new CodeRegion(this, 1);
        MetadataTools ef = new MetadataTools(this);

       
        MetadataWorkspace metadataWorkspace = null;
        bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
        EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);
        EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
     
        MetadataWorkspace COREmetadataWorkspace = null;
        bool COREallMetadataLoaded =loader.TryLoadAllMetadata(coreEdmx, out COREmetadataWorkspace);
        EdmItemCollection COREItemCollection = (EdmItemCollection)COREmetadataWorkspace.GetItemCollection(DataSpace.CSpace);
        EntityContainer COREcontainer = COREItemCollection.GetItems<EntityContainer>().FirstOrDefault();

        string namespaceName = code.VsNamespaceSuggestion();

           

        foreach (EntityType entity in code.GetItemsToGenerate<EntityType>(ItemCollection).OrderBy(e => e.Name))
        {
            
            IIdentifibleEntityTPL sv = new IIdentifibleEntityTPL();           
            sv.mainEntity = entity;
            sv.mainEntitySet = container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType == (entity.BaseType == null?entity:entity.BaseType)).FirstOrDefault().Name;
            sv.contextName = container.Name;
            sv.container = container;
            sv.COREcontainer = COREcontainer;
            sv.entityCollection = code.GetItemsToGenerate<EntityType>(ItemCollection).OrderBy(e => e.Name).ToList();
            sv.COREentityCollection = code.GetItemsToGenerate<EntityType>(COREItemCollection).OrderBy(e => e.Name).ToList();
            sv.ef = ef;
            sv.Output.Project = outputProject;
            sv.Output.File = @"Generated IIdentitfiableEntity Models\"+ container.Name + @"\"  + entity.Name + ".cs";
            sv.Render();

            EntityConstructorTPL mc = new EntityConstructorTPL();           
            mc.mainEntity = entity;
            mc.contextName = container.Name;
            mc.Output.Project = outputProject;
            mc.Output.File = @"Generated Constructors Models\"+ container.Name + @"\"  + entity.Name + ".cs";
            mc.Render();

            
            IEntitiyWithKeyTPL nv = new IEntitiyWithKeyTPL();  
            nv.mainEntity = entity;
            nv.mainEntitySet = container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType == (entity.BaseType == null?entity:entity.BaseType)).FirstOrDefault().Name;
            nv.contextName = container.Name;
            nv.container = container;
            nv.COREcontainer = COREcontainer;
            nv.entityCollection = code.GetItemsToGenerate<EntityType>(ItemCollection).OrderBy(e => e.Name).ToList();
            nv.COREentityCollection = code.GetItemsToGenerate<EntityType>(COREItemCollection).OrderBy(e => e.Name).ToList();
            nv.ef = ef;
            nv.Output.Project = outputProject;
            nv.Output.File = @"Generated IEntitiyWithKey Models\" + container.Name + @"\" + entity.Name + ".cs";
            nv.Render();

            IMyNavPropTPL np = new IMyNavPropTPL();  
            np.mainEntity = entity;
            np.contextName = container.Name;
            np.container = container;
            np.entityCollection = code.GetItemsToGenerate<EntityType>(ItemCollection).OrderBy(e => e.Name).ToList();
            np.COREcontainer = COREcontainer;
            np.COREentityCollection = code.GetItemsToGenerate<EntityType>(COREItemCollection).OrderBy(e => e.Name).ToList();
            np.ef = ef;
            np.code = code;
            np.Output.Project = outputProject;
            np.Output.File = @"Generated MyNavProp Models\" + container.Name + @"\" + entity.Name + ".cs";
            np.Render();

        }

  }            
#>

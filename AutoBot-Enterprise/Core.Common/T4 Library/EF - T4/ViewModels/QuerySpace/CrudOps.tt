
<#@ import namespace="Core.Common.Data.Contracts" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ assembly name="C:\Prism\Core.Common\Core.Common.Data\bin\Debug\Core.Common.Data.dll" #>
<#@ assembly name="System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>

<#+ 
  // Note: You can call this method from the outside of the template,
  //       please add parameters as needed.	
  // To include this templaate just drag this file on another editor
  // then call this.Template_NewTemplate1_Render()

        public class CrudOpsTPL : CSharpTemplate
    {
        public string conTextName;
        public string projectName;
        public EntityType mainEntity; 
        public string mainEntitySet; 
        public EntityContainer container;
        public EntityContainer COREcontainer;
        public List<EntityType> entityCollection;
		public List<EntityType> COREentityCollection;
        public MetadataTools ef; 
        
        public override string TransformText()
        {
            base.TransformText();

       
       CodeGenerationTools code = new CodeGenerationTools(this);
       
	   
#>
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using TrackableEntities;
using System.Threading.Tasks;
using System;
using MRManager.QuerySpace.<#=conTextName #>;
using <#=conTextName #>.Client.Entities;
using <#=conTextName #>.Client.Repositories;




namespace <#=projectName #>.QuerySpace.<#=conTextName #>.ViewModels
{
	public partial class <#=code.Escape(mainEntity)#>ViewModel_AutoGen
	{

<#+ if (true)
{ #>             
        #region "Crud Ops"
<#+

    var mlst = mainEntity.NavigationProperties;
    //var mlst= mainEntity.NavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many);
    var nplst = GetNavigationPropertyList(mainEntity);
        

    if (mainEntity.MetadataProperties.FirstOrDefault(x => x.Name.Contains("ReadOnlyProperty")) == null)
    {
#>
         public async void New<#=code.Escape(mainEntity) #>()
	    {
	        await New<#=code.Escape(mainEntity) #>Async().ConfigureAwait(false);
	    }
        public async Task New<#=code.Escape(mainEntity) #>Async()
        {
            <#+
        var nlst = nplst.Where(
            x =>
                x.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.One &&
                x.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
            .Select(x => ((EntityType) x.ToEndMember.GetEntityType()).Name).Distinct().Where(x => x != mainEntity.Name);
        if (nlst.Any() == true && container.Name != COREcontainer.Name)
        {
            #>
if(<#+
            var z = 0;
            foreach (string mEntity in nlst)
            {
                z += 1;

                #>
<#=                            z > 1 ? "|| " : "" #>BaseViewModel.Instance.Current<#=mEntity #> == null<#+
            }
#>) return;
<#+
        }
 #>

            var te = new <#=code.Escape(mainEntity) #>(){TrackingState = TrackingState.Added, <#+
if (nplst.Any() == true && container.Name != COREcontainer.Name)
{

    var z = 0;
    foreach (
        var  npe in nplst.Select(x => new {mEntity = ((EntityType) x.ToEndMember.GetEntityType()), navProperty = x}))
    {
        if (npe == null || npe.navProperty == null || npe.mEntity == null) continue;
        var mEntity = npe.mEntity;
        //string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
        if (mainEntity.Name != npe.mEntity.Name)
        {
            z += 1;
            #><#=z > 1 ? ", " : "" #> 
                <#=
    (npe.navProperty.GetDependentProperties().FirstOrDefault() != null
        ? npe.navProperty.GetDependentProperties().FirstOrDefault().Name + " = QuerySpace." + container.Name +
          ".ViewModels.BaseViewModel.Instance.Current" + mEntity.Name + "." + mEntity.KeyMembers[0].Name + " ,"
        : "") #>//<#=npe.navProperty.Name #> = BaseViewModel.Instance.Current<#=mEntity.Name #><#+
        }
    }
}
 #>
    
                };

            using (var ctx = new <#=code.Escape(mainEntity) #>Repository())
            {
                te = await ctx.Update<#=code.Escape(mainEntity) #>(te).ConfigureAwait(false);
            }


<#+ //////////////////// The Many
        if (container.Name != COREcontainer.Name) //nplst.Any() == true &&
        {

            var z = 0;
            foreach (
                var npe in
                    mainEntity.NavigationProperties.Where(
                        x =>
                            x.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many &&
                            x.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
                        .Select(x => new {mEntity = ((EntityType) x.ToEndMember.GetEntityType()), navProperty = x})
                        .Distinct())
            {
                var mEntity = npe.mEntity;
                //string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
                if (mainEntity.Name != mEntity.Name)
                {
                    z += 1;
                    #>//<#=                            z > 1 ? ", " : "" #> 
                BaseViewModel.Instance.Current<#=mEntity.Name #>.<#=
    mEntity.NavigationProperties.FirstOrDefault(
        x =>
            (EntityType) x.ToEndMember.GetEntityType() == mainEntity &&
            x.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many).Name #>.Add(te);
 <#+
                }
            }
        }
 #>


<#+
if (nplst.Any() == true && container.Name != COREcontainer.Name)
{

    var z = 0;
    foreach (
        var npe in
            nplst.Where(x => x.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
                .Select(x => new {mEntity = ((EntityType) x.ToEndMember.GetEntityType()), navProperty = x})
                .Distinct())
    {
        var mEntity = npe.mEntity.Name;
        //string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
        if (mainEntity.Name != mEntity)
        {
            z += 1;
            #>
//<#=                            z > 1 ? ", " : "" #> 
         if (BaseViewModel.Instance.Current<#=mEntity #> != null)        
                BaseViewModel.Instance.Current<#=mEntity #>.<#=
    npe.mEntity.NavigationProperties.FirstOrDefault(x =>((EntityType) x.ToEndMember.GetEntityType() == mainEntity ) && x.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many).Name #> = te;
<#+
        }
    }
}
 #>

             BaseViewModel.Instance.Current<#=code.Escape(mainEntity) #> = te;
             
             BeginSendMessage(MessageToken.Current<#=code.Escape(mainEntity) #>Changed,
                                                      new NotificationEventArgs<<#=code.Escape(mainEntity) #>>(MessageToken.Current<#=code.Escape(mainEntity) #>Changed, BaseViewModel.Instance.Current<#=code.Escape(mainEntity) #>));
            
             BeginSendMessage(MessageToken.<#=mainEntitySet #>Changed, new NotificationEventArgs(MessageToken.<#=mainEntitySet #>Changed));

        }

        public async void Delete<#=code.Escape(mainEntity) #>()
	    {
	        await Delete<#=code.Escape(mainEntity) #>Async().ConfigureAwait(false);
	    }

        public async Task Delete<#=code.Escape(mainEntity) #>Async()
        {
             if (BaseViewModel.Instance.Current<#=code.Escape(mainEntity) #> == null <#+
                if (nplst.Any() == true && container.Name != COREcontainer.Name)
                {

                    var z = 0;
                    foreach (
                        string mEntity in
                            nplst.Select(x => ((EntityType) x.ToEndMember.GetEntityType()).Name).Distinct())
                    {
                        z += 1;
                        //string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
                        if (mainEntity.Name != mEntity)
                        {
                            #>
<#=                            z > 0 ? "|| " : "" #>BaseViewModel.Instance.Current<#=mEntity #> == null<#+
                        }
                    }
                }
 #>) return;
            
            using (var ctx = new <#=mainEntity.Name #>Repository())
            {
               await ctx.Delete<#=mainEntity.Name #>(BaseViewModel.Instance.Current<#=code.Escape(mainEntity) #>.EntityId).ConfigureAwait(false);
            }
<#+ 
                if (mlst.Any() == true && container.Name != COREcontainer.Name)
                {
                    foreach (
                        var m in
                            mlst.Where(
                                x =>
                                    x.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many &&
                                    x.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many))
                    {
                        var mEntity = ((EntityType) m.ToEndMember.GetEntityType());
                        if (mainEntity.Name != mEntity.Name)
                        {
                            var ep =
                                ((EntityType) m.ToEndMember.GetEntityType()).NavigationProperties.Where(
                                    np =>
                                        np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many &&
                                        np.ToEndMember.GetEntityType().Name == mainEntity.Name &&
                                        np.Name.Contains(m.Name)).FirstOrDefault();
                            var eep =
                                ((EntityType) m.ToEndMember.GetEntityType()).NavigationProperties.Where(
                                    np =>
                                        np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many &&
                                        np.ToEndMember.GetEntityType().Name == (mainEntity.Name)).FirstOrDefault();
							if(eep == null)
							{
								eep =
                                ((EntityType) m.ToEndMember.GetEntityType()).NavigationProperties.Where(
                                    np =>
                                        np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many &&
                                        np.ToEndMember.GetEntityType().Name == mainEntity.BaseType.Name).FirstOrDefault();
							}
                            #> 
                UIDispatcher.Current.BeginInvoke(() =>
                {
                    BaseViewModel.Instance.Current<#=mEntity.Name #>.<#=ep == null ? eep.Name : ep.Name #>.Remove(BaseViewModel.Instance.Current<#=mEntity.Name #>.<#=ep == null ? eep.Name : ep.Name #>.FirstOrDefault(x => x.<#=mainEntity.KeyMembers[0].Name #> == (BaseViewModel.Instance.Current<#=code.Escape(mainEntity) #> == null? 0 : BaseViewModel.Instance.Current<#=code.Escape(mainEntity) #>.<#=mainEntity.KeyMembers[0].Name #>)));//<#=m.Name #>
                });
                BeginSendMessage(MessageToken.Current<#=mEntity.Name #>Changed,
                                                      new NotificationEventArgs<<#=mEntity.Name #>>(MessageToken.Current<#=mEntity.Name #>Changed, BaseViewModel.Instance.Current<#=mEntity.Name #>));    
<#+
                        }
                    }
                }
 #>
            BaseViewModel.Instance.Current<#=code.Escape(mainEntity) #> = null;

            BeginSendMessage(MessageToken.Current<#=code.Escape(mainEntity) #>Changed,
                                                      new NotificationEventArgs<<#=code.Escape(mainEntity) #>>(MessageToken.Current<#=code.Escape(mainEntity) #>Changed, BaseViewModel.Instance.Current<#=code.Escape(mainEntity) #>));
            
            BeginSendMessage(MessageToken.<#=mainEntitySet #>Changed, new NotificationEventArgs(MessageToken.<#=mainEntitySet #>Changed));           
            
        }
        public async void Save<#=code.Escape(mainEntity) #>()
	    {
	        await Save<#=code.Escape(mainEntity) #>Async().ConfigureAwait(false);
	    }

        public async Task Save<#=mainEntity.Name #>(<#=mainEntity.Name #> i)
        {
            if (i == null) return;
            using (var ctx = new <#=mainEntity.Name #>Repository())
            {
                await ctx.Update<#=mainEntity.Name #>(i).ConfigureAwait(false);
            }
        }
                
        public async Task Save<#=code.Escape(mainEntity) #>Async()
        {
            if (BaseViewModel.Instance.Current<#=                code.Escape(mainEntity) #> == null<#+
                if (nplst.Any() == true && container.Name != COREcontainer.Name)
                {

                    var z = 0;
                    foreach (
                        string mEntity in
                            nplst.Select(x => ((EntityType) x.ToEndMember.GetEntityType()).Name).Distinct())
                    {
                        z += 1;
                        //string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
                        if (mainEntity.Name != mEntity)
                        {
                            #>
<#=                            z > 0 ? "| " : "" #>BaseViewModel.Instance.Current<#=                            mEntity #> == null<#+
                        }
                    }
                }
 #>) return;
            using (var ctx = new <#=mainEntity.Name #>Repository())
            {
                await ctx.Update<#=mainEntity.Name #>(BaseViewModel.Instance.Current<#=code.Escape(mainEntity) #>).ConfigureAwait(false);
<#+ 
                if (mlst.Any() == true && container.Name != COREcontainer.Name)
                {


                    foreach (var mEntity in mlst.Select(x => ((EntityType) x.ToEndMember.GetEntityType())).Distinct())
                    {
                        //string mEntity= ((EntityType)navProperty.ToEndMember.GetEntityType()).Name;
                        if (mainEntity.Name != mEntity.Name)
                        {
                            #> 
                //ctx.SaveChanges<<#=code.Escape((mEntity.BaseType == null ? mEntity : mEntity.BaseType))
    #>>(Current<#=mEntity.Name #>);
                
              //  BeginSendMessage(MessageToken.Current<#=mEntity.Name #>Changed,
              //                                        new NotificationEventArgs<<#=mEntity.Name #>>(MessageToken.Current<#=mEntity.Name #>Changed, BaseViewModel.Instance.Current<#=mEntity.Name #>)); 
               
<#+
                        }
                    }
                }
 #>

                
            }
<#+ 
                if (container.Name != COREcontainer.Name)
                {
#>
             
             BeginSendMessage(MessageToken.Current<#=code.Escape(mainEntity) #>Changed,
                                                      new NotificationEventArgs<<#=code.Escape(mainEntity) #>>(MessageToken.Current<#=code.Escape(mainEntity) #>Changed, BaseViewModel.Instance.Current<#=code.Escape(mainEntity) #>));
            
            
<#+ } #>
        }
<#+
    } 
#>    

<#+
                
        foreach (var navProperty in mainEntity.NavigationProperties.Where(x =>x.MetadataProperties.FirstOrDefault(z => z.Name.Contains("IncludeNavigationProperty")) != null))
                {
                    var rrprop = navProperty.MetadataProperties.FirstOrDefault(z => z.Name.Contains("IncludeNavigationProperty"));
                    string incNav = ((XElement)rrprop.Value).Value;
                
                    if(incNav == "True")
                    {
                        var pEntity= navProperty.ToEndMember.GetEntityType();
                        NavigationProperty navPropertyBackReference = navProperty.ToEndMember.GetEntityType().NavigationProperties
                            .Where(npBack => npBack.RelationshipType == navProperty.RelationshipType && npBack !=navProperty)
                            .SingleOrDefault();
                        //NavigationProperty navPropertyForeReference = navProperty.FromEndMember.GetEntityType().NavigationProperties
                            //.Where(npBack => npBack.RelationshipType == navProperty.RelationshipType && npBack ==navProperty)
                            //.SingleOrDefault();
#>
       public async Task New<#=pEntity.Name #>(<#=mainEntity.Name #> entity)
        {
            using (var ctx = new <#=pEntity.Name #>Repository())
            {
                var i = await ctx.Create<#=pEntity.Name #>(new <#=pEntity.Name #>() { <#=navPropertyBackReference.GetDependentProperties().FirstOrDefault().Name#> = entity.<#=navPropertyBackReference.GetDependentProperties().FirstOrDefault().Name #>, EntryDateTime = DateTime.Now }).ConfigureAwait(false);
                UIDispatcher.Current.BeginInvoke(() =>
                {
                    entity.<#=navProperty.Name #>.Add(i);
                    i.TrackingState = TrackingState.Modified;
                    Save<#=mainEntity.Name #>(entity).Wait();
                });
            }
        }

        public async Task Delete<#=pEntity.Name #>(<#=mainEntity.Name #> entity)
        {
            var i = BaseViewModel.Instance.Current<#=pEntity.Name #>;
            if (i == null) return;
            
            var ri = entity.<#=navProperty.Name #>.FirstOrDefault(x => x.<#=pEntity.KeyMembers[0].Name #> == i.<#=pEntity.KeyMembers[0].Name #>);
            if (ri != null)
            {
                entity.<#=navProperty.Name #>.Remove(ri);

                using (var ctx = new <#=pEntity.Name #>Repository())
                {
                    await ctx.Delete<#=pEntity.Name #>(ri.<#=pEntity.KeyMembers[0].Name #>.ToString()).ConfigureAwait(false);
                }
                // im.Save<#=mainEntity.Name #>(entity);
            }

        }
<#+
                    }
                }
 #>
  
        #endregion
<#+ } #>
    }
}
		
<#+
            return this.GenerationEnvironment.ToString();
        }	
#>

<#+
        void WritePropertyEntityName(Dictionary<string, EntityType> plst, EntityType mainEntity, EntityContainer container, EntityContainer COREcontainer, CodeGenerationTools code)
        {
            foreach (var navprop in plst)              
            {
                if(navprop.Value == null) continue;
                string mEntity = navprop.Key;
                EntityType entity = navprop.Value;
                //if(entity.BaseType != null)mEntity = (entity.BaseType as EntityType).Name;
                if(mEntity == mainEntity.Name) continue;
                var CSet = container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType.Name == GetBaseEntity(entity).Name).FirstOrDefault();
                string cSet = "";
                if(CSet == null) 
                {
                    //if(entity.BaseType == null)
                    //{
                        CSet = COREcontainer.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType.Name == GetBaseEntity(entity).Name).FirstOrDefault();
                        if(CSet != null) cSet = CSet.Name;

                    //}
                    //else
                    //{
                        //cSet = entity.Name;
                    //}
                }
                if(entity.BaseType == null)
                {
                    cSet = CSet.Name;
                }
                else
                {
                    // take out because not working here if(cSet == "")
                  cSet = entity.Name;  
                }
            
               
                       
 #>
                    if (e.PropertyName == "Add<#=mEntity#>")
                    {
                       if(<#=(cSet)#>.Contains(Current<#=code.Escape(mainEntity)#>.<#=mEntity#>) == false) <#=cSet#>.Add(Current<#=code.Escape(mainEntity)#>.<#=                mEntity#>);
                    }
<#+
            }
        }
    }
#>
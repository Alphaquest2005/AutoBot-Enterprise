
<#+ 
  // Note: You can call this method from the outside of the template,
  //       please add parameters as needed.	
  // To include this templaate just drag this file on another editor
  // then call this.Template_NewTemplate1_Render()
    public class VirturalListLoaderTPL : CSharpTemplate
    {
        public string conTextName;
        public string projectName;
        public EntityType MainEntity; 
        public string mainEntitySet; 
                
        
        public override string TransformText()
        {
            base.TransformText();

#>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using SimpleMvvmToolkit;
using <#=conTextName #>.Client.Repositories;
using <#=conTextName #>.Client.Entities;



namespace <#=projectName #>.QuerySpace.<#=conTextName #>.ViewModels
{
    public partial class <#=MainEntity.Name#>VirturalListLoader : IVirtualListLoader<<#=MainEntity.Name#>>
	{
<#+
         var includeslst = "";
        foreach (var property in MainEntity.NavigationProperties.Where(x =>x.MetadataProperties.FirstOrDefault(z => z.Name.Contains("IncludeNavigationProperty")) != null))
            {
                var rprop = property.MetadataProperties.FirstOrDefault(z => z.Name.Contains("IncludeNavigationProperty"));
			    string incNav = ((XElement)rprop.Value).Value;
                if(incNav == "True")
                    {
                    includeslst += "\", \"" + property.Name;
                     }
            }
 #>
        public IEnumerable<string> IncludesLst = new List<string>(){"<#=string.IsNullOrEmpty(includeslst)?"":includeslst.Substring(4)#>"};
		public bool CanSort
        {
            get
            {
                return false;
            }
        }
        
        public string FilterExpression
        {
            get { return _filterExpression; }
            set
            {
                _filterExpression = value;
                MessageBus.Default.BeginNotify(MessageToken.<#=mainEntitySet#>FilterExpressionChanged, null,
                                            new NotificationEventArgs<string>(MessageToken.<#=mainEntitySet#>FilterExpressionChanged, _filterExpression));
            }
        }
        private string _filterExpression = "None";

		public void SetNavigationExpression (string navigationProperty, string expression )
        {
            try
            {
                navExp = new Dictionary<string, string> {{navigationProperty, expression}};
                //if (string.IsNullOrEmpty(FilterExpression)) FilterExpression = "All";
            }
            catch (Exception)
            {
                throw;
            }
            
        }

        public void ClearNavigationExpression()
        {
            navExp = new Dictionary<string, string>();           
        }

        private Dictionary<string, string> navExp = new Dictionary<string, string>(); 
		public Dictionary<string, string> NavigationExpression
        {
            get { return navExp; }
        }

        public IList<<#=MainEntity.Name#>> LoadRange(int startIndex, int count, SortDescriptionCollection sortDescriptions, out int overallCount)
        {
            try
            {
                if (FilterExpression == null) FilterExpression = "All";
			    using (var ctx = new <#=MainEntity.Name#>Repository())
				{
					var r = ctx.LoadRange(startIndex, count, FilterExpression, navExp, IncludesLst);
				    overallCount = r.Result.Item2;

					return r.Result.Item1.ToList();
				}

            }
            catch (Exception ex)
            {
                StatusModel.Message(ex.Message);
                overallCount = 0;
                return new List<<#=MainEntity.Name#>>() ;
            }
			
        }
	}
}
		
		
<#+
          return this.GenerationEnvironment.ToString();
        }
    }	
#>
// <autogenerated>
//   This file was generated by T4 code generator AllQuerySpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CounterPointQS.Client.Entities;
using CounterPointQS.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.CounterPointQS.ViewModels
{
    
	public partial class CounterPointSalesDetailsViewModel_AutoGen : ViewModelBase<CounterPointSalesDetailsViewModel_AutoGen>
	{

       private static readonly CounterPointSalesDetailsViewModel_AutoGen instance;
       static CounterPointSalesDetailsViewModel_AutoGen()
        {
            instance = new CounterPointSalesDetailsViewModel_AutoGen();
        }

       public static CounterPointSalesDetailsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public CounterPointSalesDetailsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<CounterPointSalesDetails>(MessageToken.CurrentCounterPointSalesDetailsChanged, OnCurrentCounterPointSalesDetailsChanged);
            RegisterToReceiveMessages(MessageToken.CounterPointSalesDetailsChanged, OnCounterPointSalesDetailsChanged);
			RegisterToReceiveMessages(MessageToken.CounterPointSalesDetailsFilterExpressionChanged, OnCounterPointSalesDetailsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			CounterPointSalesDetails = new VirtualList<CounterPointSalesDetails>(vloader);
			CounterPointSalesDetails.LoadingStateChanged += CounterPointSalesDetails_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(CounterPointSalesDetails, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<CounterPointSalesDetails> _CounterPointSalesDetails = null;
        public VirtualList<CounterPointSalesDetails> CounterPointSalesDetails
        {
            get
            {
                return _CounterPointSalesDetails;
            }
            set
            {
                _CounterPointSalesDetails = value;
            }
        }

		 private void OnCounterPointSalesDetailsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			CounterPointSalesDetails.Refresh();
            SelectedCounterPointSalesDetails.Clear();
            NotifyPropertyChanged(x => SelectedCounterPointSalesDetails);
            BeginSendMessage(MessageToken.SelectedCounterPointSalesDetailsChanged, new NotificationEventArgs(MessageToken.SelectedCounterPointSalesDetailsChanged));
        }

		void CounterPointSalesDetails_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (CounterPointSalesDetails.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => CounterPointSalesDetails);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("CounterPointSalesDetails | Error occured..." + CounterPointSalesDetails.LastLoadingError.Message);
                    NotifyPropertyChanged(x => CounterPointSalesDetails);
                    break;
            }
           
        }

		
		public readonly CounterPointSalesDetailsVirturalListLoader vloader = new CounterPointSalesDetailsVirturalListLoader();

		private ObservableCollection<CounterPointSalesDetails> _selectedCounterPointSalesDetails = new ObservableCollection<CounterPointSalesDetails>();
        public ObservableCollection<CounterPointSalesDetails> SelectedCounterPointSalesDetails
        {
            get
            {
                return _selectedCounterPointSalesDetails;
            }
            set
            {
                _selectedCounterPointSalesDetails = value;
				BeginSendMessage(MessageToken.SelectedCounterPointSalesDetailsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedCounterPointSalesDetailsChanged));
				 NotifyPropertyChanged(x => SelectedCounterPointSalesDetails);
            }
        }

        internal void OnCurrentCounterPointSalesDetailsChanged(object sender, NotificationEventArgs<CounterPointSalesDetails> e)
        {
            if(BaseViewModel.Instance.CurrentCounterPointSalesDetails != null) BaseViewModel.Instance.CurrentCounterPointSalesDetails.PropertyChanged += CurrentCounterPointSalesDetails__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentCounterPointSalesDetails);
        }   

            void CurrentCounterPointSalesDetails__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal void OnCounterPointSalesDetailsChanged(object sender, NotificationEventArgs e)
        {
            _CounterPointSalesDetails.Refresh();
			NotifyPropertyChanged(x => this.CounterPointSalesDetails);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";
			vloader.ClearNavigationExpression();
			_CounterPointSalesDetails.Refresh();
			NotifyPropertyChanged(x => this.CounterPointSalesDetails);
		}

		public async Task SelectAll()
        {
            IEnumerable<CounterPointSalesDetails> lst = null;
            using (var ctx = new CounterPointSalesDetailsRepository())
            {
                lst = await ctx.GetCounterPointSalesDetailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedCounterPointSalesDetails = new ObservableCollection<CounterPointSalesDetails>(lst);
        }

 

		private string _iNVNOFilter;
        public string INVNOFilter
        {
            get
            {
                return _iNVNOFilter;
            }
            set
            {
                _iNVNOFilter = value;
				NotifyPropertyChanged(x => INVNOFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _sEQ_NOFilter;
        public Int32? SEQ_NOFilter
        {
            get
            {
                return _sEQ_NOFilter;
            }
            set
            {
                _sEQ_NOFilter = value;
				NotifyPropertyChanged(x => SEQ_NOFilter);
                FilterData();
                
            }
        }	

 

		private string _iTEM_NOFilter;
        public string ITEM_NOFilter
        {
            get
            {
                return _iTEM_NOFilter;
            }
            set
            {
                _iTEM_NOFilter = value;
				NotifyPropertyChanged(x => ITEM_NOFilter);
                FilterData();
                
            }
        }	

 

		private string _iTEM_DESCRFilter;
        public string ITEM_DESCRFilter
        {
            get
            {
                return _iTEM_DESCRFilter;
            }
            set
            {
                _iTEM_DESCRFilter = value;
				NotifyPropertyChanged(x => ITEM_DESCRFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _qUANTITYFilter;
        public Decimal? QUANTITYFilter
        {
            get
            {
                return _qUANTITYFilter;
            }
            set
            {
                _qUANTITYFilter = value;
				NotifyPropertyChanged(x => QUANTITYFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _cOSTFilter;
        public Decimal? COSTFilter
        {
            get
            {
                return _cOSTFilter;
            }
            set
            {
                _cOSTFilter = value;
				NotifyPropertyChanged(x => COSTFilter);
                FilterData();
                
            }
        }	

 

		private string _aCCT_NOFilter;
        public string ACCT_NOFilter
        {
            get
            {
                return _aCCT_NOFilter;
            }
            set
            {
                _aCCT_NOFilter = value;
				NotifyPropertyChanged(x => ACCT_NOFilter);
                FilterData();
                
            }
        }	

 

		private string _cUSTOMER_NAMEFilter;
        public string CUSTOMER_NAMEFilter
        {
            get
            {
                return _cUSTOMER_NAMEFilter;
            }
            set
            {
                _cUSTOMER_NAMEFilter = value;
				NotifyPropertyChanged(x => CUSTOMER_NAMEFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startDATEFilter = DateTime.Parse($"{DateTime.Now.Month}/1/{DateTime.Now.Year}");
        public DateTime? StartDATEFilter
        {
            get
            {
                return _startDATEFilter;
            }
            set
            {
                _startDATEFilter = value;
				NotifyPropertyChanged(x => StartDATEFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endDATEFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndDATEFilter
        {
            get
            {
                return _endDATEFilter;
            }
            set
            {
                _endDATEFilter = value;
				NotifyPropertyChanged(x => EndDATEFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _dATEFilter;
        public DateTime? DATEFilter
        {
            get
            {
                return _dATEFilter;
            }
            set
            {
                _dATEFilter = value;
				NotifyPropertyChanged(x => DATEFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _tAX_AMTFilter;
        public Decimal? TAX_AMTFilter
        {
            get
            {
                return _tAX_AMTFilter;
            }
            set
            {
                _tAX_AMTFilter = value;
				NotifyPropertyChanged(x => TAX_AMTFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _uNIT_WEIGHTFilter;
        public Decimal? UNIT_WEIGHTFilter
        {
            get
            {
                return _uNIT_WEIGHTFilter;
            }
            set
            {
                _uNIT_WEIGHTFilter = value;
				NotifyPropertyChanged(x => UNIT_WEIGHTFilter);
                FilterData();
                
            }
        }	

 

		private string _qTY_UNITFilter;
        public string QTY_UNITFilter
        {
            get
            {
                return _qTY_UNITFilter;
            }
            set
            {
                _qTY_UNITFilter = value;
				NotifyPropertyChanged(x => QTY_UNITFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			CounterPointSalesDetails.Refresh();
			NotifyPropertyChanged(x => this.CounterPointSalesDetails);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(INVNOFilter) == false)
						res.Append(" && " + $"INVNO.Contains(\"{INVNOFilter}\")");						
 

					if(SEQ_NOFilter.HasValue)
						res.Append(" && " + $"SEQ_NO == {SEQ_NOFilter.ToString()}");				 

									if(string.IsNullOrEmpty(ITEM_NOFilter) == false)
						res.Append(" && " + $"ITEM_NO.Contains(\"{ITEM_NOFilter}\")");						
 

									if(string.IsNullOrEmpty(ITEM_DESCRFilter) == false)
						res.Append(" && " + $"ITEM_DESCR.Contains(\"{ITEM_DESCRFilter}\")");						
 

					if(QUANTITYFilter.HasValue)
						res.Append(" && " + $"QUANTITY == {QUANTITYFilter.ToString()}");				 

					if(COSTFilter.HasValue)
						res.Append(" && " + $"COST == {COSTFilter.ToString()}");				 

									if(string.IsNullOrEmpty(ACCT_NOFilter) == false)
						res.Append(" && " + $"ACCT_NO.Contains(\"{ACCT_NOFilter}\")");						
 

									if(string.IsNullOrEmpty(CUSTOMER_NAMEFilter) == false)
						res.Append(" && " + $"CUSTOMER_NAME.Contains(\"{CUSTOMER_NAMEFilter}\")");						
 

 

				if (Convert.ToDateTime(StartDATEFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndDATEFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartDATEFilter).Date != DateTime.MinValue)
						{
							if(StartDATEFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndDATEFilter).Date != DateTime.MinValue?"":" && ") +
								        $"DATE >= \"{Convert.ToDateTime(StartDATEFilter).Date.ToString("MM/dd/yyyy")}\"");
						}

					if (Convert.ToDateTime(EndDATEFilter).Date != DateTime.MinValue)
						{
							if(EndDATEFilter.HasValue)
								res.Append(" && " +
								           $"DATE <= \"{Convert.ToDateTime(EndDATEFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")}\"");
						}

				if (Convert.ToDateTime(StartDATEFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndDATEFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_dATEFilter).Date != DateTime.MinValue)
						{
							if(DATEFilter.HasValue)
								res.Append(" && " + $"DATE == \"{Convert.ToDateTime(DATEFilter).Date.ToString("MM/dd/yyyy")}\"");
						}
				 

					if(TAX_AMTFilter.HasValue)
						res.Append(" && " + $"TAX_AMT == {TAX_AMTFilter.ToString()}");				 

					if(UNIT_WEIGHTFilter.HasValue)
						res.Append(" && " + $"UNIT_WEIGHT == {UNIT_WEIGHTFilter.ToString()}");				 

									if(string.IsNullOrEmpty(QTY_UNITFilter) == false)
						res.Append(" && " + $"QTY_UNIT.Contains(\"{QTY_UNITFilter}\")");						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<CounterPointSalesDetails> lst = null;
            using (var ctx = new CounterPointSalesDetailsRepository())
            {
                lst = await ctx.GetCounterPointSalesDetailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<CounterPointSalesDetailsExcelLine, List<CounterPointSalesDetailsExcelLine>>
            {
                dataToPrint = lst.Select(x => new CounterPointSalesDetailsExcelLine
                {
 
                    INVNO = x.INVNO ,
                    
 
                    SEQ_NO = x.SEQ_NO ,
                    
 
                    ITEM_NO = x.ITEM_NO ,
                    
 
                    ITEM_DESCR = x.ITEM_DESCR ,
                    
 
                    QUANTITY = x.QUANTITY ,
                    
 
                    COST = x.COST ,
                    
 
                    ACCT_NO = x.ACCT_NO ,
                    
 
                    CUSTOMER_NAME = x.CUSTOMER_NAME ,
                    
 
                    DATE = x.DATE ,
                    
 
                    TAX_AMT = x.TAX_AMT ,
                    
 
                    UNIT_WEIGHT = x.UNIT_WEIGHT ,
                    
 
                    QTY_UNIT = x.QTY_UNIT 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
                await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class CounterPointSalesDetailsExcelLine
        {
		 
                    public string INVNO { get; set; } 
                    
 
                    public Nullable<int> SEQ_NO { get; set; } 
                    
 
                    public string ITEM_NO { get; set; } 
                    
 
                    public string ITEM_DESCR { get; set; } 
                    
 
                    public Nullable<decimal> QUANTITY { get; set; } 
                    
 
                    public Nullable<decimal> COST { get; set; } 
                    
 
                    public string ACCT_NO { get; set; } 
                    
 
                    public string CUSTOMER_NAME { get; set; } 
                    
 
                    public Nullable<System.DateTime> DATE { get; set; } 
                    
 
                    public decimal TAX_AMT { get; set; } 
                    
 
                    public Nullable<decimal> UNIT_WEIGHT { get; set; } 
                    
 
                    public string QTY_UNIT { get; set; } 
                    
        }

		
    }
}
		

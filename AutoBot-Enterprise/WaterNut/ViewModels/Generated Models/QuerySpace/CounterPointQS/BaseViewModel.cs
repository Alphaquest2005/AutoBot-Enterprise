// <autogenerated>
//   This file was generated by T4 code generator AllQuerySpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using CounterPointQS.Client.Entities;
using CounterPointQS.Client.Repositories;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;



namespace WaterNut.QuerySpace.CounterPointQS.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // CoreEntities.ViewModels.BaseViewModel
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class CounterPointQSOnCreated: BaseViewModel
        {
           // Load Repository
                public CounterPointQSOnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentCounterPointPODetailsIDChanged, OnCurrentCounterPointPODetailsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentCounterPointPOsIDChanged, OnCurrentCounterPointPOsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentCounterPointSalesIDChanged, OnCurrentCounterPointSalesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentCounterPointSalesDetailsIDChanged, OnCurrentCounterPointSalesDetailsIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<CounterPointPODetails>(MessageToken.CurrentCounterPointPODetailsChanged, OnCurrentCounterPointPODetailsChanged);
                        RegisterToReceiveMessages<CounterPointPOs>(MessageToken.CurrentCounterPointPOsChanged, OnCurrentCounterPointPOsChanged);
                        RegisterToReceiveMessages<CounterPointSales>(MessageToken.CurrentCounterPointSalesChanged, OnCurrentCounterPointSalesChanged);
                        RegisterToReceiveMessages<CounterPointSalesDetails>(MessageToken.CurrentCounterPointSalesDetailsChanged, OnCurrentCounterPointSalesDetailsChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentCounterPointPODetailsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (CounterPointPODetailsRepository ctx = new CounterPointPODetailsRepository())
                            {
                                CurrentCounterPointPODetails = await ctx.GetCounterPointPODetails(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentCounterPointPODetails);
                        }

                        private  string _currentCounterPointPODetailsID = "";
                        public string CurrentCounterPointPODetailsID
                        {
                            get
                            {
                                return _currentCounterPointPODetailsID;
                            }
                            set
                            {
                                if (_currentCounterPointPODetailsID != value)
                                {
                                    _currentCounterPointPODetailsID = value;
                                    if (!string.IsNullOrEmpty(_currentCounterPointPODetailsID)) BeginSendMessage(MessageToken.CurrentCounterPointPODetailsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentCounterPointPODetailsIDChanged, _currentCounterPointPODetailsID));
                                    NotifyPropertyChanged(x => this.CurrentCounterPointPODetailsID);  
                                }
                            }
                        }
                        internal async void OnCurrentCounterPointPOsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (CounterPointPOsRepository ctx = new CounterPointPOsRepository())
                            {
                                CurrentCounterPointPOs = await ctx.GetCounterPointPOs(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentCounterPointPOs);
                        }

                        private  string _currentCounterPointPOsID = "";
                        public string CurrentCounterPointPOsID
                        {
                            get
                            {
                                return _currentCounterPointPOsID;
                            }
                            set
                            {
                                if (_currentCounterPointPOsID != value)
                                {
                                    _currentCounterPointPOsID = value;
                                    if (!string.IsNullOrEmpty(_currentCounterPointPOsID)) BeginSendMessage(MessageToken.CurrentCounterPointPOsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentCounterPointPOsIDChanged, _currentCounterPointPOsID));
                                    NotifyPropertyChanged(x => this.CurrentCounterPointPOsID);  
                                }
                            }
                        }
                        internal async void OnCurrentCounterPointSalesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (CounterPointSalesRepository ctx = new CounterPointSalesRepository())
                            {
                                CurrentCounterPointSales = await ctx.GetCounterPointSales(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentCounterPointSales);
                        }

                        private  string _currentCounterPointSalesID = "";
                        public string CurrentCounterPointSalesID
                        {
                            get
                            {
                                return _currentCounterPointSalesID;
                            }
                            set
                            {
                                if (_currentCounterPointSalesID != value)
                                {
                                    _currentCounterPointSalesID = value;
                                    if (!string.IsNullOrEmpty(_currentCounterPointSalesID)) BeginSendMessage(MessageToken.CurrentCounterPointSalesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentCounterPointSalesIDChanged, _currentCounterPointSalesID));
                                    NotifyPropertyChanged(x => this.CurrentCounterPointSalesID);  
                                }
                            }
                        }
                        internal async void OnCurrentCounterPointSalesDetailsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (CounterPointSalesDetailsRepository ctx = new CounterPointSalesDetailsRepository())
                            {
                                CurrentCounterPointSalesDetails = await ctx.GetCounterPointSalesDetails(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentCounterPointSalesDetails);
                        }

                        private  string _currentCounterPointSalesDetailsID = "";
                        public string CurrentCounterPointSalesDetailsID
                        {
                            get
                            {
                                return _currentCounterPointSalesDetailsID;
                            }
                            set
                            {
                                if (_currentCounterPointSalesDetailsID != value)
                                {
                                    _currentCounterPointSalesDetailsID = value;
                                    if (!string.IsNullOrEmpty(_currentCounterPointSalesDetailsID)) BeginSendMessage(MessageToken.CurrentCounterPointSalesDetailsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentCounterPointSalesDetailsIDChanged, _currentCounterPointSalesDetailsID));
                                    NotifyPropertyChanged(x => this.CurrentCounterPointSalesDetailsID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentCounterPointPODetailsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<CounterPointPODetails> e)
        {
            //CurrentCounterPointPODetails = e.Data;
            NotifyPropertyChanged(m => this.CurrentCounterPointPODetails);
        }

        private  CounterPointPODetails _currentCounterPointPODetails;
        public CounterPointPODetails CurrentCounterPointPODetails
        {
            get
            {
                return _currentCounterPointPODetails;
            }
            set
            {
                if (_currentCounterPointPODetails != value)
                {
                    _currentCounterPointPODetails = value;
                    BeginSendMessage(MessageToken.CurrentCounterPointPODetailsChanged,
                                                     new NotificationEventArgs<CounterPointPODetails>(MessageToken.CurrentCounterPointPODetailsChanged, _currentCounterPointPODetails)); 
                    NotifyPropertyChanged(x => this.CurrentCounterPointPODetails);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<CounterPointPODetails> _vcurrentCounterPointPODetails;
        public VirtualListItem<CounterPointPODetails> VCurrentCounterPointPODetails
        {
            get
            {
                return _vcurrentCounterPointPODetails;
            }
            set
            {
                if (_vcurrentCounterPointPODetails != value)
                {
                    _vcurrentCounterPointPODetails = value;
					if(_vcurrentCounterPointPODetails != null) CurrentCounterPointPODetails = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentCounterPointPODetails);                    
                }
            }
        }



                     
       

        internal void OnCurrentCounterPointPOsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<CounterPointPOs> e)
        {
            //CurrentCounterPointPOs = e.Data;
            NotifyPropertyChanged(m => this.CurrentCounterPointPOs);
        }

        private  CounterPointPOs _currentCounterPointPOs;
        public CounterPointPOs CurrentCounterPointPOs
        {
            get
            {
                return _currentCounterPointPOs;
            }
            set
            {
                if (_currentCounterPointPOs != value)
                {
                    _currentCounterPointPOs = value;
                    BeginSendMessage(MessageToken.CurrentCounterPointPOsChanged,
                                                     new NotificationEventArgs<CounterPointPOs>(MessageToken.CurrentCounterPointPOsChanged, _currentCounterPointPOs)); 
                    NotifyPropertyChanged(x => this.CurrentCounterPointPOs);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<CounterPointPOs> _vcurrentCounterPointPOs;
        public VirtualListItem<CounterPointPOs> VCurrentCounterPointPOs
        {
            get
            {
                return _vcurrentCounterPointPOs;
            }
            set
            {
                if (_vcurrentCounterPointPOs != value)
                {
                    _vcurrentCounterPointPOs = value;
					if(_vcurrentCounterPointPOs != null) CurrentCounterPointPOs = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentCounterPointPOs);                    
                }
            }
        }



                     
       

        internal void OnCurrentCounterPointSalesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<CounterPointSales> e)
        {
            //CurrentCounterPointSales = e.Data;
            NotifyPropertyChanged(m => this.CurrentCounterPointSales);
        }

        private  CounterPointSales _currentCounterPointSales;
        public CounterPointSales CurrentCounterPointSales
        {
            get
            {
                return _currentCounterPointSales;
            }
            set
            {
                if (_currentCounterPointSales != value)
                {
                    _currentCounterPointSales = value;
                    BeginSendMessage(MessageToken.CurrentCounterPointSalesChanged,
                                                     new NotificationEventArgs<CounterPointSales>(MessageToken.CurrentCounterPointSalesChanged, _currentCounterPointSales)); 
                    NotifyPropertyChanged(x => this.CurrentCounterPointSales);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<CounterPointSales> _vcurrentCounterPointSales;
        public VirtualListItem<CounterPointSales> VCurrentCounterPointSales
        {
            get
            {
                return _vcurrentCounterPointSales;
            }
            set
            {
                if (_vcurrentCounterPointSales != value)
                {
                    _vcurrentCounterPointSales = value;
					if(_vcurrentCounterPointSales != null) CurrentCounterPointSales = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentCounterPointSales);                    
                }
            }
        }



                     
       

        internal void OnCurrentCounterPointSalesDetailsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<CounterPointSalesDetails> e)
        {
            //CurrentCounterPointSalesDetails = e.Data;
            NotifyPropertyChanged(m => this.CurrentCounterPointSalesDetails);
        }

        private  CounterPointSalesDetails _currentCounterPointSalesDetails;
        public CounterPointSalesDetails CurrentCounterPointSalesDetails
        {
            get
            {
                return _currentCounterPointSalesDetails;
            }
            set
            {
                if (_currentCounterPointSalesDetails != value)
                {
                    _currentCounterPointSalesDetails = value;
                    BeginSendMessage(MessageToken.CurrentCounterPointSalesDetailsChanged,
                                                     new NotificationEventArgs<CounterPointSalesDetails>(MessageToken.CurrentCounterPointSalesDetailsChanged, _currentCounterPointSalesDetails)); 
                    NotifyPropertyChanged(x => this.CurrentCounterPointSalesDetails);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<CounterPointSalesDetails> _vcurrentCounterPointSalesDetails;
        public VirtualListItem<CounterPointSalesDetails> VCurrentCounterPointSalesDetails
        {
            get
            {
                return _vcurrentCounterPointSalesDetails;
            }
            set
            {
                if (_vcurrentCounterPointSalesDetails != value)
                {
                    _vcurrentCounterPointSalesDetails = value;
					if(_vcurrentCounterPointSalesDetails != null) CurrentCounterPointSalesDetails = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentCounterPointSalesDetails);                    
                }
            }
        }






        static CounterPointQSOnCreated newCounterPointQSOnCreated = new CounterPointQSOnCreated();
    }		
}

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class EmailMappingActionsViewModel_AutoGen : ViewModelBase<EmailMappingActionsViewModel_AutoGen>
	{

       private static readonly EmailMappingActionsViewModel_AutoGen instance;
       static EmailMappingActionsViewModel_AutoGen()
        {
            instance = new EmailMappingActionsViewModel_AutoGen();
        }

       public static EmailMappingActionsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public EmailMappingActionsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<EmailMappingActions>(MessageToken.CurrentEmailMappingActionsChanged, OnCurrentEmailMappingActionsChanged);
            RegisterToReceiveMessages(MessageToken.EmailMappingActionsChanged, OnEmailMappingActionsChanged);
			RegisterToReceiveMessages(MessageToken.EmailMappingActionsFilterExpressionChanged, OnEmailMappingActionsFilterExpressionChanged);

 
			RegisterToReceiveMessages<Actions>(MessageToken.CurrentActionsChanged, OnCurrentActionsChanged);
 
			RegisterToReceiveMessages<EmailMapping>(MessageToken.CurrentEmailMappingChanged, OnCurrentEmailMappingChanged);

 			// Recieve messages for Core Current Entities Changed
 

			EmailMappingActions = new VirtualList<EmailMappingActions>(vloader);
			EmailMappingActions.LoadingStateChanged += EmailMappingActions_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(EmailMappingActions, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<EmailMappingActions> _EmailMappingActions = null;
        public VirtualList<EmailMappingActions> EmailMappingActions
        {
            get
            {
                return _EmailMappingActions;
            }
            set
            {
                _EmailMappingActions = value;
                NotifyPropertyChanged( x => x.EmailMappingActions);
            }
        }

		 private void OnEmailMappingActionsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => EmailMappingActions.Refresh()).ConfigureAwait(false);
            SelectedEmailMappingActions.Clear();
            NotifyPropertyChanged(x => SelectedEmailMappingActions);
            BeginSendMessage(MessageToken.SelectedEmailMappingActionsChanged, new NotificationEventArgs(MessageToken.SelectedEmailMappingActionsChanged));
        }

		void EmailMappingActions_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (EmailMappingActions.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => EmailMappingActions);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("EmailMappingActions | Error occured..." + EmailMappingActions.LastLoadingError.Message);
                    NotifyPropertyChanged(x => EmailMappingActions);
                    break;
            }
           
        }

		
		public readonly EmailMappingActionsVirturalListLoader vloader = new EmailMappingActionsVirturalListLoader();

		private ObservableCollection<EmailMappingActions> _selectedEmailMappingActions = new ObservableCollection<EmailMappingActions>();
        public ObservableCollection<EmailMappingActions> SelectedEmailMappingActions
        {
            get
            {
                return _selectedEmailMappingActions;
            }
            set
            {
                _selectedEmailMappingActions = value;
				BeginSendMessage(MessageToken.SelectedEmailMappingActionsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedEmailMappingActionsChanged));
				 NotifyPropertyChanged(x => SelectedEmailMappingActions);
            }
        }

        internal virtual void OnCurrentEmailMappingActionsChanged(object sender, NotificationEventArgs<EmailMappingActions> e)
        {
            if(BaseViewModel.Instance.CurrentEmailMappingActions != null) BaseViewModel.Instance.CurrentEmailMappingActions.PropertyChanged += CurrentEmailMappingActions__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentEmailMappingActions);
        }   

            void CurrentEmailMappingActions__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddActions")
                   // {
                   //    if(Actions.Contains(CurrentEmailMappingActions.Actions) == false) Actions.Add(CurrentEmailMappingActions.Actions);
                    //}
                    //if (e.PropertyName == "AddEmailMapping")
                   // {
                   //    if(EmailMapping.Contains(CurrentEmailMappingActions.EmailMapping) == false) EmailMapping.Add(CurrentEmailMappingActions.EmailMapping);
                    //}
                 } 
        internal virtual void OnEmailMappingActionsChanged(object sender, NotificationEventArgs e)
        {
            _EmailMappingActions.Refresh();
			NotifyPropertyChanged(x => this.EmailMappingActions);
        }   


 	
		 internal virtual void OnCurrentActionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Actions> e)
			{
			if(ViewCurrentActions == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("ActionId == {0}", e.Data.Id.ToString());
                 }

				EmailMappingActions.Refresh();
				NotifyPropertyChanged(x => this.EmailMappingActions);
                // SendMessage(MessageToken.EmailMappingActionsChanged, new NotificationEventArgs(MessageToken.EmailMappingActionsChanged));
                                          
                BaseViewModel.Instance.CurrentEmailMappingActions = null;
			}
	
		 internal virtual void OnCurrentEmailMappingChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EmailMapping> e)
			{
			if(ViewCurrentEmailMapping == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("EmailMappingId == {0}", e.Data.Id.ToString());
                 }

				EmailMappingActions.Refresh();
				NotifyPropertyChanged(x => this.EmailMappingActions);
                // SendMessage(MessageToken.EmailMappingActionsChanged, new NotificationEventArgs(MessageToken.EmailMappingActionsChanged));
                                          
                BaseViewModel.Instance.CurrentEmailMappingActions = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentActions = false;
         public bool ViewCurrentActions
         {
             get
             {
                 return _viewCurrentActions;
             }
             set
             {
                 _viewCurrentActions = value;
                 NotifyPropertyChanged(x => x.ViewCurrentActions);
                FilterData();
             }
         }
 	
		 bool _viewCurrentEmailMapping = false;
         public bool ViewCurrentEmailMapping
         {
             get
             {
                 return _viewCurrentEmailMapping;
             }
             set
             {
                 _viewCurrentEmailMapping = value;
                 NotifyPropertyChanged(x => x.ViewCurrentEmailMapping);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_EmailMappingActions.Refresh();
			NotifyPropertyChanged(x => this.EmailMappingActions);
		}

		public async Task SelectAll()
        {
            IEnumerable<EmailMappingActions> lst = null;
            using (var ctx = new EmailMappingActionsRepository())
            {
                lst = await ctx.GetEmailMappingActionsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedEmailMappingActions = new ObservableCollection<EmailMappingActions>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			EmailMappingActions.Refresh();
			NotifyPropertyChanged(x => this.EmailMappingActions);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<EmailMappingActions> lst = null;
            using (var ctx = new EmailMappingActionsRepository())
            {
                lst = await ctx.GetEmailMappingActionsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<EmailMappingActionsExcelLine, List<EmailMappingActionsExcelLine>>
            {
                dataToPrint = lst.Select(x => new EmailMappingActionsExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class EmailMappingActionsExcelLine
        {
		        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class ImportActionsViewModel_AutoGen : ViewModelBase<ImportActionsViewModel_AutoGen>
	{

       private static readonly ImportActionsViewModel_AutoGen instance;
       static ImportActionsViewModel_AutoGen()
        {
            instance = new ImportActionsViewModel_AutoGen();
        }

       public static ImportActionsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public ImportActionsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<ImportActions>(MessageToken.CurrentImportActionsChanged, OnCurrentImportActionsChanged);
            RegisterToReceiveMessages(MessageToken.ImportActionsChanged, OnImportActionsChanged);
			RegisterToReceiveMessages(MessageToken.ImportActionsFilterExpressionChanged, OnImportActionsFilterExpressionChanged);

 
			RegisterToReceiveMessages<FileTypes>(MessageToken.CurrentFileTypesChanged, OnCurrentFileTypesChanged);

 			// Recieve messages for Core Current Entities Changed
 

			ImportActions = new VirtualList<ImportActions>(vloader);
			ImportActions.LoadingStateChanged += ImportActions_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(ImportActions, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<ImportActions> _ImportActions = null;
        public VirtualList<ImportActions> ImportActions
        {
            get
            {
                return _ImportActions;
            }
            set
            {
                _ImportActions = value;
                NotifyPropertyChanged( x => x.ImportActions);
            }
        }

		 private void OnImportActionsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => ImportActions.Refresh()).ConfigureAwait(false);
            SelectedImportActions.Clear();
            NotifyPropertyChanged(x => SelectedImportActions);
            BeginSendMessage(MessageToken.SelectedImportActionsChanged, new NotificationEventArgs(MessageToken.SelectedImportActionsChanged));
        }

		void ImportActions_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (ImportActions.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => ImportActions);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("ImportActions | Error occured..." + ImportActions.LastLoadingError.Message);
                    NotifyPropertyChanged(x => ImportActions);
                    break;
            }
           
        }

		
		public readonly ImportActionsVirturalListLoader vloader = new ImportActionsVirturalListLoader();

		private ObservableCollection<ImportActions> _selectedImportActions = new ObservableCollection<ImportActions>();
        public ObservableCollection<ImportActions> SelectedImportActions
        {
            get
            {
                return _selectedImportActions;
            }
            set
            {
                _selectedImportActions = value;
				BeginSendMessage(MessageToken.SelectedImportActionsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedImportActionsChanged));
				 NotifyPropertyChanged(x => SelectedImportActions);
            }
        }

        internal virtual void OnCurrentImportActionsChanged(object sender, NotificationEventArgs<ImportActions> e)
        {
            if(BaseViewModel.Instance.CurrentImportActions != null) BaseViewModel.Instance.CurrentImportActions.PropertyChanged += CurrentImportActions__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentImportActions);
        }   

            void CurrentImportActions__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddFileTypes")
                   // {
                   //    if(FileTypes.Contains(CurrentImportActions.FileTypes) == false) FileTypes.Add(CurrentImportActions.FileTypes);
                    //}
                 } 
        internal virtual void OnImportActionsChanged(object sender, NotificationEventArgs e)
        {
            _ImportActions.Refresh();
			NotifyPropertyChanged(x => this.ImportActions);
        }   


 	
		 internal virtual void OnCurrentFileTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypes> e)
			{
			if(ViewCurrentFileTypes == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("FileTypeId == {0}", e.Data.Id.ToString());
                 }

				ImportActions.Refresh();
				NotifyPropertyChanged(x => this.ImportActions);
                // SendMessage(MessageToken.ImportActionsChanged, new NotificationEventArgs(MessageToken.ImportActionsChanged));
                                          
                BaseViewModel.Instance.CurrentImportActions = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentFileTypes = false;
         public bool ViewCurrentFileTypes
         {
             get
             {
                 return _viewCurrentFileTypes;
             }
             set
             {
                 _viewCurrentFileTypes = value;
                 NotifyPropertyChanged(x => x.ViewCurrentFileTypes);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_ImportActions.Refresh();
			NotifyPropertyChanged(x => this.ImportActions);
		}

		public async Task SelectAll()
        {
            IEnumerable<ImportActions> lst = null;
            using (var ctx = new ImportActionsRepository())
            {
                lst = await ctx.GetImportActionsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedImportActions = new ObservableCollection<ImportActions>(lst);
        }

 

		private string _nameFilter;
        public string NameFilter
        {
            get
            {
                return _nameFilter;
            }
            set
            {
                _nameFilter = value;
				NotifyPropertyChanged(x => NameFilter);
                FilterData();
                
            }
        }	

 

		private string _actionFilter;
        public string ActionFilter
        {
            get
            {
                return _actionFilter;
            }
            set
            {
                _actionFilter = value;
				NotifyPropertyChanged(x => ActionFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			ImportActions.Refresh();
			NotifyPropertyChanged(x => this.ImportActions);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(NameFilter) == false)
						res.Append(" && " + string.Format("Name.Contains(\"{0}\")",  NameFilter));						
 

									if(string.IsNullOrEmpty(ActionFilter) == false)
						res.Append(" && " + string.Format("Action.Contains(\"{0}\")",  ActionFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<ImportActions> lst = null;
            using (var ctx = new ImportActionsRepository())
            {
                lst = await ctx.GetImportActionsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<ImportActionsExcelLine, List<ImportActionsExcelLine>>
            {
                dataToPrint = lst.Select(x => new ImportActionsExcelLine
                {
 
                    Name = x.Name ,
                    
 
                    Action = x.Action 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class ImportActionsExcelLine
        {
		 
                    public string Name { get; set; } 
                    
 
                    public string Action { get; set; } 
                    
        }

		
    }
}
		

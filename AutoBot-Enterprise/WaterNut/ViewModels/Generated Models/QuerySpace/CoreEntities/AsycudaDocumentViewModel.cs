// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class AsycudaDocumentViewModel_AutoGen : ViewModelBase<AsycudaDocumentViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentViewModel_AutoGen instance;
       static AsycudaDocumentViewModel_AutoGen()
        {
            instance = new AsycudaDocumentViewModel_AutoGen();
        }

       public static AsycudaDocumentViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocument>(MessageToken.CurrentAsycudaDocumentChanged, OnCurrentAsycudaDocumentChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentsChanged, OnAsycudaDocumentsChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentsFilterExpressionChanged, OnAsycudaDocumentsFilterExpressionChanged);

 
			RegisterToReceiveMessages<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, OnCurrentAsycudaDocumentSetExChanged);
 
			RegisterToReceiveMessages<ApplicationSettings>(MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
 
			RegisterToReceiveMessages<Customs_Procedure>(MessageToken.CurrentCustoms_ProcedureChanged, OnCurrentCustoms_ProcedureChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocuments = new VirtualList<AsycudaDocument>(vloader);
			AsycudaDocuments.LoadingStateChanged += AsycudaDocuments_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocuments, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocument> _AsycudaDocuments = null;
        public VirtualList<AsycudaDocument> AsycudaDocuments
        {
            get
            {
                return _AsycudaDocuments;
            }
            set
            {
                _AsycudaDocuments = value;
                NotifyPropertyChanged( x => x.AsycudaDocuments);
            }
        }

		 private void OnAsycudaDocumentsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => AsycudaDocuments.Refresh()).ConfigureAwait(false);
            SelectedAsycudaDocuments.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocuments);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentsChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentsChanged));
        }

		void AsycudaDocuments_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocuments.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocuments);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocuments | Error occured..." + AsycudaDocuments.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocuments);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentVirturalListLoader vloader = new AsycudaDocumentVirturalListLoader();

		private ObservableCollection<AsycudaDocument> _selectedAsycudaDocuments = new ObservableCollection<AsycudaDocument>();
        public ObservableCollection<AsycudaDocument> SelectedAsycudaDocuments
        {
            get
            {
                return _selectedAsycudaDocuments;
            }
            set
            {
                _selectedAsycudaDocuments = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentsChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocuments);
            }
        }

        internal virtual void OnCurrentAsycudaDocumentChanged(object sender, NotificationEventArgs<AsycudaDocument> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocument != null) BaseViewModel.Instance.CurrentAsycudaDocument.PropertyChanged += CurrentAsycudaDocument__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocument);
        }   

            void CurrentAsycudaDocument__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddAsycudaDocumentSetEx")
                   // {
                   //    if(AsycudaDocumentSetExs.Contains(CurrentAsycudaDocument.AsycudaDocumentSetEx) == false) AsycudaDocumentSetExs.Add(CurrentAsycudaDocument.AsycudaDocumentSetEx);
                    //}
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentAsycudaDocument.ApplicationSettings) == false) ApplicationSettings.Add(CurrentAsycudaDocument.ApplicationSettings);
                    //}
                    //if (e.PropertyName == "AddCustoms_Procedure")
                   // {
                   //    if(Customs_Procedure.Contains(CurrentAsycudaDocument.Customs_Procedure) == false) Customs_Procedure.Add(CurrentAsycudaDocument.Customs_Procedure);
                    //}
                    //if (e.PropertyName == "AddDocument_Type")
                   // {
                   //    if(Document_Type.Contains(CurrentAsycudaDocument.Document_Type) == false) Document_Type.Add(CurrentAsycudaDocument.Document_Type);
                    //}
                 } 
        internal virtual void OnAsycudaDocumentsChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocuments.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocuments);
        }   


 	
		 internal virtual void OnCurrentAsycudaDocumentSetExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEx> e)
			{
			if(ViewCurrentAsycudaDocumentSetEx == false) return;
			if (e.Data == null || e.Data.AsycudaDocumentSetId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("AsycudaDocumentSetId == {0}", e.Data.AsycudaDocumentSetId.ToString());
                 }

				AsycudaDocuments.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocuments);
                // SendMessage(MessageToken.AsycudaDocumentsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentsChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocument = null;
			}
	
		 internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
			{
			if(ViewCurrentApplicationSettings == false) return;
			if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                 }

				AsycudaDocuments.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocuments);
                // SendMessage(MessageToken.AsycudaDocumentsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentsChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocument = null;
			}
	
		 internal virtual void OnCurrentCustoms_ProcedureChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Customs_Procedure> e)
			{
			if(ViewCurrentCustoms_Procedure == false) return;
			if (e.Data == null || e.Data.Customs_ProcedureId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("Customs_ProcedureId == {0}", e.Data.Customs_ProcedureId.ToString());
                 }

				AsycudaDocuments.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocuments);
                // SendMessage(MessageToken.AsycudaDocumentsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentsChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocument = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentDocument_TypeChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Document_Type> e)
				{
				if (e.Data == null || e.Data.Document_TypeId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("Document_TypeId == {0}", e.Data.Document_TypeId.ToString());
                }
					
                    AsycudaDocuments.Refresh();
					NotifyPropertyChanged(x => this.AsycudaDocuments);
				}
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentAsycudaDocumentSetEx = false;
         public bool ViewCurrentAsycudaDocumentSetEx
         {
             get
             {
                 return _viewCurrentAsycudaDocumentSetEx;
             }
             set
             {
                 _viewCurrentAsycudaDocumentSetEx = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocumentSetEx);
                FilterData();
             }
         }
 	
		 bool _viewCurrentApplicationSettings = false;
         public bool ViewCurrentApplicationSettings
         {
             get
             {
                 return _viewCurrentApplicationSettings;
             }
             set
             {
                 _viewCurrentApplicationSettings = value;
                 NotifyPropertyChanged(x => x.ViewCurrentApplicationSettings);
                FilterData();
             }
         }
 	
		 bool _viewCurrentCustoms_Procedure = false;
         public bool ViewCurrentCustoms_Procedure
         {
             get
             {
                 return _viewCurrentCustoms_Procedure;
             }
             set
             {
                 _viewCurrentCustoms_Procedure = value;
                 NotifyPropertyChanged(x => x.ViewCurrentCustoms_Procedure);
                FilterData();
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_AsycudaDocuments.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocuments);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocument> lst = null;
            using (var ctx = new AsycudaDocumentRepository())
            {
                lst = await ctx.GetAsycudaDocumentsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocuments = new ObservableCollection<AsycudaDocument>(lst);
        }

 

		private string _idFilter;
        public string idFilter
        {
            get
            {
                return _idFilter;
            }
            set
            {
                _idFilter = value;
				NotifyPropertyChanged(x => idFilter);
                FilterData();
                
            }
        }	

 

		private string _cNumberFilter;
        public string CNumberFilter
        {
            get
            {
                return _cNumberFilter;
            }
            set
            {
                _cNumberFilter = value;
				NotifyPropertyChanged(x => CNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartRegistrationDateFilter
        {
            get
            {
                return _startRegistrationDateFilter;
            }
            set
            {
                _startRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndRegistrationDateFilter
        {
            get
            {
                return _endRegistrationDateFilter;
            }
            set
            {
                _endRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _registrationDateFilter;
        public DateTime? RegistrationDateFilter
        {
            get
            {
                return _registrationDateFilter;
            }
            set
            {
                _registrationDateFilter = value;
				NotifyPropertyChanged(x => RegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isManuallyAssessedFilter;
        public Boolean? IsManuallyAssessedFilter
        {
            get
            {
                return _isManuallyAssessedFilter;
            }
            set
            {
                _isManuallyAssessedFilter = value;
				NotifyPropertyChanged(x => IsManuallyAssessedFilter);
                FilterData();
                
            }
        }	

 

		private string _referenceNumberFilter;
        public string ReferenceNumberFilter
        {
            get
            {
                return _referenceNumberFilter;
            }
            set
            {
                _referenceNumberFilter = value;
				NotifyPropertyChanged(x => ReferenceNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startEffectiveRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartEffectiveRegistrationDateFilter
        {
            get
            {
                return _startEffectiveRegistrationDateFilter;
            }
            set
            {
                _startEffectiveRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartEffectiveRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endEffectiveRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndEffectiveRegistrationDateFilter
        {
            get
            {
                return _endEffectiveRegistrationDateFilter;
            }
            set
            {
                _endEffectiveRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndEffectiveRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _effectiveRegistrationDateFilter;
        public DateTime? EffectiveRegistrationDateFilter
        {
            get
            {
                return _effectiveRegistrationDateFilter;
            }
            set
            {
                _effectiveRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EffectiveRegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _doNotAllocateFilter;
        public Boolean? DoNotAllocateFilter
        {
            get
            {
                return _doNotAllocateFilter;
            }
            set
            {
                _doNotAllocateFilter = value;
				NotifyPropertyChanged(x => DoNotAllocateFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _autoUpdateFilter;
        public Boolean? AutoUpdateFilter
        {
            get
            {
                return _autoUpdateFilter;
            }
            set
            {
                _autoUpdateFilter = value;
				NotifyPropertyChanged(x => AutoUpdateFilter);
                FilterData();
                
            }
        }	

 

		private string _bLNumberFilter;
        public string BLNumberFilter
        {
            get
            {
                return _bLNumberFilter;
            }
            set
            {
                _bLNumberFilter = value;
				NotifyPropertyChanged(x => BLNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _descriptionFilter;
        public string DescriptionFilter
        {
            get
            {
                return _descriptionFilter;
            }
            set
            {
                _descriptionFilter = value;
				NotifyPropertyChanged(x => DescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _type_of_declarationFilter;
        public string Type_of_declarationFilter
        {
            get
            {
                return _type_of_declarationFilter;
            }
            set
            {
                _type_of_declarationFilter = value;
				NotifyPropertyChanged(x => Type_of_declarationFilter);
                FilterData();
                
            }
        }	

 

		private string _declaration_gen_procedure_codeFilter;
        public string Declaration_gen_procedure_codeFilter
        {
            get
            {
                return _declaration_gen_procedure_codeFilter;
            }
            set
            {
                _declaration_gen_procedure_codeFilter = value;
				NotifyPropertyChanged(x => Declaration_gen_procedure_codeFilter);
                FilterData();
                
            }
        }	

 

		private string _extended_customs_procedureFilter;
        public string Extended_customs_procedureFilter
        {
            get
            {
                return _extended_customs_procedureFilter;
            }
            set
            {
                _extended_customs_procedureFilter = value;
				NotifyPropertyChanged(x => Extended_customs_procedureFilter);
                FilterData();
                
            }
        }	

 

		private string _country_first_destinationFilter;
        public string Country_first_destinationFilter
        {
            get
            {
                return _country_first_destinationFilter;
            }
            set
            {
                _country_first_destinationFilter = value;
				NotifyPropertyChanged(x => Country_first_destinationFilter);
                FilterData();
                
            }
        }	

 

		private string _currency_codeFilter;
        public string Currency_codeFilter
        {
            get
            {
                return _currency_codeFilter;
            }
            set
            {
                _currency_codeFilter = value;
				NotifyPropertyChanged(x => Currency_codeFilter);
                FilterData();
                
            }
        }	

 

		private Double? _currency_rateFilter;
        public Double? Currency_rateFilter
        {
            get
            {
                return _currency_rateFilter;
            }
            set
            {
                _currency_rateFilter = value;
				NotifyPropertyChanged(x => Currency_rateFilter);
                FilterData();
                
            }
        }	

 

		private string _manifest_reference_numberFilter;
        public string Manifest_reference_numberFilter
        {
            get
            {
                return _manifest_reference_numberFilter;
            }
            set
            {
                _manifest_reference_numberFilter = value;
				NotifyPropertyChanged(x => Manifest_reference_numberFilter);
                FilterData();
                
            }
        }	

 

		private string _customs_clearance_office_codeFilter;
        public string Customs_clearance_office_codeFilter
        {
            get
            {
                return _customs_clearance_office_codeFilter;
            }
            set
            {
                _customs_clearance_office_codeFilter = value;
				NotifyPropertyChanged(x => Customs_clearance_office_codeFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _linesFilter;
        public Int32? LinesFilter
        {
            get
            {
                return _linesFilter;
            }
            set
            {
                _linesFilter = value;
				NotifyPropertyChanged(x => LinesFilter);
                FilterData();
                
            }
        }	

 

		private string _documentTypeFilter;
        public string DocumentTypeFilter
        {
            get
            {
                return _documentTypeFilter;
            }
            set
            {
                _documentTypeFilter = value;
				NotifyPropertyChanged(x => DocumentTypeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _importCompleteFilter;
        public Boolean? ImportCompleteFilter
        {
            get
            {
                return _importCompleteFilter;
            }
            set
            {
                _importCompleteFilter = value;
				NotifyPropertyChanged(x => ImportCompleteFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _cancelledFilter;
        public Boolean? CancelledFilter
        {
            get
            {
                return _cancelledFilter;
            }
            set
            {
                _cancelledFilter = value;
				NotifyPropertyChanged(x => CancelledFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalCIFFilter;
        public Double? TotalCIFFilter
        {
            get
            {
                return _totalCIFFilter;
            }
            set
            {
                _totalCIFFilter = value;
				NotifyPropertyChanged(x => TotalCIFFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalGrossWeightFilter;
        public Double? TotalGrossWeightFilter
        {
            get
            {
                return _totalGrossWeightFilter;
            }
            set
            {
                _totalGrossWeightFilter = value;
				NotifyPropertyChanged(x => TotalGrossWeightFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startAssessmentDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartAssessmentDateFilter
        {
            get
            {
                return _startAssessmentDateFilter;
            }
            set
            {
                _startAssessmentDateFilter = value;
				NotifyPropertyChanged(x => StartAssessmentDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endAssessmentDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndAssessmentDateFilter
        {
            get
            {
                return _endAssessmentDateFilter;
            }
            set
            {
                _endAssessmentDateFilter = value;
				NotifyPropertyChanged(x => EndAssessmentDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _assessmentDateFilter;
        public DateTime? AssessmentDateFilter
        {
            get
            {
                return _assessmentDateFilter;
            }
            set
            {
                _assessmentDateFilter = value;
				NotifyPropertyChanged(x => AssessmentDateFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalFreightFilter;
        public Double? TotalFreightFilter
        {
            get
            {
                return _totalFreightFilter;
            }
            set
            {
                _totalFreightFilter = value;
				NotifyPropertyChanged(x => TotalFreightFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startExpiryDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartExpiryDateFilter
        {
            get
            {
                return _startExpiryDateFilter;
            }
            set
            {
                _startExpiryDateFilter = value;
				NotifyPropertyChanged(x => StartExpiryDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endExpiryDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndExpiryDateFilter
        {
            get
            {
                return _endExpiryDateFilter;
            }
            set
            {
                _endExpiryDateFilter = value;
				NotifyPropertyChanged(x => EndExpiryDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _expiryDateFilter;
        public DateTime? ExpiryDateFilter
        {
            get
            {
                return _expiryDateFilter;
            }
            set
            {
                _expiryDateFilter = value;
				NotifyPropertyChanged(x => ExpiryDateFilter);
                FilterData();
                
            }
        }	

 

		private string _sourceFileNameFilter;
        public string SourceFileNameFilter
        {
            get
            {
                return _sourceFileNameFilter;
            }
            set
            {
                _sourceFileNameFilter = value;
				NotifyPropertyChanged(x => SourceFileNameFilter);
                FilterData();
                
            }
        }	

 

		private string _customsProcedureFilter;
        public string CustomsProcedureFilter
        {
            get
            {
                return _customsProcedureFilter;
            }
            set
            {
                _customsProcedureFilter = value;
				NotifyPropertyChanged(x => CustomsProcedureFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isPaidFilter;
        public Boolean? IsPaidFilter
        {
            get
            {
                return _isPaidFilter;
            }
            set
            {
                _isPaidFilter = value;
				NotifyPropertyChanged(x => IsPaidFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _submitToCustomsFilter;
        public Boolean? SubmitToCustomsFilter
        {
            get
            {
                return _submitToCustomsFilter;
            }
            set
            {
                _submitToCustomsFilter = value;
				NotifyPropertyChanged(x => SubmitToCustomsFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalDeductionFilter;
        public Double? TotalDeductionFilter
        {
            get
            {
                return _totalDeductionFilter;
            }
            set
            {
                _totalDeductionFilter = value;
				NotifyPropertyChanged(x => TotalDeductionFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalOtherCostFilter;
        public Double? TotalOtherCostFilter
        {
            get
            {
                return _totalOtherCostFilter;
            }
            set
            {
                _totalOtherCostFilter = value;
				NotifyPropertyChanged(x => TotalOtherCostFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalInternalFreightFilter;
        public Double? TotalInternalFreightFilter
        {
            get
            {
                return _totalInternalFreightFilter;
            }
            set
            {
                _totalInternalFreightFilter = value;
				NotifyPropertyChanged(x => TotalInternalFreightFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalInsuranceFilter;
        public Double? TotalInsuranceFilter
        {
            get
            {
                return _totalInsuranceFilter;
            }
            set
            {
                _totalInsuranceFilter = value;
				NotifyPropertyChanged(x => TotalInsuranceFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocuments.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocuments);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(idFilter) == false)
						res.Append(" && " + string.Format("id.Contains(\"{0}\")",  idFilter));						
 

									if(string.IsNullOrEmpty(CNumberFilter) == false)
						res.Append(" && " + string.Format("CNumber.Contains(\"{0}\")",  CNumberFilter));						
 

 

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("RegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_registrationDateFilter).Date != DateTime.MinValue)
						{
							if(RegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate == \"{0}\"",  Convert.ToDateTime(RegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(IsManuallyAssessedFilter.HasValue)
						res.Append(" && " + string.Format("IsManuallyAssessed == {0}",  IsManuallyAssessedFilter));						
 

									if(string.IsNullOrEmpty(ReferenceNumberFilter) == false)
						res.Append(" && " + string.Format("ReferenceNumber.Contains(\"{0}\")",  ReferenceNumberFilter));						
 

 

				if (Convert.ToDateTime(StartEffectiveRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEffectiveRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartEffectiveRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartEffectiveRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndEffectiveRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("EffectiveRegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartEffectiveRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndEffectiveRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndEffectiveRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("EffectiveRegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndEffectiveRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartEffectiveRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEffectiveRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_effectiveRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EffectiveRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("EffectiveRegistrationDate == \"{0}\"",  Convert.ToDateTime(EffectiveRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(DoNotAllocateFilter.HasValue)
						res.Append(" && " + string.Format("DoNotAllocate == {0}",  DoNotAllocateFilter));						
 

									if(AutoUpdateFilter.HasValue)
						res.Append(" && " + string.Format("AutoUpdate == {0}",  AutoUpdateFilter));						
 

									if(string.IsNullOrEmpty(BLNumberFilter) == false)
						res.Append(" && " + string.Format("BLNumber.Contains(\"{0}\")",  BLNumberFilter));						
 

									if(string.IsNullOrEmpty(DescriptionFilter) == false)
						res.Append(" && " + string.Format("Description.Contains(\"{0}\")",  DescriptionFilter));						
 

									if(string.IsNullOrEmpty(Type_of_declarationFilter) == false)
						res.Append(" && " + string.Format("Type_of_declaration.Contains(\"{0}\")",  Type_of_declarationFilter));						
 

									if(string.IsNullOrEmpty(Declaration_gen_procedure_codeFilter) == false)
						res.Append(" && " + string.Format("Declaration_gen_procedure_code.Contains(\"{0}\")",  Declaration_gen_procedure_codeFilter));						
 

									if(string.IsNullOrEmpty(Extended_customs_procedureFilter) == false)
						res.Append(" && " + string.Format("Extended_customs_procedure.Contains(\"{0}\")",  Extended_customs_procedureFilter));						
 

									if(string.IsNullOrEmpty(Country_first_destinationFilter) == false)
						res.Append(" && " + string.Format("Country_first_destination.Contains(\"{0}\")",  Country_first_destinationFilter));						
 

									if(string.IsNullOrEmpty(Currency_codeFilter) == false)
						res.Append(" && " + string.Format("Currency_code.Contains(\"{0}\")",  Currency_codeFilter));						
 

					if(Currency_rateFilter.HasValue)
						res.Append(" && " + string.Format("Currency_rate == {0}",  Currency_rateFilter.ToString()));				 

									if(string.IsNullOrEmpty(Manifest_reference_numberFilter) == false)
						res.Append(" && " + string.Format("Manifest_reference_number.Contains(\"{0}\")",  Manifest_reference_numberFilter));						
 

									if(string.IsNullOrEmpty(Customs_clearance_office_codeFilter) == false)
						res.Append(" && " + string.Format("Customs_clearance_office_code.Contains(\"{0}\")",  Customs_clearance_office_codeFilter));						
 

					if(LinesFilter.HasValue)
						res.Append(" && " + string.Format("Lines == {0}",  LinesFilter.ToString()));				 

									if(string.IsNullOrEmpty(DocumentTypeFilter) == false)
						res.Append(" && " + string.Format("DocumentType.Contains(\"{0}\")",  DocumentTypeFilter));						
 

									if(ImportCompleteFilter.HasValue)
						res.Append(" && " + string.Format("ImportComplete == {0}",  ImportCompleteFilter));						
 

									if(CancelledFilter.HasValue)
						res.Append(" && " + string.Format("Cancelled == {0}",  CancelledFilter));						
 

					if(TotalCIFFilter.HasValue)
						res.Append(" && " + string.Format("TotalCIF == {0}",  TotalCIFFilter.ToString()));				 

					if(TotalGrossWeightFilter.HasValue)
						res.Append(" && " + string.Format("TotalGrossWeight == {0}",  TotalGrossWeightFilter.ToString()));				 

 

				if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue)
						{
							if(StartAssessmentDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("AssessmentDate >= \"{0}\"",  Convert.ToDateTime(StartAssessmentDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue)
						{
							if(EndAssessmentDateFilter.HasValue)
								res.Append(" && " + string.Format("AssessmentDate <= \"{0}\"",  Convert.ToDateTime(EndAssessmentDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_assessmentDateFilter).Date != DateTime.MinValue)
						{
							if(AssessmentDateFilter.HasValue)
								res.Append(" && " + string.Format("AssessmentDate == \"{0}\"",  Convert.ToDateTime(AssessmentDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(TotalFreightFilter.HasValue)
						res.Append(" && " + string.Format("TotalFreight == {0}",  TotalFreightFilter.ToString()));				 

 

				if (Convert.ToDateTime(StartExpiryDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartExpiryDateFilter).Date != DateTime.MinValue)
						{
							if(StartExpiryDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("ExpiryDate >= \"{0}\"",  Convert.ToDateTime(StartExpiryDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue)
						{
							if(EndExpiryDateFilter.HasValue)
								res.Append(" && " + string.Format("ExpiryDate <= \"{0}\"",  Convert.ToDateTime(EndExpiryDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartExpiryDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_expiryDateFilter).Date != DateTime.MinValue)
						{
							if(ExpiryDateFilter.HasValue)
								res.Append(" && " + string.Format("ExpiryDate == \"{0}\"",  Convert.ToDateTime(ExpiryDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(SourceFileNameFilter) == false)
						res.Append(" && " + string.Format("SourceFileName.Contains(\"{0}\")",  SourceFileNameFilter));						
 

									if(string.IsNullOrEmpty(CustomsProcedureFilter) == false)
						res.Append(" && " + string.Format("CustomsProcedure.Contains(\"{0}\")",  CustomsProcedureFilter));						
 

									if(IsPaidFilter.HasValue)
						res.Append(" && " + string.Format("IsPaid == {0}",  IsPaidFilter));						
 

									if(SubmitToCustomsFilter.HasValue)
						res.Append(" && " + string.Format("SubmitToCustoms == {0}",  SubmitToCustomsFilter));						
 

					if(TotalDeductionFilter.HasValue)
						res.Append(" && " + string.Format("TotalDeduction == {0}",  TotalDeductionFilter.ToString()));				 

					if(TotalOtherCostFilter.HasValue)
						res.Append(" && " + string.Format("TotalOtherCost == {0}",  TotalOtherCostFilter.ToString()));				 

					if(TotalInternalFreightFilter.HasValue)
						res.Append(" && " + string.Format("TotalInternalFreight == {0}",  TotalInternalFreightFilter.ToString()));				 

					if(TotalInsuranceFilter.HasValue)
						res.Append(" && " + string.Format("TotalInsurance == {0}",  TotalInsuranceFilter.ToString()));							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocument> lst = null;
            using (var ctx = new AsycudaDocumentRepository())
            {
                lst = await ctx.GetAsycudaDocumentsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentExcelLine, List<AsycudaDocumentExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentExcelLine
                {
 
                    id = x.id ,
                    
 
                    CNumber = x.CNumber ,
                    
 
                    RegistrationDate = x.RegistrationDate ,
                    
 
                    IsManuallyAssessed = x.IsManuallyAssessed ,
                    
 
                    ReferenceNumber = x.ReferenceNumber ,
                    
 
                    EffectiveRegistrationDate = x.EffectiveRegistrationDate ,
                    
 
                    DoNotAllocate = x.DoNotAllocate ,
                    
 
                    AutoUpdate = x.AutoUpdate ,
                    
 
                    BLNumber = x.BLNumber ,
                    
 
                    Description = x.Description ,
                    
 
                    Type_of_declaration = x.Type_of_declaration ,
                    
 
                    Declaration_gen_procedure_code = x.Declaration_gen_procedure_code ,
                    
 
                    Extended_customs_procedure = x.Extended_customs_procedure ,
                    
 
                    Country_first_destination = x.Country_first_destination ,
                    
 
                    Currency_code = x.Currency_code ,
                    
 
                    Currency_rate = x.Currency_rate ,
                    
 
                    Manifest_reference_number = x.Manifest_reference_number ,
                    
 
                    Customs_clearance_office_code = x.Customs_clearance_office_code ,
                    
 
                    Lines = x.Lines ,
                    
 
                    DocumentType = x.DocumentType ,
                    
 
                    ImportComplete = x.ImportComplete ,
                    
 
                    Cancelled = x.Cancelled ,
                    
 
                    TotalCIF = x.TotalCIF ,
                    
 
                    TotalGrossWeight = x.TotalGrossWeight ,
                    
 
                    AssessmentDate = x.AssessmentDate ,
                    
 
                    TotalFreight = x.TotalFreight ,
                    
 
                    ExpiryDate = x.ExpiryDate ,
                    
 
                    SourceFileName = x.SourceFileName ,
                    
 
                    CustomsProcedure = x.CustomsProcedure ,
                    
 
                    IsPaid = x.IsPaid ,
                    
 
                    SubmitToCustoms = x.SubmitToCustoms ,
                    
 
                    TotalDeduction = x.TotalDeduction ,
                    
 
                    TotalOtherCost = x.TotalOtherCost ,
                    
 
                    TotalInternalFreight = x.TotalInternalFreight ,
                    
 
                    TotalInsurance = x.TotalInsurance 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class AsycudaDocumentExcelLine
        {
		 
                    public string id { get; set; } 
                    
 
                    public string CNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> RegistrationDate { get; set; } 
                    
 
                    public Nullable<bool> IsManuallyAssessed { get; set; } 
                    
 
                    public string ReferenceNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> EffectiveRegistrationDate { get; set; } 
                    
 
                    public Nullable<bool> DoNotAllocate { get; set; } 
                    
 
                    public Nullable<bool> AutoUpdate { get; set; } 
                    
 
                    public string BLNumber { get; set; } 
                    
 
                    public string Description { get; set; } 
                    
 
                    public string Type_of_declaration { get; set; } 
                    
 
                    public string Declaration_gen_procedure_code { get; set; } 
                    
 
                    public string Extended_customs_procedure { get; set; } 
                    
 
                    public string Country_first_destination { get; set; } 
                    
 
                    public string Currency_code { get; set; } 
                    
 
                    public Nullable<double> Currency_rate { get; set; } 
                    
 
                    public string Manifest_reference_number { get; set; } 
                    
 
                    public string Customs_clearance_office_code { get; set; } 
                    
 
                    public Nullable<int> Lines { get; set; } 
                    
 
                    public string DocumentType { get; set; } 
                    
 
                    public Nullable<bool> ImportComplete { get; set; } 
                    
 
                    public Nullable<bool> Cancelled { get; set; } 
                    
 
                    public Nullable<double> TotalCIF { get; set; } 
                    
 
                    public decimal? TotalGrossWeight { get; set; } 
                    
 
                    public Nullable<System.DateTime> AssessmentDate { get; set; } 
                    
 
                    public Nullable<double> TotalFreight { get; set; } 
                    
 
                    public Nullable<System.DateTime> ExpiryDate { get; set; } 
                    
 
                    public string SourceFileName { get; set; } 
                    
 
                    public string CustomsProcedure { get; set; } 
                    
 
                    public Nullable<bool> IsPaid { get; set; } 
                    
 
                    public Nullable<bool> SubmitToCustoms { get; set; } 
                    
 
                    public Nullable<double> TotalDeduction { get; set; } 
                    
 
                    public Nullable<double> TotalOtherCost { get; set; } 
                    
 
                    public Nullable<double> TotalInternalFreight { get; set; } 
                    
 
                    public Nullable<double> TotalInsurance { get; set; } 
                    
        }

		
    }
}
		

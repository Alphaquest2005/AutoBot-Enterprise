// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class AsycudaDocumentSetEntryDataExViewModel_AutoGen : ViewModelBase<AsycudaDocumentSetEntryDataExViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentSetEntryDataExViewModel_AutoGen instance;
       static AsycudaDocumentSetEntryDataExViewModel_AutoGen()
        {
            instance = new AsycudaDocumentSetEntryDataExViewModel_AutoGen();
        }

       public static AsycudaDocumentSetEntryDataExViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentSetEntryDataExViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentSetEntryDataEx>(MessageToken.CurrentAsycudaDocumentSetEntryDataExChanged, OnCurrentAsycudaDocumentSetEntryDataExChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetEntryDataExChanged, OnAsycudaDocumentSetEntryDataExChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetEntryDataExFilterExpressionChanged, OnAsycudaDocumentSetEntryDataExFilterExpressionChanged);

 
			RegisterToReceiveMessages<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, OnCurrentAsycudaDocumentSetExChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentSetEntryDataEx = new VirtualList<AsycudaDocumentSetEntryDataEx>(vloader);
			AsycudaDocumentSetEntryDataEx.LoadingStateChanged += AsycudaDocumentSetEntryDataEx_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentSetEntryDataEx, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentSetEntryDataEx> _AsycudaDocumentSetEntryDataEx = null;
        public VirtualList<AsycudaDocumentSetEntryDataEx> AsycudaDocumentSetEntryDataEx
        {
            get
            {
                return _AsycudaDocumentSetEntryDataEx;
            }
            set
            {
                _AsycudaDocumentSetEntryDataEx = value;
                NotifyPropertyChanged( x => x.AsycudaDocumentSetEntryDataEx);
            }
        }

		 private void OnAsycudaDocumentSetEntryDataExFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => AsycudaDocumentSetEntryDataEx.Refresh()).ConfigureAwait(false);
            SelectedAsycudaDocumentSetEntryDataEx.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentSetEntryDataEx);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetEntryDataExChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetEntryDataExChanged));
        }

		void AsycudaDocumentSetEntryDataEx_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentSetEntryDataEx.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentSetEntryDataEx);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentSetEntryDataEx | Error occured..." + AsycudaDocumentSetEntryDataEx.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentSetEntryDataEx);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentSetEntryDataExVirturalListLoader vloader = new AsycudaDocumentSetEntryDataExVirturalListLoader();

		private ObservableCollection<AsycudaDocumentSetEntryDataEx> _selectedAsycudaDocumentSetEntryDataEx = new ObservableCollection<AsycudaDocumentSetEntryDataEx>();
        public ObservableCollection<AsycudaDocumentSetEntryDataEx> SelectedAsycudaDocumentSetEntryDataEx
        {
            get
            {
                return _selectedAsycudaDocumentSetEntryDataEx;
            }
            set
            {
                _selectedAsycudaDocumentSetEntryDataEx = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetEntryDataExChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetEntryDataExChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentSetEntryDataEx);
            }
        }

        internal virtual void OnCurrentAsycudaDocumentSetEntryDataExChanged(object sender, NotificationEventArgs<AsycudaDocumentSetEntryDataEx> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentSetEntryDataEx != null) BaseViewModel.Instance.CurrentAsycudaDocumentSetEntryDataEx.PropertyChanged += CurrentAsycudaDocumentSetEntryDataEx__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryDataEx);
        }   

            void CurrentAsycudaDocumentSetEntryDataEx__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddAsycudaDocumentSetEx")
                   // {
                   //    if(AsycudaDocumentSetExs.Contains(CurrentAsycudaDocumentSetEntryDataEx.AsycudaDocumentSetEx) == false) AsycudaDocumentSetExs.Add(CurrentAsycudaDocumentSetEntryDataEx.AsycudaDocumentSetEx);
                    //}
                 } 
        internal virtual void OnAsycudaDocumentSetEntryDataExChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentSetEntryDataEx.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryDataEx);
        }   


 	
		 internal virtual void OnCurrentAsycudaDocumentSetExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEx> e)
			{
			if(ViewCurrentAsycudaDocumentSetEx == false) return;
			if (e.Data == null || e.Data.AsycudaDocumentSetId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("AsycudaDocumentSetId == {0}", e.Data.AsycudaDocumentSetId.ToString());
                 }

				AsycudaDocumentSetEntryDataEx.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryDataEx);
                // SendMessage(MessageToken.AsycudaDocumentSetEntryDataExChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentSetEntryDataExChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocumentSetEntryDataEx = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentAsycudaDocumentSetEx = false;
         public bool ViewCurrentAsycudaDocumentSetEx
         {
             get
             {
                 return _viewCurrentAsycudaDocumentSetEx;
             }
             set
             {
                 _viewCurrentAsycudaDocumentSetEx = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocumentSetEx);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_AsycudaDocumentSetEntryDataEx.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryDataEx);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentSetEntryDataEx> lst = null;
            using (var ctx = new AsycudaDocumentSetEntryDataExRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetEntryDataExByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentSetEntryDataEx = new ObservableCollection<AsycudaDocumentSetEntryDataEx>(lst);
        }

 

		private string _entryDataIdFilter;
        public string EntryDataIdFilter
        {
            get
            {
                return _entryDataIdFilter;
            }
            set
            {
                _entryDataIdFilter = value;
				NotifyPropertyChanged(x => EntryDataIdFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startEntryDataDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartEntryDataDateFilter
        {
            get
            {
                return _startEntryDataDateFilter;
            }
            set
            {
                _startEntryDataDateFilter = value;
				NotifyPropertyChanged(x => StartEntryDataDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endEntryDataDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndEntryDataDateFilter
        {
            get
            {
                return _endEntryDataDateFilter;
            }
            set
            {
                _endEntryDataDateFilter = value;
				NotifyPropertyChanged(x => EndEntryDataDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _entryDataDateFilter;
        public DateTime? EntryDataDateFilter
        {
            get
            {
                return _entryDataDateFilter;
            }
            set
            {
                _entryDataDateFilter = value;
				NotifyPropertyChanged(x => EntryDataDateFilter);
                FilterData();
                
            }
        }	

 

		private Double? _invoiceTotalFilter;
        public Double? InvoiceTotalFilter
        {
            get
            {
                return _invoiceTotalFilter;
            }
            set
            {
                _invoiceTotalFilter = value;
				NotifyPropertyChanged(x => InvoiceTotalFilter);
                FilterData();
                
            }
        }	

 

		private string _sourceFileFilter;
        public string SourceFileFilter
        {
            get
            {
                return _sourceFileFilter;
            }
            set
            {
                _sourceFileFilter = value;
				NotifyPropertyChanged(x => SourceFileFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentSetEntryDataEx.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryDataEx);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(EntryDataIdFilter) == false)
						res.Append(" && " + string.Format("EntryDataId.Contains(\"{0}\")",  EntryDataIdFilter));						
 

 

				if (Convert.ToDateTime(StartEntryDataDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEntryDataDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartEntryDataDateFilter).Date != DateTime.MinValue)
						{
							if(StartEntryDataDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndEntryDataDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("EntryDataDate >= \"{0}\"",  Convert.ToDateTime(StartEntryDataDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndEntryDataDateFilter).Date != DateTime.MinValue)
						{
							if(EndEntryDataDateFilter.HasValue)
								res.Append(" && " + string.Format("EntryDataDate <= \"{0}\"",  Convert.ToDateTime(EndEntryDataDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartEntryDataDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEntryDataDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_entryDataDateFilter).Date != DateTime.MinValue)
						{
							if(EntryDataDateFilter.HasValue)
								res.Append(" && " + string.Format("EntryDataDate == \"{0}\"",  Convert.ToDateTime(EntryDataDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(InvoiceTotalFilter.HasValue)
						res.Append(" && " + string.Format("InvoiceTotal == {0}",  InvoiceTotalFilter.ToString()));				 

									if(string.IsNullOrEmpty(SourceFileFilter) == false)
						res.Append(" && " + string.Format("SourceFile.Contains(\"{0}\")",  SourceFileFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentSetEntryDataEx> lst = null;
            using (var ctx = new AsycudaDocumentSetEntryDataExRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetEntryDataExByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentSetEntryDataExExcelLine, List<AsycudaDocumentSetEntryDataExExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentSetEntryDataExExcelLine
                {
 
                    EntryDataId = x.EntryDataId ,
                    
 
                    EntryDataDate = x.EntryDataDate ,
                    
 
                    InvoiceTotal = x.InvoiceTotal ,
                    
 
                    SourceFile = x.SourceFile 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class AsycudaDocumentSetEntryDataExExcelLine
        {
		 
                    public string EntryDataId { get; set; } 
                    
 
                    public System.DateTime EntryDataDate { get; set; } 
                    
 
                    public Nullable<double> InvoiceTotal { get; set; } 
                    
 
                    public string SourceFile { get; set; } 
                    
        }

		
    }
}
		

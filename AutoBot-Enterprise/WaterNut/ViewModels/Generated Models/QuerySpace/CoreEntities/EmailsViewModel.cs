// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class EmailsViewModel_AutoGen : ViewModelBase<EmailsViewModel_AutoGen>
	{

       private static readonly EmailsViewModel_AutoGen instance;
       static EmailsViewModel_AutoGen()
        {
            instance = new EmailsViewModel_AutoGen();
        }

       public static EmailsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public EmailsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<Emails>(MessageToken.CurrentEmailsChanged, OnCurrentEmailsChanged);
            RegisterToReceiveMessages(MessageToken.EmailsChanged, OnEmailsChanged);
			RegisterToReceiveMessages(MessageToken.EmailsFilterExpressionChanged, OnEmailsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			Emails = new VirtualList<Emails>(vloader);
			Emails.LoadingStateChanged += Emails_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(Emails, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<Emails> _Emails = null;
        public VirtualList<Emails> Emails
        {
            get
            {
                return _Emails;
            }
            set
            {
                _Emails = value;
                NotifyPropertyChanged( x => x.Emails);
            }
        }

		 private void OnEmailsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => Emails.Refresh()).ConfigureAwait(false);
            SelectedEmails.Clear();
            NotifyPropertyChanged(x => SelectedEmails);
            BeginSendMessage(MessageToken.SelectedEmailsChanged, new NotificationEventArgs(MessageToken.SelectedEmailsChanged));
        }

		void Emails_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (Emails.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => Emails);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("Emails | Error occured..." + Emails.LastLoadingError.Message);
                    NotifyPropertyChanged(x => Emails);
                    break;
            }
           
        }

		
		public readonly EmailsVirturalListLoader vloader = new EmailsVirturalListLoader();

		private ObservableCollection<Emails> _selectedEmails = new ObservableCollection<Emails>();
        public ObservableCollection<Emails> SelectedEmails
        {
            get
            {
                return _selectedEmails;
            }
            set
            {
                _selectedEmails = value;
				BeginSendMessage(MessageToken.SelectedEmailsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedEmailsChanged));
				 NotifyPropertyChanged(x => SelectedEmails);
            }
        }

        internal virtual void OnCurrentEmailsChanged(object sender, NotificationEventArgs<Emails> e)
        {
            if(BaseViewModel.Instance.CurrentEmails != null) BaseViewModel.Instance.CurrentEmails.PropertyChanged += CurrentEmails__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentEmails);
        }   

            void CurrentEmails__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentEmails.ApplicationSettings) == false) ApplicationSettings.Add(CurrentEmails.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnEmailsChanged(object sender, NotificationEventArgs e)
        {
            _Emails.Refresh();
			NotifyPropertyChanged(x => this.Emails);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    Emails.Refresh();
					NotifyPropertyChanged(x => this.Emails);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_Emails.Refresh();
			NotifyPropertyChanged(x => this.Emails);
		}

		public async Task SelectAll()
        {
            IEnumerable<Emails> lst = null;
            using (var ctx = new EmailsRepository())
            {
                lst = await ctx.GetEmailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedEmails = new ObservableCollection<Emails>(lst);
        }

 

		private string _subjectFilter;
        public string SubjectFilter
        {
            get
            {
                return _subjectFilter;
            }
            set
            {
                _subjectFilter = value;
				NotifyPropertyChanged(x => SubjectFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startEmailDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartEmailDateFilter
        {
            get
            {
                return _startEmailDateFilter;
            }
            set
            {
                _startEmailDateFilter = value;
				NotifyPropertyChanged(x => StartEmailDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endEmailDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndEmailDateFilter
        {
            get
            {
                return _endEmailDateFilter;
            }
            set
            {
                _endEmailDateFilter = value;
				NotifyPropertyChanged(x => EndEmailDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _emailDateFilter;
        public DateTime? EmailDateFilter
        {
            get
            {
                return _emailDateFilter;
            }
            set
            {
                _emailDateFilter = value;
				NotifyPropertyChanged(x => EmailDateFilter);
                FilterData();
                
            }
        }	

 

		private string _emailIdFilter;
        public string EmailIdFilter
        {
            get
            {
                return _emailIdFilter;
            }
            set
            {
                _emailIdFilter = value;
				NotifyPropertyChanged(x => EmailIdFilter);
                FilterData();
                
            }
        }	

 

		private string _machineNameFilter;
        public string MachineNameFilter
        {
            get
            {
                return _machineNameFilter;
            }
            set
            {
                _machineNameFilter = value;
				NotifyPropertyChanged(x => MachineNameFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			Emails.Refresh();
			NotifyPropertyChanged(x => this.Emails);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(SubjectFilter) == false)
						res.Append(" && " + string.Format("Subject.Contains(\"{0}\")",  SubjectFilter));						
 

 

				if (Convert.ToDateTime(StartEmailDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEmailDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartEmailDateFilter).Date != DateTime.MinValue)
						{
							if(StartEmailDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndEmailDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("EmailDate >= \"{0}\"",  Convert.ToDateTime(StartEmailDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndEmailDateFilter).Date != DateTime.MinValue)
						{
							if(EndEmailDateFilter.HasValue)
								res.Append(" && " + string.Format("EmailDate <= \"{0}\"",  Convert.ToDateTime(EndEmailDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartEmailDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEmailDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_emailDateFilter).Date != DateTime.MinValue)
						{
							if(EmailDateFilter.HasValue)
								res.Append(" && " + string.Format("EmailDate == \"{0}\"",  Convert.ToDateTime(EmailDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(EmailIdFilter) == false)
						res.Append(" && " + string.Format("EmailId.Contains(\"{0}\")",  EmailIdFilter));						
 

									if(string.IsNullOrEmpty(MachineNameFilter) == false)
						res.Append(" && " + string.Format("MachineName.Contains(\"{0}\")",  MachineNameFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<Emails> lst = null;
            using (var ctx = new EmailsRepository())
            {
                lst = await ctx.GetEmailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<EmailsExcelLine, List<EmailsExcelLine>>
            {
                dataToPrint = lst.Select(x => new EmailsExcelLine
                {
 
                    Subject = x.Subject ,
                    
 
                    EmailDate = x.EmailDate ,
                    
 
                    EmailId = x.EmailId ,
                    
 
                    MachineName = x.MachineName 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class EmailsExcelLine
        {
		 
                    public string Subject { get; set; } 
                    
 
                    public System.DateTime EmailDate { get; set; } 
                    
 
                    public string EmailId { get; set; } 
                    
 
                    public string MachineName { get; set; } 
                    
        }

		
    }
}
		

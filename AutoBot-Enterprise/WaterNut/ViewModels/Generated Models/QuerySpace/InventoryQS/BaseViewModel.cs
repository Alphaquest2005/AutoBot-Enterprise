// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using InventoryQS.Client.Entities;
using InventoryQS.Client.Repositories;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;



namespace WaterNut.QuerySpace.InventoryQS.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // CoreEntities.ViewModels.BaseViewModel
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class InventoryQSOnCreated: BaseViewModel
        {
           // Load Repository
                public InventoryQSOnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentEntryDataDetailsExIDChanged, OnCurrentEntryDataDetailsExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInventoryItemsExIDChanged, OnCurrentInventoryItemsExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTariffCategoryIDChanged, OnCurrentTariffCategoryIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTariffCategoryCodeSuppUnitIDChanged, OnCurrentTariffCategoryCodeSuppUnitIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTariffCodesIDChanged, OnCurrentTariffCodesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTariffSupUnitLkpsIDChanged, OnCurrentTariffSupUnitLkpsIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<EntryDataDetailsEx>(MessageToken.CurrentEntryDataDetailsExChanged, OnCurrentEntryDataDetailsExChanged);
                        RegisterToReceiveMessages<InventoryItemsEx>(MessageToken.CurrentInventoryItemsExChanged, OnCurrentInventoryItemsExChanged);
                        RegisterToReceiveMessages<TariffCategory>(MessageToken.CurrentTariffCategoryChanged, OnCurrentTariffCategoryChanged);
                        RegisterToReceiveMessages<TariffCategoryCodeSuppUnit>(MessageToken.CurrentTariffCategoryCodeSuppUnitChanged, OnCurrentTariffCategoryCodeSuppUnitChanged);
                        RegisterToReceiveMessages<TariffCodes>(MessageToken.CurrentTariffCodesChanged, OnCurrentTariffCodesChanged);
                        RegisterToReceiveMessages<TariffSupUnitLkps>(MessageToken.CurrentTariffSupUnitLkpsChanged, OnCurrentTariffSupUnitLkpsChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentEntryDataDetailsExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EntryDataDetailsExRepository ctx = new EntryDataDetailsExRepository())
                            {
                                CurrentEntryDataDetailsEx = await ctx.GetEntryDataDetailsEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEntryDataDetailsEx);
                        }

                        private  string _currentEntryDataDetailsExID = "";
                        public string CurrentEntryDataDetailsExID
                        {
                            get
                            {
                                return _currentEntryDataDetailsExID;
                            }
                            set
                            {
                                if (_currentEntryDataDetailsExID != value)
                                {
                                    _currentEntryDataDetailsExID = value;
                                    if (!string.IsNullOrEmpty(_currentEntryDataDetailsExID)) BeginSendMessage(MessageToken.CurrentEntryDataDetailsExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEntryDataDetailsExIDChanged, _currentEntryDataDetailsExID));
                                    NotifyPropertyChanged(x => this.CurrentEntryDataDetailsExID);  
                                }
                            }
                        }
                        internal async void OnCurrentInventoryItemsExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InventoryItemsExRepository ctx = new InventoryItemsExRepository())
                            {
                                CurrentInventoryItemsEx = await ctx.GetInventoryItemsEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInventoryItemsEx);
                        }

                        private  string _currentInventoryItemsExID = "";
                        public string CurrentInventoryItemsExID
                        {
                            get
                            {
                                return _currentInventoryItemsExID;
                            }
                            set
                            {
                                if (_currentInventoryItemsExID != value)
                                {
                                    _currentInventoryItemsExID = value;
                                    if (!string.IsNullOrEmpty(_currentInventoryItemsExID)) BeginSendMessage(MessageToken.CurrentInventoryItemsExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInventoryItemsExIDChanged, _currentInventoryItemsExID));
                                    NotifyPropertyChanged(x => this.CurrentInventoryItemsExID);  
                                }
                            }
                        }
                        internal async void OnCurrentTariffCategoryIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TariffCategoryRepository ctx = new TariffCategoryRepository())
                            {
                                CurrentTariffCategory = await ctx.GetTariffCategory(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTariffCategory);
                        }

                        private  string _currentTariffCategoryID = "";
                        public string CurrentTariffCategoryID
                        {
                            get
                            {
                                return _currentTariffCategoryID;
                            }
                            set
                            {
                                if (_currentTariffCategoryID != value)
                                {
                                    _currentTariffCategoryID = value;
                                    if (!string.IsNullOrEmpty(_currentTariffCategoryID)) BeginSendMessage(MessageToken.CurrentTariffCategoryIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTariffCategoryIDChanged, _currentTariffCategoryID));
                                    NotifyPropertyChanged(x => this.CurrentTariffCategoryID);  
                                }
                            }
                        }
                        internal async void OnCurrentTariffCategoryCodeSuppUnitIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TariffCategoryCodeSuppUnitRepository ctx = new TariffCategoryCodeSuppUnitRepository())
                            {
                                CurrentTariffCategoryCodeSuppUnit = await ctx.GetTariffCategoryCodeSuppUnit(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTariffCategoryCodeSuppUnit);
                        }

                        private  string _currentTariffCategoryCodeSuppUnitID = "";
                        public string CurrentTariffCategoryCodeSuppUnitID
                        {
                            get
                            {
                                return _currentTariffCategoryCodeSuppUnitID;
                            }
                            set
                            {
                                if (_currentTariffCategoryCodeSuppUnitID != value)
                                {
                                    _currentTariffCategoryCodeSuppUnitID = value;
                                    if (!string.IsNullOrEmpty(_currentTariffCategoryCodeSuppUnitID)) BeginSendMessage(MessageToken.CurrentTariffCategoryCodeSuppUnitIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTariffCategoryCodeSuppUnitIDChanged, _currentTariffCategoryCodeSuppUnitID));
                                    NotifyPropertyChanged(x => this.CurrentTariffCategoryCodeSuppUnitID);  
                                }
                            }
                        }
                        internal async void OnCurrentTariffCodesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TariffCodesRepository ctx = new TariffCodesRepository())
                            {
                                CurrentTariffCodes = await ctx.GetTariffCodes(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTariffCodes);
                        }

                        private  string _currentTariffCodesID = "";
                        public string CurrentTariffCodesID
                        {
                            get
                            {
                                return _currentTariffCodesID;
                            }
                            set
                            {
                                if (_currentTariffCodesID != value)
                                {
                                    _currentTariffCodesID = value;
                                    if (!string.IsNullOrEmpty(_currentTariffCodesID)) BeginSendMessage(MessageToken.CurrentTariffCodesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTariffCodesIDChanged, _currentTariffCodesID));
                                    NotifyPropertyChanged(x => this.CurrentTariffCodesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTariffSupUnitLkpsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TariffSupUnitLkpsRepository ctx = new TariffSupUnitLkpsRepository())
                            {
                                CurrentTariffSupUnitLkps = await ctx.GetTariffSupUnitLkps(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTariffSupUnitLkps);
                        }

                        private  string _currentTariffSupUnitLkpsID = "";
                        public string CurrentTariffSupUnitLkpsID
                        {
                            get
                            {
                                return _currentTariffSupUnitLkpsID;
                            }
                            set
                            {
                                if (_currentTariffSupUnitLkpsID != value)
                                {
                                    _currentTariffSupUnitLkpsID = value;
                                    if (!string.IsNullOrEmpty(_currentTariffSupUnitLkpsID)) BeginSendMessage(MessageToken.CurrentTariffSupUnitLkpsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTariffSupUnitLkpsIDChanged, _currentTariffSupUnitLkpsID));
                                    NotifyPropertyChanged(x => this.CurrentTariffSupUnitLkpsID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentEntryDataDetailsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EntryDataDetailsEx> e)
        {
            //CurrentEntryDataDetailsEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentEntryDataDetailsEx);
        }

        private  EntryDataDetailsEx _currentEntryDataDetailsEx;
        public EntryDataDetailsEx CurrentEntryDataDetailsEx
        {
            get
            {
                return _currentEntryDataDetailsEx;
            }
            set
            {
                if (_currentEntryDataDetailsEx != value)
                {
                    _currentEntryDataDetailsEx = value;
                    BeginSendMessage(MessageToken.CurrentEntryDataDetailsExChanged,
                                                     new NotificationEventArgs<EntryDataDetailsEx>(MessageToken.CurrentEntryDataDetailsExChanged, _currentEntryDataDetailsEx)); 
                    NotifyPropertyChanged(x => this.CurrentEntryDataDetailsEx);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<EntryDataDetailsEx> _vcurrentEntryDataDetailsEx;
        public VirtualListItem<EntryDataDetailsEx> VCurrentEntryDataDetailsEx
        {
            get
            {
                return _vcurrentEntryDataDetailsEx;
            }
            set
            {
                if (_vcurrentEntryDataDetailsEx != value)
                {
                    _vcurrentEntryDataDetailsEx = value;
					if(_vcurrentEntryDataDetailsEx != null) CurrentEntryDataDetailsEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEntryDataDetailsEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentInventoryItemsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItemsEx> e)
        {
            //CurrentInventoryItemsEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentInventoryItemsEx);
        }

        private  InventoryItemsEx _currentInventoryItemsEx;
        public InventoryItemsEx CurrentInventoryItemsEx
        {
            get
            {
                return _currentInventoryItemsEx;
            }
            set
            {
                if (_currentInventoryItemsEx != value)
                {
                    _currentInventoryItemsEx = value;
                    BeginSendMessage(MessageToken.CurrentInventoryItemsExChanged,
                                                     new NotificationEventArgs<InventoryItemsEx>(MessageToken.CurrentInventoryItemsExChanged, _currentInventoryItemsEx)); 
                    NotifyPropertyChanged(x => this.CurrentInventoryItemsEx);    
                    // all current navigation properties = null
                 CurrentEntryDataDetailsEx = null;
   
                }
            }
        }

		VirtualListItem<InventoryItemsEx> _vcurrentInventoryItemsEx;
        public VirtualListItem<InventoryItemsEx> VCurrentInventoryItemsEx
        {
            get
            {
                return _vcurrentInventoryItemsEx;
            }
            set
            {
                if (_vcurrentInventoryItemsEx != value)
                {
                    _vcurrentInventoryItemsEx = value;
					if(_vcurrentInventoryItemsEx != null) CurrentInventoryItemsEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInventoryItemsEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentTariffCategoryChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TariffCategory> e)
        {
            //CurrentTariffCategory = e.Data;
            NotifyPropertyChanged(m => this.CurrentTariffCategory);
        }

        private  TariffCategory _currentTariffCategory;
        public TariffCategory CurrentTariffCategory
        {
            get
            {
                return _currentTariffCategory;
            }
            set
            {
                if (_currentTariffCategory != value)
                {
                    _currentTariffCategory = value;
                    BeginSendMessage(MessageToken.CurrentTariffCategoryChanged,
                                                     new NotificationEventArgs<TariffCategory>(MessageToken.CurrentTariffCategoryChanged, _currentTariffCategory)); 
                    NotifyPropertyChanged(x => this.CurrentTariffCategory);    
                    // all current navigation properties = null
                 CurrentTariffCodes = null;
                 CurrentTariffCategoryCodeSuppUnit = null;
   
                }
            }
        }

		VirtualListItem<TariffCategory> _vcurrentTariffCategory;
        public VirtualListItem<TariffCategory> VCurrentTariffCategory
        {
            get
            {
                return _vcurrentTariffCategory;
            }
            set
            {
                if (_vcurrentTariffCategory != value)
                {
                    _vcurrentTariffCategory = value;
					if(_vcurrentTariffCategory != null) CurrentTariffCategory = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTariffCategory);                    
                }
            }
        }



                     
       

        internal void OnCurrentTariffCategoryCodeSuppUnitChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TariffCategoryCodeSuppUnit> e)
        {
            //CurrentTariffCategoryCodeSuppUnit = e.Data;
            NotifyPropertyChanged(m => this.CurrentTariffCategoryCodeSuppUnit);
        }

        private  TariffCategoryCodeSuppUnit _currentTariffCategoryCodeSuppUnit;
        public TariffCategoryCodeSuppUnit CurrentTariffCategoryCodeSuppUnit
        {
            get
            {
                return _currentTariffCategoryCodeSuppUnit;
            }
            set
            {
                if (_currentTariffCategoryCodeSuppUnit != value)
                {
                    _currentTariffCategoryCodeSuppUnit = value;
                    BeginSendMessage(MessageToken.CurrentTariffCategoryCodeSuppUnitChanged,
                                                     new NotificationEventArgs<TariffCategoryCodeSuppUnit>(MessageToken.CurrentTariffCategoryCodeSuppUnitChanged, _currentTariffCategoryCodeSuppUnit)); 
                    NotifyPropertyChanged(x => this.CurrentTariffCategoryCodeSuppUnit);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TariffCategoryCodeSuppUnit> _vcurrentTariffCategoryCodeSuppUnit;
        public VirtualListItem<TariffCategoryCodeSuppUnit> VCurrentTariffCategoryCodeSuppUnit
        {
            get
            {
                return _vcurrentTariffCategoryCodeSuppUnit;
            }
            set
            {
                if (_vcurrentTariffCategoryCodeSuppUnit != value)
                {
                    _vcurrentTariffCategoryCodeSuppUnit = value;
					if(_vcurrentTariffCategoryCodeSuppUnit != null) CurrentTariffCategoryCodeSuppUnit = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTariffCategoryCodeSuppUnit);                    
                }
            }
        }



                     
       

        internal void OnCurrentTariffCodesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TariffCodes> e)
        {
            //CurrentTariffCodes = e.Data;
            NotifyPropertyChanged(m => this.CurrentTariffCodes);
        }

        private  TariffCodes _currentTariffCodes;
        public TariffCodes CurrentTariffCodes
        {
            get
            {
                return _currentTariffCodes;
            }
            set
            {
                if (_currentTariffCodes != value)
                {
                    _currentTariffCodes = value;
                    BeginSendMessage(MessageToken.CurrentTariffCodesChanged,
                                                     new NotificationEventArgs<TariffCodes>(MessageToken.CurrentTariffCodesChanged, _currentTariffCodes)); 
                    NotifyPropertyChanged(x => this.CurrentTariffCodes);    
                    // all current navigation properties = null
                 CurrentInventoryItemsEx = null;
   
                }
            }
        }

		VirtualListItem<TariffCodes> _vcurrentTariffCodes;
        public VirtualListItem<TariffCodes> VCurrentTariffCodes
        {
            get
            {
                return _vcurrentTariffCodes;
            }
            set
            {
                if (_vcurrentTariffCodes != value)
                {
                    _vcurrentTariffCodes = value;
					if(_vcurrentTariffCodes != null) CurrentTariffCodes = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTariffCodes);                    
                }
            }
        }



                     
       

        internal void OnCurrentTariffSupUnitLkpsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TariffSupUnitLkps> e)
        {
            //CurrentTariffSupUnitLkps = e.Data;
            NotifyPropertyChanged(m => this.CurrentTariffSupUnitLkps);
        }

        private  TariffSupUnitLkps _currentTariffSupUnitLkps;
        public TariffSupUnitLkps CurrentTariffSupUnitLkps
        {
            get
            {
                return _currentTariffSupUnitLkps;
            }
            set
            {
                if (_currentTariffSupUnitLkps != value)
                {
                    _currentTariffSupUnitLkps = value;
                    BeginSendMessage(MessageToken.CurrentTariffSupUnitLkpsChanged,
                                                     new NotificationEventArgs<TariffSupUnitLkps>(MessageToken.CurrentTariffSupUnitLkpsChanged, _currentTariffSupUnitLkps)); 
                    NotifyPropertyChanged(x => this.CurrentTariffSupUnitLkps);    
                    // all current navigation properties = null
                 CurrentTariffCategoryCodeSuppUnit = null;
   
                }
            }
        }

		VirtualListItem<TariffSupUnitLkps> _vcurrentTariffSupUnitLkps;
        public VirtualListItem<TariffSupUnitLkps> VCurrentTariffSupUnitLkps
        {
            get
            {
                return _vcurrentTariffSupUnitLkps;
            }
            set
            {
                if (_vcurrentTariffSupUnitLkps != value)
                {
                    _vcurrentTariffSupUnitLkps = value;
					if(_vcurrentTariffSupUnitLkps != null) CurrentTariffSupUnitLkps = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTariffSupUnitLkps);                    
                }
            }
        }






        static InventoryQSOnCreated newInventoryQSOnCreated = new InventoryQSOnCreated();
    }		
}

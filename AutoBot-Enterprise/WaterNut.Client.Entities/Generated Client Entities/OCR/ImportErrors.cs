// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class ImportErrors: BaseEntity<ImportErrors>
    {
        DTO.ImportErrors importerrors;
        public ImportErrors(DTO.ImportErrors dto )
        {
              importerrors = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.ImportErrors>(importerrors);

        }

        public DTO.ImportErrors DTO
        {
            get
            {
             return importerrors;
            }
            set
            {
                importerrors = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.importerrors.Id; }
			set
			{
			    if (value == this.importerrors.Id) return;
				this.importerrors.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "PdfText is required")]
       
                
                
public string PdfText
		{ 
		    get { return this.importerrors.PdfText; }
			set
			{
			    if (value == this.importerrors.PdfText) return;
				this.importerrors.PdfText = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PdfText");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Error is required")]
       
                
                [MaxLength(500, ErrorMessage = "Error has a max length of 500 letters ")]
public string Error
		{ 
		    get { return this.importerrors.Error; }
			set
			{
			    if (value == this.importerrors.Error) return;
				this.importerrors.Error = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Error");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryDateTime is required")]
       
public System.DateTime EntryDateTime
		{ 
		    get { return this.importerrors.EntryDateTime; }
			set
			{
			    if (value == this.importerrors.EntryDateTime) return;
				this.importerrors.EntryDateTime = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDateTime");
			}
		}
     

        ObservableCollection<OCR_FailedLines> _OCR_FailedLines = null;
        public  ObservableCollection<OCR_FailedLines> OCR_FailedLines
		{
            
		    get 
				{ 
					if(_OCR_FailedLines != null) return _OCR_FailedLines;
					//if (this.importerrors.OCR_FailedLines == null) Debugger.Break();
					if(this.importerrors.OCR_FailedLines != null)
					{
						_OCR_FailedLines = new ObservableCollection<OCR_FailedLines>(this.importerrors.OCR_FailedLines.Select(x => new OCR_FailedLines(x)));
					}
					
						_OCR_FailedLines.CollectionChanged += OCR_FailedLines_CollectionChanged; 
					
					return _OCR_FailedLines; 
				}
			set
			{
			    if (Equals(value, _OCR_FailedLines)) return;
				if (value != null)
					this.importerrors.OCR_FailedLines = new ChangeTrackingCollection<DTO.OCR_FailedLines>(value.Select(x => x.DTO).ToList());
                _OCR_FailedLines = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_OCR_FailedLines != null)
				_OCR_FailedLines.CollectionChanged += OCR_FailedLines_CollectionChanged;               
				NotifyPropertyChanged("OCR_FailedLines");
			}
		}
        
        void OCR_FailedLines_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (OCR_FailedLines itm in e.NewItems)
                    {
                        if (itm != null)
                        importerrors.OCR_FailedLines.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (OCR_FailedLines itm in e.OldItems)
                    {
                        if (itm != null)
                        importerrors.OCR_FailedLines.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.ImportErrors> _changeTracker;    
        public ChangeTrackingCollection<DTO.ImportErrors> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



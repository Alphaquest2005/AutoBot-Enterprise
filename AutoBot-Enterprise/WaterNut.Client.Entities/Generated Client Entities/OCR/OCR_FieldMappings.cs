// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class OCR_FieldMappings: BaseEntity<OCR_FieldMappings>
    {
        DTO.OCR_FieldMappings ocr_fieldmappings;
        public OCR_FieldMappings(DTO.OCR_FieldMappings dto )
        {
              ocr_fieldmappings = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.OCR_FieldMappings>(ocr_fieldmappings);

        }

        public DTO.OCR_FieldMappings DTO
        {
            get
            {
             return ocr_fieldmappings;
            }
            set
            {
                ocr_fieldmappings = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.ocr_fieldmappings.Id; }
			set
			{
			    if (value == this.ocr_fieldmappings.Id) return;
				this.ocr_fieldmappings.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Key is required")]
       
                
                [MaxLength(50, ErrorMessage = "Key has a max length of 50 letters ")]
public string Key
		{ 
		    get { return this.ocr_fieldmappings.Key; }
			set
			{
			    if (value == this.ocr_fieldmappings.Key) return;
				this.ocr_fieldmappings.Key = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Key");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Field is required")]
       
                
                [MaxLength(50, ErrorMessage = "Field has a max length of 50 letters ")]
public string Field
		{ 
		    get { return this.ocr_fieldmappings.Field; }
			set
			{
			    if (value == this.ocr_fieldmappings.Field) return;
				this.ocr_fieldmappings.Field = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Field");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntityType is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntityType has a max length of 50 letters ")]
public string EntityType
		{ 
		    get { return this.ocr_fieldmappings.EntityType; }
			set
			{
			    if (value == this.ocr_fieldmappings.EntityType) return;
				this.ocr_fieldmappings.EntityType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntityType");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "IsRequired is required")]
       
public bool IsRequired
		{ 
		    get { return this.ocr_fieldmappings.IsRequired; }
			set
			{
			    if (value == this.ocr_fieldmappings.IsRequired) return;
				this.ocr_fieldmappings.IsRequired = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsRequired");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DataType is required")]
       
                
                [MaxLength(50, ErrorMessage = "DataType has a max length of 50 letters ")]
public string DataType
		{ 
		    get { return this.ocr_fieldmappings.DataType; }
			set
			{
			    if (value == this.ocr_fieldmappings.DataType) return;
				this.ocr_fieldmappings.DataType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DataType");
			}
		}
     

       
       
public Nullable<bool> AppendValues
		{ 
		    get { return this.ocr_fieldmappings.AppendValues; }
			set
			{
			    if (value == this.ocr_fieldmappings.AppendValues) return;
				this.ocr_fieldmappings.AppendValues = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AppendValues");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "FileType is required")]
       
public int FileTypeId
		{ 
		    get { return this.ocr_fieldmappings.FileTypeId; }
			set
			{
			    if (value == this.ocr_fieldmappings.FileTypeId) return;
				this.ocr_fieldmappings.FileTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FileTypeId");
			}
		}
     


        ChangeTrackingCollection<DTO.OCR_FieldMappings> _changeTracker;    
        public ChangeTrackingCollection<DTO.OCR_FieldMappings> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



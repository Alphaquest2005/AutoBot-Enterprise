// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class OCR_FailedLines: BaseEntity<OCR_FailedLines>
    {
        DTO.OCR_FailedLines ocr_failedlines;
        public OCR_FailedLines(DTO.OCR_FailedLines dto )
        {
              ocr_failedlines = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.OCR_FailedLines>(ocr_failedlines);

        }

        public DTO.OCR_FailedLines DTO
        {
            get
            {
             return ocr_failedlines;
            }
            set
            {
                ocr_failedlines = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.ocr_failedlines.Id; }
			set
			{
			    if (value == this.ocr_failedlines.Id) return;
				this.ocr_failedlines.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DocSetAttachment is required")]
       
public int DocSetAttachmentId
		{ 
		    get { return this.ocr_failedlines.DocSetAttachmentId; }
			set
			{
			    if (value == this.ocr_failedlines.DocSetAttachmentId) return;
				this.ocr_failedlines.DocSetAttachmentId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocSetAttachmentId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Line is required")]
       
public int LineId
		{ 
		    get { return this.ocr_failedlines.LineId; }
			set
			{
			    if (value == this.ocr_failedlines.LineId) return;
				this.ocr_failedlines.LineId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Resolved is required")]
       
public bool Resolved
		{ 
		    get { return this.ocr_failedlines.Resolved; }
			set
			{
			    if (value == this.ocr_failedlines.Resolved) return;
				this.ocr_failedlines.Resolved = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Resolved");
			}
		}
     

       private ImportErrors _ImportErrors;
        public  ImportErrors ImportErrors
		{
		    get
               { 
                  if (this.ocr_failedlines != null)
                   {
                       if (_ImportErrors != null)
                       {
                           if (this.ocr_failedlines.ImportErrors !=
                               _ImportErrors.DTO)
                           {
                                if (this.ocr_failedlines.ImportErrors  != null)
                               _ImportErrors = new ImportErrors(this.ocr_failedlines.ImportErrors);
                           }
                       }
                       else
                       {
                             if (this.ocr_failedlines.ImportErrors  != null)
                           _ImportErrors = new ImportErrors(this.ocr_failedlines.ImportErrors);
                       }
                   }


             //       if (_ImportErrors != null) return _ImportErrors;
                       
             //       var i = new ImportErrors(){TrackingState = TrackingState.Added};
			//		//if (this.ocr_failedlines.ImportErrors == null) Debugger.Break();
			//		if (this.ocr_failedlines.ImportErrors != null)
            //        {
            //           i. = this.ocr_failedlines.ImportErrors;
            //        }
            //        else
            //        {
            //            this.ocr_failedlines.ImportErrors = i.;
             //       }
                           
            //        _ImportErrors = i;
                     
                    return _ImportErrors;
               }
			set
			{
			    if (value == _ImportErrors) return;
                _ImportErrors = value;
                if(value != null)
                     this.ocr_failedlines.ImportErrors = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("ImportErrors");
			}
		}
        

        ObservableCollection<OCR_FailedFields> _OCR_FailedFields = null;
        public  ObservableCollection<OCR_FailedFields> OCR_FailedFields
		{
            
		    get 
				{ 
					if(_OCR_FailedFields != null) return _OCR_FailedFields;
					//if (this.ocr_failedlines.OCR_FailedFields == null) Debugger.Break();
					if(this.ocr_failedlines.OCR_FailedFields != null)
					{
						_OCR_FailedFields = new ObservableCollection<OCR_FailedFields>(this.ocr_failedlines.OCR_FailedFields.Select(x => new OCR_FailedFields(x)));
					}
					
						_OCR_FailedFields.CollectionChanged += OCR_FailedFields_CollectionChanged; 
					
					return _OCR_FailedFields; 
				}
			set
			{
			    if (Equals(value, _OCR_FailedFields)) return;
				if (value != null)
					this.ocr_failedlines.OCR_FailedFields = new ChangeTrackingCollection<DTO.OCR_FailedFields>(value.Select(x => x.DTO).ToList());
                _OCR_FailedFields = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_OCR_FailedFields != null)
				_OCR_FailedFields.CollectionChanged += OCR_FailedFields_CollectionChanged;               
				NotifyPropertyChanged("OCR_FailedFields");
			}
		}
        
        void OCR_FailedFields_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (OCR_FailedFields itm in e.NewItems)
                    {
                        if (itm != null)
                        ocr_failedlines.OCR_FailedFields.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (OCR_FailedFields itm in e.OldItems)
                    {
                        if (itm != null)
                        ocr_failedlines.OCR_FailedFields.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private Lines _OCR_Lines;
        public  Lines OCR_Lines
		{
		    get
               { 
                  if (this.ocr_failedlines != null)
                   {
                       if (_OCR_Lines != null)
                       {
                           if (this.ocr_failedlines.OCR_Lines !=
                               _OCR_Lines.DTO)
                           {
                                if (this.ocr_failedlines.OCR_Lines  != null)
                               _OCR_Lines = new Lines(this.ocr_failedlines.OCR_Lines);
                           }
                       }
                       else
                       {
                             if (this.ocr_failedlines.OCR_Lines  != null)
                           _OCR_Lines = new Lines(this.ocr_failedlines.OCR_Lines);
                       }
                   }


             //       if (_OCR_Lines != null) return _OCR_Lines;
                       
             //       var i = new Lines(){TrackingState = TrackingState.Added};
			//		//if (this.ocr_failedlines.OCR_Lines == null) Debugger.Break();
			//		if (this.ocr_failedlines.OCR_Lines != null)
            //        {
            //           i. = this.ocr_failedlines.OCR_Lines;
            //        }
            //        else
            //        {
            //            this.ocr_failedlines.OCR_Lines = i.;
             //       }
                           
            //        _OCR_Lines = i;
                     
                    return _OCR_Lines;
               }
			set
			{
			    if (value == _OCR_Lines) return;
                _OCR_Lines = value;
                if(value != null)
                     this.ocr_failedlines.OCR_Lines = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("OCR_Lines");
			}
		}
        


        ChangeTrackingCollection<DTO.OCR_FailedLines> _changeTracker;    
        public ChangeTrackingCollection<DTO.OCR_FailedLines> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using InventoryQS.Client.DTO;


using Core.Common.Validation;

namespace InventoryQS.Client.Entities
{
       public partial class TariffCategory: BaseEntity<TariffCategory>
    {
        DTO.TariffCategory tariffcategory;
        public TariffCategory(DTO.TariffCategory dto )
        {
              tariffcategory = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TariffCategory>(tariffcategory);

        }

        public DTO.TariffCategory DTO
        {
            get
            {
             return tariffcategory;
            }
            set
            {
                tariffcategory = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "TariffCategoryCode is required")]
       
                
                [MaxLength(50, ErrorMessage = "TariffCategoryCode has a max length of 50 letters ")]
public string TariffCategoryCode
		{ 
		    get { return this.tariffcategory.TariffCategoryCode; }
			set
			{
			    if (value == this.tariffcategory.TariffCategoryCode) return;
				this.tariffcategory.TariffCategoryCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCategoryCode");
			}
		}
     

       
       
                
                [MaxLength(999, ErrorMessage = "Description has a max length of 999 letters ")]
public string Description
		{ 
		    get { return this.tariffcategory.Description; }
			set
			{
			    if (value == this.tariffcategory.Description) return;
				this.tariffcategory.Description = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "ParentTariffCategoryCode has a max length of 50 letters ")]
public string ParentTariffCategoryCode
		{ 
		    get { return this.tariffcategory.ParentTariffCategoryCode; }
			set
			{
			    if (value == this.tariffcategory.ParentTariffCategoryCode) return;
				this.tariffcategory.ParentTariffCategoryCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ParentTariffCategoryCode");
			}
		}
     

       
       
public Nullable<bool> LicenseRequired
		{ 
		    get { return this.tariffcategory.LicenseRequired; }
			set
			{
			    if (value == this.tariffcategory.LicenseRequired) return;
				this.tariffcategory.LicenseRequired = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LicenseRequired");
			}
		}
     

        ObservableCollection<TariffCodes> _TariffCodes = null;
        public  ObservableCollection<TariffCodes> TariffCodes
		{
            
		    get 
				{ 
					if(_TariffCodes != null) return _TariffCodes;
					//if (this.tariffcategory.TariffCodes == null) Debugger.Break();
					if(this.tariffcategory.TariffCodes != null)
					{
						_TariffCodes = new ObservableCollection<TariffCodes>(this.tariffcategory.TariffCodes.Select(x => new TariffCodes(x)));
					}
					
						_TariffCodes.CollectionChanged += TariffCodes_CollectionChanged; 
					
					return _TariffCodes; 
				}
			set
			{
			    if (Equals(value, _TariffCodes)) return;
				if (value != null)
					this.tariffcategory.TariffCodes = new ChangeTrackingCollection<DTO.TariffCodes>(value.Select(x => x.DTO).ToList());
                _TariffCodes = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TariffCodes != null)
				_TariffCodes.CollectionChanged += TariffCodes_CollectionChanged;               
				NotifyPropertyChanged("TariffCodes");
			}
		}
        
        void TariffCodes_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TariffCodes itm in e.NewItems)
                    {
                        if (itm != null)
                        tariffcategory.TariffCodes.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TariffCodes itm in e.OldItems)
                    {
                        if (itm != null)
                        tariffcategory.TariffCodes.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<TariffCategoryCodeSuppUnit> _TariffCategoryCodeSuppUnit = null;
        public  ObservableCollection<TariffCategoryCodeSuppUnit> TariffCategoryCodeSuppUnit
		{
            
		    get 
				{ 
					if(_TariffCategoryCodeSuppUnit != null) return _TariffCategoryCodeSuppUnit;
					//if (this.tariffcategory.TariffCategoryCodeSuppUnit == null) Debugger.Break();
					if(this.tariffcategory.TariffCategoryCodeSuppUnit != null)
					{
						_TariffCategoryCodeSuppUnit = new ObservableCollection<TariffCategoryCodeSuppUnit>(this.tariffcategory.TariffCategoryCodeSuppUnit.Select(x => new TariffCategoryCodeSuppUnit(x)));
					}
					
						_TariffCategoryCodeSuppUnit.CollectionChanged += TariffCategoryCodeSuppUnit_CollectionChanged; 
					
					return _TariffCategoryCodeSuppUnit; 
				}
			set
			{
			    if (Equals(value, _TariffCategoryCodeSuppUnit)) return;
				if (value != null)
					this.tariffcategory.TariffCategoryCodeSuppUnit = new ChangeTrackingCollection<DTO.TariffCategoryCodeSuppUnit>(value.Select(x => x.DTO).ToList());
                _TariffCategoryCodeSuppUnit = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TariffCategoryCodeSuppUnit != null)
				_TariffCategoryCodeSuppUnit.CollectionChanged += TariffCategoryCodeSuppUnit_CollectionChanged;               
				NotifyPropertyChanged("TariffCategoryCodeSuppUnit");
			}
		}
        
        void TariffCategoryCodeSuppUnit_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TariffCategoryCodeSuppUnit itm in e.NewItems)
                    {
                        if (itm != null)
                        tariffcategory.TariffCategoryCodeSuppUnit.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TariffCategoryCodeSuppUnit itm in e.OldItems)
                    {
                        if (itm != null)
                        tariffcategory.TariffCategoryCodeSuppUnit.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.TariffCategory> _changeTracker;    
        public ChangeTrackingCollection<DTO.TariffCategory> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



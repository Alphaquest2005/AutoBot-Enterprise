// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using AdjustmentQS.Client.DTO;


using Core.Common.Validation;

namespace AdjustmentQS.Client.Entities
{
       public partial class SystemDocumentSet: BaseEntity<SystemDocumentSet>
    {
        DTO.SystemDocumentSet systemdocumentset;
        public SystemDocumentSet(DTO.SystemDocumentSet dto )
        {
              systemdocumentset = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.SystemDocumentSet>(systemdocumentset);

        }

        public DTO.SystemDocumentSet DTO
        {
            get
            {
             return systemdocumentset;
            }
            set
            {
                systemdocumentset = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.systemdocumentset.Id; }
			set
			{
			    if (value == this.systemdocumentset.Id) return;
				this.systemdocumentset.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

        ObservableCollection<AdjustmentDetail> _AdjustmentDetails = null;
        public  ObservableCollection<AdjustmentDetail> AdjustmentDetails
		{
            
		    get 
				{ 
					if(_AdjustmentDetails != null) return _AdjustmentDetails;
					//if (this.systemdocumentset.AdjustmentDetails == null) Debugger.Break();
					if(this.systemdocumentset.AdjustmentDetails != null)
					{
						_AdjustmentDetails = new ObservableCollection<AdjustmentDetail>(this.systemdocumentset.AdjustmentDetails.Select(x => new AdjustmentDetail(x)));
					}
					
						_AdjustmentDetails.CollectionChanged += AdjustmentDetails_CollectionChanged; 
					
					return _AdjustmentDetails; 
				}
			set
			{
			    if (Equals(value, _AdjustmentDetails)) return;
				if (value != null)
					this.systemdocumentset.AdjustmentDetails = new ChangeTrackingCollection<DTO.AdjustmentDetail>(value.Select(x => x.DTO).ToList());
                _AdjustmentDetails = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AdjustmentDetails != null)
				_AdjustmentDetails.CollectionChanged += AdjustmentDetails_CollectionChanged;               
				NotifyPropertyChanged("AdjustmentDetails");
			}
		}
        
        void AdjustmentDetails_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AdjustmentDetail itm in e.NewItems)
                    {
                        if (itm != null)
                        systemdocumentset.AdjustmentDetails.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AdjustmentDetail itm in e.OldItems)
                    {
                        if (itm != null)
                        systemdocumentset.AdjustmentDetails.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.SystemDocumentSet> _changeTracker;    
        public ChangeTrackingCollection<DTO.SystemDocumentSet> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



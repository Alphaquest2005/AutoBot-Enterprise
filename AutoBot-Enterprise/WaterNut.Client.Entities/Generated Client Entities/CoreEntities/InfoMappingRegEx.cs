// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class InfoMappingRegEx: BaseEntity<InfoMappingRegEx>
    {
        DTO.InfoMappingRegEx infomappingregex;
        public InfoMappingRegEx(DTO.InfoMappingRegEx dto )
        {
              infomappingregex = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.InfoMappingRegEx>(infomappingregex);

        }

        public DTO.InfoMappingRegEx DTO
        {
            get
            {
             return infomappingregex;
            }
            set
            {
                infomappingregex = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.infomappingregex.Id; }
			set
			{
			    if (value == this.infomappingregex.Id) return;
				this.infomappingregex.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InfoMapping is required")]
       
public int InfoMappingId
		{ 
		    get { return this.infomappingregex.InfoMappingId; }
			set
			{
			    if (value == this.infomappingregex.InfoMappingId) return;
				this.infomappingregex.InfoMappingId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InfoMappingId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "KeyRegX is required")]
       
                
                [MaxLength(1000, ErrorMessage = "KeyRegX has a max length of 1000 letters ")]
public string KeyRegX
		{ 
		    get { return this.infomappingregex.KeyRegX; }
			set
			{
			    if (value == this.infomappingregex.KeyRegX) return;
				this.infomappingregex.KeyRegX = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("KeyRegX");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "FieldRx is required")]
       
                
                [MaxLength(1000, ErrorMessage = "FieldRx has a max length of 1000 letters ")]
public string FieldRx
		{ 
		    get { return this.infomappingregex.FieldRx; }
			set
			{
			    if (value == this.infomappingregex.FieldRx) return;
				this.infomappingregex.FieldRx = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FieldRx");
			}
		}
     

       
       
                
                [MaxLength(1000, ErrorMessage = "KeyReplaceRx has a max length of 1000 letters ")]
public string KeyReplaceRx
		{ 
		    get { return this.infomappingregex.KeyReplaceRx; }
			set
			{
			    if (value == this.infomappingregex.KeyReplaceRx) return;
				this.infomappingregex.KeyReplaceRx = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("KeyReplaceRx");
			}
		}
     

       
       
                
                [MaxLength(1000, ErrorMessage = "FieldReplaceRx has a max length of 1000 letters ")]
public string FieldReplaceRx
		{ 
		    get { return this.infomappingregex.FieldReplaceRx; }
			set
			{
			    if (value == this.infomappingregex.FieldReplaceRx) return;
				this.infomappingregex.FieldReplaceRx = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FieldReplaceRx");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "LineRegx is required")]
       
                
                [MaxLength(1000, ErrorMessage = "LineRegx has a max length of 1000 letters ")]
public string LineRegx
		{ 
		    get { return this.infomappingregex.LineRegx; }
			set
			{
			    if (value == this.infomappingregex.LineRegx) return;
				this.infomappingregex.LineRegx = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineRegx");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "KeyValue has a max length of 50 letters ")]
public string KeyValue
		{ 
		    get { return this.infomappingregex.KeyValue; }
			set
			{
			    if (value == this.infomappingregex.KeyValue) return;
				this.infomappingregex.KeyValue = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("KeyValue");
			}
		}
     

       
       
                
                [MaxLength(1000, ErrorMessage = "FieldValue has a max length of 1000 letters ")]
public string FieldValue
		{ 
		    get { return this.infomappingregex.FieldValue; }
			set
			{
			    if (value == this.infomappingregex.FieldValue) return;
				this.infomappingregex.FieldValue = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FieldValue");
			}
		}
     

       private InfoMapping _InfoMapping;
        public  InfoMapping InfoMapping
		{
		    get
               { 
                  if (this.infomappingregex != null)
                   {
                       if (_InfoMapping != null)
                       {
                           if (this.infomappingregex.InfoMapping !=
                               _InfoMapping.DTO)
                           {
                                if (this.infomappingregex.InfoMapping  != null)
                               _InfoMapping = new InfoMapping(this.infomappingregex.InfoMapping);
                           }
                       }
                       else
                       {
                             if (this.infomappingregex.InfoMapping  != null)
                           _InfoMapping = new InfoMapping(this.infomappingregex.InfoMapping);
                       }
                   }


             //       if (_InfoMapping != null) return _InfoMapping;
                       
             //       var i = new InfoMapping(){TrackingState = TrackingState.Added};
			//		//if (this.infomappingregex.InfoMapping == null) Debugger.Break();
			//		if (this.infomappingregex.InfoMapping != null)
            //        {
            //           i. = this.infomappingregex.InfoMapping;
            //        }
            //        else
            //        {
            //            this.infomappingregex.InfoMapping = i.;
             //       }
                           
            //        _InfoMapping = i;
                     
                    return _InfoMapping;
               }
			set
			{
			    if (value == _InfoMapping) return;
                _InfoMapping = value;
                if(value != null)
                     this.infomappingregex.InfoMapping = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("InfoMapping");
			}
		}
        


        ChangeTrackingCollection<DTO.InfoMappingRegEx> _changeTracker;    
        public ChangeTrackingCollection<DTO.InfoMappingRegEx> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



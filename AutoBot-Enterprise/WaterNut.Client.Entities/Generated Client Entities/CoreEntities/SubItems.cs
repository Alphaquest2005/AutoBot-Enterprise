// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class SubItems: BaseEntity<SubItems>
    {
        DTO.SubItems subitems;
        public SubItems(DTO.SubItems dto )
        {
              subitems = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.SubItems>(subitems);

        }

        public DTO.SubItems DTO
        {
            get
            {
             return subitems;
            }
            set
            {
                subitems = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= "SubItem_ is required")]
       
public int SubItem_Id
		{ 
		    get { return this.subitems.SubItem_Id; }
			set
			{
			    if (value == this.subitems.SubItem_Id) return;
				this.subitems.SubItem_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SubItem_Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Item_ is required")]
       
public int Item_Id
		{ 
		    get { return this.subitems.Item_Id; }
			set
			{
			    if (value == this.subitems.Item_Id) return;
				this.subitems.Item_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Item_Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(100, ErrorMessage = "ItemNumber has a max length of 100 letters ")]
public string ItemNumber
		{ 
		    get { return this.subitems.ItemNumber; }
			set
			{
			    if (value == this.subitems.ItemNumber) return;
				this.subitems.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "ItemDescription has a max length of 255 letters ")]
public string ItemDescription
		{ 
		    get { return this.subitems.ItemDescription; }
			set
			{
			    if (value == this.subitems.ItemDescription) return;
				this.subitems.ItemDescription = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemDescription");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Quantity is required")]
       [NumberValidationAttribute]
public double Quantity
		{ 
		    get { return this.subitems.Quantity; }
			set
			{
			    if (value == this.subitems.Quantity) return;
				this.subitems.Quantity = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Quantity");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "QtyAllocated is required")]
       [NumberValidationAttribute]
public double QtyAllocated
		{ 
		    get { return this.subitems.QtyAllocated; }
			set
			{
			    if (value == this.subitems.QtyAllocated) return;
				this.subitems.QtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("QtyAllocated");
			}
		}
     

       private AsycudaDocumentItem _AsycudaDocumentItem;
        public  AsycudaDocumentItem AsycudaDocumentItem
		{
		    get
               { 
                  if (this.subitems != null)
                   {
                       if (_AsycudaDocumentItem != null)
                       {
                           if (this.subitems.AsycudaDocumentItem !=
                               _AsycudaDocumentItem.DTO)
                           {
                                if (this.subitems.AsycudaDocumentItem  != null)
                               _AsycudaDocumentItem = new AsycudaDocumentItem(this.subitems.AsycudaDocumentItem);
                           }
                       }
                       else
                       {
                             if (this.subitems.AsycudaDocumentItem  != null)
                           _AsycudaDocumentItem = new AsycudaDocumentItem(this.subitems.AsycudaDocumentItem);
                       }
                   }


             //       if (_AsycudaDocumentItem != null) return _AsycudaDocumentItem;
                       
             //       var i = new AsycudaDocumentItem(){TrackingState = TrackingState.Added};
			//		//if (this.subitems.AsycudaDocumentItem == null) Debugger.Break();
			//		if (this.subitems.AsycudaDocumentItem != null)
            //        {
            //           i. = this.subitems.AsycudaDocumentItem;
            //        }
            //        else
            //        {
            //            this.subitems.AsycudaDocumentItem = i.;
             //       }
                           
            //        _AsycudaDocumentItem = i;
                     
                    return _AsycudaDocumentItem;
               }
			set
			{
			    if (value == _AsycudaDocumentItem) return;
                _AsycudaDocumentItem = value;
                if(value != null)
                     this.subitems.AsycudaDocumentItem = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("AsycudaDocumentItem");
			}
		}
        


        ChangeTrackingCollection<DTO.SubItems> _changeTracker;    
        public ChangeTrackingCollection<DTO.SubItems> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



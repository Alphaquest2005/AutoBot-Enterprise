// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class CustomsOperations: BaseEntity<CustomsOperations>
    {
        DTO.CustomsOperations customsoperations;
        public CustomsOperations(DTO.CustomsOperations dto )
        {
              customsoperations = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.CustomsOperations>(customsoperations);

        }

        public DTO.CustomsOperations DTO
        {
            get
            {
             return customsoperations;
            }
            set
            {
                customsoperations = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.customsoperations.Id; }
			set
			{
			    if (value == this.customsoperations.Id) return;
				this.customsoperations.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Name is required")]
       
                
                [MaxLength(50, ErrorMessage = "Name has a max length of 50 letters ")]
public string Name
		{ 
		    get { return this.customsoperations.Name; }
			set
			{
			    if (value == this.customsoperations.Name) return;
				this.customsoperations.Name = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Name");
			}
		}
     

        ObservableCollection<Customs_Procedure> _Customs_Procedure = null;
        public  ObservableCollection<Customs_Procedure> Customs_Procedure
		{
            
		    get 
				{ 
					if(_Customs_Procedure != null) return _Customs_Procedure;
					//if (this.customsoperations.Customs_Procedure == null) Debugger.Break();
					if(this.customsoperations.Customs_Procedure != null)
					{
						_Customs_Procedure = new ObservableCollection<Customs_Procedure>(this.customsoperations.Customs_Procedure.Select(x => new Customs_Procedure(x)));
					}
					
						_Customs_Procedure.CollectionChanged += Customs_Procedure_CollectionChanged; 
					
					return _Customs_Procedure; 
				}
			set
			{
			    if (Equals(value, _Customs_Procedure)) return;
				if (value != null)
					this.customsoperations.Customs_Procedure = new ChangeTrackingCollection<DTO.Customs_Procedure>(value.Select(x => x.DTO).ToList());
                _Customs_Procedure = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Customs_Procedure != null)
				_Customs_Procedure.CollectionChanged += Customs_Procedure_CollectionChanged;               
				NotifyPropertyChanged("Customs_Procedure");
			}
		}
        
        void Customs_Procedure_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Customs_Procedure itm in e.NewItems)
                    {
                        if (itm != null)
                        customsoperations.Customs_Procedure.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Customs_Procedure itm in e.OldItems)
                    {
                        if (itm != null)
                        customsoperations.Customs_Procedure.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.CustomsOperations> _changeTracker;    
        public ChangeTrackingCollection<DTO.CustomsOperations> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



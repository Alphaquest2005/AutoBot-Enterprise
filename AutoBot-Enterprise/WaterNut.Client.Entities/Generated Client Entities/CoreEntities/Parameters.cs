// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class Parameters: BaseEntity<Parameters>
    {
        DTO.Parameters parameters;
        public Parameters(DTO.Parameters dto )
        {
              parameters = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Parameters>(parameters);

        }

        public DTO.Parameters DTO
        {
            get
            {
             return parameters;
            }
            set
            {
                parameters = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.parameters.Id; }
			set
			{
			    if (value == this.parameters.Id) return;
				this.parameters.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Name is required")]
       
                
                [MaxLength(50, ErrorMessage = "Name has a max length of 50 letters ")]
public string Name
		{ 
		    get { return this.parameters.Name; }
			set
			{
			    if (value == this.parameters.Name) return;
				this.parameters.Name = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Name");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Value is required")]
       
                
                [MaxLength(50, ErrorMessage = "Value has a max length of 50 letters ")]
public string Value
		{ 
		    get { return this.parameters.Value; }
			set
			{
			    if (value == this.parameters.Value) return;
				this.parameters.Value = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Value");
			}
		}
     

        ObservableCollection<ParameterSetParameters> _ParameterSetParameters = null;
        public  ObservableCollection<ParameterSetParameters> ParameterSetParameters
		{
            
		    get 
				{ 
					if(_ParameterSetParameters != null) return _ParameterSetParameters;
					//if (this.parameters.ParameterSetParameters == null) Debugger.Break();
					if(this.parameters.ParameterSetParameters != null)
					{
						_ParameterSetParameters = new ObservableCollection<ParameterSetParameters>(this.parameters.ParameterSetParameters.Select(x => new ParameterSetParameters(x)));
					}
					
						_ParameterSetParameters.CollectionChanged += ParameterSetParameters_CollectionChanged; 
					
					return _ParameterSetParameters; 
				}
			set
			{
			    if (Equals(value, _ParameterSetParameters)) return;
				if (value != null)
					this.parameters.ParameterSetParameters = new ChangeTrackingCollection<DTO.ParameterSetParameters>(value.Select(x => x.DTO).ToList());
                _ParameterSetParameters = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_ParameterSetParameters != null)
				_ParameterSetParameters.CollectionChanged += ParameterSetParameters_CollectionChanged;               
				NotifyPropertyChanged("ParameterSetParameters");
			}
		}
        
        void ParameterSetParameters_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (ParameterSetParameters itm in e.NewItems)
                    {
                        if (itm != null)
                        parameters.ParameterSetParameters.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (ParameterSetParameters itm in e.OldItems)
                    {
                        if (itm != null)
                        parameters.ParameterSetParameters.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.Parameters> _changeTracker;    
        public ChangeTrackingCollection<DTO.Parameters> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



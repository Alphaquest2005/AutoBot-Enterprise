// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class TODO_UnallocatedSales: BaseEntity<TODO_UnallocatedSales>
    {
        DTO.TODO_UnallocatedSales todo_unallocatedsales;
        public TODO_UnallocatedSales(DTO.TODO_UnallocatedSales dto )
        {
              todo_unallocatedsales = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TODO_UnallocatedSales>(todo_unallocatedsales);

        }

        public DTO.TODO_UnallocatedSales DTO
        {
            get
            {
             return todo_unallocatedsales;
            }
            set
            {
                todo_unallocatedsales = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= "EntryData is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntryDataId has a max length of 50 letters ")]
public string EntryDataId
		{ 
		    get { return this.todo_unallocatedsales.EntryDataId; }
			set
			{
			    if (value == this.todo_unallocatedsales.EntryDataId) return;
				this.todo_unallocatedsales.EntryDataId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(20, ErrorMessage = "ItemNumber has a max length of 20 letters ")]
public string ItemNumber
		{ 
		    get { return this.todo_unallocatedsales.ItemNumber; }
			set
			{
			    if (value == this.todo_unallocatedsales.ItemNumber) return;
				this.todo_unallocatedsales.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       
       
public Nullable<bool> DoNotAllocate
		{ 
		    get { return this.todo_unallocatedsales.DoNotAllocate; }
			set
			{
			    if (value == this.todo_unallocatedsales.DoNotAllocate) return;
				this.todo_unallocatedsales.DoNotAllocate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotAllocate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.todo_unallocatedsales.ApplicationSettingsId; }
			set
			{
			    if (value == this.todo_unallocatedsales.ApplicationSettingsId) return;
				this.todo_unallocatedsales.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryDataDate is required")]
       
public System.DateTime EntryDataDate
		{ 
		    get { return this.todo_unallocatedsales.EntryDataDate; }
			set
			{
			    if (value == this.todo_unallocatedsales.EntryDataDate) return;
				this.todo_unallocatedsales.EntryDataDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Quantity is required")]
       [NumberValidationAttribute]
public double Quantity
		{ 
		    get { return this.todo_unallocatedsales.Quantity; }
			set
			{
			    if (value == this.todo_unallocatedsales.Quantity) return;
				this.todo_unallocatedsales.Quantity = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Quantity");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "QtyAllocated is required")]
       [NumberValidationAttribute]
public double QtyAllocated
		{ 
		    get { return this.todo_unallocatedsales.QtyAllocated; }
			set
			{
			    if (value == this.todo_unallocatedsales.QtyAllocated) return;
				this.todo_unallocatedsales.QtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("QtyAllocated");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Cost is required")]
       [NumberValidationAttribute]
public double Cost
		{ 
		    get { return this.todo_unallocatedsales.Cost; }
			set
			{
			    if (value == this.todo_unallocatedsales.Cost) return;
				this.todo_unallocatedsales.Cost = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Cost");
			}
		}
     


        ChangeTrackingCollection<DTO.TODO_UnallocatedSales> _changeTracker;    
        public ChangeTrackingCollection<DTO.TODO_UnallocatedSales> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



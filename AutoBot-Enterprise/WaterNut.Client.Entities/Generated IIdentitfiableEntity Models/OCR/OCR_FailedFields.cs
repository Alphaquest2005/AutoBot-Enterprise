// <autogenerated>
//   This file was generated by T4 code generator AllClientModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Linq;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Services;
//using WaterNut.Client.Services;
using OCR.Client.Services;

using System;

namespace OCR.Client.Entities
{
    public partial class OCR_FailedFields
    {
       
       #region IIdentifiable Entities
        public override string EntityId
        {
            get
            {
                return this.Id.ToString();//this.Id == null?"0":			
            }
            set
            {
                this.Id = Convert.ToInt32(value);
            }
        }
        public string OCR_FailedLinesEntityName
        {
            get
            {
                return this.OCR_FailedLines == null ? "" : this.OCR_FailedLines.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (OCR_FailedLinesClient ctx = new OCR_FailedLinesClient())
                    {
                        var dto = ctx.GetOCR_FailedLines().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.OCR_FailedLines = (OCR_FailedLines)new OCR_FailedLines().CreateEntityFromString(value);
							
							this.Id = Convert.ToInt32(this.OCR_FailedLines.Id);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddOCR_FailedLines");
                        }
                        else
                        {
                            var obj = new OCR_FailedLines(dto);
                           if (this.OCR_FailedLines == null || this.OCR_FailedLines.EntityId != obj.EntityId) this.OCR_FailedLines = obj;
                           
                        }
                         


                    }
            
            }

      }
        public string OCR_FieldsEntityName
        {
            get
            {
                return this.OCR_Fields == null ? "" : this.OCR_Fields.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (FieldsClient ctx = new FieldsClient())
                    {
                        var dto = ctx.GetFields().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.OCR_Fields = (Fields)new Fields().CreateEntityFromString(value);
							
							this.Id = Convert.ToInt32(this.OCR_Fields.Id);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddOCR_Fields");
                        }
                        else
                        {
                            var obj = new Fields(dto);
                           if (this.OCR_Fields == null || this.OCR_Fields.EntityId != obj.EntityId) this.OCR_Fields = obj;
                           
                        }
                         


                    }
            
            }

      }



         #endregion
    }
   
}
		
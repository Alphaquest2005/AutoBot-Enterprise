// <autogenerated>
//   This file was generated by T4 code generator AllBusinessEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;

using Core.Common.Business.Entities;
using WaterNut.Interfaces;
using TrackableEntities;

namespace AllocationDS.Business.Entities
{

    //[JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class Adjustments : EntryData 
    {
        partial void AutoGenStartUp() //Adjustments()
        {
            this.EntryDataDetails = new List<EntryDataDetails>();
        }

        [DataMember]
        public string Type 
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _type;
        [DataMember]
        public Nullable<double> Tax 
        {
            get
            {
                return _tax;
            }
            set
            {
                _tax = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _tax;
        [DataMember]
        public string Vendor 
        {
            get
            {
                return _vendor;
            }
            set
            {
                _vendor = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _vendor;
        [DataMember]
        public Nullable<System.DateTime> EffectiveDate 
        {
            get
            {
                return _effectivedate;
            }
            set
            {
                _effectivedate = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<System.DateTime> _effectivedate;
        [DataMember]
        public List<EntryDataDetails> EntryDataDetails { get; set; }

 //       [DataMember]
 //       public TrackingState TrackingState { get; set; }
 //       [DataMember]
 //       public ICollection<string> ModifiedProperties { get; set; }
//        [DataMember]//JsonProperty,
 //       private Guid EntityIdentifier { get; set; }
    }
}



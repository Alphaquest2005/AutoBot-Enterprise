// <autogenerated>
//   This file was generated by T4 code generator AllRepository.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using Core.Common.Client.Services;
using Core.Common.Client.Repositories;
using CoreEntities.Client.Services;
using CoreEntities.Client.Entities;
using CoreEntities.Client.DTO;
using Core.Common.Business.Services;
using System.Diagnostics;


using System.Threading.Tasks;
using System.Linq;
using Core.Common;
using System.ComponentModel;
using System.Collections.Generic;
using System;
using System.ServiceModel;
using TrackableEntities.Common;

using TODO_DeleteDocumentSet = CoreEntities.Client.Entities.TODO_DeleteDocumentSet;

namespace CoreEntities.Client.Repositories 
{
   
    public partial class TODO_DeleteDocumentSetRepository : BaseRepository<TODO_DeleteDocumentSetRepository>
    {

       private static readonly TODO_DeleteDocumentSetRepository instance;
       static TODO_DeleteDocumentSetRepository()
        {
            instance = new TODO_DeleteDocumentSetRepository();
        }

       public static TODO_DeleteDocumentSetRepository Instance
        {
            get { return instance; }
        }
        
        public async Task<IEnumerable<TODO_DeleteDocumentSet>> TODO_DeleteDocumentSet(List<string> includesLst = null)
        {
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return new List<TODO_DeleteDocumentSet>().AsEnumerable();
            try
            {
                using (var t = new TODO_DeleteDocumentSetClient())
                    {
                        var res = await t.GetTODO_DeleteDocumentSet(includesLst).ConfigureAwait(continueOnCapturedContext: false);
                        if (res != null)
                        {
                            return res.Select(x => new TODO_DeleteDocumentSet(x)).AsEnumerable();
                        }
                        else
                        {
                            return null;
                        }                    
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }

		 public async Task<IEnumerable<TODO_DeleteDocumentSet>> GetTODO_DeleteDocumentSetByExpression(string exp, List<string> includesLst = null)
        {
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime || exp == null || exp == "None") return new List<TODO_DeleteDocumentSet>().AsEnumerable();
            try
            {
                using (var t = new TODO_DeleteDocumentSetClient())
                    {
					    IEnumerable<DTO.TODO_DeleteDocumentSet> res = null;
                        if(exp == "All")
                        {                       
						    res = await t.GetTODO_DeleteDocumentSet(includesLst).ConfigureAwait(continueOnCapturedContext: false);					
                        }
                        else
                        {
                             res = await t.GetTODO_DeleteDocumentSetByExpression(exp, includesLst).ConfigureAwait(continueOnCapturedContext: false);	                         
                        }
                    
                        if (res != null)
                        {
                            return res.Select(x => new TODO_DeleteDocumentSet(x)).AsEnumerable();
                        }
                        else
                        {
                            return null;
                        }                    
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }

		 public async Task<IEnumerable<TODO_DeleteDocumentSet>> GetTODO_DeleteDocumentSetByExpressionLst(List<string> expLst, List<string> includesLst = null)
        {
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime || expLst.Count == 0 || expLst.FirstOrDefault() == "None") return new List<TODO_DeleteDocumentSet>().AsEnumerable();
            try
            {
                using (var t = new TODO_DeleteDocumentSetClient())
                    {
					    IEnumerable<DTO.TODO_DeleteDocumentSet> res = null;
                       
                        res = await t.GetTODO_DeleteDocumentSetByExpressionLst(expLst, includesLst).ConfigureAwait(continueOnCapturedContext: false);	                         
                      
                    
                        if (res != null)
                        {
                            return res.Select(x => new TODO_DeleteDocumentSet(x)).AsEnumerable();
                        }
                        else
                        {
                            return null;
                        }                    
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }


		 public async Task<IEnumerable<TODO_DeleteDocumentSet>> GetTODO_DeleteDocumentSetByExpressionNav(string exp, Dictionary<string, string> navExp, List<string> includesLst = null)
        {
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime || exp == null || exp == "None") return new List<TODO_DeleteDocumentSet>().AsEnumerable();
            try
            {
                using (var t = new TODO_DeleteDocumentSetClient())
                    {
					    IEnumerable<DTO.TODO_DeleteDocumentSet> res = null;
                        if(exp == "All" && navExp.Count == 0)
                        {                       
						    res = await t.GetTODO_DeleteDocumentSet(includesLst).ConfigureAwait(continueOnCapturedContext: false);					
                        }
                        else
                        {
                             res = await t.GetTODO_DeleteDocumentSetByExpressionNav(exp, navExp, includesLst).ConfigureAwait(continueOnCapturedContext: false);	                         
                        }
                    
                        if (res != null)
                        {
                            return res.Select(x => new TODO_DeleteDocumentSet(x)).AsEnumerable();
                        }
                        else
                        {
                            return null;
                        }                    
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }


        public async Task<TODO_DeleteDocumentSet> GetTODO_DeleteDocumentSet(string id, List<string> includesLst = null)
        {
             try
             {   
                 using (var t = new TODO_DeleteDocumentSetClient())
                    {
                        var res = await t.GetTODO_DeleteDocumentSetByKey(id,includesLst).ConfigureAwait(continueOnCapturedContext: false);
                         if(res != null)
                        {
                            return new TODO_DeleteDocumentSet(res);
                    }
                    else
                    {
                        return null;
                    }                    
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }

        public async Task<TODO_DeleteDocumentSet> UpdateTODO_DeleteDocumentSet(TODO_DeleteDocumentSet entity)
        {
            if (entity == null) return entity;
            var entitychanges = entity.ChangeTracker.GetChanges().FirstOrDefault();
            if (entitychanges != null)
            {
                try
                {
                    using (var t = new TODO_DeleteDocumentSetClient())
                    {
     
                        var updatedEntity =  await t.UpdateTODO_DeleteDocumentSet(entitychanges).ConfigureAwait(false);
                        entity.EntityId = updatedEntity.EntityId;
                        entity.DTO.AcceptChanges();
                         //var  = entity.;
                        //entity.ChangeTracker.MergeChanges(,updatedEntity);
                        //entity. = ;
                        return entity;
                    }
                }
                catch (FaultException<ValidationFault> e)
                {
                    throw new Exception(e.Detail.Message, e.InnerException);
                }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
            }
            else
            {
                return entity;
            }

        }

        public async Task<TODO_DeleteDocumentSet> CreateTODO_DeleteDocumentSet(TODO_DeleteDocumentSet entity)
        {
            try
            {   
                using (var t = new TODO_DeleteDocumentSetClient())
                    {
                        return new TODO_DeleteDocumentSet(await t.CreateTODO_DeleteDocumentSet(entity.DTO).ConfigureAwait(continueOnCapturedContext: false));
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }

        public async Task<bool> DeleteTODO_DeleteDocumentSet(string id)
        {
            try
            {
             using (var t = new TODO_DeleteDocumentSetClient())
                {
                    return await t.DeleteTODO_DeleteDocumentSet(id).ConfigureAwait(continueOnCapturedContext: false);
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }  
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }         
        }

        public async Task<bool> RemoveSelectedTODO_DeleteDocumentSet(IEnumerable<string> selectedTODO_DeleteDocumentSet)
        {
            try
            {
                using (var ctx = new TODO_DeleteDocumentSetClient())
                {
                    return await ctx.RemoveSelectedTODO_DeleteDocumentSet(selectedTODO_DeleteDocumentSet).ConfigureAwait(false);
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }  
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }      
        }


		//Virtural List Implementation

		public async Task<Tuple<IEnumerable<TODO_DeleteDocumentSet>, int>> LoadRange(int startIndex, int count, string exp, Dictionary<string, string> navExp, IEnumerable<string> includeLst = null)
        {
			var overallCount = 0;
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime || exp == null || exp == "None")
            {
                
                return new Tuple<IEnumerable<TODO_DeleteDocumentSet>, int>(new List<TODO_DeleteDocumentSet>().AsEnumerable(), overallCount);
            }
            
            try
            {
                using (var t = new TODO_DeleteDocumentSetClient())
                {

                    IEnumerable<DTO.TODO_DeleteDocumentSet> res = null;
                                         
						    res = await t.LoadRangeNav(startIndex, count, exp, navExp, includeLst).ConfigureAwait(continueOnCapturedContext: false);
						    overallCount = await t.CountNav(exp, navExp).ConfigureAwait(continueOnCapturedContext: false);
                   
                   
                                
                    if (res != null)
                    {
                        return new Tuple<IEnumerable<TODO_DeleteDocumentSet>, int>(res.Select(x => new TODO_DeleteDocumentSet(x)).AsEnumerable(), overallCount);
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }

        
		public decimal SumField(string whereExp, string sumExp)
        {
            try
            {
                using (var t = new TODO_DeleteDocumentSetClient())
                {
                    return t.SumField(whereExp,sumExp);
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }

        }

        public async Task<decimal> SumNav(string whereExp, Dictionary<string, string> navExp, string sumExp)
        {
            try
            {
                using (var t = new TODO_DeleteDocumentSetClient())
                {
                    return await t.SumNav(whereExp,navExp,sumExp).ConfigureAwait(false);
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }

        }
    }
}


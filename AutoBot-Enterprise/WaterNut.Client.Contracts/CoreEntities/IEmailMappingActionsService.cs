// <autogenerated>
//   This file was generated by T4 code generator AllServices.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Collections.Generic;
using System.ServiceModel;
using System.Threading.Tasks;
using Core.Common.Contracts;
using CoreEntities.Client.DTO;


namespace CoreEntities.Client.Contracts
{
    [ServiceContract (Namespace="http://www.insight-software.com/WaterNut")]
    public partial interface IEmailMappingActionsService : IClientService
    {
        [OperationContract]
        Task<IEnumerable<EmailMappingActions>> GetEmailMappingActions(List<string> includesLst = null);

        [OperationContract]
        Task<EmailMappingActions> GetEmailMappingActionsByKey(string id, List<string> includesLst = null);

		[OperationContract]
        Task<IEnumerable<EmailMappingActions>> GetEmailMappingActionsByExpression(string exp, List<string> includesLst = null);

		[OperationContract]
        Task<IEnumerable<EmailMappingActions>> GetEmailMappingActionsByExpressionLst(List<string> expLst, List<string> includesLst = null);

		[OperationContract]
		Task<IEnumerable<EmailMappingActions>> GetEmailMappingActionsByExpressionNav(string exp,
														 Dictionary<string, string> navExp, List<string> includesLst = null);        
        [OperationContract]
        Task<IEnumerable<EmailMappingActions>> GetEmailMappingActionsByBatch(string exp,
                                                                        int totalrow, List<string> includesLst = null);
        [OperationContract]
        Task<IEnumerable<EmailMappingActions>> GetEmailMappingActionsByBatchExpressionLst(List<string> expLst,
                                                                        int totalrow, List<string> includesLst = null);

		[OperationContract]
        Task<EmailMappingActions> UpdateEmailMappingActions(EmailMappingActions entity);

        [OperationContract]
        Task<EmailMappingActions> CreateEmailMappingActions(EmailMappingActions entity);

        [OperationContract]
        Task<bool> DeleteEmailMappingActions(string id);

        [OperationContract]
        Task<bool> RemoveSelectedEmailMappingActions(IEnumerable<string> selectedEmailMappingActions);

		// Virtural List Implementation

        [OperationContract]
        Task<int> CountByExpressionLst(List<string> expLst);
    
		[OperationContract]
        Task<int> Count(string exp);

		[OperationContract]
        Task<int> CountNav(string exp, Dictionary<string, string> navExp);

        [OperationContract]
        Task<IEnumerable<EmailMappingActions>> LoadRange(int startIndex, int count, string exp);

		[OperationContract]
		Task<IEnumerable<EmailMappingActions>> LoadRangeNav(int startIndex, int count, string exp,
                                                                                 Dictionary<string, string> navExp, IEnumerable<string> includeLst = null);

		[OperationContract]
		decimal SumField(string whereExp, string field);
        
        [OperationContract]
        Task<decimal> SumNav( string exp, Dictionary<string, string> navExp, string field);

		[OperationContract]
		string MinField(string whereExp, string field);

				[OperationContract]
		Task<IEnumerable<EmailMappingActions>> GetEmailMappingActionsByEmailMappingId(string EmailMappingId, List<string> includesLst = null);
        
  		[OperationContract]
		Task<IEnumerable<EmailMappingActions>> GetEmailMappingActionsByActionId(string ActionId, List<string> includesLst = null);
        
  		
    }
}


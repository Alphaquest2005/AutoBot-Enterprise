//// <autogenerated>
////   This file was generated by T4 code generator ServiceLayer.tt.
////   Any changes made to this file manually will be lost next time the file is regenerated.
//// </autogenerated>


//using System;
//using System.Linq;
//using System.Collections.Generic;
//using System.Data.Entity;
//using System.Data.Entity.Infrastructure;
//using System.ServiceModel;
//using System.Threading.Tasks;
//using TrackableEntities.EF6;
//using TrackableEntities.Common;
//using System.ComponentModel.Composition;
//using EntryDataQS.Business.Entities;
//using Core.Common.Contracts;
//using System.Linq.Expressions;
//using System.Xml.Linq;
//using System.Reflection;
//using WaterNut.QuerySpace;
//using System.Linq.Dynamic;


//namespace EntryDataQS.Business.Services
//{
   
//    public partial class EntryDataExService 
//    {
       
//        public async Task<int> Count(string exp)
//        {
//            try
//            {
//                using (EntryDataQSContext _dbContext = new EntryDataQSContext())
//                {
//                    if (exp == null)
//                    {
//                        return await _dbContext.EntryDataEx.CountAsync();
//                    }
//                    else
//                    {
                        
//                        return await _dbContext.EntryDataEx.CountAsync();
//                    }
//                }
//            }
//            catch (Exception updateEx)
//            {
//                throw new FaultException(updateEx.Message);
//            }
//        }
        
//        public async Task<IEnumerable<EntryDataExDTO>> LoadRange(int startIndex, int count, string exp)
//        {
//            try
//            {
//                using (EntryDataQSContext _dbContext = new EntryDataQSContext())
//                {
//                    if (exp == null)
//                    {
//                        return await _dbContext.EntryDataEx.OrderBy(y => y.EntryDataDate).Skip(startIndex).Take(count).ToListAsync();
//                    }
//                    else
//                    {
                        
//                        return await _dbContext.EntryDataEx.OrderBy(y => y.EntryDataDate).Skip(startIndex).Take(count).ToListAsync();//.Where(x)
//                    }
//                }
//            }
//            catch (Exception updateEx)
//            {
//                throw new FaultException(updateEx.Message);
//            }
//        }

 
//    }
//}


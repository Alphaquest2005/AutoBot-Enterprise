// <autogenerated>
//   This file was generated by T4 code generator AllObjectContext.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

            


using System.Data.Entity;
using CoreEntities.Business.Entities;
using System.Data.Entity.Infrastructure;
using CounterPointQS.Business.Entities.Mapping;
using WaterNut.Data;
using System.Data.Entity.Core.Objects;



namespace CounterPointQS.Business.Entities
{
    [DbConfigurationType(typeof(DBConfiguration))] 
    public partial class CounterPointQSContext : DbContext
    {
        static CounterPointQSContext()
        {
            var x = typeof(System.Data.Entity.SqlServer.SqlProviderServices);
            Database.SetInitializer<CounterPointQSContext>(null);
        }

        public CounterPointQSContext()
            : base("Name=CounterPointQS")
        {
            this.Configuration.LazyLoadingEnabled = false;
            this.Configuration.ProxyCreationEnabled = false;
               // Get the ObjectContext related to this DbContext
            var objectContext = (this as IObjectContextAdapter).ObjectContext;

            // Sets the command timeout for all the commands
            objectContext.CommandTimeout = 120;

            objectContext.ObjectMaterialized += ObjectContext_OnObjectMaterialized;
        }
        
        public bool StartTracking { get; set; }

        private void ObjectContext_OnObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            if (StartTracking == true) ((dynamic)e.Entity).StartTracking();
        }

        public DbSet<CounterPointPODetails> CounterPointPODetails { get; set; }
     
        public DbSet<CounterPointPOs> CounterPointPOs { get; set; }
     
        public DbSet<CounterPointSales> CounterPointSales { get; set; }
     
        public DbSet<CounterPointSalesDetails> CounterPointSalesDetails { get; set; }
     


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new CounterPointPODetailsMap());
         
            modelBuilder.Configurations.Add(new CounterPointPOsMap());
         
            modelBuilder.Configurations.Add(new CounterPointSalesMap());
         
            modelBuilder.Configurations.Add(new CounterPointSalesDetailsMap());
         
			OnModelCreatingExtentsion(modelBuilder);

        }
		partial void OnModelCreatingExtentsion(DbModelBuilder modelBuilder);
    }
}

 	

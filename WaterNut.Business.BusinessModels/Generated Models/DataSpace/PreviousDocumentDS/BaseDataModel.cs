// <autogenerated>
//   This file was generated by T4 code generator AllDataSpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;

using PreviousDocumentDS.Business.Entities;
using PreviousDocumentDS.Business.Services;

using System.Threading.Tasks;
using System.Collections.Generic;


//using WaterNut.Business.Repositories;



namespace WaterNut.DataSpace.PreviousDocumentDS.DataModels
{
	 public partial class BaseDataModel 
	{
        private static readonly BaseDataModel instance;
        static BaseDataModel()
        {
            instance = new BaseDataModel();
        }

        public static  BaseDataModel Instance
        {
            get { return instance; }
        }

       //Search Entities
   
        public async Task<IEnumerable<EntryDataDetails>> SearchEntryDataDetails(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new EntryDataDetailsService())
            {
                return await ctx.GetEntryDataDetailsByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task SaveEntryDataDetails(EntryDataDetails i)
        {
            if (i == null) return;
            using (var ctx = new EntryDataDetailsService())
            {
                await ctx.UpdateEntryDataDetails(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<PreviousEntry>> SearchPreviousEntry(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new PreviousEntryService())
            {
                return await ctx.GetPreviousEntriesByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task SavePreviousEntry(PreviousEntry i)
        {
            if (i == null) return;
            using (var ctx = new PreviousEntryService())
            {
                await ctx.UpdatePreviousEntry(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_HScode>> Searchxcuda_HScode(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_HScodeService())
            {
                return await ctx.Getxcuda_HScodeByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_HScode(xcuda_HScode i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_HScodeService())
            {
                await ctx.Updatexcuda_HScode(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_PreviousItem>> Searchxcuda_PreviousItem(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_PreviousItemService())
            {
                return await ctx.Getxcuda_PreviousItemByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_PreviousItem(xcuda_PreviousItem i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_PreviousItemService())
            {
                await ctx.Updatexcuda_PreviousItem(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Tarification>> Searchxcuda_Tarification(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_TarificationService())
            {
                return await ctx.Getxcuda_TarificationByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Tarification(xcuda_Tarification i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_TarificationService())
            {
                await ctx.Updatexcuda_Tarification(i).ConfigureAwait(false);
            }
        }
   
        public async Task<IEnumerable<xcuda_Valuation_item>> Searchxcuda_Valuation_item(List<string> lst, List<string> includeLst = null )
        {
            using (var ctx = new xcuda_Valuation_itemService())
            {
                return await ctx.Getxcuda_Valuation_itemByExpressionLst(lst, includeLst).ConfigureAwait(false);
            }
        }

        public async Task Savexcuda_Valuation_item(xcuda_Valuation_item i)
        {
            if (i == null) return;
            using (var ctx = new xcuda_Valuation_itemService())
            {
                await ctx.Updatexcuda_Valuation_item(i).ConfigureAwait(false);
            }
        }
   
    

    }		
}


<#@ output extension=".cs"#>
<#@ include file="EF.Utility.CS.ttinclude" once="true"#>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="C:\Prism\Core.Common\T4 Library\T4\Utilities\Utils.tt" once="true"#>	
<#@ include file="C:\Prism\Core.Common\T4 Library\T4\ViewModels\QuerySpace\SummaryListViewModel.tt" once="true"#>		
<#@ include file="C:\Prism\Core.Common\T4 Library\T4\ViewModels\QuerySpace\EntityViewModel.tt" once="true"#>	
<#@ include file="C:\Prism\Core.Common\T4 Library\T4\ViewModels\QuerySpace\BaseViewModel.tt" once="true"#>
<#@ include file="C:\Prism\Core.Common\T4 Library\T4\ViewModels\QuerySpace\MessageTokenModel.tt" once="true"#>
<#@ include file="C:\Prism\Core.Common\T4 Library\T4\ViewModels\QuerySpace\VirturalListLoader.tt" once="true"#>	
<#@ include file="C:\Prism\Core.Common\T4 Library\T4\ViewModels\QuerySpace\Totals.tt" once="true"#>						
<#@ include file="C:\Prism\Core.Common\T4 Library\T4\ViewModels\QuerySpace\CrudOps.tt" once="true"#>
<#+ 
  // Note: You can call this method from the outside of the template,
  //       please add parameters as needed.	
  // To include this templaate just drag this file on another editor
  // then call this.Template_NewTemplate1_Render()

        
        public void CreateViewModels(string projectName, string inputFile, string coreEdmx, string outputProject, bool viewCurrent, bool CrudOps)
        {
            
	
            EntityType MainEntity = null ;
            string MainEntitySet = "";
            string coreInputFile= coreEdmx;
            

       

            CodeGenerationTools code = new CodeGenerationTools(this);
            MetadataLoader loader = new MetadataLoader(this);
            CodeRegion region = new CodeRegion(this, 1);
            MetadataTools ef = new MetadataTools(this);

       
            MetadataWorkspace metadataWorkspace = null;
            bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
            EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);
     
            string namespaceName = code.VsNamespaceSuggestion();

            EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

            MetadataWorkspace COREmetadataWorkspace = null;
            bool COREallMetadataLoaded =loader.TryLoadAllMetadata(coreInputFile, out COREmetadataWorkspace);
            EdmItemCollection COREItemCollection = (EdmItemCollection)COREmetadataWorkspace.GetItemCollection(DataSpace.CSpace);
            EntityContainer COREcontainer = COREItemCollection.GetItems<EntityContainer>().FirstOrDefault();

            MainEntity = code.GetItemsToGenerate<EntityType>(ItemCollection).Where(x=>x.MetadataProperties.Where(z => z.Name.Contains("MainEntityProperty") && z.Value.ToString().Contains("True")).ToList().Any() == true).FirstOrDefault();
            try
            {


                if (MainEntity != null)
                {
                    MainEntitySet =
                        container.BaseEntitySets.OfType<EntitySet>()
                            .Where(x => x.ElementType == GetBaseEntity(MainEntity))
                            .FirstOrDefault()
                            .Name;

                    SummaryViewModelTPL sv = new SummaryViewModelTPL();
                    sv.projectName = projectName;
                    sv.conTextName = code.Escape(container);
                    sv.MainEntity = MainEntity.Name;
                    sv.mainEntitySet = MainEntitySet;
                    sv.Output.Project = outputProject;
                    sv.Output.File = @"ViewModels\Generated Models\QuerySpace\" + code.Escape(container) + @"\" +
                                     MainEntity.Name + "SummaryListViewModel.cs";
                    sv.Render();
                }
                else
                {
                    SummaryViewModelTPL sv = new SummaryViewModelTPL();
                    sv.conTextName = code.Escape(container);
                    sv.projectName = projectName;
                    sv.MainEntity = "";
                    sv.mainEntitySet = "";
                    sv.Output.Project = outputProject;
                    sv.Output.File = @"ViewModels\Generated Models\QuerySpace\" + code.Escape(container) + @"\" +
                                     "SummaryListViewModel.cs";
                    sv.Render();
                }
                foreach (EntityType entity in code.GetItemsToGenerate<EntityType>(ItemCollection).OrderBy(e => e.Name))
                {
                    if (container.Name != COREcontainer.Name &&
                        code.GetItemsToGenerate<EntityType>(COREItemCollection)
                            .FirstOrDefault(x => x.Name == entity.Name) != null) continue;
                    if (entity.Abstract) continue;

                    List<EntityType> allEntityCollection = new List<EntityType>();
                    allEntityCollection.AddRange(
                        code.GetItemsToGenerate<EntityType>(COREItemCollection).OrderBy(e => e.Name).ToList());
                    allEntityCollection.AddRange(
                        code.GetItemsToGenerate<EntityType>(ItemCollection).OrderBy(e => e.Name).ToList());

                    EntityViewModelTPL ev = new EntityViewModelTPL();
                    ev.conTextName = code.Escape(container);
                    ev.projectName = projectName;
                    ev.mainEntity = entity;
                    ev.MainEntity = MainEntity;
                    ev.viewCurrent = viewCurrent;

                    //if(entity.BaseType == null)
                    //{
                    //ev.mainEntitySet = container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType == GetBaseEntity(entity)).FirstOrDefault().Name;
                    //}
                    //else
                    //{
                    //ev.mainEntitySet = entity.Name;
                    if (entity.BaseType == null)
                    {
                        ev.mainEntitySet =
                            container.BaseEntitySets.OfType<EntitySet>()
                                .Where(x => x.ElementType == GetBaseEntity(entity))
                                .FirstOrDefault()
                                .Name; //
                    }
                    else
                    {
                        // ev.mainEntitySet = entity.Name;
                        EntitySet dset =
                            container.BaseEntitySets.OfType<EntitySet>()
                                .FirstOrDefault(x => x.ElementType.Name == GetBaseEntity(entity).Name);
                        ev.mainEntitySet = dset.Name;
                    } //}



                    ev.container = container;
                    ev.COREcontainer = COREcontainer;
                    ev.entityCollection = allEntityCollection;
                    ev.COREentityCollection =
                        code.GetItemsToGenerate<EntityType>(COREItemCollection).OrderBy(e => e.Name).ToList();
                    ev.ef = ef;
                    ev.Output.Project = outputProject;
                    ev.Output.File = @"ViewModels\Generated Models\QuerySpace\" + code.Escape(container) + @"\" +
                                     entity.Name + "ViewModel.cs";
                    ev.Render();

                    VirturalListLoaderTPL vt = new VirturalListLoaderTPL();
                    vt.conTextName = code.Escape(container);
                    vt.projectName = projectName;
                    vt.MainEntity = entity;
                    //if(entity.BaseType == null)
                    //{
                    //vt.mainEntitySet = container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType == GetBaseEntity(entity)).FirstOrDefault().Name;
                    //}
                    //else
                    //{
                    //vt.mainEntitySet = entity.Name;
                    //}
                    vt.mainEntitySet = ev.mainEntitySet;
                    vt.Output.Project = outputProject;
                    vt.Output.File = @"ViewModels\Generated Models\QuerySpace\VirturalListLoaders\" +
                                     code.Escape(container) + @"\" + entity.Name + "VirturalListLoader.cs";
                    vt.Render();

                    DisplayTotalsTPL dt = new DisplayTotalsTPL();
                    dt.conTextName = code.Escape(container);
                    dt.projectName = projectName;
                    dt.mainEntity = entity;
                    //if(entity.BaseType == null)
                    //{
                    //dt.mainEntitySet = container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType == GetBaseEntity(entity)).FirstOrDefault().Name;
                    //}
                    //else
                    //{
                    //dt.mainEntitySet = entity.Name;
                    //}
                    dt.mainEntitySet = ev.mainEntitySet;
                    dt.Output.Project = outputProject;
                    dt.Output.File = @"ViewModels\Generated Models\QuerySpace\Totals\" + code.Escape(container) + @"\" +
                                     entity.Name + "Totals.cs";
                    dt.Render();


                    if (CrudOps)
                    {
                        CrudOpsTPL cp = new CrudOpsTPL();
                        cp.conTextName = code.Escape(container);
                        cp.projectName = projectName;
                        cp.mainEntity = entity;
                        cp.mainEntitySet = ev.mainEntitySet;
                        cp.container = container;
                        cp.COREcontainer = COREcontainer;
                        cp.entityCollection = allEntityCollection;
                        cp.COREentityCollection =
                            code.GetItemsToGenerate<EntityType>(COREItemCollection).OrderBy(e => e.Name).ToList();
                        cp.Output.Project = outputProject;
                        cp.Output.File = @"ViewModels\Generated Models\QuerySpace\CrudOps\" + code.Escape(container) +
                                         @"\" +
                                         entity.Name + "CrudOps.cs";
                        cp.Render();
                    }

                }

                BaseViewTPL bv = new BaseViewTPL();
                bv.projectName = projectName;
                bv.conTextName = code.Escape(container);
                bv.container = container;
                bv.MainEntity = MainEntity;
                bv.entityCollection = code.GetItemsToGenerate<EntityType>(ItemCollection).OrderBy(e => e.Name).ToList();
                bv.COREcontainer = COREcontainer;
                bv.COREentityCollection =
                    code.GetItemsToGenerate<EntityType>(COREItemCollection).OrderBy(e => e.Name).ToList();
                bv.ef = ef;
                bv.Output.Project = outputProject;
                bv.Output.File = @"ViewModels\Generated Models\QuerySpace\" + code.Escape(container) + @"\" +
                                 "BaseViewModel.cs";
                bv.Render();


                MessageTokenTPL mv = new MessageTokenTPL();
                mv.projectName = projectName;
                mv.conTextName = code.Escape(container);
                mv.container = container;
                mv.entityCollection = code.GetItemsToGenerate<EntityType>(ItemCollection).OrderBy(e => e.Name).ToList();
                mv.COREcontainer = COREcontainer;
                mv.COREentityCollection =
                    code.GetItemsToGenerate<EntityType>(COREItemCollection).OrderBy(e => e.Name).ToList();
                mv.Output.Project = outputProject;
                mv.Output.File = @"ViewModels\Generated Models\QuerySpace\" + code.Escape(container) + @"\" +
                                 "MessageToken.cs";
                mv.Render();
            }
            catch (Exception)
            {

                throw;
            }

#>
<#+
        }

    #>
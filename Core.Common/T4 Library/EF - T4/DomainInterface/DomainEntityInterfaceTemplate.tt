<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#+
// <copyright file="Template1.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

    public class DomainEntityInterfaceTPL : CSharpTemplate
    {
        public EntityType entity;
        public EntityContainer container;
        public string projectName;
        public MetadataTools ef;
        public CodeGenerationTools code;
        public string interfaceName;
        

        public override string TransformText()
        {

            base.TransformText();
            
            string entitySet =
                container.BaseEntitySets.OfType<EntitySet>()
                    .Where(x => x.ElementType.Name == (entity.BaseType == null ? entity.Name : GetBaseEntity(entity).Name))
                    .FirstOrDefault()
                    .Name;





#>

using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.ObjectModel;



namespace <#=projectName #>.Interfaces
{

		public partial interface <#=interfaceName #><#= (entity.BaseType != null? ":" + GetBaseEntities(entity)  :"")#> //<#=container.Name + "|" + entity.Name #>
		{
<#+
            WriteImp(entity, null, new List<string>());
            #>
        }

}

<#+
            return this.GenerationEnvironment.ToString();
        }

		public void WriteImp(EntityType entity, NavigationProperty navProp, List<string> processedEntities)
		{
		    EntityType baseentity;
            List<EdmProperty> baseprops = new List<EdmProperty>();
            List<NavigationProperty> basenavprops = new List<NavigationProperty>();
		    if (entity.BaseType != null)
		    {
		        baseentity = GetBaseEntity(entity);
		        baseprops = baseentity.Properties.ToList();
		        basenavprops = baseentity.NavigationProperties.ToList();
		    }
		    foreach (
		        var property in
		            entity.Properties.Where(x => baseprops.FirstOrDefault(z => z.Name == x.Name) == null))
		    {
		     
		        
		        var typeUsage = code.Escape(property.TypeUsage);
		        PrimitiveType edmType = (PrimitiveType) property.TypeUsage.EdmType;
		        
		        
		            
		            string iProperty = property.Name;

		            #>
		<#=
    (property.Nullable == true && edmType.ClrEquivalentType.ToString().Replace("System.", "") != "String"
        ? edmType.ClrEquivalentType.ToString().Replace("System.", "") + "?"
        : edmType.ClrEquivalentType.ToString().Replace("System.", "")) #> <#=iProperty.Substring(iProperty.LastIndexOf('.') + 1) #> {get;set;}
		<#+
		        
		    }
		#>

		<#+	
			foreach (
			    var navprop in
			        entity.NavigationProperties.Where(x => basenavprops.FirstOrDefault(z => z.Name == x.Name) == null))
			{
			   

			    string iNavPropName = navprop.Name;
               
		
			    

			        #>
		<#=(navprop.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
    ? "List<" + ("I" + navprop.ToEndMember.GetEntityType().Name) + ">"//
    : ("I" + navprop.ToEndMember.GetEntityType().Name)
    ) #> <#=iNavPropName #> {get;set;}
		<#+
			    
			}

		    processedEntities.Add(entity.Name);

	
		    #>

<#+
		}
    }
#>

<#+ 
  // Note: You can call this method from the outside of the template,
  //       please add parameters as needed.	
  // To include this templaate just drag this file on another editor
  // then call this.Template_NewTemplate1_Render()

    public class BaseViewTPL : CSharpTemplate
    {
        public string conTextName;
        public string projectName;
        public EntityContainer container; 
		public MetadataTools ef;
        public List<EntityType> entityCollection; 
        public EntityContainer COREcontainer;
        public List<EntityType> COREentityCollection;
        public EntityType MainEntity;
        
        
        public override string TransformText()
        {
            base.TransformText();

            CodeGenerationTools code = new CodeGenerationTools(this);
            MetadataTools ef = new MetadataTools(this);
       
	   
#>
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using <#=conTextName #>.Client.Entities;
using <#=conTextName #>.Client.Repositories;
//using <#=projectName #>.Client.Repositories;
using <#=COREcontainer.Name#>.Client.Entities;



namespace <#=projectName #>.QuerySpace.<#=conTextName#>.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // <#=(container.Name == COREcontainer.Name?"ViewModelBase<BaseViewModel>":"CoreEntities.ViewModels.BaseViewModel")#>
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
            <#+
            foreach (var entity in entityCollection.Where(x => x.MetadataProperties.Any(z => z.Name.Contains("CachedProperty"))))
            {
                var cached = true;
                var rprop = entity.MetadataProperties.FirstOrDefault(z => z.Name.Contains("CachedProperty"));
                if(rprop != null)
                {
                    cached = Convert.ToBoolean(((XElement)rprop.Value).Value)  ;
                }
                else
                {
                    cached = false;
                }

                if (cached == true)
                {
				
                #>          await Instance.Load<#=entity.Name #>Cache().ConfigureAwait(false);
<#+              }
            }
 #>
        }

 <#+
            foreach (var entity in entityCollection.Where(x => x.MetadataProperties.Any(z => z.Name.Contains("CachedProperty"))))
            {
                var cached = true;
                var rprop = entity.MetadataProperties.FirstOrDefault(z => z.Name.Contains("CachedProperty"));
                if(rprop != null)
                {
                    cached = Convert.ToBoolean(((XElement)rprop.Value).Value)  ;
                }
                else
                {
                    cached = false;
                }

                if (cached == true)
                {
				EntitySet dset = container.BaseEntitySets.OfType<EntitySet>().FirstOrDefault(x => x.ElementType.Name == ((EntityType)entity.BaseType != null?entity.BaseType:entity).Name);
                #>
         private async Task Load<#=entity.Name #>Cache()
	     {
             await Task.Run(() => 
                    {
                        _<#=entity.Name #>Cache = new DataCache<<#=entity.Name #>>(<#=entity.Name #>Repository.Instance.<#= dset.Name #>().Result);
                        Instance.NotifyPropertyChanged(m => m.<#=entity.Name #>Cache);
                    }).ConfigureAwait(false);
         }

        private async void On<#=dset.Name #>Changed(object sender, NotificationEventArgs e)
        {
               await Load<#=entity.Name #>Cache().ConfigureAwait(false);
        }

<#+              }
            }
 #>


        
        class <#=conTextName#>OnCreated: BaseViewModel
        {
           // Load Repository
                public <#=conTextName#>OnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

<#+
            foreach (EntityType entity in entityCollection)
            {
                  //  if(entity.Abstract == true) continue; 
#>
                        RegisterToReceiveMessages<string>(MessageToken.Current<#=entity.Name#>IDChanged, OnCurrent<#=entity.Name#>IDChanged);
<#+
            }
#>       

			// Recieve messages for Current Object Changed
<#+
            foreach (EntityType entity in entityCollection)
            {
                 //   if(entity.Abstract == true) continue; 
#>
                        RegisterToReceiveMessages<<#=entity.Name#>>(MessageToken.Current<#=entity.Name#>Changed, OnCurrent<#=entity.Name#>Changed);
<#+
            }
#>    
                // Receive messages for cached collections for purpose of refreshing cache
            <#+
            foreach (var entity in entityCollection.Where(x => x.MetadataProperties.Any(z => z.Name.Contains("CachedProperty"))))
            {
                var cached = true;
                var rprop = entity.MetadataProperties.FirstOrDefault(z => z.Name.Contains("CachedProperty"));
                if(rprop != null)
                {
                    cached = Convert.ToBoolean(((XElement)rprop.Value).Value)  ;
                }
                else
                {
                    cached = false;
                }

                if (cached == true)
                {
				EntitySet dset = container.BaseEntitySets.OfType<EntitySet>().FirstOrDefault(x => x.ElementType.Name == ((EntityType)entity.BaseType != null?entity.BaseType:entity).Name);
                #>              RegisterToReceiveMessages(MessageToken.<#=dset.Name #>Changed, On<#=dset.Name #>Changed);
<#+              }
            }
 #> 

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







<#+
            foreach (EntityType entity in entityCollection)
            {
              
              //  if(entity.Abstract == true) continue;        
#>
                        internal async void OnCurrent<#=entity.Name#>IDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (<#=entity.Name#>Repository ctx = new <#=entity.Name#>Repository())
                            {
                                Current<#=entity.Name#> = await ctx.Get<#=entity.Name#>(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => Current<#=entity.Name#>);
                        }

                        private  string _current<#=entity.Name#>ID = "";
                        public string Current<#=entity.Name#>ID
                        {
                            get
                            {
                                return _current<#=entity.Name#>ID;
                            }
                            set
                            {
                                if (_current<#=entity.Name#>ID != value)
                                {
                                    _current<#=entity.Name#>ID = value;
                                    if (!string.IsNullOrEmpty(_current<#=entity.Name#>ID)) BeginSendMessage(MessageToken.Current<#=entity.Name#>IDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.Current<#=entity.Name#>IDChanged, _current<#=entity.Name#>ID));
                                    NotifyPropertyChanged(x => this.Current<#=entity.Name#>ID);  
                                }
                            }
                        }
<#+
                var cached = true;
                var rprop = entity.MetadataProperties.FirstOrDefault(z => z.Name.Contains("CachedProperty"));
                if(rprop != null)
                {
                    cached = Convert.ToBoolean(((XElement)rprop.Value).Value)  ;
                }
                else
                {
                    cached = false;
                }

                if (cached == true)
                {
                    #>
                        private static DataCache<<#=entity.Name #>> _<#=entity.Name #>Cache;

	                    public DataCache<<#=entity.Name #>> <#=entity.Name #>Cache
	                    {
	                        get { return _<#=entity.Name #>Cache; }
                            set
	                        {
	                            _<#=entity.Name #>Cache = value;
	                            NotifyPropertyChanged(x => this.<#=entity.Name #>Cache);
	                        }
	                    } 
<#+
                }
            }
#> 



<#+
            foreach (EntityType mainEntity in entityCollection)//.Where(x => x.Abstract != true)
            {
                if(container.Name != COREcontainer.Name && COREentityCollection.FirstOrDefault(x=>x.Name == mainEntity.Name)!= null) continue;

 #>                     
       

        internal void OnCurrent<#=code.Escape(mainEntity)#>Changed(object sender, SimpleMvvmToolkit.NotificationEventArgs<<#=code.Escape(mainEntity)#>> e)
        {
            //Current<#=code.Escape(mainEntity)#> = e.Data;
            NotifyPropertyChanged(m => this.Current<#=code.Escape(mainEntity)#>);
        }

        private  <#=code.Escape(mainEntity)#> _current<#=code.Escape(mainEntity)#>;
        public <#=code.Escape(mainEntity)#> Current<#=code.Escape(mainEntity)#>
        {
            get
            {
                return _current<#=code.Escape(mainEntity)#>;
            }
            set
            {
                if (_current<#=code.Escape(mainEntity)#> != value)
                {
                    _current<#=code.Escape(mainEntity)#> = value;
                    BeginSendMessage(MessageToken.Current<#=code.Escape(mainEntity)#>Changed,
                                                     new NotificationEventArgs<<#=code.Escape(mainEntity)#>>(MessageToken.Current<#=code.Escape(mainEntity)#>Changed, _current<#=code.Escape(mainEntity)#>)); 
                    NotifyPropertyChanged(x => this.Current<#=code.Escape(mainEntity)#>);    
                    // all current navigation properties = null
<#+
                if(mainEntity.BaseType != null)
                {
 #>             
                    Current<#=mainEntity.BaseType.Name #> = _current<#=code.Escape(mainEntity)#>;
<#+             } #>
<#+
                var clearNavProp = mainEntity.MetadataProperties.Where(z => z.Name.Contains("ClearNavPropProperty") && z.Value.ToString().Contains("False")).FirstOrDefault();
                if(clearNavProp == null)
                {
                    foreach (var navEntity in mainEntity.NavigationProperties.Where(np => np.DeclaringType == mainEntity && np.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many).Select(x => x.ToEndMember.GetEntityType()).Distinct() )
                    {
                        ///foreach (var fromProperty in ef.GetPrincipalProperties(navprop))
                        if(navEntity.Name != mainEntity.Name && (navEntity.Name != (MainEntity == null? "" : MainEntity.Name)))
                        {
 #>                 Current<#=navEntity.Name #> = null;
<#+
                        }
                        //}
                    }
                }
 #>   
                }
            }
        }

		VirtualListItem<<#=mainEntity.Name#>> _vcurrent<#=mainEntity.Name#>;
        public VirtualListItem<<#=mainEntity.Name#>> VCurrent<#=mainEntity.Name#>
        {
            get
            {
                return _vcurrent<#=mainEntity.Name#>;
            }
            set
            {
                if (_vcurrent<#=mainEntity.Name#> != value)
                {
                    _vcurrent<#=mainEntity.Name#> = value;
					if(_vcurrent<#=mainEntity.Name#> != null) Current<#=mainEntity.Name#> = value.Data;
                    NotifyPropertyChanged(x => this.VCurrent<#=mainEntity.Name#>);                    
                }
            }
        }



<#+
            }
 #>



        static <#=conTextName#>OnCreated new<#=conTextName#>OnCreated = new <#=conTextName#>OnCreated();
    }		
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }	
#>
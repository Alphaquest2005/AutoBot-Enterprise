<#+
// <copyright file="Template1.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

    public class ClientEntityRepositoryTPL : CSharpTemplate
    {
        public EntityType entity; 
        public EntitySet entitySet;
        public EntityContainer container;
        public CodeGenerationTools code;
		public MetadataTools ef;
        public string projectName;
        string eSet;
        

        public override string TransformText()
        {
            base.TransformText();
           if(entitySet != null)
            {
                eSet = entitySet.Name;
            }
            else
            {
                eSet = entity.Name + "es";
            }

       
#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using TrackableEntities.Common;
using Core.Common.Client.Services;
using Core.Common.Client.Repositories;
using <#=container.Name #>.Client.Services;
using <#=container.Name #>.Client.Entities;
using <#=container.Name #>.Client.DTO;
using Core.Common.Business.Services;
using System.Diagnostics;
using TrackableEntities.Client;
using <#=projectName #>.Interfaces.Client;

using System.Threading.Tasks;
using System.Linq;
using Core.Common;
using System.ComponentModel;
using System.Collections.Generic;
using System;
using System.ServiceModel;

using <#=entity.Name#> = <#=container.Name #>.Client.Entities.<#=entity.Name#>;

namespace <#=container.Name #>.Client.Repositories 
{
   
    public partial class <#=entity.Name#>Repository : BaseRepository<<#=entity.Name#>Repository>
    {

       private static readonly <#=code.Escape(entity)#>Repository instance;
       static <#=code.Escape(entity)#>Repository()
        {
            instance = new <#=code.Escape(entity)#>Repository();
        }

       public static <#=code.Escape(entity)#>Repository Instance
        {
            get { return instance; }
        }
        
        public async Task<IEnumerable<<#=entity.Name#>>> <#=eSet#>(List<string> includesLst = null)
        {
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return new List<<#=code.GetTypeName(entity)#>>().AsEnumerable();
            try
            {
                using (var t = new <#=code.GetTypeName(entity)#>Client())
                    {
                        var res = await t.Get<#=eSet#>(includesLst).ConfigureAwait(continueOnCapturedContext: false);
                        if (res != null)
                        {
                            return res.Select(x => new <#=code.GetTypeName(entity)#>(x)).AsEnumerable();
                        }
                        else
                        {
                            return null;
                        }                    
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }

		 public async Task<IEnumerable<<#=entity.Name#>>> Get<#=eSet#>ByExpression(string exp, List<string> includesLst = null)
        {
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime || exp == null || exp == "None") return new List<<#=code.GetTypeName(entity)#>>().AsEnumerable();
            try
            {
                using (var t = new <#=code.GetTypeName(entity)#>Client())
                    {
					    IEnumerable<I<#=entity.Name#>> res = null;
                        if(exp == "All")
                        {                       
						    res = await t.Get<#=eSet#>(includesLst).ConfigureAwait(continueOnCapturedContext: false);					
                        }
                        else
                        {
                             res = await t.Get<#=eSet#>ByExpression(exp, includesLst).ConfigureAwait(continueOnCapturedContext: false);	                         
                        }
                    
                        if (res != null)
                        {
                            return res.Select(x => new <#=code.GetTypeName(entity)#>(x)).AsEnumerable();
                        }
                        else
                        {
                            return null;
                        }                    
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }

		 public async Task<IEnumerable<<#=entity.Name#>>> Get<#=eSet#>ByExpressionLst(List<string> expLst, List<string> includesLst = null)
        {
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime || expLst.Count == 0 || expLst.FirstOrDefault() == "None") return new List<<#=code.GetTypeName(entity)#>>().AsEnumerable();
            try
            {
                using (var t = new <#=code.GetTypeName(entity)#>Client())
                    {
					    IEnumerable<I<#=entity.Name#>> res = null;
                       
                        res = await t.Get<#=eSet#>ByExpressionLst(expLst, includesLst).ConfigureAwait(continueOnCapturedContext: false);	                         
                      
                    
                        if (res != null)
                        {
                            return res.Select(x => new <#=code.GetTypeName(entity)#>(x)).AsEnumerable();
                        }
                        else
                        {
                            return null;
                        }                    
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }


		 public async Task<IEnumerable<<#=entity.Name#>>> Get<#=eSet#>ByExpressionNav(string exp, Dictionary<string, string> navExp, List<string> includesLst = null)
        {
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime || exp == null || exp == "None") return new List<<#=code.GetTypeName(entity)#>>().AsEnumerable();
            try
            {
                using (var t = new <#=code.GetTypeName(entity)#>Client())
                    {
					    IEnumerable<I<#=entity.Name#>> res = null;
                        if(exp == "All" && navExp.Count == 0)
                        {                       
						    res = await t.Get<#=eSet#>(includesLst).ConfigureAwait(continueOnCapturedContext: false);					
                        }
                        else
                        {
                             res = await t.Get<#=eSet#>ByExpressionNav(exp, navExp, includesLst).ConfigureAwait(continueOnCapturedContext: false);	                         
                        }
                    
                        if (res != null)
                        {
                            return res.Select(x => new <#=code.GetTypeName(entity)#>(x)).AsEnumerable();
                        }
                        else
                        {
                            return null;
                        }                    
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }


        public async Task<<#=entity.Name#>> Get<#=entity.Name#>(string id, List<string> includesLst = null)
        {
             try
             {   
                 using (var t = new <#=code.GetTypeName(entity)#>Client())
                    {
                        var res = await t.Get<#=entity.Name#>ByKey(id,includesLst).ConfigureAwait(continueOnCapturedContext: false);
                         if(res != null)
                        {
                            return new <#=entity.Name#>(res)<#+
            var nlst = entity.NavigationProperties;
				//.Where(np => np.DeclaringType == entity);//&& np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
            if(nlst.Any() == true)
            {
 #>

                    {
<#+
                foreach( var np in nlst)
                {
                    if(np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
                        {
                    var nextcomma = np == nlst.Last();
 #>                     // <#=np.Name #> = new System.Collections.ObjectModel.ObservableCollection<<#= code.Escape(np.ToEndMember.GetEntityType()) #>>(res.<#= code.Escape(np) #>.Select(y => new <#= code.Escape(np.ToEndMember.GetEntityType()) #>(y)))<#=nextcomma == false?",":""#>    
<#+
                        }
                    if(np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
                    {
                        var nextcomma = np == nlst.Last();
#>                  // <#=np.Name #> = (res.<#=code.Escape(np) #> != null?new <#=code.Escape(np.ToEndMember.GetEntityType()) #>(res.<#=code.Escape(np) #>): null)<#=nextcomma == false?",":""#>    
<#+
                    }
                }
 #>                  }<#+
            } #>;
                    }
                    else
                    {
                        return null;
                    }                    
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }

        public async Task<<#=entity.Name#>> Update<#=entity.Name#>(<#=entity.Name#> entity)
        {
            if (entity == null) return entity;
            var entitychanges = entity.ChangeTracker.GetChanges().FirstOrDefault();
            if (entitychanges != null)
            {
                try
                {
                    using (var t = new <#=code.GetTypeName(entity)#>Client())
                    {
     
                        var updatedEntity =  await t.Update<#=entity.Name#>(entitychanges).ConfigureAwait(false);
                        entity.EntityId = updatedEntity.EntityId;
                        entity.DTO.AcceptChanges();
                         //var  = entity.;
                        //entity.ChangeTracker.MergeChanges(,updatedEntity);
                        //entity. = ;
                        return entity;
                    }
                }
                catch (FaultException<ValidationFault> e)
                {
                    throw new Exception(e.Detail.Message, e.InnerException);
                }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
            }
            else
            {
                return entity;
            }

        }

        public async Task<<#=entity.Name#>> Create<#=entity.Name#>(<#=entity.Name#> entity)
        {
            try
            {   
                using (var t = new <#=code.GetTypeName(entity)#>Client())
                    {
                        return new <#=entity.Name#>(await t.Create<#=entity.Name#>(entity.DTO).ConfigureAwait(continueOnCapturedContext: false));
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }

        public async Task<bool> Delete<#=entity.Name#>(string id)
        {
            try
            {
             using (var t = new <#=code.GetTypeName(entity)#>Client())
                {
                    return await t.Delete<#=entity.Name#>(id).ConfigureAwait(continueOnCapturedContext: false);
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }  
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }         
        }


		//Virtural List Implementation

		public async Task<Tuple<IEnumerable<<#=entity.Name#>>, int>> LoadRange(int startIndex, int count, string exp, Dictionary<string, string> navExp, IEnumerable<string> includeLst = null)
        {
			var overallCount = 0;
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime || exp == null || exp == "None")
            {
                
                return new Tuple<IEnumerable<<#=entity.Name#>>, int>(new List<<#=entity.Name#>>().AsEnumerable(), overallCount);
            }
            
            try
            {
                using (var t = new <#=entity.Name#>Client())
                {

                    IEnumerable<I<#=entity.Name#>> res = null;
                                         
						    res = await t.LoadRangeNav(startIndex, count, exp, navExp, includeLst).ConfigureAwait(continueOnCapturedContext: false);
						    overallCount = await t.CountNav(exp, navExp).ConfigureAwait(continueOnCapturedContext: false);
                   
                   
                                
                    if (res != null)
                    {
                        return new Tuple<IEnumerable<<#=entity.Name#>>, int>(res.Select(x => new <#=entity.Name#>(x)).AsEnumerable(), overallCount);
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        }

<#+ 
		
	    var ens = entity.Properties.Where(x => ef.IsKey(x) == false && x.Name.EndsWith("Id"));// && entity.NavigationProperties.Where(np=> np.GetDependentProperties().Contains(x)).Any()== false);
			//&& ef.UnderlyingClrType(x.TypeUsage.EdmType) == typeof(int)
	
		if(ens.Any() == true && ens.Count() > 0)
		{
		foreach (var p in ens)
        {
		
 #>
	 public async Task<IEnumerable<<#=entity.Name#>>> Get<#=entity.Name#>By<#= p.Name #>(string <#= p.Name #>, List<string> includesLst = null)
        {
             if (<#= p.Name #> == "0") return null;
            try
            {
                 using (<#=code.GetTypeName(entity)#>Client t = new <#=code.GetTypeName(entity)#>Client())
                    {
                        var res = await t.Get<#=entity.Name#>By<#= p.Name #>(<#= p.Name #>, includesLst).ConfigureAwait(continueOnCapturedContext: false);
                         if(res != null)
                        {
                            return res.Select(x => new <#=code.GetTypeName(entity)#>(x)).AsEnumerable();
					    }                
					    else
					    {
						    return null;
					    }                    
                    }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
        } 
 <#+ 
		}
		}
  #>
        
		public decimal SumField(string whereExp, string sumExp)
        {
            try
            {
                using (var t = new <#=code.GetTypeName(entity)#>Client())
                {
                    return t.SumField(whereExp,sumExp);
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }

        }

        public async Task<decimal> SumNav(string whereExp, Dictionary<string, string> navExp, string sumExp)
        {
            try
            {
                using (var t = new <#=code.GetTypeName(entity)#>Client())
                {
                    return await t.SumNav(whereExp,navExp,sumExp).ConfigureAwait(false);
                }
            }
            catch (FaultException<ValidationFault> e)
            {
                throw new Exception(e.Detail.Message, e.InnerException);
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }

        }
    }
}

<#+
            return this.GenerationEnvironment.ToString();
        }
        
    }

#>

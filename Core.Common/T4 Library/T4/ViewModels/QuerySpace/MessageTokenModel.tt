<#@ assembly name="System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Metadata.Edm" #>

<#+ 
  // Note: You can call this method from the outside of the template,
  //       please add parameters as needed.	
  // To include this templaate just drag this file on another editor
  // then call this.Template_NewTemplate1_Render()

    public class MessageTokenTPL : CSharpTemplate
    {
        public string conTextName;
        public string projectName;
        public EntityContainer container; 
        public List<EntityType> entityCollection; 
        public EntityContainer COREcontainer;
        public List<EntityType> COREentityCollection;
        
        
        public override string TransformText()
        {
            base.TransformText();

       
            CodeGenerationTools code = new CodeGenerationTools(this);
       
           
#>


namespace <#=projectName #>.QuerySpace.<#=conTextName #>
{
    public partial class MessageToken
    {

<#+
            //foreach (EntitySetBase eSet in container.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet))//
            //{
             foreach (EntityType dEntity in entityCollection)//.Where(x => x.BaseType != null)
            {
               // if(container.Name != COREcontainer.Name &&  COREcontainer.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet).FirstOrDefault(x=>x.Name == eSet.Name)!= null) continue;
                 EntityType dBaseEntity = dEntity.BaseType as EntityType;
                if(container.Name != COREcontainer.Name && dBaseEntity != null && COREentityCollection.FirstOrDefault(x=>x.Name == dBaseEntity.Name)!= null) continue;
                string eset= null;
                if (dEntity.BaseType == null)
                {
                     eset = container.BaseEntitySets.OfType<EntitySet>().FirstOrDefault(x => x.ElementType.Name == dEntity.Name).Name;
                }
                else
                {
                  eset = dEntity.Name + "es";
                }


 #>			public const string <#=eset#>FilterExpressionChanged = "<#=eset#>FilterExpressionChanged";
			public const string Selected<#=eset#>Changed = "Selected<#=eset#>Changed";
            public const string <#=eset#>Changed = "<#=eset#>Changed";
			public const string <#=eset#>Deleted = "<#=eset#>Deleted";
			public const string <#=eset#>Created = "<#=eset#>Created";
			public const string <#=eset#>Updated = "<#=eset#>Updated";
<#+
            }
 #>  

<#+
            foreach (EntityType dEntity in entityCollection)//.Where(x => x.BaseType != null)
            {
             
                if(container.Name != COREcontainer.Name && COREentityCollection.FirstOrDefault(x=>x.Name == dEntity.Name)!= null) continue;
#>
          // public const string <#=dEntity.Name#>Changed = "<#=dEntity.Name#>Changed";
<#+
            }
#> 

<#+
            foreach (EntityType mainEntity in entityCollection)
            {
                if(container.Name != COREcontainer.Name && COREentityCollection.FirstOrDefault(x=>x.Name == mainEntity.Name) != null) continue;
 #>   
           public const string Current<#=                code.Escape(mainEntity)#>Changed = "Current<#=                code.Escape(mainEntity)#>Changed";
<#+
            }
 #>    

<#+
            foreach (EntityType mainEntity in entityCollection)
            {
                if(container.Name != COREcontainer.Name && COREentityCollection.FirstOrDefault(x=>x.Name == mainEntity.Name) != null) continue;
 #>   
           public const string Current<#=code.Escape(mainEntity)#>IDChanged = "OnCurrent<#=code.Escape(mainEntity)#>IDChanged";
<#+
            }
 #>      
    }
}		
<#+
            return this.GenerationEnvironment.ToString();
        }	
    }
#>
<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#@ output extension=".cs"#>
<#+ 
public class BusinessRepositoryTPL : CSharpTemplate
{
      
        public string inputFile = "";
        EntityContainer container;

	public override string TransformText()
        {
            base.TransformText();
            


                DefineMetadata();

                CodeGenerationTools code = new CodeGenerationTools(this);
                MetadataTools ef = new MetadataTools(this);
                MetadataLoader loader = new MetadataLoader(this);
                CodeRegion region = new CodeRegion(this);

               // EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
                
    
                EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
                ModelNamespace = loader.GetModelNamespace(inputFile);
                DefaultSummaryComment = CodeGenerationTools.GetResourceString("Template_CommentNoDocumentation");
                string namespaceName = code.VsNamespaceSuggestion();
                UpdateObjectNamespaceMap(namespaceName);

                container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
                if (container == null)
                {
                   // return "// No EntityContainer exists in the model, so no code was generated";
                }

                WriteHeader();
                BeginNamespace(namespaceName, code);

            #>
            [Export(typeof(IAccountRepository))]
            [PartCreationPolicy(CreationPolicy.NonShared)]
            <#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#>Repository : BaseRepository<<#=code.Escape(container)#>Context>, IAccountRepository
            {

                public <#=code.Escape(container)#>Repository()
                    : base()
                {
        
                }

            <#+
                    region.Begin("Get EntitySets");

                    foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
                {
            #>

                    <#=Accessibility.ForReadOnlyProperty(entitySet)#> IQueryable<<#=code.GetTypeName(entitySet.ElementType)#>DTO> <#=code.Escape(entitySet)#>()
                    {
                        return context.<#=code.Escape(entitySet)#>;
                    }

            <#+

                }  
                region.End();
            #>

            <#+
                    region.Begin("Get Derived EntitySets");

                    foreach (EntityType dEntity in code.GetItemsToGenerate<EntityType>(ItemCollection).Where(x => x.BaseType != null))
                {
                    EntitySet dset = container.BaseEntitySets.OfType<EntitySet>().FirstOrDefault(x => x.ElementType.Name == ((EntityType)dEntity.BaseType).Name);
            #>

                    public IQueryable<<#=dEntity.Name#>DTO> <#=code.Escape(dEntity)#>()
                    {
                        return context.<#=code.Escape(dset)#>.OfType<<#=dEntity.Name #>DTO>();
                    }

            <#+

                }  
                region.End();
            #>


            }
}
           

		
<#+
        return this.GenerationEnvironment.ToString();

	}	
#>

<#+
    private void WriteHeader()
    {
       // fileManager.StartHeader();  
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Core.Common.Data;
using <#=container.Name #>.Business.Entities;
using System.Linq;


<#+

    }
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
   // if (!String.IsNullOrEmpty(namespaceName))
   // {
#>
namespace HRManager.Data 
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    //}
}

void EndNamespace(string namespaceName)
{
   // if (!String.IsNullOrEmpty(namespaceName))
   // {
        PopIndent();
#>
}
<#+
   // }
}

string AccessibilityAndVirtual(string accessibility)
{
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}
#>

<#+
void WriteApplyChanges(CodeGenerationTools code)
{
#>

<#+
}
#>
<#+
string DefaultSummaryComment{ get; set; }

string SummaryComment(MetadataItem item)
{
    if (item.Documentation != null && item.Documentation.Summary != null)
    {
        return PrefixLinesOfMultilineComment(XMLCOMMENT_START + " ", XmlEntityize(item.Documentation.Summary));
    }

    if (DefaultSummaryComment != null)
    {
        return DefaultSummaryComment;
    }

    return string.Empty;
}

string LongDescriptionCommentElement(MetadataItem item, int indentLevel)
{
    if (item.Documentation != null && !String.IsNullOrEmpty(item.Documentation.LongDescription))
    {
        string comment = Environment.NewLine;
        string lineStart = CodeRegion.GetIndent(indentLevel) + XMLCOMMENT_START + " ";
        comment += lineStart + "<LongDescription>" + Environment.NewLine;
        comment += lineStart + PrefixLinesOfMultilineComment(lineStart, XmlEntityize(item.Documentation.LongDescription)) + Environment.NewLine;
        comment += lineStart + "</LongDescription>";
        return comment;
    }
    return string.Empty;
}

string NewModifier(NavigationProperty navigationProperty)
{
    Type baseType = typeof(EntityObject);
    return NewModifier(baseType, navigationProperty.Name);
}

string NewModifier(EdmFunction edmFunction)
{
    Type baseType = typeof(ObjectContext);
    return NewModifier(baseType, edmFunction.Name);
}

string NewModifier(EntitySet set)
{
    Type baseType = typeof(ObjectContext);
    return NewModifier(baseType, set.Name);
}

string NewModifier(EdmProperty property)
{
    Type baseType;
    if (property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    {
        baseType = typeof(EntityObject);
    }
    else
    {
        baseType = typeof(ComplexObject);
    }
    return NewModifier(baseType, property.Name);
}

string NewModifier(Type type, string memberName)
{
    if (HasBaseMemberWithMatchingName(type, memberName))
    {
        return "new";
    }
    return string.Empty;
}

string PrefixLinesOfMultilineComment(string prefix, string comment)
{
    return comment.Replace(Environment.NewLine, Environment.NewLine + prefix);
}

string ParameterComments(IEnumerable<Tuple<string, string>> parameters, int indentLevel)
{
    System.Text.StringBuilder builder = new System.Text.StringBuilder();
    foreach (Tuple<string, string> parameter in parameters)
    {
        builder.AppendLine();
        builder.Append(CodeRegion.GetIndent(indentLevel));
        builder.Append(XMLCOMMENT_START);
        builder.Append(String.Format(CultureInfo.InvariantCulture, " <param name=\"{0}\">{1}</param>", parameter.Item1, parameter.Item2));
    }
    return builder.ToString();
}

private void WriteFunctionParameters(IEnumerable<FunctionImportParameter> parameters)
{
    foreach (FunctionImportParameter parameter in parameters)
    {
        if (!parameter.NeedsLocalVariable)
        {
            continue;
        }
#>
        ObjectParameter <#=parameter.LocalVariableName#>;
        if (<#=parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"#>)
        {
            <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", <#=parameter.FunctionParameterName#>);
        }
        else
        {
            <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", typeof(<#=parameter.RawClrTypeName#>));
        }

<#+
    }
}

string XmlEntityize(string text)
{
    if (string.IsNullOrEmpty(text))
    {
        return string.Empty;
    }

    text = text.Replace("&","&amp;");
    text = text.Replace("<","&lt;").Replace(">","&gt;");
    string id = Guid.NewGuid().ToString();
    text = text.Replace(Environment.NewLine, id);
    text = text.Replace("\r", "&#xD;").Replace("\n","&#xA;");
    text = text.Replace(id, Environment.NewLine);
    return text.Replace("\'","&apos;").Replace("\"","&quot;");
}

const string XMLCOMMENT_START = "///";

public string ModelNamespace{ get; set; }

string GetObjectNamespace(string csdlNamespaceName)
{
    string objectNamespace;
    if (EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, out objectNamespace))
    {
        return objectNamespace;
    }

    return csdlNamespaceName;
}

static bool HasBaseMemberWithMatchingName(Type type, string memberName)
{
    BindingFlags bindingFlags = BindingFlags.FlattenHierarchy | BindingFlags.NonPublic | BindingFlags.Public
                | BindingFlags.Instance | BindingFlags.Static;
    return type.GetMembers(bindingFlags).Where(m => IsVisibleMember(m)).Any(m => m.Name == memberName);
}

static bool IsVisibleMethod(MethodBase methodBase)
{
    if (methodBase == null)
        return false;

    return !methodBase.IsPrivate && !methodBase.IsAssembly;
}

static bool IsVisibleMember(MemberInfo memberInfo)
{
    if (memberInfo is EventInfo)
    {
        EventInfo ei = (EventInfo)memberInfo;
        MethodInfo add = ei.GetAddMethod();
        MethodInfo remove = ei.GetRemoveMethod();
        return IsVisibleMethod(add) || IsVisibleMethod(remove);
    }
    else if (memberInfo is FieldInfo)
    {
        FieldInfo fi = (FieldInfo)memberInfo;
        return !fi.IsPrivate && !fi.IsAssembly;
    }
    else if (memberInfo is MethodBase)
    {
        MethodBase mb = (MethodBase)memberInfo;
        if (mb.IsSpecialName)
            return false;
        return IsVisibleMethod(mb);
    }
    else if (memberInfo is PropertyInfo)
    {
        PropertyInfo pi = (PropertyInfo)memberInfo;
        MethodInfo get = pi.GetGetMethod();
        MethodInfo set = pi.GetSetMethod();
        return IsVisibleMethod(get) || IsVisibleMethod(set);
    }

    return false;
}

public Dictionary<string, string> EdmToObjectNamespaceMap
{
    get { return _edmToObjectNamespaceMap; }
    set { _edmToObjectNamespaceMap = value; }
}
public Dictionary<string, string> _edmToObjectNamespaceMap = new Dictionary<string, string>();

void UpdateObjectNamespaceMap(string objectNamespace)
{
    if(objectNamespace != ModelNamespace && !EdmToObjectNamespaceMap.ContainsKey(ModelNamespace))
    {
        EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace);
    }
}

private void DefineMetadata()
{
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_NAME] = "CSharpSelfTracking.Context";
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_VERSION] = "5.0";
}
#>

<#+
	}	
#>

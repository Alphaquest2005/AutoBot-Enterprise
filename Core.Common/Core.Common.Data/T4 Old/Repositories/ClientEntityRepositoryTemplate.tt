<#+
// <copyright file="Template1.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

    public class ClientEntityRepositoryTPL : CSharpTemplate
    {
        public EntityType entity; 
        public EntitySet entitySet;
        public EntityContainer container;
        public CodeGenerationTools code;
        public string projectName;
        string eSet;
        

        public override string TransformText()
        {
            base.TransformText();
           if(entitySet != null)
            {
                eSet = entitySet.Name;
            }
            else
            {
                eSet = "All" + entity.Name;
            }

       
#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using <#=projectName #>.Client.Services;
using <#=projectName #>.Client.Repositories;
using <#=container.Name #>.Client.Services;
using <#=container.Name #>.Client.Entities;

using System.Linq;
using Core.Common;
using System.ComponentModel;
using System.Collections.Generic;

namespace <#=container.Name #>.Client.Repositories 
{
   
    public partial class <#=entity.Name#>Repository : BaseRepository<<#=entity.Name#>Repository>
    {
        
        public IQueryable<<#=entity.Name#>> <#=eSet#>()
        {
            if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return new List<<#=code.GetTypeName(entity)#>>().AsQueryable();
            using (<#=code.GetTypeName(entity)#>Client t = ClientObjectBase.ClientFactory.CreateClient<<#=code.GetTypeName(entity)#>Client>())
                {
                    var res = t.Get<#=eSet#>().Result;
                    if (res != null)
                    {
                        return res.Select(x => new <#=code.GetTypeName(entity)#>(x)).AsQueryable();
                    }
                    else
                    {
                        return null;
                    }                    
                }
        }

        public <#=entity.Name#> Get<#=entity.Name#>(string id)
        {
             if (id == "0") return null;
             using (<#=code.GetTypeName(entity)#>Client t = ClientObjectBase.ClientFactory.CreateClient<<#=code.GetTypeName(entity)#>Client>())
                {
                    var res = t.Get<#=entity.Name#>(id).Result;
                     if(res != null)
                    {
                        return new <#=entity.Name#>(res)<#+
            var nlst = entity.NavigationProperties.Where(
                np => np.DeclaringType == entity
                );//&& np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
            if(nlst.Any() == true)
            {
 #>

                    {
<#+
                foreach( var np in nlst)
                {
                    if(np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
                        {
                    var nextcomma = np == nlst.Last();
 #>                      <#=np.Name #> = new System.Collections.ObjectModel.ObservableCollection<<#= code.Escape(np.ToEndMember.GetEntityType()) #>>(res.<#= code.Escape(np) #>.Select(y => new <#= code.Escape(np.ToEndMember.GetEntityType()) #>(y)))<#=nextcomma == false?",":""#>    
<#+
                        }
                    if(np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
                    {
                        var nextcomma = np == nlst.Last();
#>                   <#=np.Name #> = (res.<#=code.Escape(np) #> != null?new <#=code.Escape(np.ToEndMember.GetEntityType()) #>(res.<#=code.Escape(np) #>): null)<#=nextcomma == false?",":""#>    
<#+
                    }
                }
 #>                  }<#+
            } #>;
                }
                else
                {
                    return null;
                }                    
                }
        }

        public <#=entity.Name#> Update<#=entity.Name#>(<#=entity.Name#> entity)
        {
            var entitychanges = entity.ChangeTracker.GetChanges().FirstOrDefault();
            if (entitychanges != null)
            {
                using (<#=code.GetTypeName(entity)#>Client t = ClientObjectBase.ClientFactory.CreateClient<<#=code.GetTypeName(entity)#>Client>())
                {
     
                    var updatedEntity = t.Update<#=entity.Name#>(entitychanges).Result;

                        var dto = entity.DTO;
                        entity.ChangeTracker.MergeChanges(ref dto, updatedEntity);
                        entity.DTO = dto;
                        return entity;
                }
            }
            else
            {
                return entity;
            }

        }

        public <#=entity.Name#> Create<#=entity.Name#>(<#=entity.Name#> entity)
        {
            using (<#=code.GetTypeName(entity)#>Client t = ClientObjectBase.ClientFactory.CreateClient<<#=code.GetTypeName(entity)#>Client>())
                {
                    return new <#=entity.Name#>(t.Create<#=entity.Name#>(entity.DTO).Result);
                }
        }

        public bool Delete<#=entity.Name#>(string id)
        {
             using (<#=code.GetTypeName(entity)#>Client t = ClientObjectBase.ClientFactory.CreateClient<<#=code.GetTypeName(entity)#>Client>())
                {
                    return t.Delete<#=entity.Name#>(id).Result;
                }
           
        }
        
    }
}

<#+
            return this.GenerationEnvironment.ToString();
        }
        
    }

#>

<#+
// <copyright file="Template1.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class EntityGridListViewTPL : CSharpTemplate
{
        public string contextName;
        public string projectName;
        public EntityType  mainEntity;
        public string mainEntitySet;
        public EntityContainer container;
        public List<EntityType> entityCollection;
        public List<EntityType> COREentityCollection;
        public EntityContainer COREcontainer;
        public MetadataTools ef;
        public CodeGenerationTools code;
        public EntityFrameworkTemplateFileManager fileManager;

	public override string TransformText()
        {
            //base.TransformText();
            string cEntitySet = "";
            string cEntity = "";
            EntityType ccEntity = null;
            string mprop = mainEntitySet;
            
           // var mlst= mainEntity.NavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many).FirstOrDefault();
           var mlst= mainEntity.NavigationProperties.FirstOrDefault();
            EntityType MainEntity = entityCollection.Where(x=>x.MetadataProperties.Where(z => z.Name.Contains("MainEntityProperty") && z.Value.ToString().Contains("True")).ToList().Any() == true).FirstOrDefault();
            if(MainEntity != null && MainEntity.Name == mainEntity.Name) mlst = null;

                EdmType et;
                if(mlst == null )
                {
                   if(MainEntity != null)
                {
                    cEntitySet = container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType == (MainEntity.BaseType == null?MainEntity:MainEntity.BaseType)).FirstOrDefault().Name;
                    cEntity = MainEntity.Name;
                }
                    if(COREcontainer.Name != container.Name) mprop = "";//
                }
                else
                {
                    et = ((EntityType)mlst.ToEndMember.GetEntityType()).BaseType == null?((EntityType)mlst.ToEndMember.GetEntityType()):((EntityType)mlst.ToEndMember.GetEntityType()).BaseType;
                    cEntitySet = container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType == et).FirstOrDefault().Name;
                    cEntity = ((EntityType)mlst.ToEndMember.GetEntityType()).Name;
                
                }
                if(container.Name != COREcontainer.Name)
                {
                    ccEntity = entityCollection.Where(x=> x.Name == cEntity).FirstOrDefault();
                }
                else
                {
                    ccEntity = null;
                }
          
#>
		
		<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
	mc:Ignorable="d"
    xmlns:local="clr-namespace:<#=projectName #>"
    xmlns:coreui="clr-namespace:Core.Common.UI;assembly=Core.Common.UI"
    xmlns:models="clr-namespace:<#=projectName #>.<#=contextName#>.ViewModels"
	x:Class="<#=projectName #>.<#=contextName#>.Views.<#=mainEntity.Name#>List_AutoGen" Width="540.609" Height="Auto">
    <UserControl.Resources>
        <models:<#=mainEntity.Name#>ViewModel x:Key="<#=mainEntity.Name#>ListModelDataSource" />
        <DataTemplate x:Key="<#=mainEntity.Name#>Tpl">
            <Grid Height="Auto" Width="497" MouseEnter="SetCurrentItem">
<#+
         if(mainEntity.MetadataProperties.FirstOrDefault(x => x.Name.Contains("ReadOnlyProperty")) == null)
            {
#>  
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeave">
                        <ei:CallMethodAction TargetObject="{Binding Source={StaticResource <#= mainEntity.Name#>ListModelDataSource}}" MethodName="Save<#=    mainEntity.Name#>"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
<#+            }
 #>

<#+
            int top = 0;
    
            if(ccEntity != null)
            {
                var mp = ccEntity.NavigationProperties.Where(np=>np.Name.Contains(mainEntity.Name) || np.Name.Contains(mainEntitySet)).FirstOrDefault();
                if(mp != null)
                {
                    mprop = mp.Name;
                }
                else
                {
                    mprop = "no navigation dependent property found with " + mainEntity.Name;
                }
            }
            List<EdmProperty> proplst = new List<EdmProperty>();
            if(mainEntity.BaseType != null)
            {
                EntityType bEntity = mainEntity.BaseType as EntityType;
                proplst.AddRange(bEntity.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == bEntity && p.Name!= bEntity.Name + "Id"));
            }
                proplst.AddRange(mainEntity.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == mainEntity && p.Name!= mainEntity.Name + "Id"));

            foreach (EdmProperty edmProperty in proplst)
            {
               
                if(edmProperty.Name == "EntryTimeStamp" || edmProperty.Name == "EntryDateTimeStamp" || edmProperty.Name == "EntryDateTime" ||
                       mainEntity.NavigationProperties.Where(x => x.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many && x.GetDependentProperties().Contains(edmProperty)).Any() == true || ef.IsKey(edmProperty)) continue;        
     
                top += 25;
                if (ef.UnderlyingClrType(edmProperty.TypeUsage.EdmType) == typeof(DateTime))
                {
#>              <TextBlock Text="<#=edmProperty.Name#>" HorizontalAlignment="Left" Height="24" Margin="10,<#=top#>,0,0" VerticalAlignment="Top" Width="Auto" />
                <DatePicker SelectedDate="{Binding <#=edmProperty.Name#>, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" HorizontalAlignment="Left" Height="24" Margin="150,<#=        top#>,0,0" VerticalAlignment="Top" Width="Auto" />
<#+                    continue;
                }
                if (ef.UnderlyingClrType(edmProperty.TypeUsage.EdmType) == typeof(string))
                {
#>              <TextBlock Text="<#=edmProperty.Name#>" HorizontalAlignment="Left" Height="24" Margin="10,<#=top#>,0,0" VerticalAlignment="Top" Width="Auto" />
                <TextBox Text="{Binding <#=edmProperty.Name#>, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" HorizontalAlignment="Left" Height="24" Margin="150,<#=top#>,0,0" VerticalAlignment="Top" Width="Auto" />
<#+                    continue;
                }
                if (ef.UnderlyingClrType(edmProperty.TypeUsage.EdmType) == typeof(int) && code.FieldName(edmProperty).EndsWith("Id") )
                {
                    string pSetName= "";
                    string pSetEntity= "";
                    string pKey= "";
                    EntityType pEntity;
                    EntitySet pSet = container.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType.Name == edmProperty.Name.Substring(0,edmProperty.Name.Length - 2) ).FirstOrDefault();
                    pEntity = entityCollection.FirstOrDefault( x => x.Name == edmProperty.Name.Substring(0,edmProperty.Name.Length - 2));
                    if(pEntity == null)
                    {
                        pEntity = COREentityCollection.FirstOrDefault( x => x.Name == edmProperty.Name.Substring(0,edmProperty.Name.Length - 2));
                    }
                    if(pEntity != null && pEntity.KeyMembers.Any() == true)
                    {
                        pKey = pEntity.KeyMembers[0].Name;
                    }
                    else
                    {
                        pKey = edmProperty.Name;
                    }

                    if(pSet == null)
                        pSet = COREcontainer.BaseEntitySets.OfType<EntitySet>().Where(x => x.ElementType.Name == edmProperty.Name.Substring(0,edmProperty.Name.Length - 2) ).FirstOrDefault();
                    if(pSet != null)
                    {
                        pSetName = pSet.Name;
                        pSetEntity = pSet.ElementType.Name;
                      
                    }
                    else
                    {
                        pSetName = edmProperty.Name.Substring(0,edmProperty.Name.Length - 2);
                        pSetEntity = edmProperty.Name.Substring(0,edmProperty.Name.Length - 2);
                        
                    }
                   #>
                <TextBlock Text="<#=edmProperty.Name.Replace("Id","")#>" HorizontalAlignment="Left" Height="24" Margin="10,<#=        top#>,0,0" VerticalAlignment="Top" Width="Auto" />
                <ComboBox SelectedValue="{Binding <#=        edmProperty.Name#>}" 
                          
                          DisplayMemberPath="EntityName"  SelectedValuePath="<#=pKey#>" 
                          ItemsSource="{Binding DataContext.<#=        pSetName#>, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, ElementName=LayoutRoot}" 
                          coreui:CBSelectedItem.SelectedItem="{Binding <#=        pSetEntity#>}" 
                          Text="{Binding <#=pSetEntity#>EntityName, UpdateSourceTrigger=LostFocus}"
                          
                          IsEditable="True" HorizontalAlignment="Left" Height="24" Margin="150,<#=        top#>,0,0" VerticalAlignment="Top" Width="Auto" FontSize="14" />  
<#+                    continue;
                }
                  if (ef.UnderlyingClrType(edmProperty.TypeUsage.EdmType) == typeof(bool))
                {   
#>
                <TextBlock Text="<#=    edmProperty.Name#>" HorizontalAlignment="Left" Height="24" Margin="10,<#=    top#>,0,0" VerticalAlignment="Top" Width="Auto" />
                <CheckBox IsChecked="{Binding <#=    edmProperty.Name#>, UpdateSourceTrigger=PropertyChanged}" Content="" HorizontalAlignment="Left" Height="24" Margin="150,<#=    top#>,0,0" VerticalAlignment="Top" Width="100" />
<#+                    continue;
                }
 #>
                <TextBlock Text="<#=    edmProperty.Name#>" HorizontalAlignment="Left" Height="24" Margin="10,<#=    top#>,0,0" VerticalAlignment="Top" Width="Auto" />
                <TextBox Text="{Binding <#=    edmProperty.Name#>, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" HorizontalAlignment="Left" Height="24" Margin="150,<#=    top#>,0,0" VerticalAlignment="Top" Width="100" />
<#+          
            }
 #>
       
                
            </Grid>
        </DataTemplate>
   
    </UserControl.Resources>

    <Grid x:Name="LayoutRoot" DataContext="{Binding Source={StaticResource <#=mainEntity.Name#>ListModelDataSource}}">
        <TextBlock HorizontalAlignment="Left" Height="37.806" Margin="17,14.227,0,0" TextWrapping="Wrap" Text="<#=mainEntity.Name#>" VerticalAlignment="Top" Width="Auto" FontSize="18"/>
       
<#+
        if(mainEntity.MetadataProperties.Where(z => z.Name.Contains("ViewTypeProperty") && z.Value.ToString().Contains("EntityView")).ToList().Any() == true)
            {
                string prop = (ccEntity == null?"":"Current" + cEntity + ".") + mprop;
                
                if(mainEntity.Name == MainEntity.Name) prop = "Current" + MainEntity.Name;
#>
                <ContentControl x:Name="ItemEditor"  Background="#FF0B430A" Content="{Binding <#=prop#>}" HorizontalAlignment="Left" Height="Auto" Margin="10,74,0,0" VerticalAlignment="Top" Width="521" ContentTemplate="{DynamicResource <#=mainEntity.Name#>Tpl}"/>
<#+
            }
                else
            {
#>
                <ListBox x:Name="<#=                mainEntity.Name#>Grd" ItemsSource="{Binding <#=(ccEntity == null?"":"Current" + cEntity + ".")#><#=mprop#>}" SelectedValuePath="EntityId" SelectedValue="{Binding Current<#=mainEntity.Name#>ID}" SelectedItem="{Binding Current<#=mainEntity.Name#>}" HorizontalAlignment="Left" Height="Auto" Margin="10,74,0,0" VerticalAlignment="Top" Width="521" ItemTemplate="{DynamicResource <#=                mainEntity.Name#>Tpl}" Style="{DynamicResource AlphaListBoxStyle}"/>
<#+         
            }
#>
<#+
         if(mainEntity.MetadataProperties.FirstOrDefault(x => x.Name.Contains("ReadOnlyProperty")) == null)
            {
#>       

         <TextBlock x:Name="NewBtn1" HorizontalAlignment="Right" Height="25" Margin="0,44,64.8,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="28" TextAlignment="Center" Style="{DynamicResource TextButtonStyle}" FontSize="20" Text="&#xE109;" FontFamily="Segoe UI Symbol">
            <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <ei:CallMethodAction TargetObject="{Binding Source={StaticResource <#=    mainEntity.Name#>ListModelDataSource}}" MethodName="New<#=    mainEntity.Name#>"/>
                    </i:EventTrigger>
            </i:Interaction.Triggers>
        </TextBlock>
        <TextBlock x:Name="DelBtn" Height="25" Margin="0,44,31.8,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="28" TextAlignment="Center" Style="{DynamicResource CloseButtonStyle}" FontSize="20" Text="&#xE106;" FontFamily="Segoe UI Symbol" Grid.RowSpan="1" HorizontalAlignment="Right">
                    <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <ei:CallMethodAction TargetObject="{Binding Source={StaticResource <#=    mainEntity.Name#>ListModelDataSource}}" MethodName="Delete<#=    mainEntity.Name#>"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
        </TextBlock>
<#+
            }
 #>
    </Grid>
</UserControl>
		
		
		<#+
            return this.GenerationEnvironment.ToString();
        }
	}	
#>
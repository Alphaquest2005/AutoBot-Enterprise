<#+
// <copyright file="IteratorExtensions.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class IteratorExtensions : CSharpTemplate
{
    public string inputFile;
	public override string TransformText()
	{
		base.TransformText();
#>

<#+
// Copyright (c) Microsoft Corporation.  All rights reserved.

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataTools ef = new MetadataTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this);

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

 MetadataWorkspace COREmetadataWorkspace = null;
 bool COREallMetadataLoaded =loader.TryLoadAllMetadata(@"C:\Prism Projects\Quick Inventory Manager\CoreEntities\CoreEntities.edmx", out COREmetadataWorkspace);
 EdmItemCollection COREItemCollection = (EdmItemCollection)COREmetadataWorkspace.GetItemCollection(DataSpace.CSpace);
 EntityContainer COREcontainer = COREItemCollection.GetItems<EntityContainer>().FirstOrDefault();

if (container == null)
{
    return "// No EntityContainer exists in the model, so no code was generated";
}
#>
using Core.Common.Contracts;
using Core.Common.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using <#=container.Name #>;

namespace HRManager.Data
{
    public static class <#=container.Name #>IteratorExtentions
    {
        #region Iterator Members
<#+
    foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
            {
if(container.Name != COREcontainer.Name && COREItemCollection.GetItems<EntityType>().FirstOrDefault(x=>x.Name == entity.Name) != null) continue;
 #>

        public static void AcceptAllChanges(this <#=entity.Name#> entity)
        {
            <#=container.Name #>Iterator.Execute(entity,
 (<#=entity.Name#> e) => { e.AcceptChanges(); });
        }

        public static void StartTrackingAll(this <#=entity.Name#> entity)
        {
            <#=container.Name #>Iterator.Execute(entity,
 (<#=entity.Name#> e) => { e.StartTracking(); });
        }

        public static void StopTrackingAll(this <#=entity.Name#> entity)
        {
            <#=container.Name #>Iterator.Execute(entity,
 (<#=entity.Name#> e) => { e.StopTracking(); });
        }

        public static bool HasChanges(this <#=entity.Name#> entity)
        {
            <#=container.Name #>Iterator entities = <#=container.Name #>Iterator.Create(entity);
            foreach (<#=entity.Name#> e in entities.OfType<<#=entity.Name#>>())
            {
if (e.ChangeTracker.State != ObjectState.Unchanged)
{
    return true;
}
            }
            return false;
        }

        // returns an instance from the graph with the same key or the original entity 

        public static <#=entity.Name#> MergeWith(<#=entity.Name#> entity, <#=entity.Name#> graph,
            Func<<#=entity.Name#>, <#=entity.Name#>, bool> keyComparer)
        {
            return <#=container.Name#>Iterator.Create(graph).OfType<<#=entity.Name#>>()
               .SingleOrDefault(e => keyComparer(entity, e)) ?? entity;
        }
<#+
            }#>

        #endregion
    }
}

<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>

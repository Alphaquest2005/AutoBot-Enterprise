// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using SalesDataQS.Client.DTO;


using Core.Common.Validation;

namespace SalesDataQS.Client.Entities
{
       public partial class SalesData: BaseEntity<SalesData>
    {
        DTO.SalesData salesdata;
        public SalesData(DTO.SalesData dto )
        {
              salesdata = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.SalesData>(salesdata);

        }

        public DTO.SalesData DTO
        {
            get
            {
             return salesdata;
            }
            set
            {
                salesdata = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "EntryData is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntryDataId has a max length of 50 letters ")]
public string EntryDataId
		{ 
		    get { return this.salesdata.EntryDataId; }
			set
			{
			    if (value == this.salesdata.EntryDataId) return;
				this.salesdata.EntryDataId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryDataDate is required")]
       
public System.DateTime EntryDataDate
		{ 
		    get { return this.salesdata.EntryDataDate; }
			set
			{
			    if (value == this.salesdata.EntryDataDate) return;
				this.salesdata.EntryDataDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Type is required")]
       
                
                [MaxLength(5, ErrorMessage = "Type has a max length of 5 letters ")]
public string Type
		{ 
		    get { return this.salesdata.Type; }
			set
			{
			    if (value == this.salesdata.Type) return;
				this.salesdata.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> TaxAmount
		{ 
		    get { return this.salesdata.TaxAmount; }
			set
			{
			    if (value == this.salesdata.TaxAmount) return;
				this.salesdata.TaxAmount = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TaxAmount");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "CustomerName has a max length of 255 letters ")]
public string CustomerName
		{ 
		    get { return this.salesdata.CustomerName; }
			set
			{
			    if (value == this.salesdata.CustomerName) return;
				this.salesdata.CustomerName = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CustomerName");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Total
		{ 
		    get { return this.salesdata.Total; }
			set
			{
			    if (value == this.salesdata.Total) return;
				this.salesdata.Total = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Total");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> AllocatedTotal
		{ 
		    get { return this.salesdata.AllocatedTotal; }
			set
			{
			    if (value == this.salesdata.AllocatedTotal) return;
				this.salesdata.AllocatedTotal = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllocatedTotal");
			}
		}
     

       
       
public Nullable<int> AsycudaDocumentSetId
		{ 
		    get { return this.salesdata.AsycudaDocumentSetId; }
			set
			{
			    if (value == this.salesdata.AsycudaDocumentSetId) return;
				this.salesdata.AsycudaDocumentSetId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentSetId");
			}
		}
     

       
       
public Nullable<int> AsycudaDocumentId
		{ 
		    get { return this.salesdata.AsycudaDocumentId; }
			set
			{
			    if (value == this.salesdata.AsycudaDocumentId) return;
				this.salesdata.AsycudaDocumentId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.salesdata.ApplicationSettingsId; }
			set
			{
			    if (value == this.salesdata.ApplicationSettingsId) return;
				this.salesdata.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

        ObservableCollection<SalesDataDetail> _SalesDataDetails = null;
        public  ObservableCollection<SalesDataDetail> SalesDataDetails
		{
            
		    get 
				{ 
					if(_SalesDataDetails != null) return _SalesDataDetails;
					//if (this.salesdata.SalesDataDetails == null) Debugger.Break();
					if(this.salesdata.SalesDataDetails != null)
					{
						_SalesDataDetails = new ObservableCollection<SalesDataDetail>(this.salesdata.SalesDataDetails.Select(x => new SalesDataDetail(x)));
					}
					
						_SalesDataDetails.CollectionChanged += SalesDataDetails_CollectionChanged; 
					
					return _SalesDataDetails; 
				}
			set
			{
			    if (Equals(value, _SalesDataDetails)) return;
				if (value != null)
					this.salesdata.SalesDataDetails = new ChangeTrackingCollection<DTO.SalesDataDetail>(value.Select(x => x.DTO).ToList());
                _SalesDataDetails = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_SalesDataDetails != null)
				_SalesDataDetails.CollectionChanged += SalesDataDetails_CollectionChanged;               
				NotifyPropertyChanged("SalesDataDetails");
			}
		}
        
        void SalesDataDetails_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (SalesDataDetail itm in e.NewItems)
                    {
                        if (itm != null)
                        salesdata.SalesDataDetails.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (SalesDataDetail itm in e.OldItems)
                    {
                        if (itm != null)
                        salesdata.SalesDataDetails.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AsycudaDocumentSetEntryData> _AsycudaDocumentSets = null;
        public  ObservableCollection<AsycudaDocumentSetEntryData> AsycudaDocumentSets
		{
            
		    get 
				{ 
					if(_AsycudaDocumentSets != null) return _AsycudaDocumentSets;
					//if (this.salesdata.AsycudaDocumentSets == null) Debugger.Break();
					if(this.salesdata.AsycudaDocumentSets != null)
					{
						_AsycudaDocumentSets = new ObservableCollection<AsycudaDocumentSetEntryData>(this.salesdata.AsycudaDocumentSets.Select(x => new AsycudaDocumentSetEntryData(x)));
					}
					
						_AsycudaDocumentSets.CollectionChanged += AsycudaDocumentSets_CollectionChanged; 
					
					return _AsycudaDocumentSets; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentSets)) return;
				if (value != null)
					this.salesdata.AsycudaDocumentSets = new ChangeTrackingCollection<DTO.AsycudaDocumentSetEntryData>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentSets = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentSets != null)
				_AsycudaDocumentSets.CollectionChanged += AsycudaDocumentSets_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentSets");
			}
		}
        
        void AsycudaDocumentSets_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentSetEntryData itm in e.NewItems)
                    {
                        if (itm != null)
                        salesdata.AsycudaDocumentSets.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentSetEntryData itm in e.OldItems)
                    {
                        if (itm != null)
                        salesdata.AsycudaDocumentSets.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<SalesDataAllocations> _SalesDataAllocations = null;
        public  ObservableCollection<SalesDataAllocations> SalesDataAllocations
		{
            
		    get 
				{ 
					if(_SalesDataAllocations != null) return _SalesDataAllocations;
					//if (this.salesdata.SalesDataAllocations == null) Debugger.Break();
					if(this.salesdata.SalesDataAllocations != null)
					{
						_SalesDataAllocations = new ObservableCollection<SalesDataAllocations>(this.salesdata.SalesDataAllocations.Select(x => new SalesDataAllocations(x)));
					}
					
						_SalesDataAllocations.CollectionChanged += SalesDataAllocations_CollectionChanged; 
					
					return _SalesDataAllocations; 
				}
			set
			{
			    if (Equals(value, _SalesDataAllocations)) return;
				if (value != null)
					this.salesdata.SalesDataAllocations = new ChangeTrackingCollection<DTO.SalesDataAllocations>(value.Select(x => x.DTO).ToList());
                _SalesDataAllocations = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_SalesDataAllocations != null)
				_SalesDataAllocations.CollectionChanged += SalesDataAllocations_CollectionChanged;               
				NotifyPropertyChanged("SalesDataAllocations");
			}
		}
        
        void SalesDataAllocations_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (SalesDataAllocations itm in e.NewItems)
                    {
                        if (itm != null)
                        salesdata.SalesDataAllocations.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (SalesDataAllocations itm in e.OldItems)
                    {
                        if (itm != null)
                        salesdata.SalesDataAllocations.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AsycudaDocumentEntryData> _AsycudaDocuments = null;
        public  ObservableCollection<AsycudaDocumentEntryData> AsycudaDocuments
		{
            
		    get 
				{ 
					if(_AsycudaDocuments != null) return _AsycudaDocuments;
					//if (this.salesdata.AsycudaDocuments == null) Debugger.Break();
					if(this.salesdata.AsycudaDocuments != null)
					{
						_AsycudaDocuments = new ObservableCollection<AsycudaDocumentEntryData>(this.salesdata.AsycudaDocuments.Select(x => new AsycudaDocumentEntryData(x)));
					}
					
						_AsycudaDocuments.CollectionChanged += AsycudaDocuments_CollectionChanged; 
					
					return _AsycudaDocuments; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocuments)) return;
				if (value != null)
					this.salesdata.AsycudaDocuments = new ChangeTrackingCollection<DTO.AsycudaDocumentEntryData>(value.Select(x => x.DTO).ToList());
                _AsycudaDocuments = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocuments != null)
				_AsycudaDocuments.CollectionChanged += AsycudaDocuments_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocuments");
			}
		}
        
        void AsycudaDocuments_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentEntryData itm in e.NewItems)
                    {
                        if (itm != null)
                        salesdata.AsycudaDocuments.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentEntryData itm in e.OldItems)
                    {
                        if (itm != null)
                        salesdata.AsycudaDocuments.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.SalesData> _changeTracker;    
        public ChangeTrackingCollection<DTO.SalesData> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class Actions: BaseEntity<Actions>
    {
        DTO.Actions actions;
        public Actions(DTO.Actions dto )
        {
              actions = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Actions>(actions);

        }

        public DTO.Actions DTO
        {
            get
            {
             return actions;
            }
            set
            {
                actions = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.actions.Id; }
			set
			{
			    if (value == this.actions.Id) return;
				this.actions.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Name is required")]
       
                
                [MaxLength(100, ErrorMessage = "Name has a max length of 100 letters ")]
public string Name
		{ 
		    get { return this.actions.Name; }
			set
			{
			    if (value == this.actions.Name) return;
				this.actions.Name = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Name");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "TestMode is required")]
       
public bool TestMode
		{ 
		    get { return this.actions.TestMode; }
			set
			{
			    if (value == this.actions.TestMode) return;
				this.actions.TestMode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TestMode");
			}
		}
     

        ObservableCollection<FileTypeActions> _FileTypeActions = null;
        public  ObservableCollection<FileTypeActions> FileTypeActions
		{
            
		    get 
				{ 
					if(_FileTypeActions != null) return _FileTypeActions;
					//if (this.actions.FileTypeActions == null) Debugger.Break();
					if(this.actions.FileTypeActions != null)
					{
						_FileTypeActions = new ObservableCollection<FileTypeActions>(this.actions.FileTypeActions.Select(x => new FileTypeActions(x)));
					}
					
						_FileTypeActions.CollectionChanged += FileTypeActions_CollectionChanged; 
					
					return _FileTypeActions; 
				}
			set
			{
			    if (Equals(value, _FileTypeActions)) return;
				if (value != null)
					this.actions.FileTypeActions = new ChangeTrackingCollection<DTO.FileTypeActions>(value.Select(x => x.DTO).ToList());
                _FileTypeActions = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FileTypeActions != null)
				_FileTypeActions.CollectionChanged += FileTypeActions_CollectionChanged;               
				NotifyPropertyChanged("FileTypeActions");
			}
		}
        
        void FileTypeActions_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypeActions itm in e.NewItems)
                    {
                        if (itm != null)
                        actions.FileTypeActions.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypeActions itm in e.OldItems)
                    {
                        if (itm != null)
                        actions.FileTypeActions.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<SessionActions> _SessionActions = null;
        public  ObservableCollection<SessionActions> SessionActions
		{
            
		    get 
				{ 
					if(_SessionActions != null) return _SessionActions;
					//if (this.actions.SessionActions == null) Debugger.Break();
					if(this.actions.SessionActions != null)
					{
						_SessionActions = new ObservableCollection<SessionActions>(this.actions.SessionActions.Select(x => new SessionActions(x)));
					}
					
						_SessionActions.CollectionChanged += SessionActions_CollectionChanged; 
					
					return _SessionActions; 
				}
			set
			{
			    if (Equals(value, _SessionActions)) return;
				if (value != null)
					this.actions.SessionActions = new ChangeTrackingCollection<DTO.SessionActions>(value.Select(x => x.DTO).ToList());
                _SessionActions = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_SessionActions != null)
				_SessionActions.CollectionChanged += SessionActions_CollectionChanged;               
				NotifyPropertyChanged("SessionActions");
			}
		}
        
        void SessionActions_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (SessionActions itm in e.NewItems)
                    {
                        if (itm != null)
                        actions.SessionActions.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (SessionActions itm in e.OldItems)
                    {
                        if (itm != null)
                        actions.SessionActions.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<ActionDocSetLogs> _ActionDocSetLogs = null;
        public  ObservableCollection<ActionDocSetLogs> ActionDocSetLogs
		{
            
		    get 
				{ 
					if(_ActionDocSetLogs != null) return _ActionDocSetLogs;
					//if (this.actions.ActionDocSetLogs == null) Debugger.Break();
					if(this.actions.ActionDocSetLogs != null)
					{
						_ActionDocSetLogs = new ObservableCollection<ActionDocSetLogs>(this.actions.ActionDocSetLogs.Select(x => new ActionDocSetLogs(x)));
					}
					
						_ActionDocSetLogs.CollectionChanged += ActionDocSetLogs_CollectionChanged; 
					
					return _ActionDocSetLogs; 
				}
			set
			{
			    if (Equals(value, _ActionDocSetLogs)) return;
				if (value != null)
					this.actions.ActionDocSetLogs = new ChangeTrackingCollection<DTO.ActionDocSetLogs>(value.Select(x => x.DTO).ToList());
                _ActionDocSetLogs = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_ActionDocSetLogs != null)
				_ActionDocSetLogs.CollectionChanged += ActionDocSetLogs_CollectionChanged;               
				NotifyPropertyChanged("ActionDocSetLogs");
			}
		}
        
        void ActionDocSetLogs_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (ActionDocSetLogs itm in e.NewItems)
                    {
                        if (itm != null)
                        actions.ActionDocSetLogs.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (ActionDocSetLogs itm in e.OldItems)
                    {
                        if (itm != null)
                        actions.ActionDocSetLogs.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.Actions> _changeTracker;    
        public ChangeTrackingCollection<DTO.Actions> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



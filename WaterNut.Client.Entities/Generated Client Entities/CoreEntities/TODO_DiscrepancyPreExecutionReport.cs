// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class TODO_DiscrepancyPreExecutionReport: BaseEntity<TODO_DiscrepancyPreExecutionReport>
    {
        DTO.TODO_DiscrepancyPreExecutionReport todo_discrepancypreexecutionreport;
        public TODO_DiscrepancyPreExecutionReport(DTO.TODO_DiscrepancyPreExecutionReport dto )
        {
              todo_discrepancypreexecutionreport = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TODO_DiscrepancyPreExecutionReport>(todo_discrepancypreexecutionreport);

        }

        public DTO.TODO_DiscrepancyPreExecutionReport DTO
        {
            get
            {
             return todo_discrepancypreexecutionreport;
            }
            set
            {
                todo_discrepancypreexecutionreport = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= "EntryDataDetails is required")]
       
public int EntryDataDetailsId
		{ 
		    get { return this.todo_discrepancypreexecutionreport.EntryDataDetailsId; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.EntryDataDetailsId) return;
				this.todo_discrepancypreexecutionreport.EntryDataDetailsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataDetailsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryData is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntryDataId has a max length of 50 letters ")]
public string EntryDataId
		{ 
		    get { return this.todo_discrepancypreexecutionreport.EntryDataId; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.EntryDataId) return;
				this.todo_discrepancypreexecutionreport.EntryDataId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataId");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> LineNumber
		{ 
		    get { return this.todo_discrepancypreexecutionreport.LineNumber; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.LineNumber) return;
				this.todo_discrepancypreexecutionreport.LineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(20, ErrorMessage = "ItemNumber has a max length of 20 letters ")]
public string ItemNumber
		{ 
		    get { return this.todo_discrepancypreexecutionreport.ItemNumber; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.ItemNumber) return;
				this.todo_discrepancypreexecutionreport.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Quantity is required")]
       [NumberValidationAttribute]
public double Quantity
		{ 
		    get { return this.todo_discrepancypreexecutionreport.Quantity; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.Quantity) return;
				this.todo_discrepancypreexecutionreport.Quantity = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Quantity");
			}
		}
     

       
       
                
                [MaxLength(15, ErrorMessage = "Units has a max length of 15 letters ")]
public string Units
		{ 
		    get { return this.todo_discrepancypreexecutionreport.Units; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.Units) return;
				this.todo_discrepancypreexecutionreport.Units = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Units");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemDescription is required")]
       
                
                [MaxLength(255, ErrorMessage = "ItemDescription has a max length of 255 letters ")]
public string ItemDescription
		{ 
		    get { return this.todo_discrepancypreexecutionreport.ItemDescription; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.ItemDescription) return;
				this.todo_discrepancypreexecutionreport.ItemDescription = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemDescription");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Cost is required")]
       [NumberValidationAttribute]
public double Cost
		{ 
		    get { return this.todo_discrepancypreexecutionreport.Cost; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.Cost) return;
				this.todo_discrepancypreexecutionreport.Cost = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Cost");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "QtyAllocated is required")]
       [NumberValidationAttribute]
public double QtyAllocated
		{ 
		    get { return this.todo_discrepancypreexecutionreport.QtyAllocated; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.QtyAllocated) return;
				this.todo_discrepancypreexecutionreport.QtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("QtyAllocated");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "UnitWeight is required")]
       [NumberValidationAttribute]
public double UnitWeight
		{ 
		    get { return this.todo_discrepancypreexecutionreport.UnitWeight; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.UnitWeight) return;
				this.todo_discrepancypreexecutionreport.UnitWeight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("UnitWeight");
			}
		}
     

       
       
public Nullable<bool> DoNotAllocate
		{ 
		    get { return this.todo_discrepancypreexecutionreport.DoNotAllocate; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.DoNotAllocate) return;
				this.todo_discrepancypreexecutionreport.DoNotAllocate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotAllocate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "TariffCode has a max length of 50 letters ")]
public string TariffCode
		{ 
		    get { return this.todo_discrepancypreexecutionreport.TariffCode; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.TariffCode) return;
				this.todo_discrepancypreexecutionreport.TariffCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCode");
			}
		}
     

       
       
                
                [MaxLength(20, ErrorMessage = "CNumber has a max length of 20 letters ")]
public string CNumber
		{ 
		    get { return this.todo_discrepancypreexecutionreport.CNumber; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.CNumber) return;
				this.todo_discrepancypreexecutionreport.CNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CNumber");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> CLineNumber
		{ 
		    get { return this.todo_discrepancypreexecutionreport.CLineNumber; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.CLineNumber) return;
				this.todo_discrepancypreexecutionreport.CLineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CLineNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "AsycudaDocumentSet is required")]
       
public int AsycudaDocumentSetId
		{ 
		    get { return this.todo_discrepancypreexecutionreport.AsycudaDocumentSetId; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.AsycudaDocumentSetId) return;
				this.todo_discrepancypreexecutionreport.AsycudaDocumentSetId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentSetId");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> InvoiceQty
		{ 
		    get { return this.todo_discrepancypreexecutionreport.InvoiceQty; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.InvoiceQty) return;
				this.todo_discrepancypreexecutionreport.InvoiceQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceQty");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> ReceivedQty
		{ 
		    get { return this.todo_discrepancypreexecutionreport.ReceivedQty; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.ReceivedQty) return;
				this.todo_discrepancypreexecutionreport.ReceivedQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReceivedQty");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceNumber has a max length of 50 letters ")]
public string PreviousInvoiceNumber
		{ 
		    get { return this.todo_discrepancypreexecutionreport.PreviousInvoiceNumber; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.PreviousInvoiceNumber) return;
				this.todo_discrepancypreexecutionreport.PreviousInvoiceNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceNumber");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousCNumber has a max length of 50 letters ")]
public string PreviousCNumber
		{ 
		    get { return this.todo_discrepancypreexecutionreport.PreviousCNumber; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.PreviousCNumber) return;
				this.todo_discrepancypreexecutionreport.PreviousCNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousCNumber");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "Comment has a max length of 255 letters ")]
public string Comment
		{ 
		    get { return this.todo_discrepancypreexecutionreport.Comment; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.Comment) return;
				this.todo_discrepancypreexecutionreport.Comment = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Comment");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Status has a max length of 50 letters ")]
public string Status
		{ 
		    get { return this.todo_discrepancypreexecutionreport.Status; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.Status) return;
				this.todo_discrepancypreexecutionreport.Status = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Status");
			}
		}
     

       
       
public Nullable<System.DateTime> EffectiveDate
		{ 
		    get { return this.todo_discrepancypreexecutionreport.EffectiveDate; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.EffectiveDate) return;
				this.todo_discrepancypreexecutionreport.EffectiveDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EffectiveDate");
			}
		}
     

       
       
                
                [MaxLength(4, ErrorMessage = "Currency has a max length of 4 letters ")]
public string Currency
		{ 
		    get { return this.todo_discrepancypreexecutionreport.Currency; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.Currency) return;
				this.todo_discrepancypreexecutionreport.Currency = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Currency");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.todo_discrepancypreexecutionreport.ApplicationSettingsId; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.ApplicationSettingsId) return;
				this.todo_discrepancypreexecutionreport.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Type has a max length of 50 letters ")]
public string Type
		{ 
		    get { return this.todo_discrepancypreexecutionreport.Type; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.Type) return;
				this.todo_discrepancypreexecutionreport.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Declarant_Reference_Number has a max length of 50 letters ")]
public string Declarant_Reference_Number
		{ 
		    get { return this.todo_discrepancypreexecutionreport.Declarant_Reference_Number; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.Declarant_Reference_Number) return;
				this.todo_discrepancypreexecutionreport.Declarant_Reference_Number = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Declarant_Reference_Number");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InvoiceDate is required")]
       
public System.DateTime InvoiceDate
		{ 
		    get { return this.todo_discrepancypreexecutionreport.InvoiceDate; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.InvoiceDate) return;
				this.todo_discrepancypreexecutionreport.InvoiceDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceDate");
			}
		}
     

       
       
                
                
public string Subject
		{ 
		    get { return this.todo_discrepancypreexecutionreport.Subject; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.Subject) return;
				this.todo_discrepancypreexecutionreport.Subject = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Subject");
			}
		}
     

       
       
public Nullable<System.DateTime> EmailDate
		{ 
		    get { return this.todo_discrepancypreexecutionreport.EmailDate; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.EmailDate) return;
				this.todo_discrepancypreexecutionreport.EmailDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EmailDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DutyFreePaid is required")]
       
                
                [MaxLength(9, ErrorMessage = "DutyFreePaid has a max length of 9 letters ")]
public string DutyFreePaid
		{ 
		    get { return this.todo_discrepancypreexecutionreport.DutyFreePaid; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.DutyFreePaid) return;
				this.todo_discrepancypreexecutionreport.DutyFreePaid = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DutyFreePaid");
			}
		}
     

       
       
                
                [MaxLength(40, ErrorMessage = "DocumentType has a max length of 40 letters ")]
public string DocumentType
		{ 
		    get { return this.todo_discrepancypreexecutionreport.DocumentType; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.DocumentType) return;
				this.todo_discrepancypreexecutionreport.DocumentType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocumentType");
			}
		}
     

       
       
                
                [MaxLength(30, ErrorMessage = "Reference has a max length of 30 letters ")]
public string Reference
		{ 
		    get { return this.todo_discrepancypreexecutionreport.Reference; }
			set
			{
			    if (value == this.todo_discrepancypreexecutionreport.Reference) return;
				this.todo_discrepancypreexecutionreport.Reference = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Reference");
			}
		}
     


        ChangeTrackingCollection<DTO.TODO_DiscrepancyPreExecutionReport> _changeTracker;    
        public ChangeTrackingCollection<DTO.TODO_DiscrepancyPreExecutionReport> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



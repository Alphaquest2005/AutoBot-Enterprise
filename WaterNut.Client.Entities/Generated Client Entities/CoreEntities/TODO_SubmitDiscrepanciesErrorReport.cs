// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class TODO_SubmitDiscrepanciesErrorReport: BaseEntity<TODO_SubmitDiscrepanciesErrorReport>
    {
        DTO.TODO_SubmitDiscrepanciesErrorReport todo_submitdiscrepancieserrorreport;
        public TODO_SubmitDiscrepanciesErrorReport(DTO.TODO_SubmitDiscrepanciesErrorReport dto )
        {
              todo_submitdiscrepancieserrorreport = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TODO_SubmitDiscrepanciesErrorReport>(todo_submitdiscrepancieserrorreport);

        }

        public DTO.TODO_SubmitDiscrepanciesErrorReport DTO
        {
            get
            {
             return todo_submitdiscrepancieserrorreport;
            }
            set
            {
                todo_submitdiscrepancieserrorreport = value;
            }
        }
       
       
                
                [MaxLength(50, ErrorMessage = "Type has a max length of 50 letters ")]
public string Type
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.Type; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.Type) return;
				this.todo_submitdiscrepancieserrorreport.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InvoiceDate is required")]
       
public System.DateTime InvoiceDate
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.InvoiceDate; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.InvoiceDate) return;
				this.todo_submitdiscrepancieserrorreport.InvoiceDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceDate");
			}
		}
     

       
       
public Nullable<System.DateTime> EffectiveDate
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.EffectiveDate; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.EffectiveDate) return;
				this.todo_submitdiscrepancieserrorreport.EffectiveDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EffectiveDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InvoiceNo is required")]
       
                
                [MaxLength(50, ErrorMessage = "InvoiceNo has a max length of 50 letters ")]
public string InvoiceNo
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.InvoiceNo; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.InvoiceNo) return;
				this.todo_submitdiscrepancieserrorreport.InvoiceNo = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceNo");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> LineNumber
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.LineNumber; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.LineNumber) return;
				this.todo_submitdiscrepancieserrorreport.LineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(20, ErrorMessage = "ItemNumber has a max length of 20 letters ")]
public string ItemNumber
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.ItemNumber; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.ItemNumber) return;
				this.todo_submitdiscrepancieserrorreport.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemDescription is required")]
       
                
                [MaxLength(255, ErrorMessage = "ItemDescription has a max length of 255 letters ")]
public string ItemDescription
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.ItemDescription; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.ItemDescription) return;
				this.todo_submitdiscrepancieserrorreport.ItemDescription = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemDescription");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> InvoiceQty
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.InvoiceQty; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.InvoiceQty) return;
				this.todo_submitdiscrepancieserrorreport.InvoiceQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceQty");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> ReceivedQty
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.ReceivedQty; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.ReceivedQty) return;
				this.todo_submitdiscrepancieserrorreport.ReceivedQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReceivedQty");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Cost is required")]
       [NumberValidationAttribute]
public double Cost
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.Cost; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.Cost) return;
				this.todo_submitdiscrepancieserrorreport.Cost = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Cost");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousCNumber has a max length of 50 letters ")]
public string PreviousCNumber
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.PreviousCNumber; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.PreviousCNumber) return;
				this.todo_submitdiscrepancieserrorreport.PreviousCNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousCNumber");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceNumber has a max length of 50 letters ")]
public string PreviousInvoiceNumber
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.PreviousInvoiceNumber; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.PreviousInvoiceNumber) return;
				this.todo_submitdiscrepancieserrorreport.PreviousInvoiceNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceNumber");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "comment has a max length of 255 letters ")]
public string comment
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.comment; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.comment) return;
				this.todo_submitdiscrepancieserrorreport.comment = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("comment");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "Status has a max length of 255 letters ")]
public string Status
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.Status; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.Status) return;
				this.todo_submitdiscrepancieserrorreport.Status = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Status");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DutyFreePaid is required")]
       
                
                [MaxLength(9, ErrorMessage = "DutyFreePaid has a max length of 9 letters ")]
public string DutyFreePaid
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.DutyFreePaid; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.DutyFreePaid) return;
				this.todo_submitdiscrepancieserrorreport.DutyFreePaid = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DutyFreePaid");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "subject is required")]
       
                
                
public string subject
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.subject; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.subject) return;
				this.todo_submitdiscrepancieserrorreport.subject = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("subject");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "emailDate is required")]
       
public System.DateTime emailDate
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.emailDate; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.emailDate) return;
				this.todo_submitdiscrepancieserrorreport.emailDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("emailDate");
			}
		}
     

       
       
public Nullable<int> emailId
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.emailId; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.emailId) return;
				this.todo_submitdiscrepancieserrorreport.emailId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("emailId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.todo_submitdiscrepancieserrorreport.ApplicationSettingsId; }
			set
			{
			    if (value == this.todo_submitdiscrepancieserrorreport.ApplicationSettingsId) return;
				this.todo_submitdiscrepancieserrorreport.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     


        ChangeTrackingCollection<DTO.TODO_SubmitDiscrepanciesErrorReport> _changeTracker;    
        public ChangeTrackingCollection<DTO.TODO_SubmitDiscrepanciesErrorReport> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class TODO_Error_IncompleteItems: BaseEntity<TODO_Error_IncompleteItems>
    {
        DTO.TODO_Error_IncompleteItems todo_error_incompleteitems;
        public TODO_Error_IncompleteItems(DTO.TODO_Error_IncompleteItems dto )
        {
              todo_error_incompleteitems = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TODO_Error_IncompleteItems>(todo_error_incompleteitems);

        }

        public DTO.TODO_Error_IncompleteItems DTO
        {
            get
            {
             return todo_error_incompleteitems;
            }
            set
            {
                todo_error_incompleteitems = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= "Item_ is required")]
       
public int Item_Id
		{ 
		    get { return this.todo_error_incompleteitems.Item_Id; }
			set
			{
			    if (value == this.todo_error_incompleteitems.Item_Id) return;
				this.todo_error_incompleteitems.Item_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Item_Id");
			}
		}
     

       
       
                
                [MaxLength(25, ErrorMessage = "Error has a max length of 25 letters ")]
public string Error
		{ 
		    get { return this.todo_error_incompleteitems.Error; }
			set
			{
			    if (value == this.todo_error_incompleteitems.Error) return;
				this.todo_error_incompleteitems.Error = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Error");
			}
		}
     

       
       
                
                [MaxLength(20, ErrorMessage = "CNumber has a max length of 20 letters ")]
public string CNumber
		{ 
		    get { return this.todo_error_incompleteitems.CNumber; }
			set
			{
			    if (value == this.todo_error_incompleteitems.CNumber) return;
				this.todo_error_incompleteitems.CNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CNumber");
			}
		}
     

       
       
public Nullable<System.DateTime> RegistrationDate
		{ 
		    get { return this.todo_error_incompleteitems.RegistrationDate; }
			set
			{
			    if (value == this.todo_error_incompleteitems.RegistrationDate) return;
				this.todo_error_incompleteitems.RegistrationDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegistrationDate");
			}
		}
     

       
       
public Nullable<int> ApplicationSettingsId
		{ 
		    get { return this.todo_error_incompleteitems.ApplicationSettingsId; }
			set
			{
			    if (value == this.todo_error_incompleteitems.ApplicationSettingsId) return;
				this.todo_error_incompleteitems.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ASYCUDA_ is required")]
       
public int ASYCUDA_Id
		{ 
		    get { return this.todo_error_incompleteitems.ASYCUDA_Id; }
			set
			{
			    if (value == this.todo_error_incompleteitems.ASYCUDA_Id) return;
				this.todo_error_incompleteitems.ASYCUDA_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ASYCUDA_Id");
			}
		}
     

       
       
                
                [MaxLength(500, ErrorMessage = "SourceFileName has a max length of 500 letters ")]
public string SourceFileName
		{ 
		    get { return this.todo_error_incompleteitems.SourceFileName; }
			set
			{
			    if (value == this.todo_error_incompleteitems.SourceFileName) return;
				this.todo_error_incompleteitems.SourceFileName = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SourceFileName");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "LineNumber is required")]
       [NumberValidationAttribute]
public int LineNumber
		{ 
		    get { return this.todo_error_incompleteitems.LineNumber; }
			set
			{
			    if (value == this.todo_error_incompleteitems.LineNumber) return;
				this.todo_error_incompleteitems.LineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineNumber");
			}
		}
     

       
       
public Nullable<int> AsycudaDocumentSetId
		{ 
		    get { return this.todo_error_incompleteitems.AsycudaDocumentSetId; }
			set
			{
			    if (value == this.todo_error_incompleteitems.AsycudaDocumentSetId) return;
				this.todo_error_incompleteitems.AsycudaDocumentSetId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentSetId");
			}
		}
     


        ChangeTrackingCollection<DTO.TODO_Error_IncompleteItems> _changeTracker;    
        public ChangeTrackingCollection<DTO.TODO_Error_IncompleteItems> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



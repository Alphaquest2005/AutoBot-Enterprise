// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class TODO_UnallocatedShorts: BaseEntity<TODO_UnallocatedShorts>
    {
        DTO.TODO_UnallocatedShorts todo_unallocatedshorts;
        public TODO_UnallocatedShorts(DTO.TODO_UnallocatedShorts dto )
        {
              todo_unallocatedshorts = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TODO_UnallocatedShorts>(todo_unallocatedshorts);

        }

        public DTO.TODO_UnallocatedShorts DTO
        {
            get
            {
             return todo_unallocatedshorts;
            }
            set
            {
                todo_unallocatedshorts = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= "EntryData is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntryDataId has a max length of 50 letters ")]
public string EntryDataId
		{ 
		    get { return this.todo_unallocatedshorts.EntryDataId; }
			set
			{
			    if (value == this.todo_unallocatedshorts.EntryDataId) return;
				this.todo_unallocatedshorts.EntryDataId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(20, ErrorMessage = "ItemNumber has a max length of 20 letters ")]
public string ItemNumber
		{ 
		    get { return this.todo_unallocatedshorts.ItemNumber; }
			set
			{
			    if (value == this.todo_unallocatedshorts.ItemNumber) return;
				this.todo_unallocatedshorts.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       
       
public Nullable<bool> DoNotAllocate
		{ 
		    get { return this.todo_unallocatedshorts.DoNotAllocate; }
			set
			{
			    if (value == this.todo_unallocatedshorts.DoNotAllocate) return;
				this.todo_unallocatedshorts.DoNotAllocate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotAllocate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.todo_unallocatedshorts.ApplicationSettingsId; }
			set
			{
			    if (value == this.todo_unallocatedshorts.ApplicationSettingsId) return;
				this.todo_unallocatedshorts.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Quantity is required")]
       [NumberValidationAttribute]
public double Quantity
		{ 
		    get { return this.todo_unallocatedshorts.Quantity; }
			set
			{
			    if (value == this.todo_unallocatedshorts.Quantity) return;
				this.todo_unallocatedshorts.Quantity = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Quantity");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "QtyAllocated is required")]
       [NumberValidationAttribute]
public double QtyAllocated
		{ 
		    get { return this.todo_unallocatedshorts.QtyAllocated; }
			set
			{
			    if (value == this.todo_unallocatedshorts.QtyAllocated) return;
				this.todo_unallocatedshorts.QtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("QtyAllocated");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Cost is required")]
       [NumberValidationAttribute]
public double Cost
		{ 
		    get { return this.todo_unallocatedshorts.Cost; }
			set
			{
			    if (value == this.todo_unallocatedshorts.Cost) return;
				this.todo_unallocatedshorts.Cost = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Cost");
			}
		}
     

       
       
public Nullable<System.DateTime> EffectiveDate
		{ 
		    get { return this.todo_unallocatedshorts.EffectiveDate; }
			set
			{
			    if (value == this.todo_unallocatedshorts.EffectiveDate) return;
				this.todo_unallocatedshorts.EffectiveDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EffectiveDate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Type has a max length of 50 letters ")]
public string Type
		{ 
		    get { return this.todo_unallocatedshorts.Type; }
			set
			{
			    if (value == this.todo_unallocatedshorts.Type) return;
				this.todo_unallocatedshorts.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Status has a max length of 50 letters ")]
public string Status
		{ 
		    get { return this.todo_unallocatedshorts.Status; }
			set
			{
			    if (value == this.todo_unallocatedshorts.Status) return;
				this.todo_unallocatedshorts.Status = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Status");
			}
		}
     


        ChangeTrackingCollection<DTO.TODO_UnallocatedShorts> _changeTracker;    
        public ChangeTrackingCollection<DTO.TODO_UnallocatedShorts> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class InventoryItems: BaseEntity<InventoryItems>
    {
        DTO.InventoryItems inventoryitems;
        public InventoryItems(DTO.InventoryItems dto )
        {
              inventoryitems = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.InventoryItems>(inventoryitems);

        }

        public DTO.InventoryItems DTO
        {
            get
            {
             return inventoryitems;
            }
            set
            {
                inventoryitems = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(20, ErrorMessage = "ItemNumber has a max length of 20 letters ")]
public string ItemNumber
		{ 
		    get { return this.inventoryitems.ItemNumber; }
			set
			{
			    if (value == this.inventoryitems.ItemNumber) return;
				this.inventoryitems.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Description is required")]
       
                
                [MaxLength(255, ErrorMessage = "Description has a max length of 255 letters ")]
public string Description
		{ 
		    get { return this.inventoryitems.Description; }
			set
			{
			    if (value == this.inventoryitems.Description) return;
				this.inventoryitems.Description = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description");
			}
		}
     

       
       
                
                [MaxLength(60, ErrorMessage = "Category has a max length of 60 letters ")]
public string Category
		{ 
		    get { return this.inventoryitems.Category; }
			set
			{
			    if (value == this.inventoryitems.Category) return;
				this.inventoryitems.Category = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Category");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "TariffCode has a max length of 50 letters ")]
public string TariffCode
		{ 
		    get { return this.inventoryitems.TariffCode; }
			set
			{
			    if (value == this.inventoryitems.TariffCode) return;
				this.inventoryitems.TariffCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCode");
			}
		}
     

       
       
public Nullable<System.DateTime> EntryTimeStamp
		{ 
		    get { return this.inventoryitems.EntryTimeStamp; }
			set
			{
			    if (value == this.inventoryitems.EntryTimeStamp) return;
				this.inventoryitems.EntryTimeStamp = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryTimeStamp");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.inventoryitems.ApplicationSettingsId; }
			set
			{
			    if (value == this.inventoryitems.ApplicationSettingsId) return;
				this.inventoryitems.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

        ObservableCollection<InventoryItemAlias> _InventoryItemAlias = null;
        public  ObservableCollection<InventoryItemAlias> InventoryItemAlias
		{
            
		    get 
				{ 
					if(_InventoryItemAlias != null) return _InventoryItemAlias;
					//if (this.inventoryitems.InventoryItemAlias == null) Debugger.Break();
					if(this.inventoryitems.InventoryItemAlias != null)
					{
						_InventoryItemAlias = new ObservableCollection<InventoryItemAlias>(this.inventoryitems.InventoryItemAlias.Select(x => new InventoryItemAlias(x)));
					}
					
						_InventoryItemAlias.CollectionChanged += InventoryItemAlias_CollectionChanged; 
					
					return _InventoryItemAlias; 
				}
			set
			{
			    if (Equals(value, _InventoryItemAlias)) return;
				if (value != null)
					this.inventoryitems.InventoryItemAlias = new ChangeTrackingCollection<DTO.InventoryItemAlias>(value.Select(x => x.DTO).ToList());
                _InventoryItemAlias = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_InventoryItemAlias != null)
				_InventoryItemAlias.CollectionChanged += InventoryItemAlias_CollectionChanged;               
				NotifyPropertyChanged("InventoryItemAlias");
			}
		}
        
        void InventoryItemAlias_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (InventoryItemAlias itm in e.NewItems)
                    {
                        if (itm != null)
                        inventoryitems.InventoryItemAlias.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (InventoryItemAlias itm in e.OldItems)
                    {
                        if (itm != null)
                        inventoryitems.InventoryItemAlias.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AsycudaDocumentItem> _AsycudaDocumentItem = null;
        public  ObservableCollection<AsycudaDocumentItem> AsycudaDocumentItem
		{
            
		    get 
				{ 
					if(_AsycudaDocumentItem != null) return _AsycudaDocumentItem;
					//if (this.inventoryitems.AsycudaDocumentItem == null) Debugger.Break();
					if(this.inventoryitems.AsycudaDocumentItem != null)
					{
						_AsycudaDocumentItem = new ObservableCollection<AsycudaDocumentItem>(this.inventoryitems.AsycudaDocumentItem.Select(x => new AsycudaDocumentItem(x)));
					}
					
						_AsycudaDocumentItem.CollectionChanged += AsycudaDocumentItem_CollectionChanged; 
					
					return _AsycudaDocumentItem; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentItem)) return;
				if (value != null)
					this.inventoryitems.AsycudaDocumentItem = new ChangeTrackingCollection<DTO.AsycudaDocumentItem>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentItem = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentItem != null)
				_AsycudaDocumentItem.CollectionChanged += AsycudaDocumentItem_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentItem");
			}
		}
        
        void AsycudaDocumentItem_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentItem itm in e.NewItems)
                    {
                        if (itm != null)
                        inventoryitems.AsycudaDocumentItem.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentItem itm in e.OldItems)
                    {
                        if (itm != null)
                        inventoryitems.AsycudaDocumentItem.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private ApplicationSettings _ApplicationSettings;
        public  ApplicationSettings ApplicationSettings
		{
		    get
               { 
                  if (this.inventoryitems != null)
                   {
                       if (_ApplicationSettings != null)
                       {
                           if (this.inventoryitems.ApplicationSettings !=
                               _ApplicationSettings.DTO)
                           {
                                if (this.inventoryitems.ApplicationSettings  != null)
                               _ApplicationSettings = new ApplicationSettings(this.inventoryitems.ApplicationSettings);
                           }
                       }
                       else
                       {
                             if (this.inventoryitems.ApplicationSettings  != null)
                           _ApplicationSettings = new ApplicationSettings(this.inventoryitems.ApplicationSettings);
                       }
                   }


             //       if (_ApplicationSettings != null) return _ApplicationSettings;
                       
             //       var i = new ApplicationSettings(){TrackingState = TrackingState.Added};
			//		//if (this.inventoryitems.ApplicationSettings == null) Debugger.Break();
			//		if (this.inventoryitems.ApplicationSettings != null)
            //        {
            //           i. = this.inventoryitems.ApplicationSettings;
            //        }
            //        else
            //        {
            //            this.inventoryitems.ApplicationSettings = i.;
             //       }
                           
            //        _ApplicationSettings = i;
                     
                    return _ApplicationSettings;
               }
			set
			{
			    if (value == _ApplicationSettings) return;
                _ApplicationSettings = value;
                if(value != null)
                     this.inventoryitems.ApplicationSettings = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("ApplicationSettings");
			}
		}
        


        ChangeTrackingCollection<DTO.InventoryItems> _changeTracker;    
        public ChangeTrackingCollection<DTO.InventoryItems> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



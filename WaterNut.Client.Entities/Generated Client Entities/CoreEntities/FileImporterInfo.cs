// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class FileImporterInfo: BaseEntity<FileImporterInfo>
    {
        DTO.FileImporterInfo fileimporterinfo;
        public FileImporterInfo(DTO.FileImporterInfo dto )
        {
              fileimporterinfo = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.FileImporterInfo>(fileimporterinfo);

        }

        public DTO.FileImporterInfo DTO
        {
            get
            {
             return fileimporterinfo;
            }
            set
            {
                fileimporterinfo = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.fileimporterinfo.Id; }
			set
			{
			    if (value == this.fileimporterinfo.Id) return;
				this.fileimporterinfo.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryType is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntryType has a max length of 50 letters ")]
public string EntryType
		{ 
		    get { return this.fileimporterinfo.EntryType; }
			set
			{
			    if (value == this.fileimporterinfo.EntryType) return;
				this.fileimporterinfo.EntryType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryType");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Format is required")]
       
                
                [MaxLength(50, ErrorMessage = "Format has a max length of 50 letters ")]
public string Format
		{ 
		    get { return this.fileimporterinfo.Format; }
			set
			{
			    if (value == this.fileimporterinfo.Format) return;
				this.fileimporterinfo.Format = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Format");
			}
		}
     

        ObservableCollection<FileTypes> _FileTypes = null;
        public  ObservableCollection<FileTypes> FileTypes
		{
            
		    get 
				{ 
					if(_FileTypes != null) return _FileTypes;
					//if (this.fileimporterinfo.FileTypes == null) Debugger.Break();
					if(this.fileimporterinfo.FileTypes != null)
					{
						_FileTypes = new ObservableCollection<FileTypes>(this.fileimporterinfo.FileTypes.Select(x => new FileTypes(x)));
					}
					
						_FileTypes.CollectionChanged += FileTypes_CollectionChanged; 
					
					return _FileTypes; 
				}
			set
			{
			    if (Equals(value, _FileTypes)) return;
				if (value != null)
					this.fileimporterinfo.FileTypes = new ChangeTrackingCollection<DTO.FileTypes>(value.Select(x => x.DTO).ToList());
                _FileTypes = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FileTypes != null)
				_FileTypes.CollectionChanged += FileTypes_CollectionChanged;               
				NotifyPropertyChanged("FileTypes");
			}
		}
        
        void FileTypes_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypes itm in e.NewItems)
                    {
                        if (itm != null)
                        fileimporterinfo.FileTypes.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypes itm in e.OldItems)
                    {
                        if (itm != null)
                        fileimporterinfo.FileTypes.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.FileImporterInfo> _changeTracker;    
        public ChangeTrackingCollection<DTO.FileImporterInfo> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



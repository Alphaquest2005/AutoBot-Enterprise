// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class TODO_EntriesExpiringNextMonth: BaseEntity<TODO_EntriesExpiringNextMonth>
    {
        DTO.TODO_EntriesExpiringNextMonth todo_entriesexpiringnextmonth;
        public TODO_EntriesExpiringNextMonth(DTO.TODO_EntriesExpiringNextMonth dto )
        {
              todo_entriesexpiringnextmonth = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TODO_EntriesExpiringNextMonth>(todo_entriesexpiringnextmonth);

        }

        public DTO.TODO_EntriesExpiringNextMonth DTO
        {
            get
            {
             return todo_entriesexpiringnextmonth;
            }
            set
            {
                todo_entriesexpiringnextmonth = value;
            }
        }
       
       
public Nullable<System.DateTime> ExpiryDate
		{ 
		    get { return this.todo_entriesexpiringnextmonth.ExpiryDate; }
			set
			{
			    if (value == this.todo_entriesexpiringnextmonth.ExpiryDate) return;
				this.todo_entriesexpiringnextmonth.ExpiryDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ExpiryDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Type is required")]
       
                
                [MaxLength(13, ErrorMessage = "Type has a max length of 13 letters ")]
public string Type
		{ 
		    get { return this.todo_entriesexpiringnextmonth.Type; }
			set
			{
			    if (value == this.todo_entriesexpiringnextmonth.Type) return;
				this.todo_entriesexpiringnextmonth.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       
       
                
                [MaxLength(40, ErrorMessage = "DocumentType has a max length of 40 letters ")]
public string DocumentType
		{ 
		    get { return this.todo_entriesexpiringnextmonth.DocumentType; }
			set
			{
			    if (value == this.todo_entriesexpiringnextmonth.DocumentType) return;
				this.todo_entriesexpiringnextmonth.DocumentType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocumentType");
			}
		}
     

       
       
                
                [MaxLength(20, ErrorMessage = "CNumber has a max length of 20 letters ")]
public string CNumber
		{ 
		    get { return this.todo_entriesexpiringnextmonth.CNumber; }
			set
			{
			    if (value == this.todo_entriesexpiringnextmonth.CNumber) return;
				this.todo_entriesexpiringnextmonth.CNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CNumber");
			}
		}
     

       
       
public Nullable<System.DateTime> RegistrationDate
		{ 
		    get { return this.todo_entriesexpiringnextmonth.RegistrationDate; }
			set
			{
			    if (value == this.todo_entriesexpiringnextmonth.RegistrationDate) return;
				this.todo_entriesexpiringnextmonth.RegistrationDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegistrationDate");
			}
		}
     

       
       
                
                [MaxLength(30, ErrorMessage = "Reference has a max length of 30 letters ")]
public string Reference
		{ 
		    get { return this.todo_entriesexpiringnextmonth.Reference; }
			set
			{
			    if (value == this.todo_entriesexpiringnextmonth.Reference) return;
				this.todo_entriesexpiringnextmonth.Reference = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Reference");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.todo_entriesexpiringnextmonth.ApplicationSettingsId; }
			set
			{
			    if (value == this.todo_entriesexpiringnextmonth.ApplicationSettingsId) return;
				this.todo_entriesexpiringnextmonth.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     


        ChangeTrackingCollection<DTO.TODO_EntriesExpiringNextMonth> _changeTracker;    
        public ChangeTrackingCollection<DTO.TODO_EntriesExpiringNextMonth> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class AttachmentLog: BaseEntity<AttachmentLog>
    {
        DTO.AttachmentLog attachmentlog;
        public AttachmentLog(DTO.AttachmentLog dto )
        {
              attachmentlog = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.AttachmentLog>(attachmentlog);

        }

        public DTO.AttachmentLog DTO
        {
            get
            {
             return attachmentlog;
            }
            set
            {
                attachmentlog = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.attachmentlog.Id; }
			set
			{
			    if (value == this.attachmentlog.Id) return;
				this.attachmentlog.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DocSetAttachment is required")]
       [NumberValidationAttribute]
public int DocSetAttachment
		{ 
		    get { return this.attachmentlog.DocSetAttachment; }
			set
			{
			    if (value == this.attachmentlog.DocSetAttachment) return;
				this.attachmentlog.DocSetAttachment = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocSetAttachment");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Status is required")]
       
                
                [MaxLength(50, ErrorMessage = "Status has a max length of 50 letters ")]
public string Status
		{ 
		    get { return this.attachmentlog.Status; }
			set
			{
			    if (value == this.attachmentlog.Status) return;
				this.attachmentlog.Status = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Status");
			}
		}
     

       private AsycudaDocumentSet_Attachments _AsycudaDocumentSet_Attachments;
        public  AsycudaDocumentSet_Attachments AsycudaDocumentSet_Attachments
		{
		    get
               { 
                  if (this.attachmentlog != null)
                   {
                       if (_AsycudaDocumentSet_Attachments != null)
                       {
                           if (this.attachmentlog.AsycudaDocumentSet_Attachments !=
                               _AsycudaDocumentSet_Attachments.DTO)
                           {
                                if (this.attachmentlog.AsycudaDocumentSet_Attachments  != null)
                               _AsycudaDocumentSet_Attachments = new AsycudaDocumentSet_Attachments(this.attachmentlog.AsycudaDocumentSet_Attachments);
                           }
                       }
                       else
                       {
                             if (this.attachmentlog.AsycudaDocumentSet_Attachments  != null)
                           _AsycudaDocumentSet_Attachments = new AsycudaDocumentSet_Attachments(this.attachmentlog.AsycudaDocumentSet_Attachments);
                       }
                   }


             //       if (_AsycudaDocumentSet_Attachments != null) return _AsycudaDocumentSet_Attachments;
                       
             //       var i = new AsycudaDocumentSet_Attachments(){TrackingState = TrackingState.Added};
			//		//if (this.attachmentlog.AsycudaDocumentSet_Attachments == null) Debugger.Break();
			//		if (this.attachmentlog.AsycudaDocumentSet_Attachments != null)
            //        {
            //           i. = this.attachmentlog.AsycudaDocumentSet_Attachments;
            //        }
            //        else
            //        {
            //            this.attachmentlog.AsycudaDocumentSet_Attachments = i.;
             //       }
                           
            //        _AsycudaDocumentSet_Attachments = i;
                     
                    return _AsycudaDocumentSet_Attachments;
               }
			set
			{
			    if (value == _AsycudaDocumentSet_Attachments) return;
                _AsycudaDocumentSet_Attachments = value;
                if(value != null)
                     this.attachmentlog.AsycudaDocumentSet_Attachments = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("AsycudaDocumentSet_Attachments");
			}
		}
        


        ChangeTrackingCollection<DTO.AttachmentLog> _changeTracker;    
        public ChangeTrackingCollection<DTO.AttachmentLog> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



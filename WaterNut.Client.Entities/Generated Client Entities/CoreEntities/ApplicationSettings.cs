// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class ApplicationSettings: BaseEntity<ApplicationSettings>
    {
        DTO.ApplicationSettings applicationsettings;
        public ApplicationSettings(DTO.ApplicationSettings dto )
        {
              applicationsettings = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.ApplicationSettings>(applicationsettings);

        }

        public DTO.ApplicationSettings DTO
        {
            get
            {
             return applicationsettings;
            }
            set
            {
                applicationsettings = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.applicationsettings.ApplicationSettingsId; }
			set
			{
			    if (value == this.applicationsettings.ApplicationSettingsId) return;
				this.applicationsettings.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       
       
                
                
public string Description
		{ 
		    get { return this.applicationsettings.Description; }
			set
			{
			    if (value == this.applicationsettings.Description) return;
				this.applicationsettings.Description = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> MaxEntryLines
		{ 
		    get { return this.applicationsettings.MaxEntryLines; }
			set
			{
			    if (value == this.applicationsettings.MaxEntryLines) return;
				this.applicationsettings.MaxEntryLines = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("MaxEntryLines");
			}
		}
     

       
       
                
                
public string SoftwareName
		{ 
		    get { return this.applicationsettings.SoftwareName; }
			set
			{
			    if (value == this.applicationsettings.SoftwareName) return;
				this.applicationsettings.SoftwareName = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SoftwareName");
			}
		}
     

       
       
                
                
public string AllowCounterPoint
		{ 
		    get { return this.applicationsettings.AllowCounterPoint; }
			set
			{
			    if (value == this.applicationsettings.AllowCounterPoint) return;
				this.applicationsettings.AllowCounterPoint = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowCounterPoint");
			}
		}
     

       
       
public Nullable<bool> GroupEX9
		{ 
		    get { return this.applicationsettings.GroupEX9; }
			set
			{
			    if (value == this.applicationsettings.GroupEX9) return;
				this.applicationsettings.GroupEX9 = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("GroupEX9");
			}
		}
     

       
       
public Nullable<bool> InvoicePerEntry
		{ 
		    get { return this.applicationsettings.InvoicePerEntry; }
			set
			{
			    if (value == this.applicationsettings.InvoicePerEntry) return;
				this.applicationsettings.InvoicePerEntry = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoicePerEntry");
			}
		}
     

       
       
                
                
public string AllowTariffCodes
		{ 
		    get { return this.applicationsettings.AllowTariffCodes; }
			set
			{
			    if (value == this.applicationsettings.AllowTariffCodes) return;
				this.applicationsettings.AllowTariffCodes = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowTariffCodes");
			}
		}
     

       
       
                
                
public string AllowWareHouse
		{ 
		    get { return this.applicationsettings.AllowWareHouse; }
			set
			{
			    if (value == this.applicationsettings.AllowWareHouse) return;
				this.applicationsettings.AllowWareHouse = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowWareHouse");
			}
		}
     

       
       
                
                
public string AllowXBond
		{ 
		    get { return this.applicationsettings.AllowXBond; }
			set
			{
			    if (value == this.applicationsettings.AllowXBond) return;
				this.applicationsettings.AllowXBond = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowXBond");
			}
		}
     

       
       
                
                
public string AllowAsycudaManager
		{ 
		    get { return this.applicationsettings.AllowAsycudaManager; }
			set
			{
			    if (value == this.applicationsettings.AllowAsycudaManager) return;
				this.applicationsettings.AllowAsycudaManager = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowAsycudaManager");
			}
		}
     

       
       
                
                
public string AllowQuickBooks
		{ 
		    get { return this.applicationsettings.AllowQuickBooks; }
			set
			{
			    if (value == this.applicationsettings.AllowQuickBooks) return;
				this.applicationsettings.AllowQuickBooks = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowQuickBooks");
			}
		}
     

       
       
public Nullable<bool> ItemDescriptionContainsAsycudaAttribute
		{ 
		    get { return this.applicationsettings.ItemDescriptionContainsAsycudaAttribute; }
			set
			{
			    if (value == this.applicationsettings.ItemDescriptionContainsAsycudaAttribute) return;
				this.applicationsettings.ItemDescriptionContainsAsycudaAttribute = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemDescriptionContainsAsycudaAttribute");
			}
		}
     

       
       
                
                
public string AllowExportToExcel
		{ 
		    get { return this.applicationsettings.AllowExportToExcel; }
			set
			{
			    if (value == this.applicationsettings.AllowExportToExcel) return;
				this.applicationsettings.AllowExportToExcel = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowExportToExcel");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowAutoWeightCalculation has a max length of 50 letters ")]
public string AllowAutoWeightCalculation
		{ 
		    get { return this.applicationsettings.AllowAutoWeightCalculation; }
			set
			{
			    if (value == this.applicationsettings.AllowAutoWeightCalculation) return;
				this.applicationsettings.AllowAutoWeightCalculation = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowAutoWeightCalculation");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowEntryPerIM7 has a max length of 50 letters ")]
public string AllowEntryPerIM7
		{ 
		    get { return this.applicationsettings.AllowEntryPerIM7; }
			set
			{
			    if (value == this.applicationsettings.AllowEntryPerIM7) return;
				this.applicationsettings.AllowEntryPerIM7 = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowEntryPerIM7");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowSalesToPI has a max length of 50 letters ")]
public string AllowSalesToPI
		{ 
		    get { return this.applicationsettings.AllowSalesToPI; }
			set
			{
			    if (value == this.applicationsettings.AllowSalesToPI) return;
				this.applicationsettings.AllowSalesToPI = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowSalesToPI");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowEffectiveAssessmentDate has a max length of 50 letters ")]
public string AllowEffectiveAssessmentDate
		{ 
		    get { return this.applicationsettings.AllowEffectiveAssessmentDate; }
			set
			{
			    if (value == this.applicationsettings.AllowEffectiveAssessmentDate) return;
				this.applicationsettings.AllowEffectiveAssessmentDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowEffectiveAssessmentDate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowAutoFreightCalculation has a max length of 50 letters ")]
public string AllowAutoFreightCalculation
		{ 
		    get { return this.applicationsettings.AllowAutoFreightCalculation; }
			set
			{
			    if (value == this.applicationsettings.AllowAutoFreightCalculation) return;
				this.applicationsettings.AllowAutoFreightCalculation = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowAutoFreightCalculation");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowSubItems has a max length of 50 letters ")]
public string AllowSubItems
		{ 
		    get { return this.applicationsettings.AllowSubItems; }
			set
			{
			    if (value == this.applicationsettings.AllowSubItems) return;
				this.applicationsettings.AllowSubItems = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowSubItems");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowEntryDoNotAllocate has a max length of 50 letters ")]
public string AllowEntryDoNotAllocate
		{ 
		    get { return this.applicationsettings.AllowEntryDoNotAllocate; }
			set
			{
			    if (value == this.applicationsettings.AllowEntryDoNotAllocate) return;
				this.applicationsettings.AllowEntryDoNotAllocate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowEntryDoNotAllocate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowPreviousItems has a max length of 50 letters ")]
public string AllowPreviousItems
		{ 
		    get { return this.applicationsettings.AllowPreviousItems; }
			set
			{
			    if (value == this.applicationsettings.AllowPreviousItems) return;
				this.applicationsettings.AllowPreviousItems = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowPreviousItems");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowOversShort has a max length of 50 letters ")]
public string AllowOversShort
		{ 
		    get { return this.applicationsettings.AllowOversShort; }
			set
			{
			    if (value == this.applicationsettings.AllowOversShort) return;
				this.applicationsettings.AllowOversShort = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowOversShort");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowContainers has a max length of 50 letters ")]
public string AllowContainers
		{ 
		    get { return this.applicationsettings.AllowContainers; }
			set
			{
			    if (value == this.applicationsettings.AllowContainers) return;
				this.applicationsettings.AllowContainers = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowContainers");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowNonXEntries has a max length of 50 letters ")]
public string AllowNonXEntries
		{ 
		    get { return this.applicationsettings.AllowNonXEntries; }
			set
			{
			    if (value == this.applicationsettings.AllowNonXEntries) return;
				this.applicationsettings.AllowNonXEntries = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowNonXEntries");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowValidateTariffCodes has a max length of 50 letters ")]
public string AllowValidateTariffCodes
		{ 
		    get { return this.applicationsettings.AllowValidateTariffCodes; }
			set
			{
			    if (value == this.applicationsettings.AllowValidateTariffCodes) return;
				this.applicationsettings.AllowValidateTariffCodes = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowValidateTariffCodes");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowCleanBond has a max length of 50 letters ")]
public string AllowCleanBond
		{ 
		    get { return this.applicationsettings.AllowCleanBond; }
			set
			{
			    if (value == this.applicationsettings.AllowCleanBond) return;
				this.applicationsettings.AllowCleanBond = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowCleanBond");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "OrderEntriesBy has a max length of 50 letters ")]
public string OrderEntriesBy
		{ 
		    get { return this.applicationsettings.OrderEntriesBy; }
			set
			{
			    if (value == this.applicationsettings.OrderEntriesBy) return;
				this.applicationsettings.OrderEntriesBy = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("OrderEntriesBy");
			}
		}
     

       
       
public Nullable<System.DateTime> OpeningStockDate
		{ 
		    get { return this.applicationsettings.OpeningStockDate; }
			set
			{
			    if (value == this.applicationsettings.OpeningStockDate) return;
				this.applicationsettings.OpeningStockDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("OpeningStockDate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "DeclarantCode has a max length of 50 letters ")]
public string DeclarantCode
		{ 
		    get { return this.applicationsettings.DeclarantCode; }
			set
			{
			    if (value == this.applicationsettings.DeclarantCode) return;
				this.applicationsettings.DeclarantCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DeclarantCode");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "WeightCalculationMethod has a max length of 50 letters ")]
public string WeightCalculationMethod
		{ 
		    get { return this.applicationsettings.WeightCalculationMethod; }
			set
			{
			    if (value == this.applicationsettings.WeightCalculationMethod) return;
				this.applicationsettings.WeightCalculationMethod = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("WeightCalculationMethod");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> BondQuantum
		{ 
		    get { return this.applicationsettings.BondQuantum; }
			set
			{
			    if (value == this.applicationsettings.BondQuantum) return;
				this.applicationsettings.BondQuantum = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("BondQuantum");
			}
		}
     

       
       
                
                [MaxLength(999, ErrorMessage = "DataFolder has a max length of 999 letters ")]
public string DataFolder
		{ 
		    get { return this.applicationsettings.DataFolder; }
			set
			{
			    if (value == this.applicationsettings.DataFolder) return;
				this.applicationsettings.DataFolder = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DataFolder");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "CompanyName has a max length of 50 letters ")]
public string CompanyName
		{ 
		    get { return this.applicationsettings.CompanyName; }
			set
			{
			    if (value == this.applicationsettings.CompanyName) return;
				this.applicationsettings.CompanyName = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CompanyName");
			}
		}
     

       
       
public Nullable<bool> IsActive
		{ 
		    get { return this.applicationsettings.IsActive; }
			set
			{
			    if (value == this.applicationsettings.IsActive) return;
				this.applicationsettings.IsActive = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsActive");
			}
		}
     

        ObservableCollection<AsycudaDocumentSetEx> _AsycudaDocumentSetEx = null;
        public  ObservableCollection<AsycudaDocumentSetEx> AsycudaDocumentSetEx
		{
            
		    get 
				{ 
					if(_AsycudaDocumentSetEx != null) return _AsycudaDocumentSetEx;
					//if (this.applicationsettings.AsycudaDocumentSetEx == null) Debugger.Break();
					if(this.applicationsettings.AsycudaDocumentSetEx != null)
					{
						_AsycudaDocumentSetEx = new ObservableCollection<AsycudaDocumentSetEx>(this.applicationsettings.AsycudaDocumentSetEx.Select(x => new AsycudaDocumentSetEx(x)));
					}
					
						_AsycudaDocumentSetEx.CollectionChanged += AsycudaDocumentSetEx_CollectionChanged; 
					
					return _AsycudaDocumentSetEx; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentSetEx)) return;
				if (value != null)
					this.applicationsettings.AsycudaDocumentSetEx = new ChangeTrackingCollection<DTO.AsycudaDocumentSetEx>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentSetEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentSetEx != null)
				_AsycudaDocumentSetEx.CollectionChanged += AsycudaDocumentSetEx_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentSetEx");
			}
		}
        
        void AsycudaDocumentSetEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentSetEx itm in e.NewItems)
                    {
                        if (itm != null)
                        applicationsettings.AsycudaDocumentSetEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentSetEx itm in e.OldItems)
                    {
                        if (itm != null)
                        applicationsettings.AsycudaDocumentSetEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AsycudaDocument> _AsycudaDocument = null;
        public  ObservableCollection<AsycudaDocument> AsycudaDocument
		{
            
		    get 
				{ 
					if(_AsycudaDocument != null) return _AsycudaDocument;
					//if (this.applicationsettings.AsycudaDocument == null) Debugger.Break();
					if(this.applicationsettings.AsycudaDocument != null)
					{
						_AsycudaDocument = new ObservableCollection<AsycudaDocument>(this.applicationsettings.AsycudaDocument.Select(x => new AsycudaDocument(x)));
					}
					
						_AsycudaDocument.CollectionChanged += AsycudaDocument_CollectionChanged; 
					
					return _AsycudaDocument; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocument)) return;
				if (value != null)
					this.applicationsettings.AsycudaDocument = new ChangeTrackingCollection<DTO.AsycudaDocument>(value.Select(x => x.DTO).ToList());
                _AsycudaDocument = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocument != null)
				_AsycudaDocument.CollectionChanged += AsycudaDocument_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocument");
			}
		}
        
        void AsycudaDocument_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocument itm in e.NewItems)
                    {
                        if (itm != null)
                        applicationsettings.AsycudaDocument.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocument itm in e.OldItems)
                    {
                        if (itm != null)
                        applicationsettings.AsycudaDocument.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AsycudaDocumentItem> _AsycudaDocumentItem = null;
        public  ObservableCollection<AsycudaDocumentItem> AsycudaDocumentItem
		{
            
		    get 
				{ 
					if(_AsycudaDocumentItem != null) return _AsycudaDocumentItem;
					//if (this.applicationsettings.AsycudaDocumentItem == null) Debugger.Break();
					if(this.applicationsettings.AsycudaDocumentItem != null)
					{
						_AsycudaDocumentItem = new ObservableCollection<AsycudaDocumentItem>(this.applicationsettings.AsycudaDocumentItem.Select(x => new AsycudaDocumentItem(x)));
					}
					
						_AsycudaDocumentItem.CollectionChanged += AsycudaDocumentItem_CollectionChanged; 
					
					return _AsycudaDocumentItem; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentItem)) return;
				if (value != null)
					this.applicationsettings.AsycudaDocumentItem = new ChangeTrackingCollection<DTO.AsycudaDocumentItem>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentItem = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentItem != null)
				_AsycudaDocumentItem.CollectionChanged += AsycudaDocumentItem_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentItem");
			}
		}
        
        void AsycudaDocumentItem_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentItem itm in e.NewItems)
                    {
                        if (itm != null)
                        applicationsettings.AsycudaDocumentItem.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentItem itm in e.OldItems)
                    {
                        if (itm != null)
                        applicationsettings.AsycudaDocumentItem.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<InventoryItemX> _InventoryItemsEx = null;
        public  ObservableCollection<InventoryItemX> InventoryItemsEx
		{
            
		    get 
				{ 
					if(_InventoryItemsEx != null) return _InventoryItemsEx;
					//if (this.applicationsettings.InventoryItemsEx == null) Debugger.Break();
					if(this.applicationsettings.InventoryItemsEx != null)
					{
						_InventoryItemsEx = new ObservableCollection<InventoryItemX>(this.applicationsettings.InventoryItemsEx.Select(x => new InventoryItemX(x)));
					}
					
						_InventoryItemsEx.CollectionChanged += InventoryItemsEx_CollectionChanged; 
					
					return _InventoryItemsEx; 
				}
			set
			{
			    if (Equals(value, _InventoryItemsEx)) return;
				if (value != null)
					this.applicationsettings.InventoryItemsEx = new ChangeTrackingCollection<DTO.InventoryItemX>(value.Select(x => x.DTO).ToList());
                _InventoryItemsEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_InventoryItemsEx != null)
				_InventoryItemsEx.CollectionChanged += InventoryItemsEx_CollectionChanged;               
				NotifyPropertyChanged("InventoryItemsEx");
			}
		}
        
        void InventoryItemsEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (InventoryItemX itm in e.NewItems)
                    {
                        if (itm != null)
                        applicationsettings.InventoryItemsEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (InventoryItemX itm in e.OldItems)
                    {
                        if (itm != null)
                        applicationsettings.InventoryItemsEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.ApplicationSettings> _changeTracker;    
        public ChangeTrackingCollection<DTO.ApplicationSettings> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



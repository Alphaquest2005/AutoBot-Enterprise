// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class Customs_Procedure: BaseEntity<Customs_Procedure>
    {
        DTO.Customs_Procedure customs_procedure;
        public Customs_Procedure(DTO.Customs_Procedure dto )
        {
              customs_procedure = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Customs_Procedure>(customs_procedure);

        }

        public DTO.Customs_Procedure DTO
        {
            get
            {
             return customs_procedure;
            }
            set
            {
                customs_procedure = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "Document_Type is required")]
       
public int Document_TypeId
		{ 
		    get { return this.customs_procedure.Document_TypeId; }
			set
			{
			    if (value == this.customs_procedure.Document_TypeId) return;
				this.customs_procedure.Document_TypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Document_TypeId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Customs_Procedure is required")]
       
public int Customs_ProcedureId
		{ 
		    get { return this.customs_procedure.Customs_ProcedureId; }
			set
			{
			    if (value == this.customs_procedure.Customs_ProcedureId) return;
				this.customs_procedure.Customs_ProcedureId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Customs_ProcedureId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Extended_customs_procedure is required")]
       
                
                [MaxLength(5, ErrorMessage = "Extended_customs_procedure has a max length of 5 letters ")]
public string Extended_customs_procedure
		{ 
		    get { return this.customs_procedure.Extended_customs_procedure; }
			set
			{
			    if (value == this.customs_procedure.Extended_customs_procedure) return;
				this.customs_procedure.Extended_customs_procedure = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Extended_customs_procedure");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "National_customs_procedure is required")]
       
                
                [MaxLength(5, ErrorMessage = "National_customs_procedure has a max length of 5 letters ")]
public string National_customs_procedure
		{ 
		    get { return this.customs_procedure.National_customs_procedure; }
			set
			{
			    if (value == this.customs_procedure.National_customs_procedure) return;
				this.customs_procedure.National_customs_procedure = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("National_customs_procedure");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CustomsProcedure is required")]
       
                
                [MaxLength(11, ErrorMessage = "CustomsProcedure has a max length of 11 letters ")]
public string CustomsProcedure
		{ 
		    get { return this.customs_procedure.CustomsProcedure; }
			set
			{
			    if (value == this.customs_procedure.CustomsProcedure) return;
				this.customs_procedure.CustomsProcedure = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CustomsProcedure");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "IsObsolete is required")]
       
public bool IsObsolete
		{ 
		    get { return this.customs_procedure.IsObsolete; }
			set
			{
			    if (value == this.customs_procedure.IsObsolete) return;
				this.customs_procedure.IsObsolete = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsObsolete");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "IsPaid is required")]
       
public bool IsPaid
		{ 
		    get { return this.customs_procedure.IsPaid; }
			set
			{
			    if (value == this.customs_procedure.IsPaid) return;
				this.customs_procedure.IsPaid = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsPaid");
			}
		}
     

       
       
public Nullable<int> BondTypeId
		{ 
		    get { return this.customs_procedure.BondTypeId; }
			set
			{
			    if (value == this.customs_procedure.BondTypeId) return;
				this.customs_procedure.BondTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("BondTypeId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Stock is required")]
       
public bool Stock
		{ 
		    get { return this.customs_procedure.Stock; }
			set
			{
			    if (value == this.customs_procedure.Stock) return;
				this.customs_procedure.Stock = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Stock");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Discrepancy is required")]
       
public bool Discrepancy
		{ 
		    get { return this.customs_procedure.Discrepancy; }
			set
			{
			    if (value == this.customs_procedure.Discrepancy) return;
				this.customs_procedure.Discrepancy = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Discrepancy");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Adjustment is required")]
       
public bool Adjustment
		{ 
		    get { return this.customs_procedure.Adjustment; }
			set
			{
			    if (value == this.customs_procedure.Adjustment) return;
				this.customs_procedure.Adjustment = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Adjustment");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Sales is required")]
       
public bool Sales
		{ 
		    get { return this.customs_procedure.Sales; }
			set
			{
			    if (value == this.customs_procedure.Sales) return;
				this.customs_procedure.Sales = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Sales");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CustomsOperation is required")]
       
public int CustomsOperationId
		{ 
		    get { return this.customs_procedure.CustomsOperationId; }
			set
			{
			    if (value == this.customs_procedure.CustomsOperationId) return;
				this.customs_procedure.CustomsOperationId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CustomsOperationId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "SubmitToCustoms is required")]
       
public bool SubmitToCustoms
		{ 
		    get { return this.customs_procedure.SubmitToCustoms; }
			set
			{
			    if (value == this.customs_procedure.SubmitToCustoms) return;
				this.customs_procedure.SubmitToCustoms = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SubmitToCustoms");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "IsDefault is required")]
       
public bool IsDefault
		{ 
		    get { return this.customs_procedure.IsDefault; }
			set
			{
			    if (value == this.customs_procedure.IsDefault) return;
				this.customs_procedure.IsDefault = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsDefault");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ExportSupportingEntryData is required")]
       
public bool ExportSupportingEntryData
		{ 
		    get { return this.customs_procedure.ExportSupportingEntryData; }
			set
			{
			    if (value == this.customs_procedure.ExportSupportingEntryData) return;
				this.customs_procedure.ExportSupportingEntryData = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ExportSupportingEntryData");
			}
		}
     

       private Document_Type _Document_Type;
        public  Document_Type Document_Type
		{
		    get
               { 
                  if (this.customs_procedure != null)
                   {
                       if (_Document_Type != null)
                       {
                           if (this.customs_procedure.Document_Type !=
                               _Document_Type.DTO)
                           {
                                if (this.customs_procedure.Document_Type  != null)
                               _Document_Type = new Document_Type(this.customs_procedure.Document_Type);
                           }
                       }
                       else
                       {
                             if (this.customs_procedure.Document_Type  != null)
                           _Document_Type = new Document_Type(this.customs_procedure.Document_Type);
                       }
                   }


             //       if (_Document_Type != null) return _Document_Type;
                       
             //       var i = new Document_Type(){TrackingState = TrackingState.Added};
			//		//if (this.customs_procedure.Document_Type == null) Debugger.Break();
			//		if (this.customs_procedure.Document_Type != null)
            //        {
            //           i. = this.customs_procedure.Document_Type;
            //        }
            //        else
            //        {
            //            this.customs_procedure.Document_Type = i.;
             //       }
                           
            //        _Document_Type = i;
                     
                    return _Document_Type;
               }
			set
			{
			    if (value == _Document_Type) return;
                _Document_Type = value;
                if(value != null)
                     this.customs_procedure.Document_Type = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("Document_Type");
			}
		}
        

       private CustomsOperations _CustomsOperations;
        public  CustomsOperations CustomsOperations
		{
		    get
               { 
                  if (this.customs_procedure != null)
                   {
                       if (_CustomsOperations != null)
                       {
                           if (this.customs_procedure.CustomsOperations !=
                               _CustomsOperations.DTO)
                           {
                                if (this.customs_procedure.CustomsOperations  != null)
                               _CustomsOperations = new CustomsOperations(this.customs_procedure.CustomsOperations);
                           }
                       }
                       else
                       {
                             if (this.customs_procedure.CustomsOperations  != null)
                           _CustomsOperations = new CustomsOperations(this.customs_procedure.CustomsOperations);
                       }
                   }


             //       if (_CustomsOperations != null) return _CustomsOperations;
                       
             //       var i = new CustomsOperations(){TrackingState = TrackingState.Added};
			//		//if (this.customs_procedure.CustomsOperations == null) Debugger.Break();
			//		if (this.customs_procedure.CustomsOperations != null)
            //        {
            //           i. = this.customs_procedure.CustomsOperations;
            //        }
            //        else
            //        {
            //            this.customs_procedure.CustomsOperations = i.;
             //       }
                           
            //        _CustomsOperations = i;
                     
                    return _CustomsOperations;
               }
			set
			{
			    if (value == _CustomsOperations) return;
                _CustomsOperations = value;
                if(value != null)
                     this.customs_procedure.CustomsOperations = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("CustomsOperations");
			}
		}
        

        ObservableCollection<AsycudaDocument> _AsycudaDocument = null;
        public  ObservableCollection<AsycudaDocument> AsycudaDocument
		{
            
		    get 
				{ 
					if(_AsycudaDocument != null) return _AsycudaDocument;
					//if (this.customs_procedure.AsycudaDocument == null) Debugger.Break();
					if(this.customs_procedure.AsycudaDocument != null)
					{
						_AsycudaDocument = new ObservableCollection<AsycudaDocument>(this.customs_procedure.AsycudaDocument.Select(x => new AsycudaDocument(x)));
					}
					
						_AsycudaDocument.CollectionChanged += AsycudaDocument_CollectionChanged; 
					
					return _AsycudaDocument; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocument)) return;
				if (value != null)
					this.customs_procedure.AsycudaDocument = new ChangeTrackingCollection<DTO.AsycudaDocument>(value.Select(x => x.DTO).ToList());
                _AsycudaDocument = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocument != null)
				_AsycudaDocument.CollectionChanged += AsycudaDocument_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocument");
			}
		}
        
        void AsycudaDocument_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocument itm in e.NewItems)
                    {
                        if (itm != null)
                        customs_procedure.AsycudaDocument.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocument itm in e.OldItems)
                    {
                        if (itm != null)
                        customs_procedure.AsycudaDocument.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AsycudaDocumentSet> _AsycudaDocumentSet = null;
        public  ObservableCollection<AsycudaDocumentSet> AsycudaDocumentSet
		{
            
		    get 
				{ 
					if(_AsycudaDocumentSet != null) return _AsycudaDocumentSet;
					//if (this.customs_procedure.AsycudaDocumentSet == null) Debugger.Break();
					if(this.customs_procedure.AsycudaDocumentSet != null)
					{
						_AsycudaDocumentSet = new ObservableCollection<AsycudaDocumentSet>(this.customs_procedure.AsycudaDocumentSet.Select(x => new AsycudaDocumentSet(x)));
					}
					
						_AsycudaDocumentSet.CollectionChanged += AsycudaDocumentSet_CollectionChanged; 
					
					return _AsycudaDocumentSet; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentSet)) return;
				if (value != null)
					this.customs_procedure.AsycudaDocumentSet = new ChangeTrackingCollection<DTO.AsycudaDocumentSet>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentSet = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentSet != null)
				_AsycudaDocumentSet.CollectionChanged += AsycudaDocumentSet_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentSet");
			}
		}
        
        void AsycudaDocumentSet_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentSet itm in e.NewItems)
                    {
                        if (itm != null)
                        customs_procedure.AsycudaDocumentSet.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentSet itm in e.OldItems)
                    {
                        if (itm != null)
                        customs_procedure.AsycudaDocumentSet.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<Customs_ProcedureInOut> _Customs_ProcedureInOut = null;
        public  ObservableCollection<Customs_ProcedureInOut> Customs_ProcedureInOut
		{
            
		    get 
				{ 
					if(_Customs_ProcedureInOut != null) return _Customs_ProcedureInOut;
					//if (this.customs_procedure.Customs_ProcedureInOut == null) Debugger.Break();
					if(this.customs_procedure.Customs_ProcedureInOut != null)
					{
						_Customs_ProcedureInOut = new ObservableCollection<Customs_ProcedureInOut>(this.customs_procedure.Customs_ProcedureInOut.Select(x => new Customs_ProcedureInOut(x)));
					}
					
						_Customs_ProcedureInOut.CollectionChanged += Customs_ProcedureInOut_CollectionChanged; 
					
					return _Customs_ProcedureInOut; 
				}
			set
			{
			    if (Equals(value, _Customs_ProcedureInOut)) return;
				if (value != null)
					this.customs_procedure.Customs_ProcedureInOut = new ChangeTrackingCollection<DTO.Customs_ProcedureInOut>(value.Select(x => x.DTO).ToList());
                _Customs_ProcedureInOut = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Customs_ProcedureInOut != null)
				_Customs_ProcedureInOut.CollectionChanged += Customs_ProcedureInOut_CollectionChanged;               
				NotifyPropertyChanged("Customs_ProcedureInOut");
			}
		}
        
        void Customs_ProcedureInOut_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Customs_ProcedureInOut itm in e.NewItems)
                    {
                        if (itm != null)
                        customs_procedure.Customs_ProcedureInOut.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Customs_ProcedureInOut itm in e.OldItems)
                    {
                        if (itm != null)
                        customs_procedure.Customs_ProcedureInOut.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<Customs_ProcedureInOut> _OutCustomsProcedure = null;
        public  ObservableCollection<Customs_ProcedureInOut> OutCustomsProcedure
		{
            
		    get 
				{ 
					if(_OutCustomsProcedure != null) return _OutCustomsProcedure;
					//if (this.customs_procedure.OutCustomsProcedure == null) Debugger.Break();
					if(this.customs_procedure.OutCustomsProcedure != null)
					{
						_OutCustomsProcedure = new ObservableCollection<Customs_ProcedureInOut>(this.customs_procedure.OutCustomsProcedure.Select(x => new Customs_ProcedureInOut(x)));
					}
					
						_OutCustomsProcedure.CollectionChanged += OutCustomsProcedure_CollectionChanged; 
					
					return _OutCustomsProcedure; 
				}
			set
			{
			    if (Equals(value, _OutCustomsProcedure)) return;
				if (value != null)
					this.customs_procedure.OutCustomsProcedure = new ChangeTrackingCollection<DTO.Customs_ProcedureInOut>(value.Select(x => x.DTO).ToList());
                _OutCustomsProcedure = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_OutCustomsProcedure != null)
				_OutCustomsProcedure.CollectionChanged += OutCustomsProcedure_CollectionChanged;               
				NotifyPropertyChanged("OutCustomsProcedure");
			}
		}
        
        void OutCustomsProcedure_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Customs_ProcedureInOut itm in e.NewItems)
                    {
                        if (itm != null)
                        customs_procedure.OutCustomsProcedure.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Customs_ProcedureInOut itm in e.OldItems)
                    {
                        if (itm != null)
                        customs_procedure.OutCustomsProcedure.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.Customs_Procedure> _changeTracker;    
        public ChangeTrackingCollection<DTO.Customs_Procedure> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class FileTypeMappings: BaseEntity<FileTypeMappings>
    {
        DTO.FileTypeMappings filetypemappings;
        public FileTypeMappings(DTO.FileTypeMappings dto )
        {
              filetypemappings = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.FileTypeMappings>(filetypemappings);

        }

        public DTO.FileTypeMappings DTO
        {
            get
            {
             return filetypemappings;
            }
            set
            {
                filetypemappings = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.filetypemappings.Id; }
			set
			{
			    if (value == this.filetypemappings.Id) return;
				this.filetypemappings.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "FileType is required")]
       
public int FileTypeId
		{ 
		    get { return this.filetypemappings.FileTypeId; }
			set
			{
			    if (value == this.filetypemappings.FileTypeId) return;
				this.filetypemappings.FileTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FileTypeId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "OriginalName is required")]
       
                
                [MaxLength(50, ErrorMessage = "OriginalName has a max length of 50 letters ")]
public string OriginalName
		{ 
		    get { return this.filetypemappings.OriginalName; }
			set
			{
			    if (value == this.filetypemappings.OriginalName) return;
				this.filetypemappings.OriginalName = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("OriginalName");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DestinationName is required")]
       
                
                [MaxLength(50, ErrorMessage = "DestinationName has a max length of 50 letters ")]
public string DestinationName
		{ 
		    get { return this.filetypemappings.DestinationName; }
			set
			{
			    if (value == this.filetypemappings.DestinationName) return;
				this.filetypemappings.DestinationName = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DestinationName");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DataType is required")]
       
                
                [MaxLength(50, ErrorMessage = "DataType has a max length of 50 letters ")]
public string DataType
		{ 
		    get { return this.filetypemappings.DataType; }
			set
			{
			    if (value == this.filetypemappings.DataType) return;
				this.filetypemappings.DataType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DataType");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Required is required")]
       
public bool Required
		{ 
		    get { return this.filetypemappings.Required; }
			set
			{
			    if (value == this.filetypemappings.Required) return;
				this.filetypemappings.Required = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Required");
			}
		}
     

       private FileTypes _FileTypes;
        public  FileTypes FileTypes
		{
		    get
               { 
                  if (this.filetypemappings != null)
                   {
                       if (_FileTypes != null)
                       {
                           if (this.filetypemappings.FileTypes !=
                               _FileTypes.DTO)
                           {
                                if (this.filetypemappings.FileTypes  != null)
                               _FileTypes = new FileTypes(this.filetypemappings.FileTypes);
                           }
                       }
                       else
                       {
                             if (this.filetypemappings.FileTypes  != null)
                           _FileTypes = new FileTypes(this.filetypemappings.FileTypes);
                       }
                   }


             //       if (_FileTypes != null) return _FileTypes;
                       
             //       var i = new FileTypes(){TrackingState = TrackingState.Added};
			//		//if (this.filetypemappings.FileTypes == null) Debugger.Break();
			//		if (this.filetypemappings.FileTypes != null)
            //        {
            //           i. = this.filetypemappings.FileTypes;
            //        }
            //        else
            //        {
            //            this.filetypemappings.FileTypes = i.;
             //       }
                           
            //        _FileTypes = i;
                     
                    return _FileTypes;
               }
			set
			{
			    if (value == _FileTypes) return;
                _FileTypes = value;
                if(value != null)
                     this.filetypemappings.FileTypes = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("FileTypes");
			}
		}
        


        ChangeTrackingCollection<DTO.FileTypeMappings> _changeTracker;    
        public ChangeTrackingCollection<DTO.FileTypeMappings> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



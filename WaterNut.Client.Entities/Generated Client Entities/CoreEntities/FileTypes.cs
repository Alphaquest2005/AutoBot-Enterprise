// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class FileTypes: BaseEntity<FileTypes>
    {
        DTO.FileTypes filetypes;
        public FileTypes(DTO.FileTypes dto )
        {
              filetypes = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.FileTypes>(filetypes);

        }

        public DTO.FileTypes DTO
        {
            get
            {
             return filetypes;
            }
            set
            {
                filetypes = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.filetypes.Id; }
			set
			{
			    if (value == this.filetypes.Id) return;
				this.filetypes.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.filetypes.ApplicationSettingsId; }
			set
			{
			    if (value == this.filetypes.ApplicationSettingsId) return;
				this.filetypes.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "FilePattern is required")]
       
                
                [MaxLength(255, ErrorMessage = "FilePattern has a max length of 255 letters ")]
public string FilePattern
		{ 
		    get { return this.filetypes.FilePattern; }
			set
			{
			    if (value == this.filetypes.FilePattern) return;
				this.filetypes.FilePattern = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FilePattern");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Type is required")]
       
                
                [MaxLength(50, ErrorMessage = "Type has a max length of 50 letters ")]
public string Type
		{ 
		    get { return this.filetypes.Type; }
			set
			{
			    if (value == this.filetypes.Type) return;
				this.filetypes.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "AsycudaDocumentSet is required")]
       
public int AsycudaDocumentSetId
		{ 
		    get { return this.filetypes.AsycudaDocumentSetId; }
			set
			{
			    if (value == this.filetypes.AsycudaDocumentSetId) return;
				this.filetypes.AsycudaDocumentSetId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentSetId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CreateDocumentSet is required")]
       
public bool CreateDocumentSet
		{ 
		    get { return this.filetypes.CreateDocumentSet; }
			set
			{
			    if (value == this.filetypes.CreateDocumentSet) return;
				this.filetypes.CreateDocumentSet = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CreateDocumentSet");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DocumentSpecific is required")]
       
public bool DocumentSpecific
		{ 
		    get { return this.filetypes.DocumentSpecific; }
			set
			{
			    if (value == this.filetypes.DocumentSpecific) return;
				this.filetypes.DocumentSpecific = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocumentSpecific");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DocumentCode is required")]
       
                
                [MaxLength(50, ErrorMessage = "DocumentCode has a max length of 50 letters ")]
public string DocumentCode
		{ 
		    get { return this.filetypes.DocumentCode; }
			set
			{
			    if (value == this.filetypes.DocumentCode) return;
				this.filetypes.DocumentCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocumentCode");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ReplyToMail is required")]
       
public bool ReplyToMail
		{ 
		    get { return this.filetypes.ReplyToMail; }
			set
			{
			    if (value == this.filetypes.ReplyToMail) return;
				this.filetypes.ReplyToMail = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReplyToMail");
			}
		}
     

       
       
public Nullable<int> FileGroupId
		{ 
		    get { return this.filetypes.FileGroupId; }
			set
			{
			    if (value == this.filetypes.FileGroupId) return;
				this.filetypes.FileGroupId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FileGroupId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "MergeEmails is required")]
       
public bool MergeEmails
		{ 
		    get { return this.filetypes.MergeEmails; }
			set
			{
			    if (value == this.filetypes.MergeEmails) return;
				this.filetypes.MergeEmails = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("MergeEmails");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CopyEntryData is required")]
       
public bool CopyEntryData
		{ 
		    get { return this.filetypes.CopyEntryData; }
			set
			{
			    if (value == this.filetypes.CopyEntryData) return;
				this.filetypes.CopyEntryData = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CopyEntryData");
			}
		}
     

       
       
public Nullable<int> ParentFileTypeId
		{ 
		    get { return this.filetypes.ParentFileTypeId; }
			set
			{
			    if (value == this.filetypes.ParentFileTypeId) return;
				this.filetypes.ParentFileTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ParentFileTypeId");
			}
		}
     

       
       
public Nullable<bool> OverwriteFiles
		{ 
		    get { return this.filetypes.OverwriteFiles; }
			set
			{
			    if (value == this.filetypes.OverwriteFiles) return;
				this.filetypes.OverwriteFiles = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("OverwriteFiles");
			}
		}
     

       
       
public Nullable<bool> HasFiles
		{ 
		    get { return this.filetypes.HasFiles; }
			set
			{
			    if (value == this.filetypes.HasFiles) return;
				this.filetypes.HasFiles = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("HasFiles");
			}
		}
     

       
       
public Nullable<int> OldFileTypeId
		{ 
		    get { return this.filetypes.OldFileTypeId; }
			set
			{
			    if (value == this.filetypes.OldFileTypeId) return;
				this.filetypes.OldFileTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("OldFileTypeId");
			}
		}
     

       
       
public Nullable<bool> ReplicateHeaderRow
		{ 
		    get { return this.filetypes.ReplicateHeaderRow; }
			set
			{
			    if (value == this.filetypes.ReplicateHeaderRow) return;
				this.filetypes.ReplicateHeaderRow = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReplicateHeaderRow");
			}
		}
     

       
       
public Nullable<bool> IsImportable
		{ 
		    get { return this.filetypes.IsImportable; }
			set
			{
			    if (value == this.filetypes.IsImportable) return;
				this.filetypes.IsImportable = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsImportable");
			}
		}
     

       private ApplicationSettings _ApplicationSettings;
        public  ApplicationSettings ApplicationSettings
		{
		    get
               { 
                  if (this.filetypes != null)
                   {
                       if (_ApplicationSettings != null)
                       {
                           if (this.filetypes.ApplicationSettings !=
                               _ApplicationSettings.DTO)
                           {
                                if (this.filetypes.ApplicationSettings  != null)
                               _ApplicationSettings = new ApplicationSettings(this.filetypes.ApplicationSettings);
                           }
                       }
                       else
                       {
                             if (this.filetypes.ApplicationSettings  != null)
                           _ApplicationSettings = new ApplicationSettings(this.filetypes.ApplicationSettings);
                       }
                   }


             //       if (_ApplicationSettings != null) return _ApplicationSettings;
                       
             //       var i = new ApplicationSettings(){TrackingState = TrackingState.Added};
			//		//if (this.filetypes.ApplicationSettings == null) Debugger.Break();
			//		if (this.filetypes.ApplicationSettings != null)
            //        {
            //           i. = this.filetypes.ApplicationSettings;
            //        }
            //        else
            //        {
            //            this.filetypes.ApplicationSettings = i.;
             //       }
                           
            //        _ApplicationSettings = i;
                     
                    return _ApplicationSettings;
               }
			set
			{
			    if (value == _ApplicationSettings) return;
                _ApplicationSettings = value;
                if(value != null)
                     this.filetypes.ApplicationSettings = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("ApplicationSettings");
			}
		}
        

       private AsycudaDocumentSetEx _AsycudaDocumentSetEx;
        public  AsycudaDocumentSetEx AsycudaDocumentSetEx
		{
		    get
               { 
                  if (this.filetypes != null)
                   {
                       if (_AsycudaDocumentSetEx != null)
                       {
                           if (this.filetypes.AsycudaDocumentSetEx !=
                               _AsycudaDocumentSetEx.DTO)
                           {
                                if (this.filetypes.AsycudaDocumentSetEx  != null)
                               _AsycudaDocumentSetEx = new AsycudaDocumentSetEx(this.filetypes.AsycudaDocumentSetEx);
                           }
                       }
                       else
                       {
                             if (this.filetypes.AsycudaDocumentSetEx  != null)
                           _AsycudaDocumentSetEx = new AsycudaDocumentSetEx(this.filetypes.AsycudaDocumentSetEx);
                       }
                   }


             //       if (_AsycudaDocumentSetEx != null) return _AsycudaDocumentSetEx;
                       
             //       var i = new AsycudaDocumentSetEx(){TrackingState = TrackingState.Added};
			//		//if (this.filetypes.AsycudaDocumentSetEx == null) Debugger.Break();
			//		if (this.filetypes.AsycudaDocumentSetEx != null)
            //        {
            //           i. = this.filetypes.AsycudaDocumentSetEx;
            //        }
            //        else
            //        {
            //            this.filetypes.AsycudaDocumentSetEx = i.;
             //       }
                           
            //        _AsycudaDocumentSetEx = i;
                     
                    return _AsycudaDocumentSetEx;
               }
			set
			{
			    if (value == _AsycudaDocumentSetEx) return;
                _AsycudaDocumentSetEx = value;
                if(value != null)
                     this.filetypes.AsycudaDocumentSetEx = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("AsycudaDocumentSetEx");
			}
		}
        

        ObservableCollection<FileTypeMappings> _FileTypeMappings = null;
        public  ObservableCollection<FileTypeMappings> FileTypeMappings
		{
            
		    get 
				{ 
					if(_FileTypeMappings != null) return _FileTypeMappings;
					//if (this.filetypes.FileTypeMappings == null) Debugger.Break();
					if(this.filetypes.FileTypeMappings != null)
					{
						_FileTypeMappings = new ObservableCollection<FileTypeMappings>(this.filetypes.FileTypeMappings.Select(x => new FileTypeMappings(x)));
					}
					
						_FileTypeMappings.CollectionChanged += FileTypeMappings_CollectionChanged; 
					
					return _FileTypeMappings; 
				}
			set
			{
			    if (Equals(value, _FileTypeMappings)) return;
				if (value != null)
					this.filetypes.FileTypeMappings = new ChangeTrackingCollection<DTO.FileTypeMappings>(value.Select(x => x.DTO).ToList());
                _FileTypeMappings = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FileTypeMappings != null)
				_FileTypeMappings.CollectionChanged += FileTypeMappings_CollectionChanged;               
				NotifyPropertyChanged("FileTypeMappings");
			}
		}
        
        void FileTypeMappings_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypeMappings itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeMappings.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypeMappings itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeMappings.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<FileTypeActions> _FileTypeActions = null;
        public  ObservableCollection<FileTypeActions> FileTypeActions
		{
            
		    get 
				{ 
					if(_FileTypeActions != null) return _FileTypeActions;
					//if (this.filetypes.FileTypeActions == null) Debugger.Break();
					if(this.filetypes.FileTypeActions != null)
					{
						_FileTypeActions = new ObservableCollection<FileTypeActions>(this.filetypes.FileTypeActions.Select(x => new FileTypeActions(x)));
					}
					
						_FileTypeActions.CollectionChanged += FileTypeActions_CollectionChanged; 
					
					return _FileTypeActions; 
				}
			set
			{
			    if (Equals(value, _FileTypeActions)) return;
				if (value != null)
					this.filetypes.FileTypeActions = new ChangeTrackingCollection<DTO.FileTypeActions>(value.Select(x => x.DTO).ToList());
                _FileTypeActions = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FileTypeActions != null)
				_FileTypeActions.CollectionChanged += FileTypeActions_CollectionChanged;               
				NotifyPropertyChanged("FileTypeActions");
			}
		}
        
        void FileTypeActions_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypeActions itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeActions.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypeActions itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeActions.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<FileTypeContacts> _FileTypeContacts = null;
        public  ObservableCollection<FileTypeContacts> FileTypeContacts
		{
            
		    get 
				{ 
					if(_FileTypeContacts != null) return _FileTypeContacts;
					//if (this.filetypes.FileTypeContacts == null) Debugger.Break();
					if(this.filetypes.FileTypeContacts != null)
					{
						_FileTypeContacts = new ObservableCollection<FileTypeContacts>(this.filetypes.FileTypeContacts.Select(x => new FileTypeContacts(x)));
					}
					
						_FileTypeContacts.CollectionChanged += FileTypeContacts_CollectionChanged; 
					
					return _FileTypeContacts; 
				}
			set
			{
			    if (Equals(value, _FileTypeContacts)) return;
				if (value != null)
					this.filetypes.FileTypeContacts = new ChangeTrackingCollection<DTO.FileTypeContacts>(value.Select(x => x.DTO).ToList());
                _FileTypeContacts = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FileTypeContacts != null)
				_FileTypeContacts.CollectionChanged += FileTypeContacts_CollectionChanged;               
				NotifyPropertyChanged("FileTypeContacts");
			}
		}
        
        void FileTypeContacts_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypeContacts itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeContacts.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypeContacts itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeContacts.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AsycudaDocumentSet_Attachments> _AsycudaDocumentSet_Attachments = null;
        public  ObservableCollection<AsycudaDocumentSet_Attachments> AsycudaDocumentSet_Attachments
		{
            
		    get 
				{ 
					if(_AsycudaDocumentSet_Attachments != null) return _AsycudaDocumentSet_Attachments;
					//if (this.filetypes.AsycudaDocumentSet_Attachments == null) Debugger.Break();
					if(this.filetypes.AsycudaDocumentSet_Attachments != null)
					{
						_AsycudaDocumentSet_Attachments = new ObservableCollection<AsycudaDocumentSet_Attachments>(this.filetypes.AsycudaDocumentSet_Attachments.Select(x => new AsycudaDocumentSet_Attachments(x)));
					}
					
						_AsycudaDocumentSet_Attachments.CollectionChanged += AsycudaDocumentSet_Attachments_CollectionChanged; 
					
					return _AsycudaDocumentSet_Attachments; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentSet_Attachments)) return;
				if (value != null)
					this.filetypes.AsycudaDocumentSet_Attachments = new ChangeTrackingCollection<DTO.AsycudaDocumentSet_Attachments>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentSet_Attachments = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentSet_Attachments != null)
				_AsycudaDocumentSet_Attachments.CollectionChanged += AsycudaDocumentSet_Attachments_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentSet_Attachments");
			}
		}
        
        void AsycudaDocumentSet_Attachments_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentSet_Attachments itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.AsycudaDocumentSet_Attachments.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentSet_Attachments itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.AsycudaDocumentSet_Attachments.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private FileGroups _FileGroups;
        public  FileGroups FileGroups
		{
		    get
               { 
                  if (this.filetypes != null)
                   {
                       if (_FileGroups != null)
                       {
                           if (this.filetypes.FileGroups !=
                               _FileGroups.DTO)
                           {
                                if (this.filetypes.FileGroups  != null)
                               _FileGroups = new FileGroups(this.filetypes.FileGroups);
                           }
                       }
                       else
                       {
                             if (this.filetypes.FileGroups  != null)
                           _FileGroups = new FileGroups(this.filetypes.FileGroups);
                       }
                   }


             //       if (_FileGroups != null) return _FileGroups;
                       
             //       var i = new FileGroups(){TrackingState = TrackingState.Added};
			//		//if (this.filetypes.FileGroups == null) Debugger.Break();
			//		if (this.filetypes.FileGroups != null)
            //        {
            //           i. = this.filetypes.FileGroups;
            //        }
            //        else
            //        {
            //            this.filetypes.FileGroups = i.;
             //       }
                           
            //        _FileGroups = i;
                     
                    return _FileGroups;
               }
			set
			{
			    if (value == _FileGroups) return;
                _FileGroups = value;
                if(value != null)
                     this.filetypes.FileGroups = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("FileGroups");
			}
		}
        

        ObservableCollection<FileTypes> _ChildFileTypes = null;
        public  ObservableCollection<FileTypes> ChildFileTypes
		{
            
		    get 
				{ 
					if(_ChildFileTypes != null) return _ChildFileTypes;
					//if (this.filetypes.ChildFileTypes == null) Debugger.Break();
					if(this.filetypes.ChildFileTypes != null)
					{
						_ChildFileTypes = new ObservableCollection<FileTypes>(this.filetypes.ChildFileTypes.Select(x => new FileTypes(x)));
					}
					
						_ChildFileTypes.CollectionChanged += ChildFileTypes_CollectionChanged; 
					
					return _ChildFileTypes; 
				}
			set
			{
			    if (Equals(value, _ChildFileTypes)) return;
				if (value != null)
					this.filetypes.ChildFileTypes = new ChangeTrackingCollection<DTO.FileTypes>(value.Select(x => x.DTO).ToList());
                _ChildFileTypes = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_ChildFileTypes != null)
				_ChildFileTypes.CollectionChanged += ChildFileTypes_CollectionChanged;               
				NotifyPropertyChanged("ChildFileTypes");
			}
		}
        
        void ChildFileTypes_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypes itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.ChildFileTypes.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypes itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.ChildFileTypes.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private FileTypes _ParentFileTypes;
        public  FileTypes ParentFileTypes
		{
		    get
               { 
                  if (this.filetypes != null)
                   {
                       if (_ParentFileTypes != null)
                       {
                           if (this.filetypes.ParentFileTypes !=
                               _ParentFileTypes.DTO)
                           {
                                if (this.filetypes.ParentFileTypes  != null)
                               _ParentFileTypes = new FileTypes(this.filetypes.ParentFileTypes);
                           }
                       }
                       else
                       {
                             if (this.filetypes.ParentFileTypes  != null)
                           _ParentFileTypes = new FileTypes(this.filetypes.ParentFileTypes);
                       }
                   }


             //       if (_ParentFileTypes != null) return _ParentFileTypes;
                       
             //       var i = new FileTypes(){TrackingState = TrackingState.Added};
			//		//if (this.filetypes.ParentFileTypes == null) Debugger.Break();
			//		if (this.filetypes.ParentFileTypes != null)
            //        {
            //           i. = this.filetypes.ParentFileTypes;
            //        }
            //        else
            //        {
            //            this.filetypes.ParentFileTypes = i.;
             //       }
                           
            //        _ParentFileTypes = i;
                     
                    return _ParentFileTypes;
               }
			set
			{
			    if (value == _ParentFileTypes) return;
                _ParentFileTypes = value;
                if(value != null)
                     this.filetypes.ParentFileTypes = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("ParentFileTypes");
			}
		}
        

        ObservableCollection<EmailFileTypes> _EmailFileTypes = null;
        public  ObservableCollection<EmailFileTypes> EmailFileTypes
		{
            
		    get 
				{ 
					if(_EmailFileTypes != null) return _EmailFileTypes;
					//if (this.filetypes.EmailFileTypes == null) Debugger.Break();
					if(this.filetypes.EmailFileTypes != null)
					{
						_EmailFileTypes = new ObservableCollection<EmailFileTypes>(this.filetypes.EmailFileTypes.Select(x => new EmailFileTypes(x)));
					}
					
						_EmailFileTypes.CollectionChanged += EmailFileTypes_CollectionChanged; 
					
					return _EmailFileTypes; 
				}
			set
			{
			    if (Equals(value, _EmailFileTypes)) return;
				if (value != null)
					this.filetypes.EmailFileTypes = new ChangeTrackingCollection<DTO.EmailFileTypes>(value.Select(x => x.DTO).ToList());
                _EmailFileTypes = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_EmailFileTypes != null)
				_EmailFileTypes.CollectionChanged += EmailFileTypes_CollectionChanged;               
				NotifyPropertyChanged("EmailFileTypes");
			}
		}
        
        void EmailFileTypes_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (EmailFileTypes itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.EmailFileTypes.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (EmailFileTypes itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.EmailFileTypes.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<ImportActions> _ImportActions = null;
        public  ObservableCollection<ImportActions> ImportActions
		{
            
		    get 
				{ 
					if(_ImportActions != null) return _ImportActions;
					//if (this.filetypes.ImportActions == null) Debugger.Break();
					if(this.filetypes.ImportActions != null)
					{
						_ImportActions = new ObservableCollection<ImportActions>(this.filetypes.ImportActions.Select(x => new ImportActions(x)));
					}
					
						_ImportActions.CollectionChanged += ImportActions_CollectionChanged; 
					
					return _ImportActions; 
				}
			set
			{
			    if (Equals(value, _ImportActions)) return;
				if (value != null)
					this.filetypes.ImportActions = new ChangeTrackingCollection<DTO.ImportActions>(value.Select(x => x.DTO).ToList());
                _ImportActions = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_ImportActions != null)
				_ImportActions.CollectionChanged += ImportActions_CollectionChanged;               
				NotifyPropertyChanged("ImportActions");
			}
		}
        
        void ImportActions_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (ImportActions itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.ImportActions.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (ImportActions itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.ImportActions.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<FileTypeReplaceRegex> _FileTypeReplaceRegex = null;
        public  ObservableCollection<FileTypeReplaceRegex> FileTypeReplaceRegex
		{
            
		    get 
				{ 
					if(_FileTypeReplaceRegex != null) return _FileTypeReplaceRegex;
					//if (this.filetypes.FileTypeReplaceRegex == null) Debugger.Break();
					if(this.filetypes.FileTypeReplaceRegex != null)
					{
						_FileTypeReplaceRegex = new ObservableCollection<FileTypeReplaceRegex>(this.filetypes.FileTypeReplaceRegex.Select(x => new FileTypeReplaceRegex(x)));
					}
					
						_FileTypeReplaceRegex.CollectionChanged += FileTypeReplaceRegex_CollectionChanged; 
					
					return _FileTypeReplaceRegex; 
				}
			set
			{
			    if (Equals(value, _FileTypeReplaceRegex)) return;
				if (value != null)
					this.filetypes.FileTypeReplaceRegex = new ChangeTrackingCollection<DTO.FileTypeReplaceRegex>(value.Select(x => x.DTO).ToList());
                _FileTypeReplaceRegex = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FileTypeReplaceRegex != null)
				_FileTypeReplaceRegex.CollectionChanged += FileTypeReplaceRegex_CollectionChanged;               
				NotifyPropertyChanged("FileTypeReplaceRegex");
			}
		}
        
        void FileTypeReplaceRegex_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypeReplaceRegex itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeReplaceRegex.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypeReplaceRegex itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeReplaceRegex.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.FileTypes> _changeTracker;    
        public ChangeTrackingCollection<DTO.FileTypes> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



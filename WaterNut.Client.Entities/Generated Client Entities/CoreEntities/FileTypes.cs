// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class FileTypes: BaseEntity<FileTypes>
    {
        DTO.FileTypes filetypes;
        public FileTypes(DTO.FileTypes dto )
        {
              filetypes = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.FileTypes>(filetypes);

        }

        public DTO.FileTypes DTO
        {
            get
            {
             return filetypes;
            }
            set
            {
                filetypes = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.filetypes.Id; }
			set
			{
			    if (value == this.filetypes.Id) return;
				this.filetypes.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.filetypes.ApplicationSettingsId; }
			set
			{
			    if (value == this.filetypes.ApplicationSettingsId) return;
				this.filetypes.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "FilePattern is required")]
       
                
                [MaxLength(255, ErrorMessage = "FilePattern has a max length of 255 letters ")]
public string FilePattern
		{ 
		    get { return this.filetypes.FilePattern; }
			set
			{
			    if (value == this.filetypes.FilePattern) return;
				this.filetypes.FilePattern = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FilePattern");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Type is required")]
       
                
                [MaxLength(50, ErrorMessage = "Type has a max length of 50 letters ")]
public string Type
		{ 
		    get { return this.filetypes.Type; }
			set
			{
			    if (value == this.filetypes.Type) return;
				this.filetypes.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "AsycudaDocumentSet is required")]
       
public int AsycudaDocumentSetId
		{ 
		    get { return this.filetypes.AsycudaDocumentSetId; }
			set
			{
			    if (value == this.filetypes.AsycudaDocumentSetId) return;
				this.filetypes.AsycudaDocumentSetId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentSetId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CreateDocumentSet is required")]
       
public bool CreateDocumentSet
		{ 
		    get { return this.filetypes.CreateDocumentSet; }
			set
			{
			    if (value == this.filetypes.CreateDocumentSet) return;
				this.filetypes.CreateDocumentSet = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CreateDocumentSet");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DocumentSpecific is required")]
       
public bool DocumentSpecific
		{ 
		    get { return this.filetypes.DocumentSpecific; }
			set
			{
			    if (value == this.filetypes.DocumentSpecific) return;
				this.filetypes.DocumentSpecific = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocumentSpecific");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "DocumentCode has a max length of 50 letters ")]
public string DocumentCode
		{ 
		    get { return this.filetypes.DocumentCode; }
			set
			{
			    if (value == this.filetypes.DocumentCode) return;
				this.filetypes.DocumentCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocumentCode");
			}
		}
     

       private ApplicationSettings _ApplicationSettings;
        public  ApplicationSettings ApplicationSettings
		{
		    get
               { 
                  if (this.filetypes != null)
                   {
                       if (_ApplicationSettings != null)
                       {
                           if (this.filetypes.ApplicationSettings !=
                               _ApplicationSettings.DTO)
                           {
                                if (this.filetypes.ApplicationSettings  != null)
                               _ApplicationSettings = new ApplicationSettings(this.filetypes.ApplicationSettings);
                           }
                       }
                       else
                       {
                             if (this.filetypes.ApplicationSettings  != null)
                           _ApplicationSettings = new ApplicationSettings(this.filetypes.ApplicationSettings);
                       }
                   }


             //       if (_ApplicationSettings != null) return _ApplicationSettings;
                       
             //       var i = new ApplicationSettings(){TrackingState = TrackingState.Added};
			//		//if (this.filetypes.ApplicationSettings == null) Debugger.Break();
			//		if (this.filetypes.ApplicationSettings != null)
            //        {
            //           i. = this.filetypes.ApplicationSettings;
            //        }
            //        else
            //        {
            //            this.filetypes.ApplicationSettings = i.;
             //       }
                           
            //        _ApplicationSettings = i;
                     
                    return _ApplicationSettings;
               }
			set
			{
			    if (value == _ApplicationSettings) return;
                _ApplicationSettings = value;
                if(value != null)
                     this.filetypes.ApplicationSettings = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("ApplicationSettings");
			}
		}
        

       private AsycudaDocumentSetEx _AsycudaDocumentSetEx;
        public  AsycudaDocumentSetEx AsycudaDocumentSetEx
		{
		    get
               { 
                  if (this.filetypes != null)
                   {
                       if (_AsycudaDocumentSetEx != null)
                       {
                           if (this.filetypes.AsycudaDocumentSetEx !=
                               _AsycudaDocumentSetEx.DTO)
                           {
                                if (this.filetypes.AsycudaDocumentSetEx  != null)
                               _AsycudaDocumentSetEx = new AsycudaDocumentSetEx(this.filetypes.AsycudaDocumentSetEx);
                           }
                       }
                       else
                       {
                             if (this.filetypes.AsycudaDocumentSetEx  != null)
                           _AsycudaDocumentSetEx = new AsycudaDocumentSetEx(this.filetypes.AsycudaDocumentSetEx);
                       }
                   }


             //       if (_AsycudaDocumentSetEx != null) return _AsycudaDocumentSetEx;
                       
             //       var i = new AsycudaDocumentSetEx(){TrackingState = TrackingState.Added};
			//		//if (this.filetypes.AsycudaDocumentSetEx == null) Debugger.Break();
			//		if (this.filetypes.AsycudaDocumentSetEx != null)
            //        {
            //           i. = this.filetypes.AsycudaDocumentSetEx;
            //        }
            //        else
            //        {
            //            this.filetypes.AsycudaDocumentSetEx = i.;
             //       }
                           
            //        _AsycudaDocumentSetEx = i;
                     
                    return _AsycudaDocumentSetEx;
               }
			set
			{
			    if (value == _AsycudaDocumentSetEx) return;
                _AsycudaDocumentSetEx = value;
                if(value != null)
                     this.filetypes.AsycudaDocumentSetEx = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("AsycudaDocumentSetEx");
			}
		}
        

        ObservableCollection<FileTypeMappings> _FileTypeMappings = null;
        public  ObservableCollection<FileTypeMappings> FileTypeMappings
		{
            
		    get 
				{ 
					if(_FileTypeMappings != null) return _FileTypeMappings;
					//if (this.filetypes.FileTypeMappings == null) Debugger.Break();
					if(this.filetypes.FileTypeMappings != null)
					{
						_FileTypeMappings = new ObservableCollection<FileTypeMappings>(this.filetypes.FileTypeMappings.Select(x => new FileTypeMappings(x)));
					}
					
						_FileTypeMappings.CollectionChanged += FileTypeMappings_CollectionChanged; 
					
					return _FileTypeMappings; 
				}
			set
			{
			    if (Equals(value, _FileTypeMappings)) return;
				if (value != null)
					this.filetypes.FileTypeMappings = new ChangeTrackingCollection<DTO.FileTypeMappings>(value.Select(x => x.DTO).ToList());
                _FileTypeMappings = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FileTypeMappings != null)
				_FileTypeMappings.CollectionChanged += FileTypeMappings_CollectionChanged;               
				NotifyPropertyChanged("FileTypeMappings");
			}
		}
        
        void FileTypeMappings_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypeMappings itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeMappings.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypeMappings itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeMappings.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<FileTypeActions> _FileTypeActions = null;
        public  ObservableCollection<FileTypeActions> FileTypeActions
		{
            
		    get 
				{ 
					if(_FileTypeActions != null) return _FileTypeActions;
					//if (this.filetypes.FileTypeActions == null) Debugger.Break();
					if(this.filetypes.FileTypeActions != null)
					{
						_FileTypeActions = new ObservableCollection<FileTypeActions>(this.filetypes.FileTypeActions.Select(x => new FileTypeActions(x)));
					}
					
						_FileTypeActions.CollectionChanged += FileTypeActions_CollectionChanged; 
					
					return _FileTypeActions; 
				}
			set
			{
			    if (Equals(value, _FileTypeActions)) return;
				if (value != null)
					this.filetypes.FileTypeActions = new ChangeTrackingCollection<DTO.FileTypeActions>(value.Select(x => x.DTO).ToList());
                _FileTypeActions = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FileTypeActions != null)
				_FileTypeActions.CollectionChanged += FileTypeActions_CollectionChanged;               
				NotifyPropertyChanged("FileTypeActions");
			}
		}
        
        void FileTypeActions_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypeActions itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeActions.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypeActions itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeActions.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<FileTypeContacts> _FileTypeContacts = null;
        public  ObservableCollection<FileTypeContacts> FileTypeContacts
		{
            
		    get 
				{ 
					if(_FileTypeContacts != null) return _FileTypeContacts;
					//if (this.filetypes.FileTypeContacts == null) Debugger.Break();
					if(this.filetypes.FileTypeContacts != null)
					{
						_FileTypeContacts = new ObservableCollection<FileTypeContacts>(this.filetypes.FileTypeContacts.Select(x => new FileTypeContacts(x)));
					}
					
						_FileTypeContacts.CollectionChanged += FileTypeContacts_CollectionChanged; 
					
					return _FileTypeContacts; 
				}
			set
			{
			    if (Equals(value, _FileTypeContacts)) return;
				if (value != null)
					this.filetypes.FileTypeContacts = new ChangeTrackingCollection<DTO.FileTypeContacts>(value.Select(x => x.DTO).ToList());
                _FileTypeContacts = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FileTypeContacts != null)
				_FileTypeContacts.CollectionChanged += FileTypeContacts_CollectionChanged;               
				NotifyPropertyChanged("FileTypeContacts");
			}
		}
        
        void FileTypeContacts_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypeContacts itm in e.NewItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeContacts.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypeContacts itm in e.OldItems)
                    {
                        if (itm != null)
                        filetypes.FileTypeContacts.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.FileTypes> _changeTracker;    
        public ChangeTrackingCollection<DTO.FileTypes> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



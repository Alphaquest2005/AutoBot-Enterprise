// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class AsycudaDocumentSetEx: BaseEntity<AsycudaDocumentSetEx>
    {
        DTO.AsycudaDocumentSetEx asycudadocumentsetex;
        public AsycudaDocumentSetEx(DTO.AsycudaDocumentSetEx dto )
        {
              asycudadocumentsetex = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.AsycudaDocumentSetEx>(asycudadocumentsetex);

        }

        public DTO.AsycudaDocumentSetEx DTO
        {
            get
            {
             return asycudadocumentsetex;
            }
            set
            {
                asycudadocumentsetex = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "AsycudaDocumentSet is required")]
       
public int AsycudaDocumentSetId
		{ 
		    get { return this.asycudadocumentsetex.AsycudaDocumentSetId; }
			set
			{
			    if (value == this.asycudadocumentsetex.AsycudaDocumentSetId) return;
				this.asycudadocumentsetex.AsycudaDocumentSetId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentSetId");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Declarant_Reference_Number has a max length of 50 letters ")]
public string Declarant_Reference_Number
		{ 
		    get { return this.asycudadocumentsetex.Declarant_Reference_Number; }
			set
			{
			    if (value == this.asycudadocumentsetex.Declarant_Reference_Number) return;
				this.asycudadocumentsetex.Declarant_Reference_Number = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Declarant_Reference_Number");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Exchange_Rate
		{ 
		    get { return this.asycudadocumentsetex.Exchange_Rate; }
			set
			{
			    if (value == this.asycudadocumentsetex.Exchange_Rate) return;
				this.asycudadocumentsetex.Exchange_Rate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Exchange_Rate");
			}
		}
     

       
       
public Nullable<int> Customs_ProcedureId
		{ 
		    get { return this.asycudadocumentsetex.Customs_ProcedureId; }
			set
			{
			    if (value == this.asycudadocumentsetex.Customs_ProcedureId) return;
				this.asycudadocumentsetex.Customs_ProcedureId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Customs_ProcedureId");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Country_of_origin_code has a max length of 50 letters ")]
public string Country_of_origin_code
		{ 
		    get { return this.asycudadocumentsetex.Country_of_origin_code; }
			set
			{
			    if (value == this.asycudadocumentsetex.Country_of_origin_code) return;
				this.asycudadocumentsetex.Country_of_origin_code = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Country_of_origin_code");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Currency_Code has a max length of 50 letters ")]
public string Currency_Code
		{ 
		    get { return this.asycudadocumentsetex.Currency_Code; }
			set
			{
			    if (value == this.asycudadocumentsetex.Currency_Code) return;
				this.asycudadocumentsetex.Currency_Code = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Currency_Code");
			}
		}
     

       
       
public Nullable<int> Document_TypeId
		{ 
		    get { return this.asycudadocumentsetex.Document_TypeId; }
			set
			{
			    if (value == this.asycudadocumentsetex.Document_TypeId) return;
				this.asycudadocumentsetex.Document_TypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Document_TypeId");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "Description has a max length of 255 letters ")]
public string Description
		{ 
		    get { return this.asycudadocumentsetex.Description; }
			set
			{
			    if (value == this.asycudadocumentsetex.Description) return;
				this.asycudadocumentsetex.Description = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Manifest_Number has a max length of 50 letters ")]
public string Manifest_Number
		{ 
		    get { return this.asycudadocumentsetex.Manifest_Number; }
			set
			{
			    if (value == this.asycudadocumentsetex.Manifest_Number) return;
				this.asycudadocumentsetex.Manifest_Number = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Manifest_Number");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "BLNumber has a max length of 50 letters ")]
public string BLNumber
		{ 
		    get { return this.asycudadocumentsetex.BLNumber; }
			set
			{
			    if (value == this.asycudadocumentsetex.BLNumber) return;
				this.asycudadocumentsetex.BLNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("BLNumber");
			}
		}
     

       
       
public Nullable<System.DateTime> EntryTimeStamp
		{ 
		    get { return this.asycudadocumentsetex.EntryTimeStamp; }
			set
			{
			    if (value == this.asycudadocumentsetex.EntryTimeStamp) return;
				this.asycudadocumentsetex.EntryTimeStamp = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryTimeStamp");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> StartingFileCount
		{ 
		    get { return this.asycudadocumentsetex.StartingFileCount; }
			set
			{
			    if (value == this.asycudadocumentsetex.StartingFileCount) return;
				this.asycudadocumentsetex.StartingFileCount = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("StartingFileCount");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> DocumentsCount
		{ 
		    get { return this.asycudadocumentsetex.DocumentsCount; }
			set
			{
			    if (value == this.asycudadocumentsetex.DocumentsCount) return;
				this.asycudadocumentsetex.DocumentsCount = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocumentsCount");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "ApportionMethod has a max length of 50 letters ")]
public string ApportionMethod
		{ 
		    get { return this.asycudadocumentsetex.ApportionMethod; }
			set
			{
			    if (value == this.asycudadocumentsetex.ApportionMethod) return;
				this.asycudadocumentsetex.ApportionMethod = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApportionMethod");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> TotalCIF
		{ 
		    get { return this.asycudadocumentsetex.TotalCIF; }
			set
			{
			    if (value == this.asycudadocumentsetex.TotalCIF) return;
				this.asycudadocumentsetex.TotalCIF = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TotalCIF");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> TotalFreight
		{ 
		    get { return this.asycudadocumentsetex.TotalFreight; }
			set
			{
			    if (value == this.asycudadocumentsetex.TotalFreight) return;
				this.asycudadocumentsetex.TotalFreight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TotalFreight");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> TotalWeight
		{ 
		    get { return this.asycudadocumentsetex.TotalWeight; }
			set
			{
			    if (value == this.asycudadocumentsetex.TotalWeight) return;
				this.asycudadocumentsetex.TotalWeight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TotalWeight");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.asycudadocumentsetex.ApplicationSettingsId; }
			set
			{
			    if (value == this.asycudadocumentsetex.ApplicationSettingsId) return;
				this.asycudadocumentsetex.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> TotalPackages
		{ 
		    get { return this.asycudadocumentsetex.TotalPackages; }
			set
			{
			    if (value == this.asycudadocumentsetex.TotalPackages) return;
				this.asycudadocumentsetex.TotalPackages = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TotalPackages");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> LastFileNumber
		{ 
		    get { return this.asycudadocumentsetex.LastFileNumber; }
			set
			{
			    if (value == this.asycudadocumentsetex.LastFileNumber) return;
				this.asycudadocumentsetex.LastFileNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LastFileNumber");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> TotalInvoices
		{ 
		    get { return this.asycudadocumentsetex.TotalInvoices; }
			set
			{
			    if (value == this.asycudadocumentsetex.TotalInvoices) return;
				this.asycudadocumentsetex.TotalInvoices = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TotalInvoices");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> ImportedInvoices
		{ 
		    get { return this.asycudadocumentsetex.ImportedInvoices; }
			set
			{
			    if (value == this.asycudadocumentsetex.ImportedInvoices) return;
				this.asycudadocumentsetex.ImportedInvoices = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ImportedInvoices");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> ClassifiedLines
		{ 
		    get { return this.asycudadocumentsetex.ClassifiedLines; }
			set
			{
			    if (value == this.asycudadocumentsetex.ClassifiedLines) return;
				this.asycudadocumentsetex.ClassifiedLines = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ClassifiedLines");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> TotalLines
		{ 
		    get { return this.asycudadocumentsetex.TotalLines; }
			set
			{
			    if (value == this.asycudadocumentsetex.TotalLines) return;
				this.asycudadocumentsetex.TotalLines = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TotalLines");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> MaxLines
		{ 
		    get { return this.asycudadocumentsetex.MaxLines; }
			set
			{
			    if (value == this.asycudadocumentsetex.MaxLines) return;
				this.asycudadocumentsetex.MaxLines = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("MaxLines");
			}
		}
     

        ObservableCollection<AsycudaDocument> _AsycudaDocuments = null;
        public  ObservableCollection<AsycudaDocument> AsycudaDocuments
		{
            
		    get 
				{ 
					if(_AsycudaDocuments != null) return _AsycudaDocuments;
					//if (this.asycudadocumentsetex.AsycudaDocuments == null) Debugger.Break();
					if(this.asycudadocumentsetex.AsycudaDocuments != null)
					{
						_AsycudaDocuments = new ObservableCollection<AsycudaDocument>(this.asycudadocumentsetex.AsycudaDocuments.Select(x => new AsycudaDocument(x)));
					}
					
						_AsycudaDocuments.CollectionChanged += AsycudaDocuments_CollectionChanged; 
					
					return _AsycudaDocuments; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocuments)) return;
				if (value != null)
					this.asycudadocumentsetex.AsycudaDocuments = new ChangeTrackingCollection<DTO.AsycudaDocument>(value.Select(x => x.DTO).ToList());
                _AsycudaDocuments = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocuments != null)
				_AsycudaDocuments.CollectionChanged += AsycudaDocuments_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocuments");
			}
		}
        
        void AsycudaDocuments_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocument itm in e.NewItems)
                    {
                        if (itm != null)
                        asycudadocumentsetex.AsycudaDocuments.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocument itm in e.OldItems)
                    {
                        if (itm != null)
                        asycudadocumentsetex.AsycudaDocuments.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<LicenceSummary> _LicenceSummary = null;
        public  ObservableCollection<LicenceSummary> LicenceSummary
		{
            
		    get 
				{ 
					if(_LicenceSummary != null) return _LicenceSummary;
					//if (this.asycudadocumentsetex.LicenceSummary == null) Debugger.Break();
					if(this.asycudadocumentsetex.LicenceSummary != null)
					{
						_LicenceSummary = new ObservableCollection<LicenceSummary>(this.asycudadocumentsetex.LicenceSummary.Select(x => new LicenceSummary(x)));
					}
					
						_LicenceSummary.CollectionChanged += LicenceSummary_CollectionChanged; 
					
					return _LicenceSummary; 
				}
			set
			{
			    if (Equals(value, _LicenceSummary)) return;
				if (value != null)
					this.asycudadocumentsetex.LicenceSummary = new ChangeTrackingCollection<DTO.LicenceSummary>(value.Select(x => x.DTO).ToList());
                _LicenceSummary = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_LicenceSummary != null)
				_LicenceSummary.CollectionChanged += LicenceSummary_CollectionChanged;               
				NotifyPropertyChanged("LicenceSummary");
			}
		}
        
        void LicenceSummary_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (LicenceSummary itm in e.NewItems)
                    {
                        if (itm != null)
                        asycudadocumentsetex.LicenceSummary.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (LicenceSummary itm in e.OldItems)
                    {
                        if (itm != null)
                        asycudadocumentsetex.LicenceSummary.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private ApplicationSettings _ApplicationSettings;
        public  ApplicationSettings ApplicationSettings
		{
		    get
               { 
                  if (this.asycudadocumentsetex != null)
                   {
                       if (_ApplicationSettings != null)
                       {
                           if (this.asycudadocumentsetex.ApplicationSettings !=
                               _ApplicationSettings.DTO)
                           {
                                if (this.asycudadocumentsetex.ApplicationSettings  != null)
                               _ApplicationSettings = new ApplicationSettings(this.asycudadocumentsetex.ApplicationSettings);
                           }
                       }
                       else
                       {
                             if (this.asycudadocumentsetex.ApplicationSettings  != null)
                           _ApplicationSettings = new ApplicationSettings(this.asycudadocumentsetex.ApplicationSettings);
                       }
                   }


             //       if (_ApplicationSettings != null) return _ApplicationSettings;
                       
             //       var i = new ApplicationSettings(){TrackingState = TrackingState.Added};
			//		//if (this.asycudadocumentsetex.ApplicationSettings == null) Debugger.Break();
			//		if (this.asycudadocumentsetex.ApplicationSettings != null)
            //        {
            //           i. = this.asycudadocumentsetex.ApplicationSettings;
            //        }
            //        else
            //        {
            //            this.asycudadocumentsetex.ApplicationSettings = i.;
             //       }
                           
            //        _ApplicationSettings = i;
                     
                    return _ApplicationSettings;
               }
			set
			{
			    if (value == _ApplicationSettings) return;
                _ApplicationSettings = value;
                if(value != null)
                     this.asycudadocumentsetex.ApplicationSettings = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("ApplicationSettings");
			}
		}
        

        ObservableCollection<FileTypes> _FileTypes = null;
        public  ObservableCollection<FileTypes> FileTypes
		{
            
		    get 
				{ 
					if(_FileTypes != null) return _FileTypes;
					//if (this.asycudadocumentsetex.FileTypes == null) Debugger.Break();
					if(this.asycudadocumentsetex.FileTypes != null)
					{
						_FileTypes = new ObservableCollection<FileTypes>(this.asycudadocumentsetex.FileTypes.Select(x => new FileTypes(x)));
					}
					
						_FileTypes.CollectionChanged += FileTypes_CollectionChanged; 
					
					return _FileTypes; 
				}
			set
			{
			    if (Equals(value, _FileTypes)) return;
				if (value != null)
					this.asycudadocumentsetex.FileTypes = new ChangeTrackingCollection<DTO.FileTypes>(value.Select(x => x.DTO).ToList());
                _FileTypes = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FileTypes != null)
				_FileTypes.CollectionChanged += FileTypes_CollectionChanged;               
				NotifyPropertyChanged("FileTypes");
			}
		}
        
        void FileTypes_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FileTypes itm in e.NewItems)
                    {
                        if (itm != null)
                        asycudadocumentsetex.FileTypes.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FileTypes itm in e.OldItems)
                    {
                        if (itm != null)
                        asycudadocumentsetex.FileTypes.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AsycudaDocumentSet_Attachments> _AsycudaDocumentSet_Attachments = null;
        public  ObservableCollection<AsycudaDocumentSet_Attachments> AsycudaDocumentSet_Attachments
		{
            
		    get 
				{ 
					if(_AsycudaDocumentSet_Attachments != null) return _AsycudaDocumentSet_Attachments;
					//if (this.asycudadocumentsetex.AsycudaDocumentSet_Attachments == null) Debugger.Break();
					if(this.asycudadocumentsetex.AsycudaDocumentSet_Attachments != null)
					{
						_AsycudaDocumentSet_Attachments = new ObservableCollection<AsycudaDocumentSet_Attachments>(this.asycudadocumentsetex.AsycudaDocumentSet_Attachments.Select(x => new AsycudaDocumentSet_Attachments(x)));
					}
					
						_AsycudaDocumentSet_Attachments.CollectionChanged += AsycudaDocumentSet_Attachments_CollectionChanged; 
					
					return _AsycudaDocumentSet_Attachments; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentSet_Attachments)) return;
				if (value != null)
					this.asycudadocumentsetex.AsycudaDocumentSet_Attachments = new ChangeTrackingCollection<DTO.AsycudaDocumentSet_Attachments>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentSet_Attachments = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentSet_Attachments != null)
				_AsycudaDocumentSet_Attachments.CollectionChanged += AsycudaDocumentSet_Attachments_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentSet_Attachments");
			}
		}
        
        void AsycudaDocumentSet_Attachments_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentSet_Attachments itm in e.NewItems)
                    {
                        if (itm != null)
                        asycudadocumentsetex.AsycudaDocumentSet_Attachments.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentSet_Attachments itm in e.OldItems)
                    {
                        if (itm != null)
                        asycudadocumentsetex.AsycudaDocumentSet_Attachments.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.AsycudaDocumentSetEx> _changeTracker;    
        public ChangeTrackingCollection<DTO.AsycudaDocumentSetEx> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



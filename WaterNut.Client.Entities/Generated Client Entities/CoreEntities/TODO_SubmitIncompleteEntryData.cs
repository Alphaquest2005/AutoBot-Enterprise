// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class TODO_SubmitIncompleteEntryData: BaseEntity<TODO_SubmitIncompleteEntryData>
    {
        DTO.TODO_SubmitIncompleteEntryData todo_submitincompleteentrydata;
        public TODO_SubmitIncompleteEntryData(DTO.TODO_SubmitIncompleteEntryData dto )
        {
              todo_submitincompleteentrydata = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TODO_SubmitIncompleteEntryData>(todo_submitincompleteentrydata);

        }

        public DTO.TODO_SubmitIncompleteEntryData DTO
        {
            get
            {
             return todo_submitincompleteentrydata;
            }
            set
            {
                todo_submitincompleteentrydata = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= "InvoiceDate is required")]
       
public System.DateTime InvoiceDate
		{ 
		    get { return this.todo_submitincompleteentrydata.InvoiceDate; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.InvoiceDate) return;
				this.todo_submitincompleteentrydata.InvoiceDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceDate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Type has a max length of 50 letters ")]
public string Type
		{ 
		    get { return this.todo_submitincompleteentrydata.Type; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.Type) return;
				this.todo_submitincompleteentrydata.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> ImportedTotal
		{ 
		    get { return this.todo_submitincompleteentrydata.ImportedTotal; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.ImportedTotal) return;
				this.todo_submitincompleteentrydata.ImportedTotal = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ImportedTotal");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InvoiceNo is required")]
       
                
                [MaxLength(50, ErrorMessage = "InvoiceNo has a max length of 50 letters ")]
public string InvoiceNo
		{ 
		    get { return this.todo_submitincompleteentrydata.InvoiceNo; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.InvoiceNo) return;
				this.todo_submitincompleteentrydata.InvoiceNo = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceNo");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> ImportedLines
		{ 
		    get { return this.todo_submitincompleteentrydata.ImportedLines; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.ImportedLines) return;
				this.todo_submitincompleteentrydata.ImportedLines = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ImportedLines");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> TotalLines
		{ 
		    get { return this.todo_submitincompleteentrydata.TotalLines; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.TotalLines) return;
				this.todo_submitincompleteentrydata.TotalLines = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TotalLines");
			}
		}
     

       
       
                
                [MaxLength(4, ErrorMessage = "Currency has a max length of 4 letters ")]
public string Currency
		{ 
		    get { return this.todo_submitincompleteentrydata.Currency; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.Currency) return;
				this.todo_submitincompleteentrydata.Currency = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Currency");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.todo_submitincompleteentrydata.ApplicationSettingsId; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.ApplicationSettingsId) return;
				this.todo_submitincompleteentrydata.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DutyFreePaid is required")]
       
                
                [MaxLength(9, ErrorMessage = "DutyFreePaid has a max length of 9 letters ")]
public string DutyFreePaid
		{ 
		    get { return this.todo_submitincompleteentrydata.DutyFreePaid; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.DutyFreePaid) return;
				this.todo_submitincompleteentrydata.DutyFreePaid = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DutyFreePaid");
			}
		}
     

       
       
public Nullable<int> EmailId
		{ 
		    get { return this.todo_submitincompleteentrydata.EmailId; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.EmailId) return;
				this.todo_submitincompleteentrydata.EmailId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EmailId");
			}
		}
     

       
       
public Nullable<int> FileTypeId
		{ 
		    get { return this.todo_submitincompleteentrydata.FileTypeId; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.FileTypeId) return;
				this.todo_submitincompleteentrydata.FileTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FileTypeId");
			}
		}
     

       
       
                
                [MaxLength(100, ErrorMessage = "SupplierCode has a max length of 100 letters ")]
public string SupplierCode
		{ 
		    get { return this.todo_submitincompleteentrydata.SupplierCode; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.SupplierCode) return;
				this.todo_submitincompleteentrydata.SupplierCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SupplierCode");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ExpectedTotal is required")]
       [NumberValidationAttribute]
public double ExpectedTotal
		{ 
		    get { return this.todo_submitincompleteentrydata.ExpectedTotal; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.ExpectedTotal) return;
				this.todo_submitincompleteentrydata.ExpectedTotal = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ExpectedTotal");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> InvoiceTotal
		{ 
		    get { return this.todo_submitincompleteentrydata.InvoiceTotal; }
			set
			{
			    if (value == this.todo_submitincompleteentrydata.InvoiceTotal) return;
				this.todo_submitincompleteentrydata.InvoiceTotal = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceTotal");
			}
		}
     


        ChangeTrackingCollection<DTO.TODO_SubmitIncompleteEntryData> _changeTracker;    
        public ChangeTrackingCollection<DTO.TODO_SubmitIncompleteEntryData> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



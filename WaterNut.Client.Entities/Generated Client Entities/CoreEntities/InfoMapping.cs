// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class InfoMapping: BaseEntity<InfoMapping>
    {
        DTO.InfoMapping infomapping;
        public InfoMapping(DTO.InfoMapping dto )
        {
              infomapping = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.InfoMapping>(infomapping);

        }

        public DTO.InfoMapping DTO
        {
            get
            {
             return infomapping;
            }
            set
            {
                infomapping = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.infomapping.Id; }
			set
			{
			    if (value == this.infomapping.Id) return;
				this.infomapping.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Key is required")]
       
                
                [MaxLength(50, ErrorMessage = "Key has a max length of 50 letters ")]
public string Key
		{ 
		    get { return this.infomapping.Key; }
			set
			{
			    if (value == this.infomapping.Key) return;
				this.infomapping.Key = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Key");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Field is required")]
       
                
                [MaxLength(50, ErrorMessage = "Field has a max length of 50 letters ")]
public string Field
		{ 
		    get { return this.infomapping.Field; }
			set
			{
			    if (value == this.infomapping.Field) return;
				this.infomapping.Field = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Field");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntityType is required")]
       
                
                [MaxLength(255, ErrorMessage = "EntityType has a max length of 255 letters ")]
public string EntityType
		{ 
		    get { return this.infomapping.EntityType; }
			set
			{
			    if (value == this.infomapping.EntityType) return;
				this.infomapping.EntityType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntityType");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.infomapping.ApplicationSettingsId; }
			set
			{
			    if (value == this.infomapping.ApplicationSettingsId) return;
				this.infomapping.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       private ApplicationSettings _ApplicationSettings;
        public  ApplicationSettings ApplicationSettings
		{
		    get
               { 
                  if (this.infomapping != null)
                   {
                       if (_ApplicationSettings != null)
                       {
                           if (this.infomapping.ApplicationSettings !=
                               _ApplicationSettings.DTO)
                           {
                                if (this.infomapping.ApplicationSettings  != null)
                               _ApplicationSettings = new ApplicationSettings(this.infomapping.ApplicationSettings);
                           }
                       }
                       else
                       {
                             if (this.infomapping.ApplicationSettings  != null)
                           _ApplicationSettings = new ApplicationSettings(this.infomapping.ApplicationSettings);
                       }
                   }


             //       if (_ApplicationSettings != null) return _ApplicationSettings;
                       
             //       var i = new ApplicationSettings(){TrackingState = TrackingState.Added};
			//		//if (this.infomapping.ApplicationSettings == null) Debugger.Break();
			//		if (this.infomapping.ApplicationSettings != null)
            //        {
            //           i. = this.infomapping.ApplicationSettings;
            //        }
            //        else
            //        {
            //            this.infomapping.ApplicationSettings = i.;
             //       }
                           
            //        _ApplicationSettings = i;
                     
                    return _ApplicationSettings;
               }
			set
			{
			    if (value == _ApplicationSettings) return;
                _ApplicationSettings = value;
                if(value != null)
                     this.infomapping.ApplicationSettings = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("ApplicationSettings");
			}
		}
        

        ObservableCollection<InfoMappingRegEx> _InfoMappingRegEx = null;
        public  ObservableCollection<InfoMappingRegEx> InfoMappingRegEx
		{
            
		    get 
				{ 
					if(_InfoMappingRegEx != null) return _InfoMappingRegEx;
					//if (this.infomapping.InfoMappingRegEx == null) Debugger.Break();
					if(this.infomapping.InfoMappingRegEx != null)
					{
						_InfoMappingRegEx = new ObservableCollection<InfoMappingRegEx>(this.infomapping.InfoMappingRegEx.Select(x => new InfoMappingRegEx(x)));
					}
					
						_InfoMappingRegEx.CollectionChanged += InfoMappingRegEx_CollectionChanged; 
					
					return _InfoMappingRegEx; 
				}
			set
			{
			    if (Equals(value, _InfoMappingRegEx)) return;
				if (value != null)
					this.infomapping.InfoMappingRegEx = new ChangeTrackingCollection<DTO.InfoMappingRegEx>(value.Select(x => x.DTO).ToList());
                _InfoMappingRegEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_InfoMappingRegEx != null)
				_InfoMappingRegEx.CollectionChanged += InfoMappingRegEx_CollectionChanged;               
				NotifyPropertyChanged("InfoMappingRegEx");
			}
		}
        
        void InfoMappingRegEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (InfoMappingRegEx itm in e.NewItems)
                    {
                        if (itm != null)
                        infomapping.InfoMappingRegEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (InfoMappingRegEx itm in e.OldItems)
                    {
                        if (itm != null)
                        infomapping.InfoMappingRegEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.InfoMapping> _changeTracker;    
        public ChangeTrackingCollection<DTO.InfoMapping> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



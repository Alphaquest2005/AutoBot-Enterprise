// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class AsycudaDocumentItem: BaseEntity<AsycudaDocumentItem>
    {
        DTO.AsycudaDocumentItem asycudadocumentitem;
        public AsycudaDocumentItem(DTO.AsycudaDocumentItem dto )
        {
              asycudadocumentitem = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.AsycudaDocumentItem>(asycudadocumentitem);

        }

        public DTO.AsycudaDocumentItem DTO
        {
            get
            {
             return asycudadocumentitem;
            }
            set
            {
                asycudadocumentitem = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "Item_ is required")]
       
public int Item_Id
		{ 
		    get { return this.asycudadocumentitem.Item_Id; }
			set
			{
			    if (value == this.asycudadocumentitem.Item_Id) return;
				this.asycudadocumentitem.Item_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Item_Id");
			}
		}
     

       
       
public Nullable<int> AsycudaDocumentId
		{ 
		    get { return this.asycudadocumentitem.AsycudaDocumentId; }
			set
			{
			    if (value == this.asycudadocumentitem.AsycudaDocumentId) return;
				this.asycudadocumentitem.AsycudaDocumentId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentId");
			}
		}
     

       
       
public Nullable<int> EntryDataDetailsId
		{ 
		    get { return this.asycudadocumentitem.EntryDataDetailsId; }
			set
			{
			    if (value == this.asycudadocumentitem.EntryDataDetailsId) return;
				this.asycudadocumentitem.EntryDataDetailsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataDetailsId");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "LineNumber has a max length of 50 letters ")]
public string LineNumber
		{ 
		    get { return this.asycudadocumentitem.LineNumber; }
			set
			{
			    if (value == this.asycudadocumentitem.LineNumber) return;
				this.asycudadocumentitem.LineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineNumber");
			}
		}
     

       
       
public Nullable<bool> IsAssessed
		{ 
		    get { return this.asycudadocumentitem.IsAssessed; }
			set
			{
			    if (value == this.asycudadocumentitem.IsAssessed) return;
				this.asycudadocumentitem.IsAssessed = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsAssessed");
			}
		}
     

       
       
public Nullable<bool> DoNotAllocate
		{ 
		    get { return this.asycudadocumentitem.DoNotAllocate; }
			set
			{
			    if (value == this.asycudadocumentitem.DoNotAllocate) return;
				this.asycudadocumentitem.DoNotAllocate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotAllocate");
			}
		}
     

       
       
public Nullable<bool> DoNotEX
		{ 
		    get { return this.asycudadocumentitem.DoNotEX; }
			set
			{
			    if (value == this.asycudadocumentitem.DoNotEX) return;
				this.asycudadocumentitem.DoNotEX = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotEX");
			}
		}
     

       
       
public Nullable<bool> AttributeOnlyAllocation
		{ 
		    get { return this.asycudadocumentitem.AttributeOnlyAllocation; }
			set
			{
			    if (value == this.asycudadocumentitem.AttributeOnlyAllocation) return;
				this.asycudadocumentitem.AttributeOnlyAllocation = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AttributeOnlyAllocation");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "Description_of_goods has a max length of 255 letters ")]
public string Description_of_goods
		{ 
		    get { return this.asycudadocumentitem.Description_of_goods; }
			set
			{
			    if (value == this.asycudadocumentitem.Description_of_goods) return;
				this.asycudadocumentitem.Description_of_goods = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description_of_goods");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "Commercial_Description has a max length of 255 letters ")]
public string Commercial_Description
		{ 
		    get { return this.asycudadocumentitem.Commercial_Description; }
			set
			{
			    if (value == this.asycudadocumentitem.Commercial_Description) return;
				this.asycudadocumentitem.Commercial_Description = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Commercial_Description");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Gross_weight_itm is required")]
       [NumberValidationAttribute]
public decimal Gross_weight_itm
		{ 
		    get { return this.asycudadocumentitem.Gross_weight_itm; }
			set
			{
			    if (value == this.asycudadocumentitem.Gross_weight_itm) return;
				this.asycudadocumentitem.Gross_weight_itm = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Gross_weight_itm");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Net_weight_itm is required")]
       [NumberValidationAttribute]
public decimal Net_weight_itm
		{ 
		    get { return this.asycudadocumentitem.Net_weight_itm; }
			set
			{
			    if (value == this.asycudadocumentitem.Net_weight_itm) return;
				this.asycudadocumentitem.Net_weight_itm = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Net_weight_itm");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Item_price
		{ 
		    get { return this.asycudadocumentitem.Item_price; }
			set
			{
			    if (value == this.asycudadocumentitem.Item_price) return;
				this.asycudadocumentitem.Item_price = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Item_price");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> ItemQuantity
		{ 
		    get { return this.asycudadocumentitem.ItemQuantity; }
			set
			{
			    if (value == this.asycudadocumentitem.ItemQuantity) return;
				this.asycudadocumentitem.ItemQuantity = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemQuantity");
			}
		}
     

       
       
                
                [MaxLength(4, ErrorMessage = "Suppplementary_unit_code has a max length of 4 letters ")]
public string Suppplementary_unit_code
		{ 
		    get { return this.asycudadocumentitem.Suppplementary_unit_code; }
			set
			{
			    if (value == this.asycudadocumentitem.Suppplementary_unit_code) return;
				this.asycudadocumentitem.Suppplementary_unit_code = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Suppplementary_unit_code");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "ItemNumber has a max length of 50 letters ")]
public string ItemNumber
		{ 
		    get { return this.asycudadocumentitem.ItemNumber; }
			set
			{
			    if (value == this.asycudadocumentitem.ItemNumber) return;
				this.asycudadocumentitem.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       
       
                
                [MaxLength(20, ErrorMessage = "TariffCode has a max length of 20 letters ")]
public string TariffCode
		{ 
		    get { return this.asycudadocumentitem.TariffCode; }
			set
			{
			    if (value == this.asycudadocumentitem.TariffCode) return;
				this.asycudadocumentitem.TariffCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCode");
			}
		}
     

       
       
public Nullable<bool> TariffCodeLicenseRequired
		{ 
		    get { return this.asycudadocumentitem.TariffCodeLicenseRequired; }
			set
			{
			    if (value == this.asycudadocumentitem.TariffCodeLicenseRequired) return;
				this.asycudadocumentitem.TariffCodeLicenseRequired = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCodeLicenseRequired");
			}
		}
     

       
       
public Nullable<bool> TariffCategoryLicenseRequired
		{ 
		    get { return this.asycudadocumentitem.TariffCategoryLicenseRequired; }
			set
			{
			    if (value == this.asycudadocumentitem.TariffCategoryLicenseRequired) return;
				this.asycudadocumentitem.TariffCategoryLicenseRequired = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCategoryLicenseRequired");
			}
		}
     

       
       
                
                [MaxLength(999, ErrorMessage = "TariffCodeDescription has a max length of 999 letters ")]
public string TariffCodeDescription
		{ 
		    get { return this.asycudadocumentitem.TariffCodeDescription; }
			set
			{
			    if (value == this.asycudadocumentitem.TariffCodeDescription) return;
				this.asycudadocumentitem.TariffCodeDescription = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCodeDescription");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> DutyLiability
		{ 
		    get { return this.asycudadocumentitem.DutyLiability; }
			set
			{
			    if (value == this.asycudadocumentitem.DutyLiability) return;
				this.asycudadocumentitem.DutyLiability = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DutyLiability");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Total_CIF_itm
		{ 
		    get { return this.asycudadocumentitem.Total_CIF_itm; }
			set
			{
			    if (value == this.asycudadocumentitem.Total_CIF_itm) return;
				this.asycudadocumentitem.Total_CIF_itm = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Total_CIF_itm");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Freight
		{ 
		    get { return this.asycudadocumentitem.Freight; }
			set
			{
			    if (value == this.asycudadocumentitem.Freight) return;
				this.asycudadocumentitem.Freight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Freight");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Statistical_value
		{ 
		    get { return this.asycudadocumentitem.Statistical_value; }
			set
			{
			    if (value == this.asycudadocumentitem.Statistical_value) return;
				this.asycudadocumentitem.Statistical_value = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Statistical_value");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> DPQtyAllocated
		{ 
		    get { return this.asycudadocumentitem.DPQtyAllocated; }
			set
			{
			    if (value == this.asycudadocumentitem.DPQtyAllocated) return;
				this.asycudadocumentitem.DPQtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DPQtyAllocated");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> DFQtyAllocated
		{ 
		    get { return this.asycudadocumentitem.DFQtyAllocated; }
			set
			{
			    if (value == this.asycudadocumentitem.DFQtyAllocated) return;
				this.asycudadocumentitem.DFQtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DFQtyAllocated");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> PiQuantity
		{ 
		    get { return this.asycudadocumentitem.PiQuantity; }
			set
			{
			    if (value == this.asycudadocumentitem.PiQuantity) return;
				this.asycudadocumentitem.PiQuantity = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PiQuantity");
			}
		}
     

       
       
public Nullable<bool> ImportComplete
		{ 
		    get { return this.asycudadocumentitem.ImportComplete; }
			set
			{
			    if (value == this.asycudadocumentitem.ImportComplete) return;
				this.asycudadocumentitem.ImportComplete = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ImportComplete");
			}
		}
     

       
       
                
                [MaxLength(20, ErrorMessage = "CNumber has a max length of 20 letters ")]
public string CNumber
		{ 
		    get { return this.asycudadocumentitem.CNumber; }
			set
			{
			    if (value == this.asycudadocumentitem.CNumber) return;
				this.asycudadocumentitem.CNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CNumber");
			}
		}
     

       
       
public Nullable<System.DateTime> RegistrationDate
		{ 
		    get { return this.asycudadocumentitem.RegistrationDate; }
			set
			{
			    if (value == this.asycudadocumentitem.RegistrationDate) return;
				this.asycudadocumentitem.RegistrationDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegistrationDate");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Number_of_packages
		{ 
		    get { return this.asycudadocumentitem.Number_of_packages; }
			set
			{
			    if (value == this.asycudadocumentitem.Number_of_packages) return;
				this.asycudadocumentitem.Number_of_packages = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Number_of_packages");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Country_of_origin_code has a max length of 50 letters ")]
public string Country_of_origin_code
		{ 
		    get { return this.asycudadocumentitem.Country_of_origin_code; }
			set
			{
			    if (value == this.asycudadocumentitem.Country_of_origin_code) return;
				this.asycudadocumentitem.Country_of_origin_code = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Country_of_origin_code");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> PiWeight
		{ 
		    get { return this.asycudadocumentitem.PiWeight; }
			set
			{
			    if (value == this.asycudadocumentitem.PiWeight) return;
				this.asycudadocumentitem.PiWeight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PiWeight");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Currency_rate
		{ 
		    get { return this.asycudadocumentitem.Currency_rate; }
			set
			{
			    if (value == this.asycudadocumentitem.Currency_rate) return;
				this.asycudadocumentitem.Currency_rate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Currency_rate");
			}
		}
     

       
       
                
                [MaxLength(20, ErrorMessage = "Currency_code has a max length of 20 letters ")]
public string Currency_code
		{ 
		    get { return this.asycudadocumentitem.Currency_code; }
			set
			{
			    if (value == this.asycudadocumentitem.Currency_code) return;
				this.asycudadocumentitem.Currency_code = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Currency_code");
			}
		}
     

       
       
public Nullable<bool> InvalidHSCode
		{ 
		    get { return this.asycudadocumentitem.InvalidHSCode; }
			set
			{
			    if (value == this.asycudadocumentitem.InvalidHSCode) return;
				this.asycudadocumentitem.InvalidHSCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvalidHSCode");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "WarehouseError has a max length of 50 letters ")]
public string WarehouseError
		{ 
		    get { return this.asycudadocumentitem.WarehouseError; }
			set
			{
			    if (value == this.asycudadocumentitem.WarehouseError) return;
				this.asycudadocumentitem.WarehouseError = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("WarehouseError");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Cancelled is required")]
       
public bool Cancelled
		{ 
		    get { return this.asycudadocumentitem.Cancelled; }
			set
			{
			    if (value == this.asycudadocumentitem.Cancelled) return;
				this.asycudadocumentitem.Cancelled = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Cancelled");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> SalesFactor
		{ 
		    get { return this.asycudadocumentitem.SalesFactor; }
			set
			{
			    if (value == this.asycudadocumentitem.SalesFactor) return;
				this.asycudadocumentitem.SalesFactor = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SalesFactor");
			}
		}
     

       
       
                
                [MaxLength(30, ErrorMessage = "ReferenceNumber has a max length of 30 letters ")]
public string ReferenceNumber
		{ 
		    get { return this.asycudadocumentitem.ReferenceNumber; }
			set
			{
			    if (value == this.asycudadocumentitem.ReferenceNumber) return;
				this.asycudadocumentitem.ReferenceNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReferenceNumber");
			}
		}
     

       
       
public Nullable<System.DateTime> ExpiryDate
		{ 
		    get { return this.asycudadocumentitem.ExpiryDate; }
			set
			{
			    if (value == this.asycudadocumentitem.ExpiryDate) return;
				this.asycudadocumentitem.ExpiryDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ExpiryDate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceNumber has a max length of 50 letters ")]
public string PreviousInvoiceNumber
		{ 
		    get { return this.asycudadocumentitem.PreviousInvoiceNumber; }
			set
			{
			    if (value == this.asycudadocumentitem.PreviousInvoiceNumber) return;
				this.asycudadocumentitem.PreviousInvoiceNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceNumber");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceLineNumber has a max length of 50 letters ")]
public string PreviousInvoiceLineNumber
		{ 
		    get { return this.asycudadocumentitem.PreviousInvoiceLineNumber; }
			set
			{
			    if (value == this.asycudadocumentitem.PreviousInvoiceLineNumber) return;
				this.asycudadocumentitem.PreviousInvoiceLineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceLineNumber");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceItemNumber has a max length of 50 letters ")]
public string PreviousInvoiceItemNumber
		{ 
		    get { return this.asycudadocumentitem.PreviousInvoiceItemNumber; }
			set
			{
			    if (value == this.asycudadocumentitem.PreviousInvoiceItemNumber) return;
				this.asycudadocumentitem.PreviousInvoiceItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceItemNumber");
			}
		}
     

       
       
public Nullable<int> ApplicationSettingsId
		{ 
		    get { return this.asycudadocumentitem.ApplicationSettingsId; }
			set
			{
			    if (value == this.asycudadocumentitem.ApplicationSettingsId) return;
				this.asycudadocumentitem.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       
       
public Nullable<int> InventoryItemId
		{ 
		    get { return this.asycudadocumentitem.InventoryItemId; }
			set
			{
			    if (value == this.asycudadocumentitem.InventoryItemId) return;
				this.asycudadocumentitem.InventoryItemId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InventoryItemId");
			}
		}
     

       
       
                
                [MaxLength(41, ErrorMessage = "CustomsProcedure has a max length of 41 letters ")]
public string CustomsProcedure
		{ 
		    get { return this.asycudadocumentitem.CustomsProcedure; }
			set
			{
			    if (value == this.asycudadocumentitem.CustomsProcedure) return;
				this.asycudadocumentitem.CustomsProcedure = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CustomsProcedure");
			}
		}
     

       
       
public Nullable<System.DateTime> AssessmentDate
		{ 
		    get { return this.asycudadocumentitem.AssessmentDate; }
			set
			{
			    if (value == this.asycudadocumentitem.AssessmentDate) return;
				this.asycudadocumentitem.AssessmentDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AssessmentDate");
			}
		}
     

       private AsycudaDocument _AsycudaDocument;
        public  AsycudaDocument AsycudaDocument
		{
		    get
               { 
                  if (this.asycudadocumentitem != null)
                   {
                       if (_AsycudaDocument != null)
                       {
                           if (this.asycudadocumentitem.AsycudaDocument !=
                               _AsycudaDocument.DTO)
                           {
                                if (this.asycudadocumentitem.AsycudaDocument  != null)
                               _AsycudaDocument = new AsycudaDocument(this.asycudadocumentitem.AsycudaDocument);
                           }
                       }
                       else
                       {
                             if (this.asycudadocumentitem.AsycudaDocument  != null)
                           _AsycudaDocument = new AsycudaDocument(this.asycudadocumentitem.AsycudaDocument);
                       }
                   }


             //       if (_AsycudaDocument != null) return _AsycudaDocument;
                       
             //       var i = new AsycudaDocument(){TrackingState = TrackingState.Added};
			//		//if (this.asycudadocumentitem.AsycudaDocument == null) Debugger.Break();
			//		if (this.asycudadocumentitem.AsycudaDocument != null)
            //        {
            //           i. = this.asycudadocumentitem.AsycudaDocument;
            //        }
            //        else
            //        {
            //            this.asycudadocumentitem.AsycudaDocument = i.;
             //       }
                           
            //        _AsycudaDocument = i;
                     
                    return _AsycudaDocument;
               }
			set
			{
			    if (value == _AsycudaDocument) return;
                _AsycudaDocument = value;
                if(value != null)
                     this.asycudadocumentitem.AsycudaDocument = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("AsycudaDocument");
			}
		}
        

        ObservableCollection<SubItems> _SubItems = null;
        public  ObservableCollection<SubItems> SubItems
		{
            
		    get 
				{ 
					if(_SubItems != null) return _SubItems;
					//if (this.asycudadocumentitem.SubItems == null) Debugger.Break();
					if(this.asycudadocumentitem.SubItems != null)
					{
						_SubItems = new ObservableCollection<SubItems>(this.asycudadocumentitem.SubItems.Select(x => new SubItems(x)));
					}
					
						_SubItems.CollectionChanged += SubItems_CollectionChanged; 
					
					return _SubItems; 
				}
			set
			{
			    if (Equals(value, _SubItems)) return;
				if (value != null)
					this.asycudadocumentitem.SubItems = new ChangeTrackingCollection<DTO.SubItems>(value.Select(x => x.DTO).ToList());
                _SubItems = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_SubItems != null)
				_SubItems.CollectionChanged += SubItems_CollectionChanged;               
				NotifyPropertyChanged("SubItems");
			}
		}
        
        void SubItems_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (SubItems itm in e.NewItems)
                    {
                        if (itm != null)
                        asycudadocumentitem.SubItems.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (SubItems itm in e.OldItems)
                    {
                        if (itm != null)
                        asycudadocumentitem.SubItems.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<EntryPreviousItems> _PreviousItems = null;
        public  ObservableCollection<EntryPreviousItems> PreviousItems
		{
            
		    get 
				{ 
					if(_PreviousItems != null) return _PreviousItems;
					//if (this.asycudadocumentitem.PreviousItems == null) Debugger.Break();
					if(this.asycudadocumentitem.PreviousItems != null)
					{
						_PreviousItems = new ObservableCollection<EntryPreviousItems>(this.asycudadocumentitem.PreviousItems.Select(x => new EntryPreviousItems(x)));
					}
					
						_PreviousItems.CollectionChanged += PreviousItems_CollectionChanged; 
					
					return _PreviousItems; 
				}
			set
			{
			    if (Equals(value, _PreviousItems)) return;
				if (value != null)
					this.asycudadocumentitem.PreviousItems = new ChangeTrackingCollection<DTO.EntryPreviousItems>(value.Select(x => x.DTO).ToList());
                _PreviousItems = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_PreviousItems != null)
				_PreviousItems.CollectionChanged += PreviousItems_CollectionChanged;               
				NotifyPropertyChanged("PreviousItems");
			}
		}
        
        void PreviousItems_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (EntryPreviousItems itm in e.NewItems)
                    {
                        if (itm != null)
                        asycudadocumentitem.PreviousItems.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (EntryPreviousItems itm in e.OldItems)
                    {
                        if (itm != null)
                        asycudadocumentitem.PreviousItems.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<xcuda_Supplementary_unit> _xcuda_Supplementary_unit = null;
        public  ObservableCollection<xcuda_Supplementary_unit> xcuda_Supplementary_unit
		{
            
		    get 
				{ 
					if(_xcuda_Supplementary_unit != null) return _xcuda_Supplementary_unit;
					//if (this.asycudadocumentitem.xcuda_Supplementary_unit == null) Debugger.Break();
					if(this.asycudadocumentitem.xcuda_Supplementary_unit != null)
					{
						_xcuda_Supplementary_unit = new ObservableCollection<xcuda_Supplementary_unit>(this.asycudadocumentitem.xcuda_Supplementary_unit.Select(x => new xcuda_Supplementary_unit(x)));
					}
					
						_xcuda_Supplementary_unit.CollectionChanged += xcuda_Supplementary_unit_CollectionChanged; 
					
					return _xcuda_Supplementary_unit; 
				}
			set
			{
			    if (Equals(value, _xcuda_Supplementary_unit)) return;
				if (value != null)
					this.asycudadocumentitem.xcuda_Supplementary_unit = new ChangeTrackingCollection<DTO.xcuda_Supplementary_unit>(value.Select(x => x.DTO).ToList());
                _xcuda_Supplementary_unit = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_xcuda_Supplementary_unit != null)
				_xcuda_Supplementary_unit.CollectionChanged += xcuda_Supplementary_unit_CollectionChanged;               
				NotifyPropertyChanged("xcuda_Supplementary_unit");
			}
		}
        
        void xcuda_Supplementary_unit_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (xcuda_Supplementary_unit itm in e.NewItems)
                    {
                        if (itm != null)
                        asycudadocumentitem.xcuda_Supplementary_unit.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (xcuda_Supplementary_unit itm in e.OldItems)
                    {
                        if (itm != null)
                        asycudadocumentitem.xcuda_Supplementary_unit.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AsycudaDocumentItemEntryDataDetails> _AsycudaDocumentItemEntryDataDetails = null;
        public  ObservableCollection<AsycudaDocumentItemEntryDataDetails> AsycudaDocumentItemEntryDataDetails
		{
            
		    get 
				{ 
					if(_AsycudaDocumentItemEntryDataDetails != null) return _AsycudaDocumentItemEntryDataDetails;
					//if (this.asycudadocumentitem.AsycudaDocumentItemEntryDataDetails == null) Debugger.Break();
					if(this.asycudadocumentitem.AsycudaDocumentItemEntryDataDetails != null)
					{
						_AsycudaDocumentItemEntryDataDetails = new ObservableCollection<AsycudaDocumentItemEntryDataDetails>(this.asycudadocumentitem.AsycudaDocumentItemEntryDataDetails.Select(x => new AsycudaDocumentItemEntryDataDetails(x)));
					}
					
						_AsycudaDocumentItemEntryDataDetails.CollectionChanged += AsycudaDocumentItemEntryDataDetails_CollectionChanged; 
					
					return _AsycudaDocumentItemEntryDataDetails; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentItemEntryDataDetails)) return;
				if (value != null)
					this.asycudadocumentitem.AsycudaDocumentItemEntryDataDetails = new ChangeTrackingCollection<DTO.AsycudaDocumentItemEntryDataDetails>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentItemEntryDataDetails = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentItemEntryDataDetails != null)
				_AsycudaDocumentItemEntryDataDetails.CollectionChanged += AsycudaDocumentItemEntryDataDetails_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentItemEntryDataDetails");
			}
		}
        
        void AsycudaDocumentItemEntryDataDetails_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentItemEntryDataDetails itm in e.NewItems)
                    {
                        if (itm != null)
                        asycudadocumentitem.AsycudaDocumentItemEntryDataDetails.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentItemEntryDataDetails itm in e.OldItems)
                    {
                        if (itm != null)
                        asycudadocumentitem.AsycudaDocumentItemEntryDataDetails.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private ApplicationSettings _ApplicationSettings;
        public  ApplicationSettings ApplicationSettings
		{
		    get
               { 
                  if (this.asycudadocumentitem != null)
                   {
                       if (_ApplicationSettings != null)
                       {
                           if (this.asycudadocumentitem.ApplicationSettings !=
                               _ApplicationSettings.DTO)
                           {
                                if (this.asycudadocumentitem.ApplicationSettings  != null)
                               _ApplicationSettings = new ApplicationSettings(this.asycudadocumentitem.ApplicationSettings);
                           }
                       }
                       else
                       {
                             if (this.asycudadocumentitem.ApplicationSettings  != null)
                           _ApplicationSettings = new ApplicationSettings(this.asycudadocumentitem.ApplicationSettings);
                       }
                   }


             //       if (_ApplicationSettings != null) return _ApplicationSettings;
                       
             //       var i = new ApplicationSettings(){TrackingState = TrackingState.Added};
			//		//if (this.asycudadocumentitem.ApplicationSettings == null) Debugger.Break();
			//		if (this.asycudadocumentitem.ApplicationSettings != null)
            //        {
            //           i. = this.asycudadocumentitem.ApplicationSettings;
            //        }
            //        else
            //        {
            //            this.asycudadocumentitem.ApplicationSettings = i.;
             //       }
                           
            //        _ApplicationSettings = i;
                     
                    return _ApplicationSettings;
               }
			set
			{
			    if (value == _ApplicationSettings) return;
                _ApplicationSettings = value;
                if(value != null)
                     this.asycudadocumentitem.ApplicationSettings = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("ApplicationSettings");
			}
		}
        

       private InventoryItemX _InventoryItemsEx;
        public  InventoryItemX InventoryItemsEx
		{
		    get
               { 
                  if (this.asycudadocumentitem != null)
                   {
                       if (_InventoryItemsEx != null)
                       {
                           if (this.asycudadocumentitem.InventoryItemsEx !=
                               _InventoryItemsEx.DTO)
                           {
                                if (this.asycudadocumentitem.InventoryItemsEx  != null)
                               _InventoryItemsEx = new InventoryItemX(this.asycudadocumentitem.InventoryItemsEx);
                           }
                       }
                       else
                       {
                             if (this.asycudadocumentitem.InventoryItemsEx  != null)
                           _InventoryItemsEx = new InventoryItemX(this.asycudadocumentitem.InventoryItemsEx);
                       }
                   }


             //       if (_InventoryItemsEx != null) return _InventoryItemsEx;
                       
             //       var i = new InventoryItemX(){TrackingState = TrackingState.Added};
			//		//if (this.asycudadocumentitem.InventoryItemsEx == null) Debugger.Break();
			//		if (this.asycudadocumentitem.InventoryItemsEx != null)
            //        {
            //           i. = this.asycudadocumentitem.InventoryItemsEx;
            //        }
            //        else
            //        {
            //            this.asycudadocumentitem.InventoryItemsEx = i.;
             //       }
                           
            //        _InventoryItemsEx = i;
                     
                    return _InventoryItemsEx;
               }
			set
			{
			    if (value == _InventoryItemsEx) return;
                _InventoryItemsEx = value;
                if(value != null)
                     this.asycudadocumentitem.InventoryItemsEx = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("InventoryItemsEx");
			}
		}
        


        ChangeTrackingCollection<DTO.AsycudaDocumentItem> _changeTracker;    
        public ChangeTrackingCollection<DTO.AsycudaDocumentItem> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



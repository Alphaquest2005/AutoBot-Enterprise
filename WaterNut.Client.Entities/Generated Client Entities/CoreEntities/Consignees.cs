// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class Consignees: BaseEntity<Consignees>
    {
        DTO.Consignees consignees;
        public Consignees(DTO.Consignees dto )
        {
              consignees = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Consignees>(consignees);

        }

        public DTO.Consignees DTO
        {
            get
            {
             return consignees;
            }
            set
            {
                consignees = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "ConsigneeName is required")]
       
                
                [MaxLength(100, ErrorMessage = "ConsigneeName has a max length of 100 letters ")]
public string ConsigneeName
		{ 
		    get { return this.consignees.ConsigneeName; }
			set
			{
			    if (value == this.consignees.ConsigneeName) return;
				this.consignees.ConsigneeName = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ConsigneeName");
			}
		}
     

       
       
                
                [MaxLength(100, ErrorMessage = "ConsigneeCode has a max length of 100 letters ")]
public string ConsigneeCode
		{ 
		    get { return this.consignees.ConsigneeCode; }
			set
			{
			    if (value == this.consignees.ConsigneeCode) return;
				this.consignees.ConsigneeCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ConsigneeCode");
			}
		}
     

       
       
                
                [MaxLength(300, ErrorMessage = "Address has a max length of 300 letters ")]
public string Address
		{ 
		    get { return this.consignees.Address; }
			set
			{
			    if (value == this.consignees.Address) return;
				this.consignees.Address = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Address");
			}
		}
     

       
       
                
                [MaxLength(3, ErrorMessage = "CountryCode has a max length of 3 letters ")]
public string CountryCode
		{ 
		    get { return this.consignees.CountryCode; }
			set
			{
			    if (value == this.consignees.CountryCode) return;
				this.consignees.CountryCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CountryCode");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.consignees.ApplicationSettingsId; }
			set
			{
			    if (value == this.consignees.ApplicationSettingsId) return;
				this.consignees.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

        ObservableCollection<AsycudaDocumentSet> _AsycudaDocumentSet = null;
        public  ObservableCollection<AsycudaDocumentSet> AsycudaDocumentSet
		{
            
		    get 
				{ 
					if(_AsycudaDocumentSet != null) return _AsycudaDocumentSet;
					//if (this.consignees.AsycudaDocumentSet == null) Debugger.Break();
					if(this.consignees.AsycudaDocumentSet != null)
					{
						_AsycudaDocumentSet = new ObservableCollection<AsycudaDocumentSet>(this.consignees.AsycudaDocumentSet.Select(x => new AsycudaDocumentSet(x)));
					}
					
						_AsycudaDocumentSet.CollectionChanged += AsycudaDocumentSet_CollectionChanged; 
					
					return _AsycudaDocumentSet; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentSet)) return;
				if (value != null)
					this.consignees.AsycudaDocumentSet = new ChangeTrackingCollection<DTO.AsycudaDocumentSet>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentSet = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentSet != null)
				_AsycudaDocumentSet.CollectionChanged += AsycudaDocumentSet_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentSet");
			}
		}
        
        void AsycudaDocumentSet_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentSet itm in e.NewItems)
                    {
                        if (itm != null)
                        consignees.AsycudaDocumentSet.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentSet itm in e.OldItems)
                    {
                        if (itm != null)
                        consignees.AsycudaDocumentSet.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.Consignees> _changeTracker;    
        public ChangeTrackingCollection<DTO.Consignees> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;


using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class ExpiredEntriesLst: BaseEntity<ExpiredEntriesLst>
    {
        DTO.ExpiredEntriesLst expiredentrieslst;
        public ExpiredEntriesLst(DTO.ExpiredEntriesLst dto )
        {
              expiredentrieslst = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.ExpiredEntriesLst>(expiredentrieslst);

        }

        public DTO.ExpiredEntriesLst DTO
        {
            get
            {
             return expiredentrieslst;
            }
            set
            {
                expiredentrieslst = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.expiredentrieslst.Id; }
			set
			{
			    if (value == this.expiredentrieslst.Id) return;
				this.expiredentrieslst.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Office is required")]
       
                
                [MaxLength(50, ErrorMessage = "Office has a max length of 50 letters ")]
public string Office
		{ 
		    get { return this.expiredentrieslst.Office; }
			set
			{
			    if (value == this.expiredentrieslst.Office) return;
				this.expiredentrieslst.Office = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Office");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "GeneraProcedure is required")]
       
                
                [MaxLength(1, ErrorMessage = "GeneraProcedure has a max length of 1 letters ")]
public string GeneraProcedure
		{ 
		    get { return this.expiredentrieslst.GeneraProcedure; }
			set
			{
			    if (value == this.expiredentrieslst.GeneraProcedure) return;
				this.expiredentrieslst.GeneraProcedure = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("GeneraProcedure");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "RegistrationSerial is required")]
       
                
                [MaxLength(1, ErrorMessage = "RegistrationSerial has a max length of 1 letters ")]
public string RegistrationSerial
		{ 
		    get { return this.expiredentrieslst.RegistrationSerial; }
			set
			{
			    if (value == this.expiredentrieslst.RegistrationSerial) return;
				this.expiredentrieslst.RegistrationSerial = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegistrationSerial");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "RegistrationNumber is required")]
       
                
                [MaxLength(8, ErrorMessage = "RegistrationNumber has a max length of 8 letters ")]
public string RegistrationNumber
		{ 
		    get { return this.expiredentrieslst.RegistrationNumber; }
			set
			{
			    if (value == this.expiredentrieslst.RegistrationNumber) return;
				this.expiredentrieslst.RegistrationNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegistrationNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "RegistrationDate is required")]
       
                
                [MaxLength(50, ErrorMessage = "RegistrationDate has a max length of 50 letters ")]
public string RegistrationDate
		{ 
		    get { return this.expiredentrieslst.RegistrationDate; }
			set
			{
			    if (value == this.expiredentrieslst.RegistrationDate) return;
				this.expiredentrieslst.RegistrationDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegistrationDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "AssessmentSerial is required")]
       
                
                [MaxLength(1, ErrorMessage = "AssessmentSerial has a max length of 1 letters ")]
public string AssessmentSerial
		{ 
		    get { return this.expiredentrieslst.AssessmentSerial; }
			set
			{
			    if (value == this.expiredentrieslst.AssessmentSerial) return;
				this.expiredentrieslst.AssessmentSerial = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AssessmentSerial");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "AssessmentNumber is required")]
       
                
                [MaxLength(8, ErrorMessage = "AssessmentNumber has a max length of 8 letters ")]
public string AssessmentNumber
		{ 
		    get { return this.expiredentrieslst.AssessmentNumber; }
			set
			{
			    if (value == this.expiredentrieslst.AssessmentNumber) return;
				this.expiredentrieslst.AssessmentNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AssessmentNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "AssessmentDate is required")]
       
                
                [MaxLength(50, ErrorMessage = "AssessmentDate has a max length of 50 letters ")]
public string AssessmentDate
		{ 
		    get { return this.expiredentrieslst.AssessmentDate; }
			set
			{
			    if (value == this.expiredentrieslst.AssessmentDate) return;
				this.expiredentrieslst.AssessmentDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AssessmentDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DeclarantCode is required")]
       
                
                [MaxLength(50, ErrorMessage = "DeclarantCode has a max length of 50 letters ")]
public string DeclarantCode
		{ 
		    get { return this.expiredentrieslst.DeclarantCode; }
			set
			{
			    if (value == this.expiredentrieslst.DeclarantCode) return;
				this.expiredentrieslst.DeclarantCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DeclarantCode");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DeclarantReference is required")]
       
                
                [MaxLength(50, ErrorMessage = "DeclarantReference has a max length of 50 letters ")]
public string DeclarantReference
		{ 
		    get { return this.expiredentrieslst.DeclarantReference; }
			set
			{
			    if (value == this.expiredentrieslst.DeclarantReference) return;
				this.expiredentrieslst.DeclarantReference = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DeclarantReference");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Exporter has a max length of 50 letters ")]
public string Exporter
		{ 
		    get { return this.expiredentrieslst.Exporter; }
			set
			{
			    if (value == this.expiredentrieslst.Exporter) return;
				this.expiredentrieslst.Exporter = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Exporter");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Consignee has a max length of 50 letters ")]
public string Consignee
		{ 
		    get { return this.expiredentrieslst.Consignee; }
			set
			{
			    if (value == this.expiredentrieslst.Consignee) return;
				this.expiredentrieslst.Consignee = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Consignee");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Expiration is required")]
       
                
                [MaxLength(50, ErrorMessage = "Expiration has a max length of 50 letters ")]
public string Expiration
		{ 
		    get { return this.expiredentrieslst.Expiration; }
			set
			{
			    if (value == this.expiredentrieslst.Expiration) return;
				this.expiredentrieslst.Expiration = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Expiration");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.expiredentrieslst.ApplicationSettingsId; }
			set
			{
			    if (value == this.expiredentrieslst.ApplicationSettingsId) return;
				this.expiredentrieslst.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     


        ChangeTrackingCollection<DTO.ExpiredEntriesLst> _changeTracker;    
        public ChangeTrackingCollection<DTO.ExpiredEntriesLst> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



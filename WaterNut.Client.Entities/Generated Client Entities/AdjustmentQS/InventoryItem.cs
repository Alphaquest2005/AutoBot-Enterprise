// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using AdjustmentQS.Client.DTO;


using Core.Common.Validation;

namespace AdjustmentQS.Client.Entities
{
       public partial class InventoryItem: BaseEntity<InventoryItem>
    {
        DTO.InventoryItem inventoryitem;
        public InventoryItem(DTO.InventoryItem dto )
        {
              inventoryitem = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.InventoryItem>(inventoryitem);

        }

        public DTO.InventoryItem DTO
        {
            get
            {
             return inventoryitem;
            }
            set
            {
                inventoryitem = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(20, ErrorMessage = "ItemNumber has a max length of 20 letters ")]
public string ItemNumber
		{ 
		    get { return this.inventoryitem.ItemNumber; }
			set
			{
			    if (value == this.inventoryitem.ItemNumber) return;
				this.inventoryitem.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Description is required")]
       
                
                [MaxLength(255, ErrorMessage = "Description has a max length of 255 letters ")]
public string Description
		{ 
		    get { return this.inventoryitem.Description; }
			set
			{
			    if (value == this.inventoryitem.Description) return;
				this.inventoryitem.Description = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description");
			}
		}
     

       
       
                
                [MaxLength(60, ErrorMessage = "Category has a max length of 60 letters ")]
public string Category
		{ 
		    get { return this.inventoryitem.Category; }
			set
			{
			    if (value == this.inventoryitem.Category) return;
				this.inventoryitem.Category = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Category");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "TariffCode has a max length of 50 letters ")]
public string TariffCode
		{ 
		    get { return this.inventoryitem.TariffCode; }
			set
			{
			    if (value == this.inventoryitem.TariffCode) return;
				this.inventoryitem.TariffCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCode");
			}
		}
     

       
       
public Nullable<System.DateTime> EntryTimeStamp
		{ 
		    get { return this.inventoryitem.EntryTimeStamp; }
			set
			{
			    if (value == this.inventoryitem.EntryTimeStamp) return;
				this.inventoryitem.EntryTimeStamp = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryTimeStamp");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.inventoryitem.ApplicationSettingsId; }
			set
			{
			    if (value == this.inventoryitem.ApplicationSettingsId) return;
				this.inventoryitem.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

        ObservableCollection<AdjustmentOver> _AdjustmentOvers = null;
        public  ObservableCollection<AdjustmentOver> AdjustmentOvers
		{
            
		    get 
				{ 
					if(_AdjustmentOvers != null) return _AdjustmentOvers;
					//if (this.inventoryitem.AdjustmentOvers == null) Debugger.Break();
					if(this.inventoryitem.AdjustmentOvers != null)
					{
						_AdjustmentOvers = new ObservableCollection<AdjustmentOver>(this.inventoryitem.AdjustmentOvers.Select(x => new AdjustmentOver(x)));
					}
					
						_AdjustmentOvers.CollectionChanged += AdjustmentOvers_CollectionChanged; 
					
					return _AdjustmentOvers; 
				}
			set
			{
			    if (Equals(value, _AdjustmentOvers)) return;
				if (value != null)
					this.inventoryitem.AdjustmentOvers = new ChangeTrackingCollection<DTO.AdjustmentOver>(value.Select(x => x.DTO).ToList());
                _AdjustmentOvers = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AdjustmentOvers != null)
				_AdjustmentOvers.CollectionChanged += AdjustmentOvers_CollectionChanged;               
				NotifyPropertyChanged("AdjustmentOvers");
			}
		}
        
        void AdjustmentOvers_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AdjustmentOver itm in e.NewItems)
                    {
                        if (itm != null)
                        inventoryitem.AdjustmentOvers.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AdjustmentOver itm in e.OldItems)
                    {
                        if (itm != null)
                        inventoryitem.AdjustmentOvers.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<EntryDataDetail> _EntryDataDetails = null;
        public  ObservableCollection<EntryDataDetail> EntryDataDetails
		{
            
		    get 
				{ 
					if(_EntryDataDetails != null) return _EntryDataDetails;
					//if (this.inventoryitem.EntryDataDetails == null) Debugger.Break();
					if(this.inventoryitem.EntryDataDetails != null)
					{
						_EntryDataDetails = new ObservableCollection<EntryDataDetail>(this.inventoryitem.EntryDataDetails.Select(x => new EntryDataDetail(x)));
					}
					
						_EntryDataDetails.CollectionChanged += EntryDataDetails_CollectionChanged; 
					
					return _EntryDataDetails; 
				}
			set
			{
			    if (Equals(value, _EntryDataDetails)) return;
				if (value != null)
					this.inventoryitem.EntryDataDetails = new ChangeTrackingCollection<DTO.EntryDataDetail>(value.Select(x => x.DTO).ToList());
                _EntryDataDetails = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_EntryDataDetails != null)
				_EntryDataDetails.CollectionChanged += EntryDataDetails_CollectionChanged;               
				NotifyPropertyChanged("EntryDataDetails");
			}
		}
        
        void EntryDataDetails_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (EntryDataDetail itm in e.NewItems)
                    {
                        if (itm != null)
                        inventoryitem.EntryDataDetails.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (EntryDataDetail itm in e.OldItems)
                    {
                        if (itm != null)
                        inventoryitem.EntryDataDetails.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<InventoryItemAlia> _InventoryItemAlias = null;
        public  ObservableCollection<InventoryItemAlia> InventoryItemAlias
		{
            
		    get 
				{ 
					if(_InventoryItemAlias != null) return _InventoryItemAlias;
					//if (this.inventoryitem.InventoryItemAlias == null) Debugger.Break();
					if(this.inventoryitem.InventoryItemAlias != null)
					{
						_InventoryItemAlias = new ObservableCollection<InventoryItemAlia>(this.inventoryitem.InventoryItemAlias.Select(x => new InventoryItemAlia(x)));
					}
					
						_InventoryItemAlias.CollectionChanged += InventoryItemAlias_CollectionChanged; 
					
					return _InventoryItemAlias; 
				}
			set
			{
			    if (Equals(value, _InventoryItemAlias)) return;
				if (value != null)
					this.inventoryitem.InventoryItemAlias = new ChangeTrackingCollection<DTO.InventoryItemAlia>(value.Select(x => x.DTO).ToList());
                _InventoryItemAlias = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_InventoryItemAlias != null)
				_InventoryItemAlias.CollectionChanged += InventoryItemAlias_CollectionChanged;               
				NotifyPropertyChanged("InventoryItemAlias");
			}
		}
        
        void InventoryItemAlias_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (InventoryItemAlia itm in e.NewItems)
                    {
                        if (itm != null)
                        inventoryitem.InventoryItemAlias.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (InventoryItemAlia itm in e.OldItems)
                    {
                        if (itm != null)
                        inventoryitem.InventoryItemAlias.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.InventoryItem> _changeTracker;    
        public ChangeTrackingCollection<DTO.InventoryItem> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



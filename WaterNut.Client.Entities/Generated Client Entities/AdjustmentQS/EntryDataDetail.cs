// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using AdjustmentQS.Client.DTO;


using Core.Common.Validation;

namespace AdjustmentQS.Client.Entities
{
       public partial class EntryDataDetail: BaseEntity<EntryDataDetail>
    {
        DTO.EntryDataDetail entrydatadetail;
        public EntryDataDetail(DTO.EntryDataDetail dto )
        {
              entrydatadetail = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.EntryDataDetail>(entrydatadetail);

        }

        public DTO.EntryDataDetail DTO
        {
            get
            {
             return entrydatadetail;
            }
            set
            {
                entrydatadetail = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "EntryDataDetails is required")]
       
public int EntryDataDetailsId
		{ 
		    get { return this.entrydatadetail.EntryDataDetailsId; }
			set
			{
			    if (value == this.entrydatadetail.EntryDataDetailsId) return;
				this.entrydatadetail.EntryDataDetailsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataDetailsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryData is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntryDataId has a max length of 50 letters ")]
public string EntryDataId
		{ 
		    get { return this.entrydatadetail.EntryDataId; }
			set
			{
			    if (value == this.entrydatadetail.EntryDataId) return;
				this.entrydatadetail.EntryDataId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataId");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> LineNumber
		{ 
		    get { return this.entrydatadetail.LineNumber; }
			set
			{
			    if (value == this.entrydatadetail.LineNumber) return;
				this.entrydatadetail.LineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(20, ErrorMessage = "ItemNumber has a max length of 20 letters ")]
public string ItemNumber
		{ 
		    get { return this.entrydatadetail.ItemNumber; }
			set
			{
			    if (value == this.entrydatadetail.ItemNumber) return;
				this.entrydatadetail.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Quantity is required")]
       [NumberValidationAttribute]
public double Quantity
		{ 
		    get { return this.entrydatadetail.Quantity; }
			set
			{
			    if (value == this.entrydatadetail.Quantity) return;
				this.entrydatadetail.Quantity = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Quantity");
			}
		}
     

       
       
                
                [MaxLength(15, ErrorMessage = "Units has a max length of 15 letters ")]
public string Units
		{ 
		    get { return this.entrydatadetail.Units; }
			set
			{
			    if (value == this.entrydatadetail.Units) return;
				this.entrydatadetail.Units = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Units");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemDescription is required")]
       
                
                [MaxLength(255, ErrorMessage = "ItemDescription has a max length of 255 letters ")]
public string ItemDescription
		{ 
		    get { return this.entrydatadetail.ItemDescription; }
			set
			{
			    if (value == this.entrydatadetail.ItemDescription) return;
				this.entrydatadetail.ItemDescription = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemDescription");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Cost is required")]
       [NumberValidationAttribute]
public double Cost
		{ 
		    get { return this.entrydatadetail.Cost; }
			set
			{
			    if (value == this.entrydatadetail.Cost) return;
				this.entrydatadetail.Cost = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Cost");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "QtyAllocated is required")]
       [NumberValidationAttribute]
public double QtyAllocated
		{ 
		    get { return this.entrydatadetail.QtyAllocated; }
			set
			{
			    if (value == this.entrydatadetail.QtyAllocated) return;
				this.entrydatadetail.QtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("QtyAllocated");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "UnitWeight is required")]
       [NumberValidationAttribute]
public double UnitWeight
		{ 
		    get { return this.entrydatadetail.UnitWeight; }
			set
			{
			    if (value == this.entrydatadetail.UnitWeight) return;
				this.entrydatadetail.UnitWeight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("UnitWeight");
			}
		}
     

       
       
public Nullable<bool> DoNotAllocate
		{ 
		    get { return this.entrydatadetail.DoNotAllocate; }
			set
			{
			    if (value == this.entrydatadetail.DoNotAllocate) return;
				this.entrydatadetail.DoNotAllocate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotAllocate");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Freight
		{ 
		    get { return this.entrydatadetail.Freight; }
			set
			{
			    if (value == this.entrydatadetail.Freight) return;
				this.entrydatadetail.Freight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Freight");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Weight
		{ 
		    get { return this.entrydatadetail.Weight; }
			set
			{
			    if (value == this.entrydatadetail.Weight) return;
				this.entrydatadetail.Weight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Weight");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> InternalFreight
		{ 
		    get { return this.entrydatadetail.InternalFreight; }
			set
			{
			    if (value == this.entrydatadetail.InternalFreight) return;
				this.entrydatadetail.InternalFreight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InternalFreight");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Status has a max length of 50 letters ")]
public string Status
		{ 
		    get { return this.entrydatadetail.Status; }
			set
			{
			    if (value == this.entrydatadetail.Status) return;
				this.entrydatadetail.Status = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Status");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> InvoiceQty
		{ 
		    get { return this.entrydatadetail.InvoiceQty; }
			set
			{
			    if (value == this.entrydatadetail.InvoiceQty) return;
				this.entrydatadetail.InvoiceQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceQty");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> ReceivedQty
		{ 
		    get { return this.entrydatadetail.ReceivedQty; }
			set
			{
			    if (value == this.entrydatadetail.ReceivedQty) return;
				this.entrydatadetail.ReceivedQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReceivedQty");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceNumber has a max length of 50 letters ")]
public string PreviousInvoiceNumber
		{ 
		    get { return this.entrydatadetail.PreviousInvoiceNumber; }
			set
			{
			    if (value == this.entrydatadetail.PreviousInvoiceNumber) return;
				this.entrydatadetail.PreviousInvoiceNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceNumber");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "CNumber has a max length of 50 letters ")]
public string CNumber
		{ 
		    get { return this.entrydatadetail.CNumber; }
			set
			{
			    if (value == this.entrydatadetail.CNumber) return;
				this.entrydatadetail.CNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CNumber");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "Comment has a max length of 255 letters ")]
public string Comment
		{ 
		    get { return this.entrydatadetail.Comment; }
			set
			{
			    if (value == this.entrydatadetail.Comment) return;
				this.entrydatadetail.Comment = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Comment");
			}
		}
     

       
       
public Nullable<System.DateTime> EffectiveDate
		{ 
		    get { return this.entrydatadetail.EffectiveDate; }
			set
			{
			    if (value == this.entrydatadetail.EffectiveDate) return;
				this.entrydatadetail.EffectiveDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EffectiveDate");
			}
		}
     

       
       
public Nullable<bool> IsReconciled
		{ 
		    get { return this.entrydatadetail.IsReconciled; }
			set
			{
			    if (value == this.entrydatadetail.IsReconciled) return;
				this.entrydatadetail.IsReconciled = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsReconciled");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> TaxAmount
		{ 
		    get { return this.entrydatadetail.TaxAmount; }
			set
			{
			    if (value == this.entrydatadetail.TaxAmount) return;
				this.entrydatadetail.TaxAmount = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TaxAmount");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> LastCost
		{ 
		    get { return this.entrydatadetail.LastCost; }
			set
			{
			    if (value == this.entrydatadetail.LastCost) return;
				this.entrydatadetail.LastCost = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LastCost");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> TotalCost
		{ 
		    get { return this.entrydatadetail.TotalCost; }
			set
			{
			    if (value == this.entrydatadetail.TotalCost) return;
				this.entrydatadetail.TotalCost = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TotalCost");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InventoryItem is required")]
       
public int InventoryItemId
		{ 
		    get { return this.entrydatadetail.InventoryItemId; }
			set
			{
			    if (value == this.entrydatadetail.InventoryItemId) return;
				this.entrydatadetail.InventoryItemId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InventoryItemId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryData_ is required")]
       
public int EntryData_Id
		{ 
		    get { return this.entrydatadetail.EntryData_Id; }
			set
			{
			    if (value == this.entrydatadetail.EntryData_Id) return;
				this.entrydatadetail.EntryData_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryData_Id");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> FileLineNumber
		{ 
		    get { return this.entrydatadetail.FileLineNumber; }
			set
			{
			    if (value == this.entrydatadetail.FileLineNumber) return;
				this.entrydatadetail.FileLineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FileLineNumber");
			}
		}
     

        ObservableCollection<AsycudaSalesAllocation> _AsycudaSalesAllocations = null;
        public  ObservableCollection<AsycudaSalesAllocation> AsycudaSalesAllocations
		{
            
		    get 
				{ 
					if(_AsycudaSalesAllocations != null) return _AsycudaSalesAllocations;
					//if (this.entrydatadetail.AsycudaSalesAllocations == null) Debugger.Break();
					if(this.entrydatadetail.AsycudaSalesAllocations != null)
					{
						_AsycudaSalesAllocations = new ObservableCollection<AsycudaSalesAllocation>(this.entrydatadetail.AsycudaSalesAllocations.Select(x => new AsycudaSalesAllocation(x)));
					}
					
						_AsycudaSalesAllocations.CollectionChanged += AsycudaSalesAllocations_CollectionChanged; 
					
					return _AsycudaSalesAllocations; 
				}
			set
			{
			    if (Equals(value, _AsycudaSalesAllocations)) return;
				if (value != null)
					this.entrydatadetail.AsycudaSalesAllocations = new ChangeTrackingCollection<DTO.AsycudaSalesAllocation>(value.Select(x => x.DTO).ToList());
                _AsycudaSalesAllocations = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaSalesAllocations != null)
				_AsycudaSalesAllocations.CollectionChanged += AsycudaSalesAllocations_CollectionChanged;               
				NotifyPropertyChanged("AsycudaSalesAllocations");
			}
		}
        
        void AsycudaSalesAllocations_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaSalesAllocation itm in e.NewItems)
                    {
                        if (itm != null)
                        entrydatadetail.AsycudaSalesAllocations.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaSalesAllocation itm in e.OldItems)
                    {
                        if (itm != null)
                        entrydatadetail.AsycudaSalesAllocations.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private InventoryItemsEx _InventoryItemsEx;
        public  InventoryItemsEx InventoryItemsEx
		{
		    get
               { 
                  if (this.entrydatadetail != null)
                   {
                       if (_InventoryItemsEx != null)
                       {
                           if (this.entrydatadetail.InventoryItemsEx !=
                               _InventoryItemsEx.DTO)
                           {
                                if (this.entrydatadetail.InventoryItemsEx  != null)
                               _InventoryItemsEx = new InventoryItemsEx(this.entrydatadetail.InventoryItemsEx);
                           }
                       }
                       else
                       {
                             if (this.entrydatadetail.InventoryItemsEx  != null)
                           _InventoryItemsEx = new InventoryItemsEx(this.entrydatadetail.InventoryItemsEx);
                       }
                   }


             //       if (_InventoryItemsEx != null) return _InventoryItemsEx;
                       
             //       var i = new InventoryItemsEx(){TrackingState = TrackingState.Added};
			//		//if (this.entrydatadetail.InventoryItemsEx == null) Debugger.Break();
			//		if (this.entrydatadetail.InventoryItemsEx != null)
            //        {
            //           i. = this.entrydatadetail.InventoryItemsEx;
            //        }
            //        else
            //        {
            //            this.entrydatadetail.InventoryItemsEx = i.;
             //       }
                           
            //        _InventoryItemsEx = i;
                     
                    return _InventoryItemsEx;
               }
			set
			{
			    if (value == _InventoryItemsEx) return;
                _InventoryItemsEx = value;
                if(value != null)
                     this.entrydatadetail.InventoryItemsEx = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("InventoryItemsEx");
			}
		}
        

        ObservableCollection<AdjustmentOversAllocation> _AdjustmentOversAllocations = null;
        public  ObservableCollection<AdjustmentOversAllocation> AdjustmentOversAllocations
		{
            
		    get 
				{ 
					if(_AdjustmentOversAllocations != null) return _AdjustmentOversAllocations;
					//if (this.entrydatadetail.AdjustmentOversAllocations == null) Debugger.Break();
					if(this.entrydatadetail.AdjustmentOversAllocations != null)
					{
						_AdjustmentOversAllocations = new ObservableCollection<AdjustmentOversAllocation>(this.entrydatadetail.AdjustmentOversAllocations.Select(x => new AdjustmentOversAllocation(x)));
					}
					
						_AdjustmentOversAllocations.CollectionChanged += AdjustmentOversAllocations_CollectionChanged; 
					
					return _AdjustmentOversAllocations; 
				}
			set
			{
			    if (Equals(value, _AdjustmentOversAllocations)) return;
				if (value != null)
					this.entrydatadetail.AdjustmentOversAllocations = new ChangeTrackingCollection<DTO.AdjustmentOversAllocation>(value.Select(x => x.DTO).ToList());
                _AdjustmentOversAllocations = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AdjustmentOversAllocations != null)
				_AdjustmentOversAllocations.CollectionChanged += AdjustmentOversAllocations_CollectionChanged;               
				NotifyPropertyChanged("AdjustmentOversAllocations");
			}
		}
        
        void AdjustmentOversAllocations_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AdjustmentOversAllocation itm in e.NewItems)
                    {
                        if (itm != null)
                        entrydatadetail.AdjustmentOversAllocations.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AdjustmentOversAllocation itm in e.OldItems)
                    {
                        if (itm != null)
                        entrydatadetail.AdjustmentOversAllocations.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.EntryDataDetail> _changeTracker;    
        public ChangeTrackingCollection<DTO.EntryDataDetail> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



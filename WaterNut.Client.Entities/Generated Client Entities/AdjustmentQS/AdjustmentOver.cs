// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using AdjustmentQS.Client.DTO;


using Core.Common.Validation;

namespace AdjustmentQS.Client.Entities
{
       public partial class AdjustmentOver: BaseEntity<AdjustmentOver>
    {
        DTO.AdjustmentOver adjustmentover;
        public AdjustmentOver(DTO.AdjustmentOver dto )
        {
              adjustmentover = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.AdjustmentOver>(adjustmentover);

        }

        public DTO.AdjustmentOver DTO
        {
            get
            {
             return adjustmentover;
            }
            set
            {
                adjustmentover = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "EntryDataDetails is required")]
       
public int EntryDataDetailsId
		{ 
		    get { return this.adjustmentover.EntryDataDetailsId; }
			set
			{
			    if (value == this.adjustmentover.EntryDataDetailsId) return;
				this.adjustmentover.EntryDataDetailsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataDetailsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryData is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntryDataId has a max length of 50 letters ")]
public string EntryDataId
		{ 
		    get { return this.adjustmentover.EntryDataId; }
			set
			{
			    if (value == this.adjustmentover.EntryDataId) return;
				this.adjustmentover.EntryDataId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataId");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> LineNumber
		{ 
		    get { return this.adjustmentover.LineNumber; }
			set
			{
			    if (value == this.adjustmentover.LineNumber) return;
				this.adjustmentover.LineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(20, ErrorMessage = "ItemNumber has a max length of 20 letters ")]
public string ItemNumber
		{ 
		    get { return this.adjustmentover.ItemNumber; }
			set
			{
			    if (value == this.adjustmentover.ItemNumber) return;
				this.adjustmentover.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Quantity is required")]
       [NumberValidationAttribute]
public double Quantity
		{ 
		    get { return this.adjustmentover.Quantity; }
			set
			{
			    if (value == this.adjustmentover.Quantity) return;
				this.adjustmentover.Quantity = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Quantity");
			}
		}
     

       
       
                
                [MaxLength(15, ErrorMessage = "Units has a max length of 15 letters ")]
public string Units
		{ 
		    get { return this.adjustmentover.Units; }
			set
			{
			    if (value == this.adjustmentover.Units) return;
				this.adjustmentover.Units = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Units");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemDescription is required")]
       
                
                [MaxLength(255, ErrorMessage = "ItemDescription has a max length of 255 letters ")]
public string ItemDescription
		{ 
		    get { return this.adjustmentover.ItemDescription; }
			set
			{
			    if (value == this.adjustmentover.ItemDescription) return;
				this.adjustmentover.ItemDescription = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemDescription");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Cost is required")]
       [NumberValidationAttribute]
public double Cost
		{ 
		    get { return this.adjustmentover.Cost; }
			set
			{
			    if (value == this.adjustmentover.Cost) return;
				this.adjustmentover.Cost = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Cost");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "QtyAllocated is required")]
       [NumberValidationAttribute]
public double QtyAllocated
		{ 
		    get { return this.adjustmentover.QtyAllocated; }
			set
			{
			    if (value == this.adjustmentover.QtyAllocated) return;
				this.adjustmentover.QtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("QtyAllocated");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "UnitWeight is required")]
       [NumberValidationAttribute]
public double UnitWeight
		{ 
		    get { return this.adjustmentover.UnitWeight; }
			set
			{
			    if (value == this.adjustmentover.UnitWeight) return;
				this.adjustmentover.UnitWeight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("UnitWeight");
			}
		}
     

       
       
public Nullable<bool> DoNotAllocate
		{ 
		    get { return this.adjustmentover.DoNotAllocate; }
			set
			{
			    if (value == this.adjustmentover.DoNotAllocate) return;
				this.adjustmentover.DoNotAllocate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotAllocate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "TariffCode has a max length of 50 letters ")]
public string TariffCode
		{ 
		    get { return this.adjustmentover.TariffCode; }
			set
			{
			    if (value == this.adjustmentover.TariffCode) return;
				this.adjustmentover.TariffCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCode");
			}
		}
     

       
       
                
                [MaxLength(20, ErrorMessage = "CNumber has a max length of 20 letters ")]
public string CNumber
		{ 
		    get { return this.adjustmentover.CNumber; }
			set
			{
			    if (value == this.adjustmentover.CNumber) return;
				this.adjustmentover.CNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CNumber");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> CLineNumber
		{ 
		    get { return this.adjustmentover.CLineNumber; }
			set
			{
			    if (value == this.adjustmentover.CLineNumber) return;
				this.adjustmentover.CLineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CLineNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "AsycudaDocumentSet is required")]
       
public int AsycudaDocumentSetId
		{ 
		    get { return this.adjustmentover.AsycudaDocumentSetId; }
			set
			{
			    if (value == this.adjustmentover.AsycudaDocumentSetId) return;
				this.adjustmentover.AsycudaDocumentSetId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentSetId");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> InvoiceQty
		{ 
		    get { return this.adjustmentover.InvoiceQty; }
			set
			{
			    if (value == this.adjustmentover.InvoiceQty) return;
				this.adjustmentover.InvoiceQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceQty");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> ReceivedQty
		{ 
		    get { return this.adjustmentover.ReceivedQty; }
			set
			{
			    if (value == this.adjustmentover.ReceivedQty) return;
				this.adjustmentover.ReceivedQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReceivedQty");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Status has a max length of 50 letters ")]
public string Status
		{ 
		    get { return this.adjustmentover.Status; }
			set
			{
			    if (value == this.adjustmentover.Status) return;
				this.adjustmentover.Status = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Status");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceNumber has a max length of 50 letters ")]
public string PreviousInvoiceNumber
		{ 
		    get { return this.adjustmentover.PreviousInvoiceNumber; }
			set
			{
			    if (value == this.adjustmentover.PreviousInvoiceNumber) return;
				this.adjustmentover.PreviousInvoiceNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceNumber");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousCNumber has a max length of 50 letters ")]
public string PreviousCNumber
		{ 
		    get { return this.adjustmentover.PreviousCNumber; }
			set
			{
			    if (value == this.adjustmentover.PreviousCNumber) return;
				this.adjustmentover.PreviousCNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousCNumber");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "Comment has a max length of 255 letters ")]
public string Comment
		{ 
		    get { return this.adjustmentover.Comment; }
			set
			{
			    if (value == this.adjustmentover.Comment) return;
				this.adjustmentover.Comment = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Comment");
			}
		}
     

       
       
public Nullable<System.DateTime> EffectiveDate
		{ 
		    get { return this.adjustmentover.EffectiveDate; }
			set
			{
			    if (value == this.adjustmentover.EffectiveDate) return;
				this.adjustmentover.EffectiveDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EffectiveDate");
			}
		}
     

       
       
                
                [MaxLength(4, ErrorMessage = "Currency has a max length of 4 letters ")]
public string Currency
		{ 
		    get { return this.adjustmentover.Currency; }
			set
			{
			    if (value == this.adjustmentover.Currency) return;
				this.adjustmentover.Currency = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Currency");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.adjustmentover.ApplicationSettingsId; }
			set
			{
			    if (value == this.adjustmentover.ApplicationSettingsId) return;
				this.adjustmentover.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Type has a max length of 50 letters ")]
public string Type
		{ 
		    get { return this.adjustmentover.Type; }
			set
			{
			    if (value == this.adjustmentover.Type) return;
				this.adjustmentover.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DutyFreePaid is required")]
       
                
                [MaxLength(9, ErrorMessage = "DutyFreePaid has a max length of 9 letters ")]
public string DutyFreePaid
		{ 
		    get { return this.adjustmentover.DutyFreePaid; }
			set
			{
			    if (value == this.adjustmentover.DutyFreePaid) return;
				this.adjustmentover.DutyFreePaid = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DutyFreePaid");
			}
		}
     

       
       
public Nullable<int> EmailId
		{ 
		    get { return this.adjustmentover.EmailId; }
			set
			{
			    if (value == this.adjustmentover.EmailId) return;
				this.adjustmentover.EmailId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EmailId");
			}
		}
     

       
       
public Nullable<int> FileTypeId
		{ 
		    get { return this.adjustmentover.FileTypeId; }
			set
			{
			    if (value == this.adjustmentover.FileTypeId) return;
				this.adjustmentover.FileTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FileTypeId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InvoiceDate is required")]
       
public System.DateTime InvoiceDate
		{ 
		    get { return this.adjustmentover.InvoiceDate; }
			set
			{
			    if (value == this.adjustmentover.InvoiceDate) return;
				this.adjustmentover.InvoiceDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Subject is required")]
       
                
                
public string Subject
		{ 
		    get { return this.adjustmentover.Subject; }
			set
			{
			    if (value == this.adjustmentover.Subject) return;
				this.adjustmentover.Subject = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Subject");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EmailDate is required")]
       
public System.DateTime EmailDate
		{ 
		    get { return this.adjustmentover.EmailDate; }
			set
			{
			    if (value == this.adjustmentover.EmailDate) return;
				this.adjustmentover.EmailDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EmailDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryData_ is required")]
       
public int EntryData_Id
		{ 
		    get { return this.adjustmentover.EntryData_Id; }
			set
			{
			    if (value == this.adjustmentover.EntryData_Id) return;
				this.adjustmentover.EntryData_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryData_Id");
			}
		}
     

       
       
public Nullable<bool> IsReconciled
		{ 
		    get { return this.adjustmentover.IsReconciled; }
			set
			{
			    if (value == this.adjustmentover.IsReconciled) return;
				this.adjustmentover.IsReconciled = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsReconciled");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InventoryItem is required")]
       
public int InventoryItemId
		{ 
		    get { return this.adjustmentover.InventoryItemId; }
			set
			{
			    if (value == this.adjustmentover.InventoryItemId) return;
				this.adjustmentover.InventoryItemId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InventoryItemId");
			}
		}
     

       private AdjustmentEx _AdjustmentEx;
        public  AdjustmentEx AdjustmentEx
		{
		    get
               { 
                  if (this.adjustmentover != null)
                   {
                       if (_AdjustmentEx != null)
                       {
                           if (this.adjustmentover.AdjustmentEx !=
                               _AdjustmentEx.DTO)
                           {
                                if (this.adjustmentover.AdjustmentEx  != null)
                               _AdjustmentEx = new AdjustmentEx(this.adjustmentover.AdjustmentEx);
                           }
                       }
                       else
                       {
                             if (this.adjustmentover.AdjustmentEx  != null)
                           _AdjustmentEx = new AdjustmentEx(this.adjustmentover.AdjustmentEx);
                       }
                   }


             //       if (_AdjustmentEx != null) return _AdjustmentEx;
                       
             //       var i = new AdjustmentEx(){TrackingState = TrackingState.Added};
			//		//if (this.adjustmentover.AdjustmentEx == null) Debugger.Break();
			//		if (this.adjustmentover.AdjustmentEx != null)
            //        {
            //           i. = this.adjustmentover.AdjustmentEx;
            //        }
            //        else
            //        {
            //            this.adjustmentover.AdjustmentEx = i.;
             //       }
                           
            //        _AdjustmentEx = i;
                     
                    return _AdjustmentEx;
               }
			set
			{
			    if (value == _AdjustmentEx) return;
                _AdjustmentEx = value;
                if(value != null)
                     this.adjustmentover.AdjustmentEx = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("AdjustmentEx");
			}
		}
        

        ObservableCollection<AsycudaDocumentItemEntryDataDetail> _AsycudaDocumentItemEntryDataDetails = null;
        public  ObservableCollection<AsycudaDocumentItemEntryDataDetail> AsycudaDocumentItemEntryDataDetails
		{
            
		    get 
				{ 
					if(_AsycudaDocumentItemEntryDataDetails != null) return _AsycudaDocumentItemEntryDataDetails;
					//if (this.adjustmentover.AsycudaDocumentItemEntryDataDetails == null) Debugger.Break();
					if(this.adjustmentover.AsycudaDocumentItemEntryDataDetails != null)
					{
						_AsycudaDocumentItemEntryDataDetails = new ObservableCollection<AsycudaDocumentItemEntryDataDetail>(this.adjustmentover.AsycudaDocumentItemEntryDataDetails.Select(x => new AsycudaDocumentItemEntryDataDetail(x)));
					}
					
						_AsycudaDocumentItemEntryDataDetails.CollectionChanged += AsycudaDocumentItemEntryDataDetails_CollectionChanged; 
					
					return _AsycudaDocumentItemEntryDataDetails; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentItemEntryDataDetails)) return;
				if (value != null)
					this.adjustmentover.AsycudaDocumentItemEntryDataDetails = new ChangeTrackingCollection<DTO.AsycudaDocumentItemEntryDataDetail>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentItemEntryDataDetails = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentItemEntryDataDetails != null)
				_AsycudaDocumentItemEntryDataDetails.CollectionChanged += AsycudaDocumentItemEntryDataDetails_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentItemEntryDataDetails");
			}
		}
        
        void AsycudaDocumentItemEntryDataDetails_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentItemEntryDataDetail itm in e.NewItems)
                    {
                        if (itm != null)
                        adjustmentover.AsycudaDocumentItemEntryDataDetails.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentItemEntryDataDetail itm in e.OldItems)
                    {
                        if (itm != null)
                        adjustmentover.AsycudaDocumentItemEntryDataDetails.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private AdjustmentDetail _AdjustmentDetail;
        public  AdjustmentDetail AdjustmentDetail
		{
		    get
               { 
                  if (this.adjustmentover != null)
                   {
                       if (_AdjustmentDetail != null)
                       {
                           if (this.adjustmentover.AdjustmentDetail !=
                               _AdjustmentDetail.DTO)
                           {
                                if (this.adjustmentover.AdjustmentDetail  != null)
                               _AdjustmentDetail = new AdjustmentDetail(this.adjustmentover.AdjustmentDetail);
                           }
                       }
                       else
                       {
                             if (this.adjustmentover.AdjustmentDetail  != null)
                           _AdjustmentDetail = new AdjustmentDetail(this.adjustmentover.AdjustmentDetail);
                       }
                   }


             //       if (_AdjustmentDetail != null) return _AdjustmentDetail;
                       
             //       var i = new AdjustmentDetail(){TrackingState = TrackingState.Added};
			//		//if (this.adjustmentover.AdjustmentDetail == null) Debugger.Break();
			//		if (this.adjustmentover.AdjustmentDetail != null)
            //        {
            //           i. = this.adjustmentover.AdjustmentDetail;
            //        }
            //        else
            //        {
            //            this.adjustmentover.AdjustmentDetail = i.;
             //       }
                           
            //        _AdjustmentDetail = i;
                     
                    return _AdjustmentDetail;
               }
			set
			{
			    if (value == _AdjustmentDetail) return;
                _AdjustmentDetail = value;
                if(value != null)
                     this.adjustmentover.AdjustmentDetail = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("AdjustmentDetail");
			}
		}
        

       private InventoryItemsEx _InventoryItemsEx;
        public  InventoryItemsEx InventoryItemsEx
		{
		    get
               { 
                  if (this.adjustmentover != null)
                   {
                       if (_InventoryItemsEx != null)
                       {
                           if (this.adjustmentover.InventoryItemsEx !=
                               _InventoryItemsEx.DTO)
                           {
                                if (this.adjustmentover.InventoryItemsEx  != null)
                               _InventoryItemsEx = new InventoryItemsEx(this.adjustmentover.InventoryItemsEx);
                           }
                       }
                       else
                       {
                             if (this.adjustmentover.InventoryItemsEx  != null)
                           _InventoryItemsEx = new InventoryItemsEx(this.adjustmentover.InventoryItemsEx);
                       }
                   }


             //       if (_InventoryItemsEx != null) return _InventoryItemsEx;
                       
             //       var i = new InventoryItemsEx(){TrackingState = TrackingState.Added};
			//		//if (this.adjustmentover.InventoryItemsEx == null) Debugger.Break();
			//		if (this.adjustmentover.InventoryItemsEx != null)
            //        {
            //           i. = this.adjustmentover.InventoryItemsEx;
            //        }
            //        else
            //        {
            //            this.adjustmentover.InventoryItemsEx = i.;
             //       }
                           
            //        _InventoryItemsEx = i;
                     
                    return _InventoryItemsEx;
               }
			set
			{
			    if (value == _InventoryItemsEx) return;
                _InventoryItemsEx = value;
                if(value != null)
                     this.adjustmentover.InventoryItemsEx = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("InventoryItemsEx");
			}
		}
        


        ChangeTrackingCollection<DTO.AdjustmentOver> _changeTracker;    
        public ChangeTrackingCollection<DTO.AdjustmentOver> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



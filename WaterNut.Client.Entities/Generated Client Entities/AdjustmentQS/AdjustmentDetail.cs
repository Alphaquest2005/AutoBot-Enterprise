// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using AdjustmentQS.Client.DTO;


using Core.Common.Validation;

namespace AdjustmentQS.Client.Entities
{
       public partial class AdjustmentDetail: BaseEntity<AdjustmentDetail>
    {
        DTO.AdjustmentDetail adjustmentdetail;
        public AdjustmentDetail(DTO.AdjustmentDetail dto )
        {
              adjustmentdetail = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.AdjustmentDetail>(adjustmentdetail);

        }

        public DTO.AdjustmentDetail DTO
        {
            get
            {
             return adjustmentdetail;
            }
            set
            {
                adjustmentdetail = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "EntryDataDetails is required")]
       
public int EntryDataDetailsId
		{ 
		    get { return this.adjustmentdetail.EntryDataDetailsId; }
			set
			{
			    if (value == this.adjustmentdetail.EntryDataDetailsId) return;
				this.adjustmentdetail.EntryDataDetailsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataDetailsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryData is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntryDataId has a max length of 50 letters ")]
public string EntryDataId
		{ 
		    get { return this.adjustmentdetail.EntryDataId; }
			set
			{
			    if (value == this.adjustmentdetail.EntryDataId) return;
				this.adjustmentdetail.EntryDataId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataId");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> LineNumber
		{ 
		    get { return this.adjustmentdetail.LineNumber; }
			set
			{
			    if (value == this.adjustmentdetail.LineNumber) return;
				this.adjustmentdetail.LineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(20, ErrorMessage = "ItemNumber has a max length of 20 letters ")]
public string ItemNumber
		{ 
		    get { return this.adjustmentdetail.ItemNumber; }
			set
			{
			    if (value == this.adjustmentdetail.ItemNumber) return;
				this.adjustmentdetail.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Quantity is required")]
       [NumberValidationAttribute]
public double Quantity
		{ 
		    get { return this.adjustmentdetail.Quantity; }
			set
			{
			    if (value == this.adjustmentdetail.Quantity) return;
				this.adjustmentdetail.Quantity = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Quantity");
			}
		}
     

       
       
                
                [MaxLength(15, ErrorMessage = "Units has a max length of 15 letters ")]
public string Units
		{ 
		    get { return this.adjustmentdetail.Units; }
			set
			{
			    if (value == this.adjustmentdetail.Units) return;
				this.adjustmentdetail.Units = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Units");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemDescription is required")]
       
                
                [MaxLength(255, ErrorMessage = "ItemDescription has a max length of 255 letters ")]
public string ItemDescription
		{ 
		    get { return this.adjustmentdetail.ItemDescription; }
			set
			{
			    if (value == this.adjustmentdetail.ItemDescription) return;
				this.adjustmentdetail.ItemDescription = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemDescription");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Cost is required")]
       [NumberValidationAttribute]
public double Cost
		{ 
		    get { return this.adjustmentdetail.Cost; }
			set
			{
			    if (value == this.adjustmentdetail.Cost) return;
				this.adjustmentdetail.Cost = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Cost");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "QtyAllocated is required")]
       [NumberValidationAttribute]
public double QtyAllocated
		{ 
		    get { return this.adjustmentdetail.QtyAllocated; }
			set
			{
			    if (value == this.adjustmentdetail.QtyAllocated) return;
				this.adjustmentdetail.QtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("QtyAllocated");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "UnitWeight is required")]
       [NumberValidationAttribute]
public double UnitWeight
		{ 
		    get { return this.adjustmentdetail.UnitWeight; }
			set
			{
			    if (value == this.adjustmentdetail.UnitWeight) return;
				this.adjustmentdetail.UnitWeight = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("UnitWeight");
			}
		}
     

       
       
public Nullable<bool> DoNotAllocate
		{ 
		    get { return this.adjustmentdetail.DoNotAllocate; }
			set
			{
			    if (value == this.adjustmentdetail.DoNotAllocate) return;
				this.adjustmentdetail.DoNotAllocate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotAllocate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "TariffCode has a max length of 50 letters ")]
public string TariffCode
		{ 
		    get { return this.adjustmentdetail.TariffCode; }
			set
			{
			    if (value == this.adjustmentdetail.TariffCode) return;
				this.adjustmentdetail.TariffCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCode");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Total
		{ 
		    get { return this.adjustmentdetail.Total; }
			set
			{
			    if (value == this.adjustmentdetail.Total) return;
				this.adjustmentdetail.Total = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Total");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "AsycudaDocumentSet is required")]
       
public int AsycudaDocumentSetId
		{ 
		    get { return this.adjustmentdetail.AsycudaDocumentSetId; }
			set
			{
			    if (value == this.adjustmentdetail.AsycudaDocumentSetId) return;
				this.adjustmentdetail.AsycudaDocumentSetId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentSetId");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> InvoiceQty
		{ 
		    get { return this.adjustmentdetail.InvoiceQty; }
			set
			{
			    if (value == this.adjustmentdetail.InvoiceQty) return;
				this.adjustmentdetail.InvoiceQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceQty");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> ReceivedQty
		{ 
		    get { return this.adjustmentdetail.ReceivedQty; }
			set
			{
			    if (value == this.adjustmentdetail.ReceivedQty) return;
				this.adjustmentdetail.ReceivedQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReceivedQty");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceNumber has a max length of 50 letters ")]
public string PreviousInvoiceNumber
		{ 
		    get { return this.adjustmentdetail.PreviousInvoiceNumber; }
			set
			{
			    if (value == this.adjustmentdetail.PreviousInvoiceNumber) return;
				this.adjustmentdetail.PreviousInvoiceNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceNumber");
			}
		}
     

       
       
                
                [MaxLength(20, ErrorMessage = "CNumber has a max length of 20 letters ")]
public string CNumber
		{ 
		    get { return this.adjustmentdetail.CNumber; }
			set
			{
			    if (value == this.adjustmentdetail.CNumber) return;
				this.adjustmentdetail.CNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CNumber");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> CLineNumber
		{ 
		    get { return this.adjustmentdetail.CLineNumber; }
			set
			{
			    if (value == this.adjustmentdetail.CLineNumber) return;
				this.adjustmentdetail.CLineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CLineNumber");
			}
		}
     

       
       
public Nullable<bool> Downloaded
		{ 
		    get { return this.adjustmentdetail.Downloaded; }
			set
			{
			    if (value == this.adjustmentdetail.Downloaded) return;
				this.adjustmentdetail.Downloaded = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Downloaded");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousCNumber has a max length of 50 letters ")]
public string PreviousCNumber
		{ 
		    get { return this.adjustmentdetail.PreviousCNumber; }
			set
			{
			    if (value == this.adjustmentdetail.PreviousCNumber) return;
				this.adjustmentdetail.PreviousCNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousCNumber");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "DutyFreePaid has a max length of 50 letters ")]
public string DutyFreePaid
		{ 
		    get { return this.adjustmentdetail.DutyFreePaid; }
			set
			{
			    if (value == this.adjustmentdetail.DutyFreePaid) return;
				this.adjustmentdetail.DutyFreePaid = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DutyFreePaid");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Type has a max length of 50 letters ")]
public string Type
		{ 
		    get { return this.adjustmentdetail.Type; }
			set
			{
			    if (value == this.adjustmentdetail.Type) return;
				this.adjustmentdetail.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "Comment has a max length of 255 letters ")]
public string Comment
		{ 
		    get { return this.adjustmentdetail.Comment; }
			set
			{
			    if (value == this.adjustmentdetail.Comment) return;
				this.adjustmentdetail.Comment = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Comment");
			}
		}
     

       
       
public Nullable<System.DateTime> EffectiveDate
		{ 
		    get { return this.adjustmentdetail.EffectiveDate; }
			set
			{
			    if (value == this.adjustmentdetail.EffectiveDate) return;
				this.adjustmentdetail.EffectiveDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EffectiveDate");
			}
		}
     

       
       
                
                [MaxLength(4, ErrorMessage = "Currency has a max length of 4 letters ")]
public string Currency
		{ 
		    get { return this.adjustmentdetail.Currency; }
			set
			{
			    if (value == this.adjustmentdetail.Currency) return;
				this.adjustmentdetail.Currency = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Currency");
			}
		}
     

       
       
public Nullable<bool> IsReconciled
		{ 
		    get { return this.adjustmentdetail.IsReconciled; }
			set
			{
			    if (value == this.adjustmentdetail.IsReconciled) return;
				this.adjustmentdetail.IsReconciled = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsReconciled");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.adjustmentdetail.ApplicationSettingsId; }
			set
			{
			    if (value == this.adjustmentdetail.ApplicationSettingsId) return;
				this.adjustmentdetail.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "EmailId has a max length of 255 letters ")]
public string EmailId
		{ 
		    get { return this.adjustmentdetail.EmailId; }
			set
			{
			    if (value == this.adjustmentdetail.EmailId) return;
				this.adjustmentdetail.EmailId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EmailId");
			}
		}
     

       
       
public Nullable<int> FileTypeId
		{ 
		    get { return this.adjustmentdetail.FileTypeId; }
			set
			{
			    if (value == this.adjustmentdetail.FileTypeId) return;
				this.adjustmentdetail.FileTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FileTypeId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InvoiceDate is required")]
       
public System.DateTime InvoiceDate
		{ 
		    get { return this.adjustmentdetail.InvoiceDate; }
			set
			{
			    if (value == this.adjustmentdetail.InvoiceDate) return;
				this.adjustmentdetail.InvoiceDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceDate");
			}
		}
     

       
       
                
                
public string Subject
		{ 
		    get { return this.adjustmentdetail.Subject; }
			set
			{
			    if (value == this.adjustmentdetail.Subject) return;
				this.adjustmentdetail.Subject = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Subject");
			}
		}
     

       
       
public Nullable<System.DateTime> EmailDate
		{ 
		    get { return this.adjustmentdetail.EmailDate; }
			set
			{
			    if (value == this.adjustmentdetail.EmailDate) return;
				this.adjustmentdetail.EmailDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EmailDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryData_ is required")]
       
public int EntryData_Id
		{ 
		    get { return this.adjustmentdetail.EntryData_Id; }
			set
			{
			    if (value == this.adjustmentdetail.EntryData_Id) return;
				this.adjustmentdetail.EntryData_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryData_Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InventoryItem is required")]
       
public int InventoryItemId
		{ 
		    get { return this.adjustmentdetail.InventoryItemId; }
			set
			{
			    if (value == this.adjustmentdetail.InventoryItemId) return;
				this.adjustmentdetail.InventoryItemId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InventoryItemId");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> TaxAmount
		{ 
		    get { return this.adjustmentdetail.TaxAmount; }
			set
			{
			    if (value == this.adjustmentdetail.TaxAmount) return;
				this.adjustmentdetail.TaxAmount = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TaxAmount");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Status has a max length of 50 letters ")]
public string Status
		{ 
		    get { return this.adjustmentdetail.Status; }
			set
			{
			    if (value == this.adjustmentdetail.Status) return;
				this.adjustmentdetail.Status = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Status");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> PreviousCLineNumber
		{ 
		    get { return this.adjustmentdetail.PreviousCLineNumber; }
			set
			{
			    if (value == this.adjustmentdetail.PreviousCLineNumber) return;
				this.adjustmentdetail.PreviousCLineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousCLineNumber");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Vendor has a max length of 50 letters ")]
public string Vendor
		{ 
		    get { return this.adjustmentdetail.Vendor; }
			set
			{
			    if (value == this.adjustmentdetail.Vendor) return;
				this.adjustmentdetail.Vendor = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Vendor");
			}
		}
     

       private AdjustmentEx _AdjustmentEx;
        public  AdjustmentEx AdjustmentEx
		{
		    get
               { 
                  if (this.adjustmentdetail != null)
                   {
                       if (_AdjustmentEx != null)
                       {
                           if (this.adjustmentdetail.AdjustmentEx !=
                               _AdjustmentEx.DTO)
                           {
                                if (this.adjustmentdetail.AdjustmentEx  != null)
                               _AdjustmentEx = new AdjustmentEx(this.adjustmentdetail.AdjustmentEx);
                           }
                       }
                       else
                       {
                             if (this.adjustmentdetail.AdjustmentEx  != null)
                           _AdjustmentEx = new AdjustmentEx(this.adjustmentdetail.AdjustmentEx);
                       }
                   }


             //       if (_AdjustmentEx != null) return _AdjustmentEx;
                       
             //       var i = new AdjustmentEx(){TrackingState = TrackingState.Added};
			//		//if (this.adjustmentdetail.AdjustmentEx == null) Debugger.Break();
			//		if (this.adjustmentdetail.AdjustmentEx != null)
            //        {
            //           i. = this.adjustmentdetail.AdjustmentEx;
            //        }
            //        else
            //        {
            //            this.adjustmentdetail.AdjustmentEx = i.;
             //       }
                           
            //        _AdjustmentEx = i;
                     
                    return _AdjustmentEx;
               }
			set
			{
			    if (value == _AdjustmentEx) return;
                _AdjustmentEx = value;
                if(value != null)
                     this.adjustmentdetail.AdjustmentEx = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("AdjustmentEx");
			}
		}
        

       private AdjustmentShort _AdjustmentShorts;
        public  AdjustmentShort AdjustmentShorts
		{
		    get
               { 
                  if (this.adjustmentdetail != null)
                   {
                       if (_AdjustmentShorts != null)
                       {
                           if (this.adjustmentdetail.AdjustmentShorts !=
                               _AdjustmentShorts.DTO)
                           {
                                if (this.adjustmentdetail.AdjustmentShorts  != null)
                               _AdjustmentShorts = new AdjustmentShort(this.adjustmentdetail.AdjustmentShorts);
                           }
                       }
                       else
                       {
                             if (this.adjustmentdetail.AdjustmentShorts  != null)
                           _AdjustmentShorts = new AdjustmentShort(this.adjustmentdetail.AdjustmentShorts);
                       }
                   }


             //       if (_AdjustmentShorts != null) return _AdjustmentShorts;
                       
             //       var i = new AdjustmentShort(){TrackingState = TrackingState.Added};
			//		//if (this.adjustmentdetail.AdjustmentShorts == null) Debugger.Break();
			//		if (this.adjustmentdetail.AdjustmentShorts != null)
            //        {
            //           i. = this.adjustmentdetail.AdjustmentShorts;
            //        }
            //        else
            //        {
            //            this.adjustmentdetail.AdjustmentShorts = i.;
             //       }
                           
            //        _AdjustmentShorts = i;
                     
                    return _AdjustmentShorts;
               }
			set
			{
			    if (value == _AdjustmentShorts) return;
                _AdjustmentShorts = value;
                if(value != null)
                     this.adjustmentdetail.AdjustmentShorts = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("AdjustmentShorts");
			}
		}
        

       private AdjustmentOver _AdjustmentOvers;
        public  AdjustmentOver AdjustmentOvers
		{
		    get
               { 
                  if (this.adjustmentdetail != null)
                   {
                       if (_AdjustmentOvers != null)
                       {
                           if (this.adjustmentdetail.AdjustmentOvers !=
                               _AdjustmentOvers.DTO)
                           {
                                if (this.adjustmentdetail.AdjustmentOvers  != null)
                               _AdjustmentOvers = new AdjustmentOver(this.adjustmentdetail.AdjustmentOvers);
                           }
                       }
                       else
                       {
                             if (this.adjustmentdetail.AdjustmentOvers  != null)
                           _AdjustmentOvers = new AdjustmentOver(this.adjustmentdetail.AdjustmentOvers);
                       }
                   }


             //       if (_AdjustmentOvers != null) return _AdjustmentOvers;
                       
             //       var i = new AdjustmentOver(){TrackingState = TrackingState.Added};
			//		//if (this.adjustmentdetail.AdjustmentOvers == null) Debugger.Break();
			//		if (this.adjustmentdetail.AdjustmentOvers != null)
            //        {
            //           i. = this.adjustmentdetail.AdjustmentOvers;
            //        }
            //        else
            //        {
            //            this.adjustmentdetail.AdjustmentOvers = i.;
             //       }
                           
            //        _AdjustmentOvers = i;
                     
                    return _AdjustmentOvers;
               }
			set
			{
			    if (value == _AdjustmentOvers) return;
                _AdjustmentOvers = value;
                if(value != null)
                     this.adjustmentdetail.AdjustmentOvers = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("AdjustmentOvers");
			}
		}
        

        ObservableCollection<AsycudaDocumentItemEntryDataDetail> _AsycudaDocumentItemEntryDataDetails = null;
        public  ObservableCollection<AsycudaDocumentItemEntryDataDetail> AsycudaDocumentItemEntryDataDetails
		{
            
		    get 
				{ 
					if(_AsycudaDocumentItemEntryDataDetails != null) return _AsycudaDocumentItemEntryDataDetails;
					//if (this.adjustmentdetail.AsycudaDocumentItemEntryDataDetails == null) Debugger.Break();
					if(this.adjustmentdetail.AsycudaDocumentItemEntryDataDetails != null)
					{
						_AsycudaDocumentItemEntryDataDetails = new ObservableCollection<AsycudaDocumentItemEntryDataDetail>(this.adjustmentdetail.AsycudaDocumentItemEntryDataDetails.Select(x => new AsycudaDocumentItemEntryDataDetail(x)));
					}
					
						_AsycudaDocumentItemEntryDataDetails.CollectionChanged += AsycudaDocumentItemEntryDataDetails_CollectionChanged; 
					
					return _AsycudaDocumentItemEntryDataDetails; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentItemEntryDataDetails)) return;
				if (value != null)
					this.adjustmentdetail.AsycudaDocumentItemEntryDataDetails = new ChangeTrackingCollection<DTO.AsycudaDocumentItemEntryDataDetail>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentItemEntryDataDetails = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentItemEntryDataDetails != null)
				_AsycudaDocumentItemEntryDataDetails.CollectionChanged += AsycudaDocumentItemEntryDataDetails_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentItemEntryDataDetails");
			}
		}
        
        void AsycudaDocumentItemEntryDataDetails_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentItemEntryDataDetail itm in e.NewItems)
                    {
                        if (itm != null)
                        adjustmentdetail.AsycudaDocumentItemEntryDataDetails.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentItemEntryDataDetail itm in e.OldItems)
                    {
                        if (itm != null)
                        adjustmentdetail.AsycudaDocumentItemEntryDataDetails.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<ShortAllocation> _ShortAllocations = null;
        public  ObservableCollection<ShortAllocation> ShortAllocations
		{
            
		    get 
				{ 
					if(_ShortAllocations != null) return _ShortAllocations;
					//if (this.adjustmentdetail.ShortAllocations == null) Debugger.Break();
					if(this.adjustmentdetail.ShortAllocations != null)
					{
						_ShortAllocations = new ObservableCollection<ShortAllocation>(this.adjustmentdetail.ShortAllocations.Select(x => new ShortAllocation(x)));
					}
					
						_ShortAllocations.CollectionChanged += ShortAllocations_CollectionChanged; 
					
					return _ShortAllocations; 
				}
			set
			{
			    if (Equals(value, _ShortAllocations)) return;
				if (value != null)
					this.adjustmentdetail.ShortAllocations = new ChangeTrackingCollection<DTO.ShortAllocation>(value.Select(x => x.DTO).ToList());
                _ShortAllocations = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_ShortAllocations != null)
				_ShortAllocations.CollectionChanged += ShortAllocations_CollectionChanged;               
				NotifyPropertyChanged("ShortAllocations");
			}
		}
        
        void ShortAllocations_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (ShortAllocation itm in e.NewItems)
                    {
                        if (itm != null)
                        adjustmentdetail.ShortAllocations.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (ShortAllocation itm in e.OldItems)
                    {
                        if (itm != null)
                        adjustmentdetail.ShortAllocations.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private SystemDocumentSet _SystemDocumentSet;
        public  SystemDocumentSet SystemDocumentSet
		{
		    get
               { 
                  if (this.adjustmentdetail != null)
                   {
                       if (_SystemDocumentSet != null)
                       {
                           if (this.adjustmentdetail.SystemDocumentSet !=
                               _SystemDocumentSet.DTO)
                           {
                                if (this.adjustmentdetail.SystemDocumentSet  != null)
                               _SystemDocumentSet = new SystemDocumentSet(this.adjustmentdetail.SystemDocumentSet);
                           }
                       }
                       else
                       {
                             if (this.adjustmentdetail.SystemDocumentSet  != null)
                           _SystemDocumentSet = new SystemDocumentSet(this.adjustmentdetail.SystemDocumentSet);
                       }
                   }


             //       if (_SystemDocumentSet != null) return _SystemDocumentSet;
                       
             //       var i = new SystemDocumentSet(){TrackingState = TrackingState.Added};
			//		//if (this.adjustmentdetail.SystemDocumentSet == null) Debugger.Break();
			//		if (this.adjustmentdetail.SystemDocumentSet != null)
            //        {
            //           i. = this.adjustmentdetail.SystemDocumentSet;
            //        }
            //        else
            //        {
            //            this.adjustmentdetail.SystemDocumentSet = i.;
             //       }
                           
            //        _SystemDocumentSet = i;
                     
                    return _SystemDocumentSet;
               }
			set
			{
			    if (value == _SystemDocumentSet) return;
                _SystemDocumentSet = value;
                if(value != null)
                     this.adjustmentdetail.SystemDocumentSet = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("SystemDocumentSet");
			}
		}
        


        ChangeTrackingCollection<DTO.AdjustmentDetail> _changeTracker;    
        public ChangeTrackingCollection<DTO.AdjustmentDetail> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



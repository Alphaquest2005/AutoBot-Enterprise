// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using AdjustmentQS.Client.DTO;


using Core.Common.Validation;

namespace AdjustmentQS.Client.Entities
{
       public partial class AdjustmentEx: BaseEntity<AdjustmentEx>
    {
        DTO.AdjustmentEx adjustmentex;
        public AdjustmentEx(DTO.AdjustmentEx dto )
        {
              adjustmentex = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.AdjustmentEx>(adjustmentex);

        }

        public DTO.AdjustmentEx DTO
        {
            get
            {
             return adjustmentex;
            }
            set
            {
                adjustmentex = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "InvoiceDate is required")]
       
public System.DateTime InvoiceDate
		{ 
		    get { return this.adjustmentex.InvoiceDate; }
			set
			{
			    if (value == this.adjustmentex.InvoiceDate) return;
				this.adjustmentex.InvoiceDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceDate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Type has a max length of 50 letters ")]
public string Type
		{ 
		    get { return this.adjustmentex.Type; }
			set
			{
			    if (value == this.adjustmentex.Type) return;
				this.adjustmentex.Type = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Type");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DutyFreePaid is required")]
       
                
                [MaxLength(9, ErrorMessage = "DutyFreePaid has a max length of 9 letters ")]
public string DutyFreePaid
		{ 
		    get { return this.adjustmentex.DutyFreePaid; }
			set
			{
			    if (value == this.adjustmentex.DutyFreePaid) return;
				this.adjustmentex.DutyFreePaid = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DutyFreePaid");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "InvoiceNo is required")]
       
                
                [MaxLength(50, ErrorMessage = "InvoiceNo has a max length of 50 letters ")]
public string InvoiceNo
		{ 
		    get { return this.adjustmentex.InvoiceNo; }
			set
			{
			    if (value == this.adjustmentex.InvoiceNo) return;
				this.adjustmentex.InvoiceNo = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceNo");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> ImportedLines
		{ 
		    get { return this.adjustmentex.ImportedLines; }
			set
			{
			    if (value == this.adjustmentex.ImportedLines) return;
				this.adjustmentex.ImportedLines = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ImportedLines");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> TotalLines
		{ 
		    get { return this.adjustmentex.TotalLines; }
			set
			{
			    if (value == this.adjustmentex.TotalLines) return;
				this.adjustmentex.TotalLines = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TotalLines");
			}
		}
     

       
       
                
                [MaxLength(4, ErrorMessage = "Currency has a max length of 4 letters ")]
public string Currency
		{ 
		    get { return this.adjustmentex.Currency; }
			set
			{
			    if (value == this.adjustmentex.Currency) return;
				this.adjustmentex.Currency = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Currency");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.adjustmentex.ApplicationSettingsId; }
			set
			{
			    if (value == this.adjustmentex.ApplicationSettingsId) return;
				this.adjustmentex.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       
       
public Nullable<int> EmailId
		{ 
		    get { return this.adjustmentex.EmailId; }
			set
			{
			    if (value == this.adjustmentex.EmailId) return;
				this.adjustmentex.EmailId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EmailId");
			}
		}
     

       
       
public Nullable<int> FileTypeId
		{ 
		    get { return this.adjustmentex.FileTypeId; }
			set
			{
			    if (value == this.adjustmentex.FileTypeId) return;
				this.adjustmentex.FileTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FileTypeId");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> InvoiceTotal
		{ 
		    get { return this.adjustmentex.InvoiceTotal; }
			set
			{
			    if (value == this.adjustmentex.InvoiceTotal) return;
				this.adjustmentex.InvoiceTotal = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceTotal");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> ImportedTotal
		{ 
		    get { return this.adjustmentex.ImportedTotal; }
			set
			{
			    if (value == this.adjustmentex.ImportedTotal) return;
				this.adjustmentex.ImportedTotal = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ImportedTotal");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntryData_ is required")]
       
public int EntryData_Id
		{ 
		    get { return this.adjustmentex.EntryData_Id; }
			set
			{
			    if (value == this.adjustmentex.EntryData_Id) return;
				this.adjustmentex.EntryData_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryData_Id");
			}
		}
     

        ObservableCollection<AsycudaDocumentSetEntryData> _AsycudaDocumentSets = null;
        public  ObservableCollection<AsycudaDocumentSetEntryData> AsycudaDocumentSets
		{
            
		    get 
				{ 
					if(_AsycudaDocumentSets != null) return _AsycudaDocumentSets;
					//if (this.adjustmentex.AsycudaDocumentSets == null) Debugger.Break();
					if(this.adjustmentex.AsycudaDocumentSets != null)
					{
						_AsycudaDocumentSets = new ObservableCollection<AsycudaDocumentSetEntryData>(this.adjustmentex.AsycudaDocumentSets.Select(x => new AsycudaDocumentSetEntryData(x)));
					}
					
						_AsycudaDocumentSets.CollectionChanged += AsycudaDocumentSets_CollectionChanged; 
					
					return _AsycudaDocumentSets; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocumentSets)) return;
				if (value != null)
					this.adjustmentex.AsycudaDocumentSets = new ChangeTrackingCollection<DTO.AsycudaDocumentSetEntryData>(value.Select(x => x.DTO).ToList());
                _AsycudaDocumentSets = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocumentSets != null)
				_AsycudaDocumentSets.CollectionChanged += AsycudaDocumentSets_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocumentSets");
			}
		}
        
        void AsycudaDocumentSets_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentSetEntryData itm in e.NewItems)
                    {
                        if (itm != null)
                        adjustmentex.AsycudaDocumentSets.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentSetEntryData itm in e.OldItems)
                    {
                        if (itm != null)
                        adjustmentex.AsycudaDocumentSets.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AsycudaDocumentEntryData> _AsycudaDocuments = null;
        public  ObservableCollection<AsycudaDocumentEntryData> AsycudaDocuments
		{
            
		    get 
				{ 
					if(_AsycudaDocuments != null) return _AsycudaDocuments;
					//if (this.adjustmentex.AsycudaDocuments == null) Debugger.Break();
					if(this.adjustmentex.AsycudaDocuments != null)
					{
						_AsycudaDocuments = new ObservableCollection<AsycudaDocumentEntryData>(this.adjustmentex.AsycudaDocuments.Select(x => new AsycudaDocumentEntryData(x)));
					}
					
						_AsycudaDocuments.CollectionChanged += AsycudaDocuments_CollectionChanged; 
					
					return _AsycudaDocuments; 
				}
			set
			{
			    if (Equals(value, _AsycudaDocuments)) return;
				if (value != null)
					this.adjustmentex.AsycudaDocuments = new ChangeTrackingCollection<DTO.AsycudaDocumentEntryData>(value.Select(x => x.DTO).ToList());
                _AsycudaDocuments = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaDocuments != null)
				_AsycudaDocuments.CollectionChanged += AsycudaDocuments_CollectionChanged;               
				NotifyPropertyChanged("AsycudaDocuments");
			}
		}
        
        void AsycudaDocuments_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaDocumentEntryData itm in e.NewItems)
                    {
                        if (itm != null)
                        adjustmentex.AsycudaDocuments.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaDocumentEntryData itm in e.OldItems)
                    {
                        if (itm != null)
                        adjustmentex.AsycudaDocuments.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AdjustmentOver> _AdjustmentOvers = null;
        public  ObservableCollection<AdjustmentOver> AdjustmentOvers
		{
            
		    get 
				{ 
					if(_AdjustmentOvers != null) return _AdjustmentOvers;
					//if (this.adjustmentex.AdjustmentOvers == null) Debugger.Break();
					if(this.adjustmentex.AdjustmentOvers != null)
					{
						_AdjustmentOvers = new ObservableCollection<AdjustmentOver>(this.adjustmentex.AdjustmentOvers.Select(x => new AdjustmentOver(x)));
					}
					
						_AdjustmentOvers.CollectionChanged += AdjustmentOvers_CollectionChanged; 
					
					return _AdjustmentOvers; 
				}
			set
			{
			    if (Equals(value, _AdjustmentOvers)) return;
				if (value != null)
					this.adjustmentex.AdjustmentOvers = new ChangeTrackingCollection<DTO.AdjustmentOver>(value.Select(x => x.DTO).ToList());
                _AdjustmentOvers = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AdjustmentOvers != null)
				_AdjustmentOvers.CollectionChanged += AdjustmentOvers_CollectionChanged;               
				NotifyPropertyChanged("AdjustmentOvers");
			}
		}
        
        void AdjustmentOvers_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AdjustmentOver itm in e.NewItems)
                    {
                        if (itm != null)
                        adjustmentex.AdjustmentOvers.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AdjustmentOver itm in e.OldItems)
                    {
                        if (itm != null)
                        adjustmentex.AdjustmentOvers.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AdjustmentShort> _AdjustmentShorts = null;
        public  ObservableCollection<AdjustmentShort> AdjustmentShorts
		{
            
		    get 
				{ 
					if(_AdjustmentShorts != null) return _AdjustmentShorts;
					//if (this.adjustmentex.AdjustmentShorts == null) Debugger.Break();
					if(this.adjustmentex.AdjustmentShorts != null)
					{
						_AdjustmentShorts = new ObservableCollection<AdjustmentShort>(this.adjustmentex.AdjustmentShorts.Select(x => new AdjustmentShort(x)));
					}
					
						_AdjustmentShorts.CollectionChanged += AdjustmentShorts_CollectionChanged; 
					
					return _AdjustmentShorts; 
				}
			set
			{
			    if (Equals(value, _AdjustmentShorts)) return;
				if (value != null)
					this.adjustmentex.AdjustmentShorts = new ChangeTrackingCollection<DTO.AdjustmentShort>(value.Select(x => x.DTO).ToList());
                _AdjustmentShorts = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AdjustmentShorts != null)
				_AdjustmentShorts.CollectionChanged += AdjustmentShorts_CollectionChanged;               
				NotifyPropertyChanged("AdjustmentShorts");
			}
		}
        
        void AdjustmentShorts_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AdjustmentShort itm in e.NewItems)
                    {
                        if (itm != null)
                        adjustmentex.AdjustmentShorts.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AdjustmentShort itm in e.OldItems)
                    {
                        if (itm != null)
                        adjustmentex.AdjustmentShorts.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AdjustmentDetail> _AdjustmentDetails = null;
        public  ObservableCollection<AdjustmentDetail> AdjustmentDetails
		{
            
		    get 
				{ 
					if(_AdjustmentDetails != null) return _AdjustmentDetails;
					//if (this.adjustmentex.AdjustmentDetails == null) Debugger.Break();
					if(this.adjustmentex.AdjustmentDetails != null)
					{
						_AdjustmentDetails = new ObservableCollection<AdjustmentDetail>(this.adjustmentex.AdjustmentDetails.Select(x => new AdjustmentDetail(x)));
					}
					
						_AdjustmentDetails.CollectionChanged += AdjustmentDetails_CollectionChanged; 
					
					return _AdjustmentDetails; 
				}
			set
			{
			    if (Equals(value, _AdjustmentDetails)) return;
				if (value != null)
					this.adjustmentex.AdjustmentDetails = new ChangeTrackingCollection<DTO.AdjustmentDetail>(value.Select(x => x.DTO).ToList());
                _AdjustmentDetails = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AdjustmentDetails != null)
				_AdjustmentDetails.CollectionChanged += AdjustmentDetails_CollectionChanged;               
				NotifyPropertyChanged("AdjustmentDetails");
			}
		}
        
        void AdjustmentDetails_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AdjustmentDetail itm in e.NewItems)
                    {
                        if (itm != null)
                        adjustmentex.AdjustmentDetails.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AdjustmentDetail itm in e.OldItems)
                    {
                        if (itm != null)
                        adjustmentex.AdjustmentDetails.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.AdjustmentEx> _changeTracker;    
        public ChangeTrackingCollection<DTO.AdjustmentEx> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



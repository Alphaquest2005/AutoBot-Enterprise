// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using AdjustmentQS.Client.DTO;


using Core.Common.Validation;

namespace AdjustmentQS.Client.Entities
{
       public partial class AsycudaDocumentItemLastItemCost: BaseEntity<AsycudaDocumentItemLastItemCost>
    {
        DTO.AsycudaDocumentItemLastItemCost asycudadocumentitemlastitemcost;
        public AsycudaDocumentItemLastItemCost(DTO.AsycudaDocumentItemLastItemCost dto )
        {
              asycudadocumentitemlastitemcost = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.AsycudaDocumentItemLastItemCost>(asycudadocumentitemlastitemcost);

        }

        public DTO.AsycudaDocumentItemLastItemCost DTO
        {
            get
            {
             return asycudadocumentitemlastitemcost;
            }
            set
            {
                asycudadocumentitemlastitemcost = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= "applicationsettingsid is required")]
       [NumberValidationAttribute]
public int applicationsettingsid
		{ 
		    get { return this.asycudadocumentitemlastitemcost.applicationsettingsid; }
			set
			{
			    if (value == this.asycudadocumentitemlastitemcost.applicationsettingsid) return;
				this.asycudadocumentitemlastitemcost.applicationsettingsid = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("applicationsettingsid");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ItemNumber is required")]
       
                
                [MaxLength(50, ErrorMessage = "ItemNumber has a max length of 50 letters ")]
public string ItemNumber
		{ 
		    get { return this.asycudadocumentitemlastitemcost.ItemNumber; }
			set
			{
			    if (value == this.asycudadocumentitemlastitemcost.ItemNumber) return;
				this.asycudadocumentitemlastitemcost.ItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemNumber");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> LocalItemCost
		{ 
		    get { return this.asycudadocumentitemlastitemcost.LocalItemCost; }
			set
			{
			    if (value == this.asycudadocumentitemlastitemcost.LocalItemCost) return;
				this.asycudadocumentitemlastitemcost.LocalItemCost = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LocalItemCost");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "assessmentdate is required")]
       
public System.DateTime assessmentdate
		{ 
		    get { return this.asycudadocumentitemlastitemcost.assessmentdate; }
			set
			{
			    if (value == this.asycudadocumentitemlastitemcost.assessmentdate) return;
				this.asycudadocumentitemlastitemcost.assessmentdate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("assessmentdate");
			}
		}
     


        ChangeTrackingCollection<DTO.AsycudaDocumentItemLastItemCost> _changeTracker;    
        public ChangeTrackingCollection<DTO.AsycudaDocumentItemLastItemCost> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



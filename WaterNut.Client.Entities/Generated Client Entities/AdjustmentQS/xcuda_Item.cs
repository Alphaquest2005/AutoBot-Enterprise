// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using AdjustmentQS.Client.DTO;


using Core.Common.Validation;

namespace AdjustmentQS.Client.Entities
{
       public partial class xcuda_Item: BaseEntity<xcuda_Item>
    {
        DTO.xcuda_Item xcuda_item;
        public xcuda_Item(DTO.xcuda_Item dto )
        {
              xcuda_item = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.xcuda_Item>(xcuda_item);

        }

        public DTO.xcuda_Item DTO
        {
            get
            {
             return xcuda_item;
            }
            set
            {
                xcuda_item = value;
            }
        }
        


       
       
                
                [MaxLength(10, ErrorMessage = "Amount_deducted_from_licence has a max length of 10 letters ")]
public string Amount_deducted_from_licence
		{ 
		    get { return this.xcuda_item.Amount_deducted_from_licence; }
			set
			{
			    if (value == this.xcuda_item.Amount_deducted_from_licence) return;
				this.xcuda_item.Amount_deducted_from_licence = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Amount_deducted_from_licence");
			}
		}
     

       
       
                
                [MaxLength(4, ErrorMessage = "Quantity_deducted_from_licence has a max length of 4 letters ")]
public string Quantity_deducted_from_licence
		{ 
		    get { return this.xcuda_item.Quantity_deducted_from_licence; }
			set
			{
			    if (value == this.xcuda_item.Quantity_deducted_from_licence) return;
				this.xcuda_item.Quantity_deducted_from_licence = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Quantity_deducted_from_licence");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Item_ is required")]
       
public int Item_Id
		{ 
		    get { return this.xcuda_item.Item_Id; }
			set
			{
			    if (value == this.xcuda_item.Item_Id) return;
				this.xcuda_item.Item_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Item_Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ASYCUDA_ is required")]
       
public int ASYCUDA_Id
		{ 
		    get { return this.xcuda_item.ASYCUDA_Id; }
			set
			{
			    if (value == this.xcuda_item.ASYCUDA_Id) return;
				this.xcuda_item.ASYCUDA_Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ASYCUDA_Id");
			}
		}
     

       
       
                
                [MaxLength(6, ErrorMessage = "Licence_number has a max length of 6 letters ")]
public string Licence_number
		{ 
		    get { return this.xcuda_item.Licence_number; }
			set
			{
			    if (value == this.xcuda_item.Licence_number) return;
				this.xcuda_item.Licence_number = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Licence_number");
			}
		}
     

       
       
                
                [MaxLength(30, ErrorMessage = "Free_text_1 has a max length of 30 letters ")]
public string Free_text_1
		{ 
		    get { return this.xcuda_item.Free_text_1; }
			set
			{
			    if (value == this.xcuda_item.Free_text_1) return;
				this.xcuda_item.Free_text_1 = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Free_text_1");
			}
		}
     

       
       
                
                [MaxLength(30, ErrorMessage = "Free_text_2 has a max length of 30 letters ")]
public string Free_text_2
		{ 
		    get { return this.xcuda_item.Free_text_2; }
			set
			{
			    if (value == this.xcuda_item.Free_text_2) return;
				this.xcuda_item.Free_text_2 = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Free_text_2");
			}
		}
     

       
       
public Nullable<int> EntryDataDetailsId
		{ 
		    get { return this.xcuda_item.EntryDataDetailsId; }
			set
			{
			    if (value == this.xcuda_item.EntryDataDetailsId) return;
				this.xcuda_item.EntryDataDetailsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryDataDetailsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "LineNumber is required")]
       [NumberValidationAttribute]
public int LineNumber
		{ 
		    get { return this.xcuda_item.LineNumber; }
			set
			{
			    if (value == this.xcuda_item.LineNumber) return;
				this.xcuda_item.LineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineNumber");
			}
		}
     

       
       
public Nullable<bool> IsAssessed
		{ 
		    get { return this.xcuda_item.IsAssessed; }
			set
			{
			    if (value == this.xcuda_item.IsAssessed) return;
				this.xcuda_item.IsAssessed = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsAssessed");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DPQtyAllocated is required")]
       [NumberValidationAttribute]
public double DPQtyAllocated
		{ 
		    get { return this.xcuda_item.DPQtyAllocated; }
			set
			{
			    if (value == this.xcuda_item.DPQtyAllocated) return;
				this.xcuda_item.DPQtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DPQtyAllocated");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DFQtyAllocated is required")]
       [NumberValidationAttribute]
public double DFQtyAllocated
		{ 
		    get { return this.xcuda_item.DFQtyAllocated; }
			set
			{
			    if (value == this.xcuda_item.DFQtyAllocated) return;
				this.xcuda_item.DFQtyAllocated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DFQtyAllocated");
			}
		}
     

       
       
public Nullable<System.DateTime> EntryTimeStamp
		{ 
		    get { return this.xcuda_item.EntryTimeStamp; }
			set
			{
			    if (value == this.xcuda_item.EntryTimeStamp) return;
				this.xcuda_item.EntryTimeStamp = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntryTimeStamp");
			}
		}
     

       
       
public Nullable<bool> AttributeOnlyAllocation
		{ 
		    get { return this.xcuda_item.AttributeOnlyAllocation; }
			set
			{
			    if (value == this.xcuda_item.AttributeOnlyAllocation) return;
				this.xcuda_item.AttributeOnlyAllocation = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AttributeOnlyAllocation");
			}
		}
     

       
       
public Nullable<bool> DoNotAllocate
		{ 
		    get { return this.xcuda_item.DoNotAllocate; }
			set
			{
			    if (value == this.xcuda_item.DoNotAllocate) return;
				this.xcuda_item.DoNotAllocate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotAllocate");
			}
		}
     

       
       
public Nullable<bool> DoNotEX
		{ 
		    get { return this.xcuda_item.DoNotEX; }
			set
			{
			    if (value == this.xcuda_item.DoNotEX) return;
				this.xcuda_item.DoNotEX = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotEX");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ImportComplete is required")]
       
public bool ImportComplete
		{ 
		    get { return this.xcuda_item.ImportComplete; }
			set
			{
			    if (value == this.xcuda_item.ImportComplete) return;
				this.xcuda_item.ImportComplete = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ImportComplete");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "WarehouseError has a max length of 50 letters ")]
public string WarehouseError
		{ 
		    get { return this.xcuda_item.WarehouseError; }
			set
			{
			    if (value == this.xcuda_item.WarehouseError) return;
				this.xcuda_item.WarehouseError = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("WarehouseError");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "SalesFactor is required")]
       [NumberValidationAttribute]
public double SalesFactor
		{ 
		    get { return this.xcuda_item.SalesFactor; }
			set
			{
			    if (value == this.xcuda_item.SalesFactor) return;
				this.xcuda_item.SalesFactor = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SalesFactor");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceNumber has a max length of 50 letters ")]
public string PreviousInvoiceNumber
		{ 
		    get { return this.xcuda_item.PreviousInvoiceNumber; }
			set
			{
			    if (value == this.xcuda_item.PreviousInvoiceNumber) return;
				this.xcuda_item.PreviousInvoiceNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceNumber");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceLineNumber has a max length of 50 letters ")]
public string PreviousInvoiceLineNumber
		{ 
		    get { return this.xcuda_item.PreviousInvoiceLineNumber; }
			set
			{
			    if (value == this.xcuda_item.PreviousInvoiceLineNumber) return;
				this.xcuda_item.PreviousInvoiceLineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceLineNumber");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PreviousInvoiceItemNumber has a max length of 50 letters ")]
public string PreviousInvoiceItemNumber
		{ 
		    get { return this.xcuda_item.PreviousInvoiceItemNumber; }
			set
			{
			    if (value == this.xcuda_item.PreviousInvoiceItemNumber) return;
				this.xcuda_item.PreviousInvoiceItemNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousInvoiceItemNumber");
			}
		}
     

        ObservableCollection<AsycudaSalesAllocation> _AsycudaSalesAllocations = null;
        public  ObservableCollection<AsycudaSalesAllocation> AsycudaSalesAllocations
		{
            
		    get 
				{ 
					if(_AsycudaSalesAllocations != null) return _AsycudaSalesAllocations;
					//if (this.xcuda_item.AsycudaSalesAllocations == null) Debugger.Break();
					if(this.xcuda_item.AsycudaSalesAllocations != null)
					{
						_AsycudaSalesAllocations = new ObservableCollection<AsycudaSalesAllocation>(this.xcuda_item.AsycudaSalesAllocations.Select(x => new AsycudaSalesAllocation(x)));
					}
					
						_AsycudaSalesAllocations.CollectionChanged += AsycudaSalesAllocations_CollectionChanged; 
					
					return _AsycudaSalesAllocations; 
				}
			set
			{
			    if (Equals(value, _AsycudaSalesAllocations)) return;
				if (value != null)
					this.xcuda_item.AsycudaSalesAllocations = new ChangeTrackingCollection<DTO.AsycudaSalesAllocation>(value.Select(x => x.DTO).ToList());
                _AsycudaSalesAllocations = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AsycudaSalesAllocations != null)
				_AsycudaSalesAllocations.CollectionChanged += AsycudaSalesAllocations_CollectionChanged;               
				NotifyPropertyChanged("AsycudaSalesAllocations");
			}
		}
        
        void AsycudaSalesAllocations_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AsycudaSalesAllocation itm in e.NewItems)
                    {
                        if (itm != null)
                        xcuda_item.AsycudaSalesAllocations.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AsycudaSalesAllocation itm in e.OldItems)
                    {
                        if (itm != null)
                        xcuda_item.AsycudaSalesAllocations.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<AdjustmentOversAllocation> _AdjustmentOversAllocations = null;
        public  ObservableCollection<AdjustmentOversAllocation> AdjustmentOversAllocations
		{
            
		    get 
				{ 
					if(_AdjustmentOversAllocations != null) return _AdjustmentOversAllocations;
					//if (this.xcuda_item.AdjustmentOversAllocations == null) Debugger.Break();
					if(this.xcuda_item.AdjustmentOversAllocations != null)
					{
						_AdjustmentOversAllocations = new ObservableCollection<AdjustmentOversAllocation>(this.xcuda_item.AdjustmentOversAllocations.Select(x => new AdjustmentOversAllocation(x)));
					}
					
						_AdjustmentOversAllocations.CollectionChanged += AdjustmentOversAllocations_CollectionChanged; 
					
					return _AdjustmentOversAllocations; 
				}
			set
			{
			    if (Equals(value, _AdjustmentOversAllocations)) return;
				if (value != null)
					this.xcuda_item.AdjustmentOversAllocations = new ChangeTrackingCollection<DTO.AdjustmentOversAllocation>(value.Select(x => x.DTO).ToList());
                _AdjustmentOversAllocations = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_AdjustmentOversAllocations != null)
				_AdjustmentOversAllocations.CollectionChanged += AdjustmentOversAllocations_CollectionChanged;               
				NotifyPropertyChanged("AdjustmentOversAllocations");
			}
		}
        
        void AdjustmentOversAllocations_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (AdjustmentOversAllocation itm in e.NewItems)
                    {
                        if (itm != null)
                        xcuda_item.AdjustmentOversAllocations.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (AdjustmentOversAllocation itm in e.OldItems)
                    {
                        if (itm != null)
                        xcuda_item.AdjustmentOversAllocations.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.xcuda_Item> _changeTracker;    
        public ChangeTrackingCollection<DTO.xcuda_Item> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class Parts: BaseEntity<Parts>
    {
        DTO.Parts parts;
        public Parts(DTO.Parts dto )
        {
              parts = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Parts>(parts);

        }

        public DTO.Parts DTO
        {
            get
            {
             return parts;
            }
            set
            {
                parts = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.parts.Id; }
			set
			{
			    if (value == this.parts.Id) return;
				this.parts.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Template is required")]
       
public int TemplateId
		{ 
		    get { return this.parts.TemplateId; }
			set
			{
			    if (value == this.parts.TemplateId) return;
				this.parts.TemplateId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TemplateId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "PartType is required")]
       
public int PartTypeId
		{ 
		    get { return this.parts.PartTypeId; }
			set
			{
			    if (value == this.parts.PartTypeId) return;
				this.parts.PartTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PartTypeId");
			}
		}
     

        ObservableCollection<End> _End = null;
        public  ObservableCollection<End> End
		{
            
		    get 
				{ 
					if(_End != null) return _End;
					//if (this.parts.End == null) Debugger.Break();
					if(this.parts.End != null)
					{
						_End = new ObservableCollection<End>(this.parts.End.Select(x => new End(x)));
					}
					
						_End.CollectionChanged += End_CollectionChanged; 
					
					return _End; 
				}
			set
			{
			    if (Equals(value, _End)) return;
				if (value != null)
					this.parts.End = new ChangeTrackingCollection<DTO.End>(value.Select(x => x.DTO).ToList());
                _End = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_End != null)
				_End.CollectionChanged += End_CollectionChanged;               
				NotifyPropertyChanged("End");
			}
		}
        
        void End_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (End itm in e.NewItems)
                    {
                        if (itm != null)
                        parts.End.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (End itm in e.OldItems)
                    {
                        if (itm != null)
                        parts.End.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private Templates _Templates;
        public  Templates Templates
		{
		    get
               { 
                  if (this.parts != null)
                   {
                       if (_Templates != null)
                       {
                           if (this.parts.Templates !=
                               _Templates.DTO)
                           {
                                if (this.parts.Templates  != null)
                               _Templates = new Templates(this.parts.Templates);
                           }
                       }
                       else
                       {
                             if (this.parts.Templates  != null)
                           _Templates = new Templates(this.parts.Templates);
                       }
                   }


             //       if (_Templates != null) return _Templates;
                       
             //       var i = new Templates(){TrackingState = TrackingState.Added};
			//		//if (this.parts.Templates == null) Debugger.Break();
			//		if (this.parts.Templates != null)
            //        {
            //           i. = this.parts.Templates;
            //        }
            //        else
            //        {
            //            this.parts.Templates = i.;
             //       }
                           
            //        _Templates = i;
                     
                    return _Templates;
               }
			set
			{
			    if (value == _Templates) return;
                _Templates = value;
                if(value != null)
                     this.parts.Templates = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("Templates");
			}
		}
        

       private PartTypes _PartTypes;
        public  PartTypes PartTypes
		{
		    get
               { 
                  if (this.parts != null)
                   {
                       if (_PartTypes != null)
                       {
                           if (this.parts.PartTypes !=
                               _PartTypes.DTO)
                           {
                                if (this.parts.PartTypes  != null)
                               _PartTypes = new PartTypes(this.parts.PartTypes);
                           }
                       }
                       else
                       {
                             if (this.parts.PartTypes  != null)
                           _PartTypes = new PartTypes(this.parts.PartTypes);
                       }
                   }


             //       if (_PartTypes != null) return _PartTypes;
                       
             //       var i = new PartTypes(){TrackingState = TrackingState.Added};
			//		//if (this.parts.PartTypes == null) Debugger.Break();
			//		if (this.parts.PartTypes != null)
            //        {
            //           i. = this.parts.PartTypes;
            //        }
            //        else
            //        {
            //            this.parts.PartTypes = i.;
             //       }
                           
            //        _PartTypes = i;
                     
                    return _PartTypes;
               }
			set
			{
			    if (value == _PartTypes) return;
                _PartTypes = value;
                if(value != null)
                     this.parts.PartTypes = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("PartTypes");
			}
		}
        

        ObservableCollection<Start> _Start = null;
        public  ObservableCollection<Start> Start
		{
            
		    get 
				{ 
					if(_Start != null) return _Start;
					//if (this.parts.Start == null) Debugger.Break();
					if(this.parts.Start != null)
					{
						_Start = new ObservableCollection<Start>(this.parts.Start.Select(x => new Start(x)));
					}
					
						_Start.CollectionChanged += Start_CollectionChanged; 
					
					return _Start; 
				}
			set
			{
			    if (Equals(value, _Start)) return;
				if (value != null)
					this.parts.Start = new ChangeTrackingCollection<DTO.Start>(value.Select(x => x.DTO).ToList());
                _Start = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Start != null)
				_Start.CollectionChanged += Start_CollectionChanged;               
				NotifyPropertyChanged("Start");
			}
		}
        
        void Start_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Start itm in e.NewItems)
                    {
                        if (itm != null)
                        parts.Start.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Start itm in e.OldItems)
                    {
                        if (itm != null)
                        parts.Start.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<Lines> _Lines = null;
        public  ObservableCollection<Lines> Lines
		{
            
		    get 
				{ 
					if(_Lines != null) return _Lines;
					//if (this.parts.Lines == null) Debugger.Break();
					if(this.parts.Lines != null)
					{
						_Lines = new ObservableCollection<Lines>(this.parts.Lines.Select(x => new Lines(x)));
					}
					
						_Lines.CollectionChanged += Lines_CollectionChanged; 
					
					return _Lines; 
				}
			set
			{
			    if (Equals(value, _Lines)) return;
				if (value != null)
					this.parts.Lines = new ChangeTrackingCollection<DTO.Lines>(value.Select(x => x.DTO).ToList());
                _Lines = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Lines != null)
				_Lines.CollectionChanged += Lines_CollectionChanged;               
				NotifyPropertyChanged("Lines");
			}
		}
        
        void Lines_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Lines itm in e.NewItems)
                    {
                        if (itm != null)
                        parts.Lines.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Lines itm in e.OldItems)
                    {
                        if (itm != null)
                        parts.Lines.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private RecuringPart _RecuringPart;
        public  RecuringPart RecuringPart
		{
		    get
               { 
                  if (this.parts != null)
                   {
                       if (_RecuringPart != null)
                       {
                           if (this.parts.RecuringPart !=
                               _RecuringPart.DTO)
                           {
                                if (this.parts.RecuringPart  != null)
                               _RecuringPart = new RecuringPart(this.parts.RecuringPart);
                           }
                       }
                       else
                       {
                             if (this.parts.RecuringPart  != null)
                           _RecuringPart = new RecuringPart(this.parts.RecuringPart);
                       }
                   }


             //       if (_RecuringPart != null) return _RecuringPart;
                       
             //       var i = new RecuringPart(){TrackingState = TrackingState.Added};
			//		//if (this.parts.RecuringPart == null) Debugger.Break();
			//		if (this.parts.RecuringPart != null)
            //        {
            //           i. = this.parts.RecuringPart;
            //        }
            //        else
            //        {
            //            this.parts.RecuringPart = i.;
             //       }
                           
            //        _RecuringPart = i;
                     
                    return _RecuringPart;
               }
			set
			{
			    if (value == _RecuringPart) return;
                _RecuringPart = value;
                if(value != null)
                     this.parts.RecuringPart = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("RecuringPart");
			}
		}
        

        ObservableCollection<ChildParts> _ChildParts = null;
        public  ObservableCollection<ChildParts> ChildParts
		{
            
		    get 
				{ 
					if(_ChildParts != null) return _ChildParts;
					//if (this.parts.ChildParts == null) Debugger.Break();
					if(this.parts.ChildParts != null)
					{
						_ChildParts = new ObservableCollection<ChildParts>(this.parts.ChildParts.Select(x => new ChildParts(x)));
					}
					
						_ChildParts.CollectionChanged += ChildParts_CollectionChanged; 
					
					return _ChildParts; 
				}
			set
			{
			    if (Equals(value, _ChildParts)) return;
				if (value != null)
					this.parts.ChildParts = new ChangeTrackingCollection<DTO.ChildParts>(value.Select(x => x.DTO).ToList());
                _ChildParts = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_ChildParts != null)
				_ChildParts.CollectionChanged += ChildParts_CollectionChanged;               
				NotifyPropertyChanged("ChildParts");
			}
		}
        
        void ChildParts_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (ChildParts itm in e.NewItems)
                    {
                        if (itm != null)
                        parts.ChildParts.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (ChildParts itm in e.OldItems)
                    {
                        if (itm != null)
                        parts.ChildParts.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<ChildParts> _ParentParts = null;
        public  ObservableCollection<ChildParts> ParentParts
		{
            
		    get 
				{ 
					if(_ParentParts != null) return _ParentParts;
					//if (this.parts.ParentParts == null) Debugger.Break();
					if(this.parts.ParentParts != null)
					{
						_ParentParts = new ObservableCollection<ChildParts>(this.parts.ParentParts.Select(x => new ChildParts(x)));
					}
					
						_ParentParts.CollectionChanged += ParentParts_CollectionChanged; 
					
					return _ParentParts; 
				}
			set
			{
			    if (Equals(value, _ParentParts)) return;
				if (value != null)
					this.parts.ParentParts = new ChangeTrackingCollection<DTO.ChildParts>(value.Select(x => x.DTO).ToList());
                _ParentParts = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_ParentParts != null)
				_ParentParts.CollectionChanged += ParentParts_CollectionChanged;               
				NotifyPropertyChanged("ParentParts");
			}
		}
        
        void ParentParts_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (ChildParts itm in e.NewItems)
                    {
                        if (itm != null)
                        parts.ParentParts.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (ChildParts itm in e.OldItems)
                    {
                        if (itm != null)
                        parts.ParentParts.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.Parts> _changeTracker;    
        public ChangeTrackingCollection<DTO.Parts> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



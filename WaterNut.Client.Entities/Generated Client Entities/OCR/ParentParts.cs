// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class ParentParts: BaseEntity<ParentParts>
    {
        DTO.ParentParts parentparts;
        public ParentParts(DTO.ParentParts dto )
        {
              parentparts = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.ParentParts>(parentparts);

        }

        public DTO.ParentParts DTO
        {
            get
            {
             return parentparts;
            }
            set
            {
                parentparts = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.parentparts.Id; }
			set
			{
			    if (value == this.parentparts.Id) return;
				this.parentparts.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ParentPart is required")]
       
public int ParentPartId
		{ 
		    get { return this.parentparts.ParentPartId; }
			set
			{
			    if (value == this.parentparts.ParentPartId) return;
				this.parentparts.ParentPartId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ParentPartId");
			}
		}
     

       private Parts _Part;
        public  Parts Part
		{
		    get
               { 
                  if (this.parentparts != null)
                   {
                       if (_Part != null)
                       {
                           if (this.parentparts.Part !=
                               _Part.DTO)
                           {
                                if (this.parentparts.Part  != null)
                               _Part = new Parts(this.parentparts.Part);
                           }
                       }
                       else
                       {
                             if (this.parentparts.Part  != null)
                           _Part = new Parts(this.parentparts.Part);
                       }
                   }


             //       if (_Part != null) return _Part;
                       
             //       var i = new Parts(){TrackingState = TrackingState.Added};
			//		//if (this.parentparts.Part == null) Debugger.Break();
			//		if (this.parentparts.Part != null)
            //        {
            //           i. = this.parentparts.Part;
            //        }
            //        else
            //        {
            //            this.parentparts.Part = i.;
             //       }
                           
            //        _Part = i;
                     
                    return _Part;
               }
			set
			{
			    if (value == _Part) return;
                _Part = value;
                if(value != null)
                     this.parentparts.Part = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("Part");
			}
		}
        

       private Parts _ParentPart;
        public  Parts ParentPart
		{
		    get
               { 
                  if (this.parentparts != null)
                   {
                       if (_ParentPart != null)
                       {
                           if (this.parentparts.ParentPart !=
                               _ParentPart.DTO)
                           {
                                if (this.parentparts.ParentPart  != null)
                               _ParentPart = new Parts(this.parentparts.ParentPart);
                           }
                       }
                       else
                       {
                             if (this.parentparts.ParentPart  != null)
                           _ParentPart = new Parts(this.parentparts.ParentPart);
                       }
                   }


             //       if (_ParentPart != null) return _ParentPart;
                       
             //       var i = new Parts(){TrackingState = TrackingState.Added};
			//		//if (this.parentparts.ParentPart == null) Debugger.Break();
			//		if (this.parentparts.ParentPart != null)
            //        {
            //           i. = this.parentparts.ParentPart;
            //        }
            //        else
            //        {
            //            this.parentparts.ParentPart = i.;
             //       }
                           
            //        _ParentPart = i;
                     
                    return _ParentPart;
               }
			set
			{
			    if (value == _ParentPart) return;
                _ParentPart = value;
                if(value != null)
                     this.parentparts.ParentPart = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("ParentPart");
			}
		}
        


        ChangeTrackingCollection<DTO.ParentParts> _changeTracker;    
        public ChangeTrackingCollection<DTO.ParentParts> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



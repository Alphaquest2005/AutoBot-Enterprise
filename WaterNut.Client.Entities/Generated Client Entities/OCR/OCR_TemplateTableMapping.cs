// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class OCR_TemplateTableMapping: BaseEntity<OCR_TemplateTableMapping>
    {
        DTO.OCR_TemplateTableMapping ocr_templatetablemapping;
        public OCR_TemplateTableMapping(DTO.OCR_TemplateTableMapping dto )
        {
              ocr_templatetablemapping = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.OCR_TemplateTableMapping>(ocr_templatetablemapping);

        }

        public DTO.OCR_TemplateTableMapping DTO
        {
            get
            {
             return ocr_templatetablemapping;
            }
            set
            {
                ocr_templatetablemapping = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.ocr_templatetablemapping.Id; }
			set
			{
			    if (value == this.ocr_templatetablemapping.Id) return;
				this.ocr_templatetablemapping.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DocumentType is required")]
       
                
                [MaxLength(100, ErrorMessage = "DocumentType has a max length of 100 letters ")]
public string DocumentType
		{ 
		    get { return this.ocr_templatetablemapping.DocumentType; }
			set
			{
			    if (value == this.ocr_templatetablemapping.DocumentType) return;
				this.ocr_templatetablemapping.DocumentType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocumentType");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "TargetTable is required")]
       
                
                [MaxLength(100, ErrorMessage = "TargetTable has a max length of 100 letters ")]
public string TargetTable
		{ 
		    get { return this.ocr_templatetablemapping.TargetTable; }
			set
			{
			    if (value == this.ocr_templatetablemapping.TargetTable) return;
				this.ocr_templatetablemapping.TargetTable = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TargetTable");
			}
		}
     

       
       
public Nullable<int> ParentId
		{ 
		    get { return this.ocr_templatetablemapping.ParentId; }
			set
			{
			    if (value == this.ocr_templatetablemapping.ParentId) return;
				this.ocr_templatetablemapping.ParentId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ParentId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Keywords is required")]
       
                
                
public string Keywords
		{ 
		    get { return this.ocr_templatetablemapping.Keywords; }
			set
			{
			    if (value == this.ocr_templatetablemapping.Keywords) return;
				this.ocr_templatetablemapping.Keywords = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Keywords");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "RequiredFields is required")]
       
                
                [MaxLength(500, ErrorMessage = "RequiredFields has a max length of 500 letters ")]
public string RequiredFields
		{ 
		    get { return this.ocr_templatetablemapping.RequiredFields; }
			set
			{
			    if (value == this.ocr_templatetablemapping.RequiredFields) return;
				this.ocr_templatetablemapping.RequiredFields = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RequiredFields");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "TemplatePrefix is required")]
       
                
                [MaxLength(10, ErrorMessage = "TemplatePrefix has a max length of 10 letters ")]
public string TemplatePrefix
		{ 
		    get { return this.ocr_templatetablemapping.TemplatePrefix; }
			set
			{
			    if (value == this.ocr_templatetablemapping.TemplatePrefix) return;
				this.ocr_templatetablemapping.TemplatePrefix = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TemplatePrefix");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Priority is required")]
       [NumberValidationAttribute]
public int Priority
		{ 
		    get { return this.ocr_templatetablemapping.Priority; }
			set
			{
			    if (value == this.ocr_templatetablemapping.Priority) return;
				this.ocr_templatetablemapping.Priority = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Priority");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "IsActive is required")]
       
public bool IsActive
		{ 
		    get { return this.ocr_templatetablemapping.IsActive; }
			set
			{
			    if (value == this.ocr_templatetablemapping.IsActive) return;
				this.ocr_templatetablemapping.IsActive = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsActive");
			}
		}
     

       
       
                
                [MaxLength(255, ErrorMessage = "Description has a max length of 255 letters ")]
public string Description
		{ 
		    get { return this.ocr_templatetablemapping.Description; }
			set
			{
			    if (value == this.ocr_templatetablemapping.Description) return;
				this.ocr_templatetablemapping.Description = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description");
			}
		}
     

       
       
public Nullable<int> ParentTemplateTableId
		{ 
		    get { return this.ocr_templatetablemapping.ParentTemplateTableId; }
			set
			{
			    if (value == this.ocr_templatetablemapping.ParentTemplateTableId) return;
				this.ocr_templatetablemapping.ParentTemplateTableId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ParentTemplateTableId");
			}
		}
     

       
       
                
                [MaxLength(500, ErrorMessage = "OptionalFields has a max length of 500 letters ")]
public string OptionalFields
		{ 
		    get { return this.ocr_templatetablemapping.OptionalFields; }
			set
			{
			    if (value == this.ocr_templatetablemapping.OptionalFields) return;
				this.ocr_templatetablemapping.OptionalFields = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("OptionalFields");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "MatchThreshold is required")]
       [NumberValidationAttribute]
public decimal MatchThreshold
		{ 
		    get { return this.ocr_templatetablemapping.MatchThreshold; }
			set
			{
			    if (value == this.ocr_templatetablemapping.MatchThreshold) return;
				this.ocr_templatetablemapping.MatchThreshold = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("MatchThreshold");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "IsSystemEntity is required")]
       
public bool IsSystemEntity
		{ 
		    get { return this.ocr_templatetablemapping.IsSystemEntity; }
			set
			{
			    if (value == this.ocr_templatetablemapping.IsSystemEntity) return;
				this.ocr_templatetablemapping.IsSystemEntity = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsSystemEntity");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CreatedDate is required")]
       
public System.DateTime CreatedDate
		{ 
		    get { return this.ocr_templatetablemapping.CreatedDate; }
			set
			{
			    if (value == this.ocr_templatetablemapping.CreatedDate) return;
				this.ocr_templatetablemapping.CreatedDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CreatedDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "LastUpdated is required")]
       
public System.DateTime LastUpdated
		{ 
		    get { return this.ocr_templatetablemapping.LastUpdated; }
			set
			{
			    if (value == this.ocr_templatetablemapping.LastUpdated) return;
				this.ocr_templatetablemapping.LastUpdated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LastUpdated");
			}
		}
     

       
       
                
                [MaxLength(100, ErrorMessage = "CreatedBy has a max length of 100 letters ")]
public string CreatedBy
		{ 
		    get { return this.ocr_templatetablemapping.CreatedBy; }
			set
			{
			    if (value == this.ocr_templatetablemapping.CreatedBy) return;
				this.ocr_templatetablemapping.CreatedBy = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CreatedBy");
			}
		}
     

       
       
                
                
public string ProcessingNotes
		{ 
		    get { return this.ocr_templatetablemapping.ProcessingNotes; }
			set
			{
			    if (value == this.ocr_templatetablemapping.ProcessingNotes) return;
				this.ocr_templatetablemapping.ProcessingNotes = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ProcessingNotes");
			}
		}
     

        ObservableCollection<OCR_KeywordDetectionLog> _OCR_KeywordDetectionLog = null;
        public  ObservableCollection<OCR_KeywordDetectionLog> OCR_KeywordDetectionLog
		{
            
		    get 
				{ 
					if(_OCR_KeywordDetectionLog != null) return _OCR_KeywordDetectionLog;
					//if (this.ocr_templatetablemapping.OCR_KeywordDetectionLog == null) Debugger.Break();
					if(this.ocr_templatetablemapping.OCR_KeywordDetectionLog != null)
					{
						_OCR_KeywordDetectionLog = new ObservableCollection<OCR_KeywordDetectionLog>(this.ocr_templatetablemapping.OCR_KeywordDetectionLog.Select(x => new OCR_KeywordDetectionLog(x)));
					}
					
						_OCR_KeywordDetectionLog.CollectionChanged += OCR_KeywordDetectionLog_CollectionChanged; 
					
					return _OCR_KeywordDetectionLog; 
				}
			set
			{
			    if (Equals(value, _OCR_KeywordDetectionLog)) return;
				if (value != null)
					this.ocr_templatetablemapping.OCR_KeywordDetectionLog = new ChangeTrackingCollection<DTO.OCR_KeywordDetectionLog>(value.Select(x => x.DTO).ToList());
                _OCR_KeywordDetectionLog = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_OCR_KeywordDetectionLog != null)
				_OCR_KeywordDetectionLog.CollectionChanged += OCR_KeywordDetectionLog_CollectionChanged;               
				NotifyPropertyChanged("OCR_KeywordDetectionLog");
			}
		}
        
        void OCR_KeywordDetectionLog_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (OCR_KeywordDetectionLog itm in e.NewItems)
                    {
                        if (itm != null)
                        ocr_templatetablemapping.OCR_KeywordDetectionLog.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (OCR_KeywordDetectionLog itm in e.OldItems)
                    {
                        if (itm != null)
                        ocr_templatetablemapping.OCR_KeywordDetectionLog.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<OCR_TemplateTableMapping> _OCR_TemplateTableMapping1 = null;
        public  ObservableCollection<OCR_TemplateTableMapping> OCR_TemplateTableMapping1
		{
            
		    get 
				{ 
					if(_OCR_TemplateTableMapping1 != null) return _OCR_TemplateTableMapping1;
					//if (this.ocr_templatetablemapping.OCR_TemplateTableMapping1 == null) Debugger.Break();
					if(this.ocr_templatetablemapping.OCR_TemplateTableMapping1 != null)
					{
						_OCR_TemplateTableMapping1 = new ObservableCollection<OCR_TemplateTableMapping>(this.ocr_templatetablemapping.OCR_TemplateTableMapping1.Select(x => new OCR_TemplateTableMapping(x)));
					}
					
						_OCR_TemplateTableMapping1.CollectionChanged += OCR_TemplateTableMapping1_CollectionChanged; 
					
					return _OCR_TemplateTableMapping1; 
				}
			set
			{
			    if (Equals(value, _OCR_TemplateTableMapping1)) return;
				if (value != null)
					this.ocr_templatetablemapping.OCR_TemplateTableMapping1 = new ChangeTrackingCollection<DTO.OCR_TemplateTableMapping>(value.Select(x => x.DTO).ToList());
                _OCR_TemplateTableMapping1 = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_OCR_TemplateTableMapping1 != null)
				_OCR_TemplateTableMapping1.CollectionChanged += OCR_TemplateTableMapping1_CollectionChanged;               
				NotifyPropertyChanged("OCR_TemplateTableMapping1");
			}
		}
        
        void OCR_TemplateTableMapping1_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (OCR_TemplateTableMapping itm in e.NewItems)
                    {
                        if (itm != null)
                        ocr_templatetablemapping.OCR_TemplateTableMapping1.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (OCR_TemplateTableMapping itm in e.OldItems)
                    {
                        if (itm != null)
                        ocr_templatetablemapping.OCR_TemplateTableMapping1.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private OCR_TemplateTableMapping _OCR_TemplateTableMapping2;
        public  OCR_TemplateTableMapping OCR_TemplateTableMapping2
		{
		    get
               { 
                  if (this.ocr_templatetablemapping != null)
                   {
                       if (_OCR_TemplateTableMapping2 != null)
                       {
                           if (this.ocr_templatetablemapping.OCR_TemplateTableMapping2 !=
                               _OCR_TemplateTableMapping2.DTO)
                           {
                                if (this.ocr_templatetablemapping.OCR_TemplateTableMapping2  != null)
                               _OCR_TemplateTableMapping2 = new OCR_TemplateTableMapping(this.ocr_templatetablemapping.OCR_TemplateTableMapping2);
                           }
                       }
                       else
                       {
                             if (this.ocr_templatetablemapping.OCR_TemplateTableMapping2  != null)
                           _OCR_TemplateTableMapping2 = new OCR_TemplateTableMapping(this.ocr_templatetablemapping.OCR_TemplateTableMapping2);
                       }
                   }


             //       if (_OCR_TemplateTableMapping2 != null) return _OCR_TemplateTableMapping2;
                       
             //       var i = new OCR_TemplateTableMapping(){TrackingState = TrackingState.Added};
			//		//if (this.ocr_templatetablemapping.OCR_TemplateTableMapping2 == null) Debugger.Break();
			//		if (this.ocr_templatetablemapping.OCR_TemplateTableMapping2 != null)
            //        {
            //           i. = this.ocr_templatetablemapping.OCR_TemplateTableMapping2;
            //        }
            //        else
            //        {
            //            this.ocr_templatetablemapping.OCR_TemplateTableMapping2 = i.;
             //       }
                           
            //        _OCR_TemplateTableMapping2 = i;
                     
                    return _OCR_TemplateTableMapping2;
               }
			set
			{
			    if (value == _OCR_TemplateTableMapping2) return;
                _OCR_TemplateTableMapping2 = value;
                if(value != null)
                     this.ocr_templatetablemapping.OCR_TemplateTableMapping2 = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("OCR_TemplateTableMapping2");
			}
		}
        


        ChangeTrackingCollection<DTO.OCR_TemplateTableMapping> _changeTracker;    
        public ChangeTrackingCollection<DTO.OCR_TemplateTableMapping> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



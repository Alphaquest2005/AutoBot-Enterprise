// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class RegularExpressions: BaseEntity<RegularExpressions>
    {
        DTO.RegularExpressions regularexpressions;
        public RegularExpressions(DTO.RegularExpressions dto )
        {
              regularexpressions = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.RegularExpressions>(regularexpressions);

        }

        public DTO.RegularExpressions DTO
        {
            get
            {
             return regularexpressions;
            }
            set
            {
                regularexpressions = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.regularexpressions.Id; }
			set
			{
			    if (value == this.regularexpressions.Id) return;
				this.regularexpressions.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "RegEx is required")]
       
                
                
public string RegEx
		{ 
		    get { return this.regularexpressions.RegEx; }
			set
			{
			    if (value == this.regularexpressions.RegEx) return;
				this.regularexpressions.RegEx = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegEx");
			}
		}
     

        ObservableCollection<End> _End = null;
        public  ObservableCollection<End> End
		{
            
		    get 
				{ 
					if(_End != null) return _End;
					//if (this.regularexpressions.End == null) Debugger.Break();
					if(this.regularexpressions.End != null)
					{
						_End = new ObservableCollection<End>(this.regularexpressions.End.Select(x => new End(x)));
					}
					
						_End.CollectionChanged += End_CollectionChanged; 
					
					return _End; 
				}
			set
			{
			    if (Equals(value, _End)) return;
				if (value != null)
					this.regularexpressions.End = new ChangeTrackingCollection<DTO.End>(value.Select(x => x.DTO).ToList());
                _End = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_End != null)
				_End.CollectionChanged += End_CollectionChanged;               
				NotifyPropertyChanged("End");
			}
		}
        
        void End_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (End itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.End.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (End itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.End.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<Lines> _Lines = null;
        public  ObservableCollection<Lines> Lines
		{
            
		    get 
				{ 
					if(_Lines != null) return _Lines;
					//if (this.regularexpressions.Lines == null) Debugger.Break();
					if(this.regularexpressions.Lines != null)
					{
						_Lines = new ObservableCollection<Lines>(this.regularexpressions.Lines.Select(x => new Lines(x)));
					}
					
						_Lines.CollectionChanged += Lines_CollectionChanged; 
					
					return _Lines; 
				}
			set
			{
			    if (Equals(value, _Lines)) return;
				if (value != null)
					this.regularexpressions.Lines = new ChangeTrackingCollection<DTO.Lines>(value.Select(x => x.DTO).ToList());
                _Lines = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Lines != null)
				_Lines.CollectionChanged += Lines_CollectionChanged;               
				NotifyPropertyChanged("Lines");
			}
		}
        
        void Lines_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Lines itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.Lines.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Lines itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.Lines.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<Start> _Start = null;
        public  ObservableCollection<Start> Start
		{
            
		    get 
				{ 
					if(_Start != null) return _Start;
					//if (this.regularexpressions.Start == null) Debugger.Break();
					if(this.regularexpressions.Start != null)
					{
						_Start = new ObservableCollection<Start>(this.regularexpressions.Start.Select(x => new Start(x)));
					}
					
						_Start.CollectionChanged += Start_CollectionChanged; 
					
					return _Start; 
				}
			set
			{
			    if (Equals(value, _Start)) return;
				if (value != null)
					this.regularexpressions.Start = new ChangeTrackingCollection<DTO.Start>(value.Select(x => x.DTO).ToList());
                _Start = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Start != null)
				_Start.CollectionChanged += Start_CollectionChanged;               
				NotifyPropertyChanged("Start");
			}
		}
        
        void Start_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Start itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.Start.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Start itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.Start.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.RegularExpressions> _changeTracker;    
        public ChangeTrackingCollection<DTO.RegularExpressions> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



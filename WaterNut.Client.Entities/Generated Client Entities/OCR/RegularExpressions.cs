// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class RegularExpressions: BaseEntity<RegularExpressions>
    {
        DTO.RegularExpressions regularexpressions;
        public RegularExpressions(DTO.RegularExpressions dto )
        {
              regularexpressions = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.RegularExpressions>(regularexpressions);

        }

        public DTO.RegularExpressions DTO
        {
            get
            {
             return regularexpressions;
            }
            set
            {
                regularexpressions = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.regularexpressions.Id; }
			set
			{
			    if (value == this.regularexpressions.Id) return;
				this.regularexpressions.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "RegEx is required")]
       
                
                
public string RegEx
		{ 
		    get { return this.regularexpressions.RegEx; }
			set
			{
			    if (value == this.regularexpressions.RegEx) return;
				this.regularexpressions.RegEx = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegEx");
			}
		}
     

       
       
public Nullable<bool> MultiLine
		{ 
		    get { return this.regularexpressions.MultiLine; }
			set
			{
			    if (value == this.regularexpressions.MultiLine) return;
				this.regularexpressions.MultiLine = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("MultiLine");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> MaxLines
		{ 
		    get { return this.regularexpressions.MaxLines; }
			set
			{
			    if (value == this.regularexpressions.MaxLines) return;
				this.regularexpressions.MaxLines = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("MaxLines");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CreatedDate is required")]
       
public System.DateTime CreatedDate
		{ 
		    get { return this.regularexpressions.CreatedDate; }
			set
			{
			    if (value == this.regularexpressions.CreatedDate) return;
				this.regularexpressions.CreatedDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CreatedDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "LastUpdated is required")]
       
public System.DateTime LastUpdated
		{ 
		    get { return this.regularexpressions.LastUpdated; }
			set
			{
			    if (value == this.regularexpressions.LastUpdated) return;
				this.regularexpressions.LastUpdated = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LastUpdated");
			}
		}
     

       
       
                
                [MaxLength(500, ErrorMessage = "Description has a max length of 500 letters ")]
public string Description
		{ 
		    get { return this.regularexpressions.Description; }
			set
			{
			    if (value == this.regularexpressions.Description) return;
				this.regularexpressions.Description = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description");
			}
		}
     

        ObservableCollection<End> _End = null;
        public  ObservableCollection<End> End
		{
            
		    get 
				{ 
					if(_End != null) return _End;
					//if (this.regularexpressions.End == null) Debugger.Break();
					if(this.regularexpressions.End != null)
					{
						_End = new ObservableCollection<End>(this.regularexpressions.End.Select(x => new End(x)));
					}
					
						_End.CollectionChanged += End_CollectionChanged; 
					
					return _End; 
				}
			set
			{
			    if (Equals(value, _End)) return;
				if (value != null)
					this.regularexpressions.End = new ChangeTrackingCollection<DTO.End>(value.Select(x => x.DTO).ToList());
                _End = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_End != null)
				_End.CollectionChanged += End_CollectionChanged;               
				NotifyPropertyChanged("End");
			}
		}
        
        void End_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (End itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.End.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (End itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.End.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<Lines> _Lines = null;
        public  ObservableCollection<Lines> Lines
		{
            
		    get 
				{ 
					if(_Lines != null) return _Lines;
					//if (this.regularexpressions.Lines == null) Debugger.Break();
					if(this.regularexpressions.Lines != null)
					{
						_Lines = new ObservableCollection<Lines>(this.regularexpressions.Lines.Select(x => new Lines(x)));
					}
					
						_Lines.CollectionChanged += Lines_CollectionChanged; 
					
					return _Lines; 
				}
			set
			{
			    if (Equals(value, _Lines)) return;
				if (value != null)
					this.regularexpressions.Lines = new ChangeTrackingCollection<DTO.Lines>(value.Select(x => x.DTO).ToList());
                _Lines = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Lines != null)
				_Lines.CollectionChanged += Lines_CollectionChanged;               
				NotifyPropertyChanged("Lines");
			}
		}
        
        void Lines_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Lines itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.Lines.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Lines itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.Lines.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<Start> _Start = null;
        public  ObservableCollection<Start> Start
		{
            
		    get 
				{ 
					if(_Start != null) return _Start;
					//if (this.regularexpressions.Start == null) Debugger.Break();
					if(this.regularexpressions.Start != null)
					{
						_Start = new ObservableCollection<Start>(this.regularexpressions.Start.Select(x => new Start(x)));
					}
					
						_Start.CollectionChanged += Start_CollectionChanged; 
					
					return _Start; 
				}
			set
			{
			    if (Equals(value, _Start)) return;
				if (value != null)
					this.regularexpressions.Start = new ChangeTrackingCollection<DTO.Start>(value.Select(x => x.DTO).ToList());
                _Start = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Start != null)
				_Start.CollectionChanged += Start_CollectionChanged;               
				NotifyPropertyChanged("Start");
			}
		}
        
        void Start_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Start itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.Start.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Start itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.Start.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<TemplateRegEx> _TemplateRegEx = null;
        public  ObservableCollection<TemplateRegEx> TemplateRegEx
		{
            
		    get 
				{ 
					if(_TemplateRegEx != null) return _TemplateRegEx;
					//if (this.regularexpressions.TemplateRegEx == null) Debugger.Break();
					if(this.regularexpressions.TemplateRegEx != null)
					{
						_TemplateRegEx = new ObservableCollection<TemplateRegEx>(this.regularexpressions.TemplateRegEx.Select(x => new TemplateRegEx(x)));
					}
					
						_TemplateRegEx.CollectionChanged += TemplateRegEx_CollectionChanged; 
					
					return _TemplateRegEx; 
				}
			set
			{
			    if (Equals(value, _TemplateRegEx)) return;
				if (value != null)
					this.regularexpressions.TemplateRegEx = new ChangeTrackingCollection<DTO.TemplateRegEx>(value.Select(x => x.DTO).ToList());
                _TemplateRegEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TemplateRegEx != null)
				_TemplateRegEx.CollectionChanged += TemplateRegEx_CollectionChanged;               
				NotifyPropertyChanged("TemplateRegEx");
			}
		}
        
        void TemplateRegEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateRegEx itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.TemplateRegEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateRegEx itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.TemplateRegEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<TemplateRegEx> _TemplateRepRegEx = null;
        public  ObservableCollection<TemplateRegEx> TemplateRepRegEx
		{
            
		    get 
				{ 
					if(_TemplateRepRegEx != null) return _TemplateRepRegEx;
					//if (this.regularexpressions.TemplateRepRegEx == null) Debugger.Break();
					if(this.regularexpressions.TemplateRepRegEx != null)
					{
						_TemplateRepRegEx = new ObservableCollection<TemplateRegEx>(this.regularexpressions.TemplateRepRegEx.Select(x => new TemplateRegEx(x)));
					}
					
						_TemplateRepRegEx.CollectionChanged += TemplateRepRegEx_CollectionChanged; 
					
					return _TemplateRepRegEx; 
				}
			set
			{
			    if (Equals(value, _TemplateRepRegEx)) return;
				if (value != null)
					this.regularexpressions.TemplateRepRegEx = new ChangeTrackingCollection<DTO.TemplateRegEx>(value.Select(x => x.DTO).ToList());
                _TemplateRepRegEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TemplateRepRegEx != null)
				_TemplateRepRegEx.CollectionChanged += TemplateRepRegEx_CollectionChanged;               
				NotifyPropertyChanged("TemplateRepRegEx");
			}
		}
        
        void TemplateRepRegEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateRegEx itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.TemplateRepRegEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateRegEx itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.TemplateRepRegEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<FieldFormatRegEx> _FieldFormatRegEx = null;
        public  ObservableCollection<FieldFormatRegEx> FieldFormatRegEx
		{
            
		    get 
				{ 
					if(_FieldFormatRegEx != null) return _FieldFormatRegEx;
					//if (this.regularexpressions.FieldFormatRegEx == null) Debugger.Break();
					if(this.regularexpressions.FieldFormatRegEx != null)
					{
						_FieldFormatRegEx = new ObservableCollection<FieldFormatRegEx>(this.regularexpressions.FieldFormatRegEx.Select(x => new FieldFormatRegEx(x)));
					}
					
						_FieldFormatRegEx.CollectionChanged += FieldFormatRegEx_CollectionChanged; 
					
					return _FieldFormatRegEx; 
				}
			set
			{
			    if (Equals(value, _FieldFormatRegEx)) return;
				if (value != null)
					this.regularexpressions.FieldFormatRegEx = new ChangeTrackingCollection<DTO.FieldFormatRegEx>(value.Select(x => x.DTO).ToList());
                _FieldFormatRegEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FieldFormatRegEx != null)
				_FieldFormatRegEx.CollectionChanged += FieldFormatRegEx_CollectionChanged;               
				NotifyPropertyChanged("FieldFormatRegEx");
			}
		}
        
        void FieldFormatRegEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FieldFormatRegEx itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.FieldFormatRegEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FieldFormatRegEx itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.FieldFormatRegEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<FieldFormatRegEx> _FieldFormatRepRegEx = null;
        public  ObservableCollection<FieldFormatRegEx> FieldFormatRepRegEx
		{
            
		    get 
				{ 
					if(_FieldFormatRepRegEx != null) return _FieldFormatRepRegEx;
					//if (this.regularexpressions.FieldFormatRepRegEx == null) Debugger.Break();
					if(this.regularexpressions.FieldFormatRepRegEx != null)
					{
						_FieldFormatRepRegEx = new ObservableCollection<FieldFormatRegEx>(this.regularexpressions.FieldFormatRepRegEx.Select(x => new FieldFormatRegEx(x)));
					}
					
						_FieldFormatRepRegEx.CollectionChanged += FieldFormatRepRegEx_CollectionChanged; 
					
					return _FieldFormatRepRegEx; 
				}
			set
			{
			    if (Equals(value, _FieldFormatRepRegEx)) return;
				if (value != null)
					this.regularexpressions.FieldFormatRepRegEx = new ChangeTrackingCollection<DTO.FieldFormatRegEx>(value.Select(x => x.DTO).ToList());
                _FieldFormatRepRegEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FieldFormatRepRegEx != null)
				_FieldFormatRepRegEx.CollectionChanged += FieldFormatRepRegEx_CollectionChanged;               
				NotifyPropertyChanged("FieldFormatRepRegEx");
			}
		}
        
        void FieldFormatRepRegEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (FieldFormatRegEx itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.FieldFormatRepRegEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (FieldFormatRegEx itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.FieldFormatRepRegEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<TemplateIdentificatonRegEx> _TemplateIdentificatonRegEx = null;
        public  ObservableCollection<TemplateIdentificatonRegEx> TemplateIdentificatonRegEx
		{
            
		    get 
				{ 
					if(_TemplateIdentificatonRegEx != null) return _TemplateIdentificatonRegEx;
					//if (this.regularexpressions.TemplateIdentificatonRegEx == null) Debugger.Break();
					if(this.regularexpressions.TemplateIdentificatonRegEx != null)
					{
						_TemplateIdentificatonRegEx = new ObservableCollection<TemplateIdentificatonRegEx>(this.regularexpressions.TemplateIdentificatonRegEx.Select(x => new TemplateIdentificatonRegEx(x)));
					}
					
						_TemplateIdentificatonRegEx.CollectionChanged += TemplateIdentificatonRegEx_CollectionChanged; 
					
					return _TemplateIdentificatonRegEx; 
				}
			set
			{
			    if (Equals(value, _TemplateIdentificatonRegEx)) return;
				if (value != null)
					this.regularexpressions.TemplateIdentificatonRegEx = new ChangeTrackingCollection<DTO.TemplateIdentificatonRegEx>(value.Select(x => x.DTO).ToList());
                _TemplateIdentificatonRegEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TemplateIdentificatonRegEx != null)
				_TemplateIdentificatonRegEx.CollectionChanged += TemplateIdentificatonRegEx_CollectionChanged;               
				NotifyPropertyChanged("TemplateIdentificatonRegEx");
			}
		}
        
        void TemplateIdentificatonRegEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateIdentificatonRegEx itm in e.NewItems)
                    {
                        if (itm != null)
                        regularexpressions.TemplateIdentificatonRegEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateIdentificatonRegEx itm in e.OldItems)
                    {
                        if (itm != null)
                        regularexpressions.TemplateIdentificatonRegEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.RegularExpressions> _changeTracker;    
        public ChangeTrackingCollection<DTO.RegularExpressions> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



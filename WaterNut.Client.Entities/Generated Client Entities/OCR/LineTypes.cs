// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class LineTypes: BaseEntity<LineTypes>
    {
        DTO.LineTypes linetypes;
        public LineTypes(DTO.LineTypes dto )
        {
              linetypes = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.LineTypes>(linetypes);

        }

        public DTO.LineTypes DTO
        {
            get
            {
             return linetypes;
            }
            set
            {
                linetypes = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.linetypes.Id; }
			set
			{
			    if (value == this.linetypes.Id) return;
				this.linetypes.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Name is required")]
       
                
                [MaxLength(50, ErrorMessage = "Name has a max length of 50 letters ")]
public string Name
		{ 
		    get { return this.linetypes.Name; }
			set
			{
			    if (value == this.linetypes.Name) return;
				this.linetypes.Name = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Name");
			}
		}
     

        ObservableCollection<LineTypeFieldMappings> _LineTypeFieldMappings = null;
        public  ObservableCollection<LineTypeFieldMappings> LineTypeFieldMappings
		{
            
		    get 
				{ 
					if(_LineTypeFieldMappings != null) return _LineTypeFieldMappings;
					//if (this.linetypes.LineTypeFieldMappings == null) Debugger.Break();
					if(this.linetypes.LineTypeFieldMappings != null)
					{
						_LineTypeFieldMappings = new ObservableCollection<LineTypeFieldMappings>(this.linetypes.LineTypeFieldMappings.Select(x => new LineTypeFieldMappings(x)));
					}
					
						_LineTypeFieldMappings.CollectionChanged += LineTypeFieldMappings_CollectionChanged; 
					
					return _LineTypeFieldMappings; 
				}
			set
			{
			    if (Equals(value, _LineTypeFieldMappings)) return;
				if (value != null)
					this.linetypes.LineTypeFieldMappings = new ChangeTrackingCollection<DTO.LineTypeFieldMappings>(value.Select(x => x.DTO).ToList());
                _LineTypeFieldMappings = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_LineTypeFieldMappings != null)
				_LineTypeFieldMappings.CollectionChanged += LineTypeFieldMappings_CollectionChanged;               
				NotifyPropertyChanged("LineTypeFieldMappings");
			}
		}
        
        void LineTypeFieldMappings_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (LineTypeFieldMappings itm in e.NewItems)
                    {
                        if (itm != null)
                        linetypes.LineTypeFieldMappings.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (LineTypeFieldMappings itm in e.OldItems)
                    {
                        if (itm != null)
                        linetypes.LineTypeFieldMappings.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<TemplateLines> _TemplateLines = null;
        public  ObservableCollection<TemplateLines> TemplateLines
		{
            
		    get 
				{ 
					if(_TemplateLines != null) return _TemplateLines;
					//if (this.linetypes.TemplateLines == null) Debugger.Break();
					if(this.linetypes.TemplateLines != null)
					{
						_TemplateLines = new ObservableCollection<TemplateLines>(this.linetypes.TemplateLines.Select(x => new TemplateLines(x)));
					}
					
						_TemplateLines.CollectionChanged += TemplateLines_CollectionChanged; 
					
					return _TemplateLines; 
				}
			set
			{
			    if (Equals(value, _TemplateLines)) return;
				if (value != null)
					this.linetypes.TemplateLines = new ChangeTrackingCollection<DTO.TemplateLines>(value.Select(x => x.DTO).ToList());
                _TemplateLines = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TemplateLines != null)
				_TemplateLines.CollectionChanged += TemplateLines_CollectionChanged;               
				NotifyPropertyChanged("TemplateLines");
			}
		}
        
        void TemplateLines_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateLines itm in e.NewItems)
                    {
                        if (itm != null)
                        linetypes.TemplateLines.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateLines itm in e.OldItems)
                    {
                        if (itm != null)
                        linetypes.TemplateLines.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.LineTypes> _changeTracker;    
        public ChangeTrackingCollection<DTO.LineTypes> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



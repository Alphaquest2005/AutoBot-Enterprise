// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class Lines: BaseEntity<Lines>
    {
        DTO.Lines lines;
        public Lines(DTO.Lines dto )
        {
              lines = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Lines>(lines);

        }

        public DTO.Lines DTO
        {
            get
            {
             return lines;
            }
            set
            {
                lines = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.lines.Id; }
			set
			{
			    if (value == this.lines.Id) return;
				this.lines.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Part is required")]
       
public int PartId
		{ 
		    get { return this.lines.PartId; }
			set
			{
			    if (value == this.lines.PartId) return;
				this.lines.PartId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PartId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Name is required")]
       
                
                [MaxLength(50, ErrorMessage = "Name has a max length of 50 letters ")]
public string Name
		{ 
		    get { return this.lines.Name; }
			set
			{
			    if (value == this.lines.Name) return;
				this.lines.Name = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Name");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "RegEx is required")]
       
public int RegExId
		{ 
		    get { return this.lines.RegExId; }
			set
			{
			    if (value == this.lines.RegExId) return;
				this.lines.RegExId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegExId");
			}
		}
     

       
       
public Nullable<int> ParentId
		{ 
		    get { return this.lines.ParentId; }
			set
			{
			    if (value == this.lines.ParentId) return;
				this.lines.ParentId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ParentId");
			}
		}
     

       
       
public Nullable<bool> DistinctValues
		{ 
		    get { return this.lines.DistinctValues; }
			set
			{
			    if (value == this.lines.DistinctValues) return;
				this.lines.DistinctValues = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DistinctValues");
			}
		}
     

       
       
public Nullable<bool> IsColumn
		{ 
		    get { return this.lines.IsColumn; }
			set
			{
			    if (value == this.lines.IsColumn) return;
				this.lines.IsColumn = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsColumn");
			}
		}
     

       private Parts _Parts;
        public  Parts Parts
		{
		    get
               { 
                  if (this.lines != null)
                   {
                       if (_Parts != null)
                       {
                           if (this.lines.Parts !=
                               _Parts.DTO)
                           {
                                if (this.lines.Parts  != null)
                               _Parts = new Parts(this.lines.Parts);
                           }
                       }
                       else
                       {
                             if (this.lines.Parts  != null)
                           _Parts = new Parts(this.lines.Parts);
                       }
                   }


             //       if (_Parts != null) return _Parts;
                       
             //       var i = new Parts(){TrackingState = TrackingState.Added};
			//		//if (this.lines.Parts == null) Debugger.Break();
			//		if (this.lines.Parts != null)
            //        {
            //           i. = this.lines.Parts;
            //        }
            //        else
            //        {
            //            this.lines.Parts = i.;
             //       }
                           
            //        _Parts = i;
                     
                    return _Parts;
               }
			set
			{
			    if (value == _Parts) return;
                _Parts = value;
                if(value != null)
                     this.lines.Parts = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("Parts");
			}
		}
        

       private RegularExpressions _RegularExpressions;
        public  RegularExpressions RegularExpressions
		{
		    get
               { 
                  if (this.lines != null)
                   {
                       if (_RegularExpressions != null)
                       {
                           if (this.lines.RegularExpressions !=
                               _RegularExpressions.DTO)
                           {
                                if (this.lines.RegularExpressions  != null)
                               _RegularExpressions = new RegularExpressions(this.lines.RegularExpressions);
                           }
                       }
                       else
                       {
                             if (this.lines.RegularExpressions  != null)
                           _RegularExpressions = new RegularExpressions(this.lines.RegularExpressions);
                       }
                   }


             //       if (_RegularExpressions != null) return _RegularExpressions;
                       
             //       var i = new RegularExpressions(){TrackingState = TrackingState.Added};
			//		//if (this.lines.RegularExpressions == null) Debugger.Break();
			//		if (this.lines.RegularExpressions != null)
            //        {
            //           i. = this.lines.RegularExpressions;
            //        }
            //        else
            //        {
            //            this.lines.RegularExpressions = i.;
             //       }
                           
            //        _RegularExpressions = i;
                     
                    return _RegularExpressions;
               }
			set
			{
			    if (value == _RegularExpressions) return;
                _RegularExpressions = value;
                if(value != null)
                     this.lines.RegularExpressions = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("RegularExpressions");
			}
		}
        

        ObservableCollection<Lines> _ChildLines = null;
        public  ObservableCollection<Lines> ChildLines
		{
            
		    get 
				{ 
					if(_ChildLines != null) return _ChildLines;
					//if (this.lines.ChildLines == null) Debugger.Break();
					if(this.lines.ChildLines != null)
					{
						_ChildLines = new ObservableCollection<Lines>(this.lines.ChildLines.Select(x => new Lines(x)));
					}
					
						_ChildLines.CollectionChanged += ChildLines_CollectionChanged; 
					
					return _ChildLines; 
				}
			set
			{
			    if (Equals(value, _ChildLines)) return;
				if (value != null)
					this.lines.ChildLines = new ChangeTrackingCollection<DTO.Lines>(value.Select(x => x.DTO).ToList());
                _ChildLines = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_ChildLines != null)
				_ChildLines.CollectionChanged += ChildLines_CollectionChanged;               
				NotifyPropertyChanged("ChildLines");
			}
		}
        
        void ChildLines_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Lines itm in e.NewItems)
                    {
                        if (itm != null)
                        lines.ChildLines.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Lines itm in e.OldItems)
                    {
                        if (itm != null)
                        lines.ChildLines.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private Lines _ParentLine;
        public  Lines ParentLine
		{
		    get
               { 
                  if (this.lines != null)
                   {
                       if (_ParentLine != null)
                       {
                           if (this.lines.ParentLine !=
                               _ParentLine.DTO)
                           {
                                if (this.lines.ParentLine  != null)
                               _ParentLine = new Lines(this.lines.ParentLine);
                           }
                       }
                       else
                       {
                             if (this.lines.ParentLine  != null)
                           _ParentLine = new Lines(this.lines.ParentLine);
                       }
                   }


             //       if (_ParentLine != null) return _ParentLine;
                       
             //       var i = new Lines(){TrackingState = TrackingState.Added};
			//		//if (this.lines.ParentLine == null) Debugger.Break();
			//		if (this.lines.ParentLine != null)
            //        {
            //           i. = this.lines.ParentLine;
            //        }
            //        else
            //        {
            //            this.lines.ParentLine = i.;
             //       }
                           
            //        _ParentLine = i;
                     
                    return _ParentLine;
               }
			set
			{
			    if (value == _ParentLine) return;
                _ParentLine = value;
                if(value != null)
                     this.lines.ParentLine = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("ParentLine");
			}
		}
        

        ObservableCollection<OCR_FailedLines> _FailedLines = null;
        public  ObservableCollection<OCR_FailedLines> FailedLines
		{
            
		    get 
				{ 
					if(_FailedLines != null) return _FailedLines;
					//if (this.lines.FailedLines == null) Debugger.Break();
					if(this.lines.FailedLines != null)
					{
						_FailedLines = new ObservableCollection<OCR_FailedLines>(this.lines.FailedLines.Select(x => new OCR_FailedLines(x)));
					}
					
						_FailedLines.CollectionChanged += FailedLines_CollectionChanged; 
					
					return _FailedLines; 
				}
			set
			{
			    if (Equals(value, _FailedLines)) return;
				if (value != null)
					this.lines.FailedLines = new ChangeTrackingCollection<DTO.OCR_FailedLines>(value.Select(x => x.DTO).ToList());
                _FailedLines = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_FailedLines != null)
				_FailedLines.CollectionChanged += FailedLines_CollectionChanged;               
				NotifyPropertyChanged("FailedLines");
			}
		}
        
        void FailedLines_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (OCR_FailedLines itm in e.NewItems)
                    {
                        if (itm != null)
                        lines.FailedLines.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (OCR_FailedLines itm in e.OldItems)
                    {
                        if (itm != null)
                        lines.FailedLines.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<Fields> _Fields = null;
        public  ObservableCollection<Fields> Fields
		{
            
		    get 
				{ 
					if(_Fields != null) return _Fields;
					//if (this.lines.Fields == null) Debugger.Break();
					if(this.lines.Fields != null)
					{
						_Fields = new ObservableCollection<Fields>(this.lines.Fields.Select(x => new Fields(x)));
					}
					
						_Fields.CollectionChanged += Fields_CollectionChanged; 
					
					return _Fields; 
				}
			set
			{
			    if (Equals(value, _Fields)) return;
				if (value != null)
					this.lines.Fields = new ChangeTrackingCollection<DTO.Fields>(value.Select(x => x.DTO).ToList());
                _Fields = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Fields != null)
				_Fields.CollectionChanged += Fields_CollectionChanged;               
				NotifyPropertyChanged("Fields");
			}
		}
        
        void Fields_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Fields itm in e.NewItems)
                    {
                        if (itm != null)
                        lines.Fields.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Fields itm in e.OldItems)
                    {
                        if (itm != null)
                        lines.Fields.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.Lines> _changeTracker;    
        public ChangeTrackingCollection<DTO.Lines> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



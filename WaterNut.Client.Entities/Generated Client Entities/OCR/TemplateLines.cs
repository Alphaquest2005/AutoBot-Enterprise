// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class TemplateLines: BaseEntity<TemplateLines>
    {
        DTO.TemplateLines templatelines;
        public TemplateLines(DTO.TemplateLines dto )
        {
              templatelines = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TemplateLines>(templatelines);

        }

        public DTO.TemplateLines DTO
        {
            get
            {
             return templatelines;
            }
            set
            {
                templatelines = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.templatelines.Id; }
			set
			{
			    if (value == this.templatelines.Id) return;
				this.templatelines.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Template is required")]
       
public int TemplateId
		{ 
		    get { return this.templatelines.TemplateId; }
			set
			{
			    if (value == this.templatelines.TemplateId) return;
				this.templatelines.TemplateId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TemplateId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Type is required")]
       
public int TypeId
		{ 
		    get { return this.templatelines.TypeId; }
			set
			{
			    if (value == this.templatelines.TypeId) return;
				this.templatelines.TypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TypeId");
			}
		}
     

       private LineTypes _LineTypes;
        public  LineTypes LineTypes
		{
		    get
               { 
                  if (this.templatelines != null)
                   {
                       if (_LineTypes != null)
                       {
                           if (this.templatelines.LineTypes !=
                               _LineTypes.DTO)
                           {
                                if (this.templatelines.LineTypes  != null)
                               _LineTypes = new LineTypes(this.templatelines.LineTypes);
                           }
                       }
                       else
                       {
                             if (this.templatelines.LineTypes  != null)
                           _LineTypes = new LineTypes(this.templatelines.LineTypes);
                       }
                   }


             //       if (_LineTypes != null) return _LineTypes;
                       
             //       var i = new LineTypes(){TrackingState = TrackingState.Added};
			//		//if (this.templatelines.LineTypes == null) Debugger.Break();
			//		if (this.templatelines.LineTypes != null)
            //        {
            //           i. = this.templatelines.LineTypes;
            //        }
            //        else
            //        {
            //            this.templatelines.LineTypes = i.;
             //       }
                           
            //        _LineTypes = i;
                     
                    return _LineTypes;
               }
			set
			{
			    if (value == _LineTypes) return;
                _LineTypes = value;
                if(value != null)
                     this.templatelines.LineTypes = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("LineTypes");
			}
		}
        

       private Templates _Templates;
        public  Templates Templates
		{
		    get
               { 
                  if (this.templatelines != null)
                   {
                       if (_Templates != null)
                       {
                           if (this.templatelines.Templates !=
                               _Templates.DTO)
                           {
                                if (this.templatelines.Templates  != null)
                               _Templates = new Templates(this.templatelines.Templates);
                           }
                       }
                       else
                       {
                             if (this.templatelines.Templates  != null)
                           _Templates = new Templates(this.templatelines.Templates);
                       }
                   }


             //       if (_Templates != null) return _Templates;
                       
             //       var i = new Templates(){TrackingState = TrackingState.Added};
			//		//if (this.templatelines.Templates == null) Debugger.Break();
			//		if (this.templatelines.Templates != null)
            //        {
            //           i. = this.templatelines.Templates;
            //        }
            //        else
            //        {
            //            this.templatelines.Templates = i.;
             //       }
                           
            //        _Templates = i;
                     
                    return _Templates;
               }
			set
			{
			    if (value == _Templates) return;
                _Templates = value;
                if(value != null)
                     this.templatelines.Templates = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("Templates");
			}
		}
        

        ObservableCollection<TemplateLinesRegularExpressions> _TemplateLinesRegularExpressions = null;
        public  ObservableCollection<TemplateLinesRegularExpressions> TemplateLinesRegularExpressions
		{
            
		    get 
				{ 
					if(_TemplateLinesRegularExpressions != null) return _TemplateLinesRegularExpressions;
					//if (this.templatelines.TemplateLinesRegularExpressions == null) Debugger.Break();
					if(this.templatelines.TemplateLinesRegularExpressions != null)
					{
						_TemplateLinesRegularExpressions = new ObservableCollection<TemplateLinesRegularExpressions>(this.templatelines.TemplateLinesRegularExpressions.Select(x => new TemplateLinesRegularExpressions(x)));
					}
					
						_TemplateLinesRegularExpressions.CollectionChanged += TemplateLinesRegularExpressions_CollectionChanged; 
					
					return _TemplateLinesRegularExpressions; 
				}
			set
			{
			    if (Equals(value, _TemplateLinesRegularExpressions)) return;
				if (value != null)
					this.templatelines.TemplateLinesRegularExpressions = new ChangeTrackingCollection<DTO.TemplateLinesRegularExpressions>(value.Select(x => x.DTO).ToList());
                _TemplateLinesRegularExpressions = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TemplateLinesRegularExpressions != null)
				_TemplateLinesRegularExpressions.CollectionChanged += TemplateLinesRegularExpressions_CollectionChanged;               
				NotifyPropertyChanged("TemplateLinesRegularExpressions");
			}
		}
        
        void TemplateLinesRegularExpressions_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateLinesRegularExpressions itm in e.NewItems)
                    {
                        if (itm != null)
                        templatelines.TemplateLinesRegularExpressions.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateLinesRegularExpressions itm in e.OldItems)
                    {
                        if (itm != null)
                        templatelines.TemplateLinesRegularExpressions.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.TemplateLines> _changeTracker;    
        public ChangeTrackingCollection<DTO.TemplateLines> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



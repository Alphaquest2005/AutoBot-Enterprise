// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class Line: BaseEntity<Line>
    {
        DTO.Line line;
        public Line(DTO.Line dto )
        {
              line = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Line>(line);

        }

        public DTO.Line DTO
        {
            get
            {
             return line;
            }
            set
            {
                line = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= "Invoice is required")]
       
                
                [MaxLength(50, ErrorMessage = "Invoice has a max length of 50 letters ")]
public string Invoice
		{ 
		    get { return this.line.Invoice; }
			set
			{
			    if (value == this.line.Invoice) return;
				this.line.Invoice = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Invoice");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PartName has a max length of 50 letters ")]
public string PartName
		{ 
		    get { return this.line.PartName; }
			set
			{
			    if (value == this.line.PartName) return;
				this.line.PartName = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PartName");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Name has a max length of 50 letters ")]
public string Name
		{ 
		    get { return this.line.Name; }
			set
			{
			    if (value == this.line.Name) return;
				this.line.Name = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Name");
			}
		}
     

       
       
public Nullable<bool> MultiLine
		{ 
		    get { return this.line.MultiLine; }
			set
			{
			    if (value == this.line.MultiLine) return;
				this.line.MultiLine = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("MultiLine");
			}
		}
     

       
       
                
                
public string RegEx
		{ 
		    get { return this.line.RegEx; }
			set
			{
			    if (value == this.line.RegEx) return;
				this.line.RegEx = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegEx");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.line.Id; }
			set
			{
			    if (value == this.line.Id) return;
				this.line.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       
       
public Nullable<int> RegExId
		{ 
		    get { return this.line.RegExId; }
			set
			{
			    if (value == this.line.RegExId) return;
				this.line.RegExId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegExId");
			}
		}
     

       
       
public Nullable<int> ParentId
		{ 
		    get { return this.line.ParentId; }
			set
			{
			    if (value == this.line.ParentId) return;
				this.line.ParentId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ParentId");
			}
		}
     

       
       
public Nullable<int> PartId
		{ 
		    get { return this.line.PartId; }
			set
			{
			    if (value == this.line.PartId) return;
				this.line.PartId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PartId");
			}
		}
     

       private Part _Part;
        public  Part Part
		{
		    get
               { 
                  if (this.line != null)
                   {
                       if (_Part != null)
                       {
                           if (this.line.Part !=
                               _Part.DTO)
                           {
                                if (this.line.Part  != null)
                               _Part = new Part(this.line.Part);
                           }
                       }
                       else
                       {
                             if (this.line.Part  != null)
                           _Part = new Part(this.line.Part);
                       }
                   }


             //       if (_Part != null) return _Part;
                       
             //       var i = new Part(){TrackingState = TrackingState.Added};
			//		//if (this.line.Part == null) Debugger.Break();
			//		if (this.line.Part != null)
            //        {
            //           i. = this.line.Part;
            //        }
            //        else
            //        {
            //            this.line.Part = i.;
             //       }
                           
            //        _Part = i;
                     
                    return _Part;
               }
			set
			{
			    if (value == _Part) return;
                _Part = value;
                if(value != null)
                     this.line.Part = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("Part");
			}
		}
        


        ChangeTrackingCollection<DTO.Line> _changeTracker;    
        public ChangeTrackingCollection<DTO.Line> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class Invoices: BaseEntity<Invoices>
    {
        DTO.Invoices invoices;
        public Invoices(DTO.Invoices dto )
        {
              invoices = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Invoices>(invoices);

        }

        public DTO.Invoices DTO
        {
            get
            {
             return invoices;
            }
            set
            {
                invoices = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.invoices.Id; }
			set
			{
			    if (value == this.invoices.Id) return;
				this.invoices.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Name is required")]
       
                
                [MaxLength(50, ErrorMessage = "Name has a max length of 50 letters ")]
public string Name
		{ 
		    get { return this.invoices.Name; }
			set
			{
			    if (value == this.invoices.Name) return;
				this.invoices.Name = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Name");
			}
		}
     

       
       
public Nullable<int> FileTypeId
		{ 
		    get { return this.invoices.FileTypeId; }
			set
			{
			    if (value == this.invoices.FileTypeId) return;
				this.invoices.FileTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FileTypeId");
			}
		}
     

        ObservableCollection<Parts> _Parts = null;
        public  ObservableCollection<Parts> Parts
		{
            
		    get 
				{ 
					if(_Parts != null) return _Parts;
					//if (this.invoices.Parts == null) Debugger.Break();
					if(this.invoices.Parts != null)
					{
						_Parts = new ObservableCollection<Parts>(this.invoices.Parts.Select(x => new Parts(x)));
					}
					
						_Parts.CollectionChanged += Parts_CollectionChanged; 
					
					return _Parts; 
				}
			set
			{
			    if (Equals(value, _Parts)) return;
				if (value != null)
					this.invoices.Parts = new ChangeTrackingCollection<DTO.Parts>(value.Select(x => x.DTO).ToList());
                _Parts = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Parts != null)
				_Parts.CollectionChanged += Parts_CollectionChanged;               
				NotifyPropertyChanged("Parts");
			}
		}
        
        void Parts_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Parts itm in e.NewItems)
                    {
                        if (itm != null)
                        invoices.Parts.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Parts itm in e.OldItems)
                    {
                        if (itm != null)
                        invoices.Parts.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<OCR_InvoiceRegEx> _OCR_InvoiceRegEx = null;
        public  ObservableCollection<OCR_InvoiceRegEx> OCR_InvoiceRegEx
		{
            
		    get 
				{ 
					if(_OCR_InvoiceRegEx != null) return _OCR_InvoiceRegEx;
					//if (this.invoices.OCR_InvoiceRegEx == null) Debugger.Break();
					if(this.invoices.OCR_InvoiceRegEx != null)
					{
						_OCR_InvoiceRegEx = new ObservableCollection<OCR_InvoiceRegEx>(this.invoices.OCR_InvoiceRegEx.Select(x => new OCR_InvoiceRegEx(x)));
					}
					
						_OCR_InvoiceRegEx.CollectionChanged += OCR_InvoiceRegEx_CollectionChanged; 
					
					return _OCR_InvoiceRegEx; 
				}
			set
			{
			    if (Equals(value, _OCR_InvoiceRegEx)) return;
				if (value != null)
					this.invoices.OCR_InvoiceRegEx = new ChangeTrackingCollection<DTO.OCR_InvoiceRegEx>(value.Select(x => x.DTO).ToList());
                _OCR_InvoiceRegEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_OCR_InvoiceRegEx != null)
				_OCR_InvoiceRegEx.CollectionChanged += OCR_InvoiceRegEx_CollectionChanged;               
				NotifyPropertyChanged("OCR_InvoiceRegEx");
			}
		}
        
        void OCR_InvoiceRegEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (OCR_InvoiceRegEx itm in e.NewItems)
                    {
                        if (itm != null)
                        invoices.OCR_InvoiceRegEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (OCR_InvoiceRegEx itm in e.OldItems)
                    {
                        if (itm != null)
                        invoices.OCR_InvoiceRegEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.Invoices> _changeTracker;    
        public ChangeTrackingCollection<DTO.Invoices> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class Fields: BaseEntity<Fields>
    {
        DTO.Fields fields;
        public Fields(DTO.Fields dto )
        {
              fields = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Fields>(fields);

        }

        public DTO.Fields DTO
        {
            get
            {
             return fields;
            }
            set
            {
                fields = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.fields.Id; }
			set
			{
			    if (value == this.fields.Id) return;
				this.fields.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Field is required")]
       
                
                [MaxLength(50, ErrorMessage = "Field has a max length of 50 letters ")]
public string Field
		{ 
		    get { return this.fields.Field; }
			set
			{
			    if (value == this.fields.Field) return;
				this.fields.Field = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Field");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntityType is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntityType has a max length of 50 letters ")]
public string EntityType
		{ 
		    get { return this.fields.EntityType; }
			set
			{
			    if (value == this.fields.EntityType) return;
				this.fields.EntityType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntityType");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "IsRequired is required")]
       
public bool IsRequired
		{ 
		    get { return this.fields.IsRequired; }
			set
			{
			    if (value == this.fields.IsRequired) return;
				this.fields.IsRequired = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsRequired");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "DataType is required")]
       
                
                [MaxLength(50, ErrorMessage = "DataType has a max length of 50 letters ")]
public string DataType
		{ 
		    get { return this.fields.DataType; }
			set
			{
			    if (value == this.fields.DataType) return;
				this.fields.DataType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DataType");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Line is required")]
       
public int LineId
		{ 
		    get { return this.fields.LineId; }
			set
			{
			    if (value == this.fields.LineId) return;
				this.fields.LineId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineId");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Key has a max length of 50 letters ")]
public string Key
		{ 
		    get { return this.fields.Key; }
			set
			{
			    if (value == this.fields.Key) return;
				this.fields.Key = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Key");
			}
		}
     

       private Lines _Lines;
        public  Lines Lines
		{
		    get
               { 
                  if (this.fields != null)
                   {
                       if (_Lines != null)
                       {
                           if (this.fields.Lines !=
                               _Lines.DTO)
                           {
                                if (this.fields.Lines  != null)
                               _Lines = new Lines(this.fields.Lines);
                           }
                       }
                       else
                       {
                             if (this.fields.Lines  != null)
                           _Lines = new Lines(this.fields.Lines);
                       }
                   }


             //       if (_Lines != null) return _Lines;
                       
             //       var i = new Lines(){TrackingState = TrackingState.Added};
			//		//if (this.fields.Lines == null) Debugger.Break();
			//		if (this.fields.Lines != null)
            //        {
            //           i. = this.fields.Lines;
            //        }
            //        else
            //        {
            //            this.fields.Lines = i.;
             //       }
                           
            //        _Lines = i;
                     
                    return _Lines;
               }
			set
			{
			    if (value == _Lines) return;
                _Lines = value;
                if(value != null)
                     this.fields.Lines = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("Lines");
			}
		}
        

       private OCR_FieldValue _FieldValue;
        public  OCR_FieldValue FieldValue
		{
		    get
               { 
                  if (this.fields != null)
                   {
                       if (_FieldValue != null)
                       {
                           if (this.fields.FieldValue !=
                               _FieldValue.DTO)
                           {
                                if (this.fields.FieldValue  != null)
                               _FieldValue = new OCR_FieldValue(this.fields.FieldValue);
                           }
                       }
                       else
                       {
                             if (this.fields.FieldValue  != null)
                           _FieldValue = new OCR_FieldValue(this.fields.FieldValue);
                       }
                   }


             //       if (_FieldValue != null) return _FieldValue;
                       
             //       var i = new OCR_FieldValue(){TrackingState = TrackingState.Added};
			//		//if (this.fields.FieldValue == null) Debugger.Break();
			//		if (this.fields.FieldValue != null)
            //        {
            //           i. = this.fields.FieldValue;
            //        }
            //        else
            //        {
            //            this.fields.FieldValue = i.;
             //       }
                           
            //        _FieldValue = i;
                     
                    return _FieldValue;
               }
			set
			{
			    if (value == _FieldValue) return;
                _FieldValue = value;
                if(value != null)
                     this.fields.FieldValue = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("FieldValue");
			}
		}
        


        ChangeTrackingCollection<DTO.Fields> _changeTracker;    
        public ChangeTrackingCollection<DTO.Fields> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class LineTypeFieldMappings: BaseEntity<LineTypeFieldMappings>
    {
        DTO.LineTypeFieldMappings linetypefieldmappings;
        public LineTypeFieldMappings(DTO.LineTypeFieldMappings dto )
        {
              linetypefieldmappings = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.LineTypeFieldMappings>(linetypefieldmappings);

        }

        public DTO.LineTypeFieldMappings DTO
        {
            get
            {
             return linetypefieldmappings;
            }
            set
            {
                linetypefieldmappings = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.linetypefieldmappings.Id; }
			set
			{
			    if (value == this.linetypefieldmappings.Id) return;
				this.linetypefieldmappings.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "LineType is required")]
       
public int LineTypeId
		{ 
		    get { return this.linetypefieldmappings.LineTypeId; }
			set
			{
			    if (value == this.linetypefieldmappings.LineTypeId) return;
				this.linetypefieldmappings.LineTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineTypeId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Key is required")]
       
                
                [MaxLength(50, ErrorMessage = "Key has a max length of 50 letters ")]
public string Key
		{ 
		    get { return this.linetypefieldmappings.Key; }
			set
			{
			    if (value == this.linetypefieldmappings.Key) return;
				this.linetypefieldmappings.Key = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Key");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Field is required")]
       
                
                [MaxLength(50, ErrorMessage = "Field has a max length of 50 letters ")]
public string Field
		{ 
		    get { return this.linetypefieldmappings.Field; }
			set
			{
			    if (value == this.linetypefieldmappings.Field) return;
				this.linetypefieldmappings.Field = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Field");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "EntityType is required")]
       
                
                [MaxLength(50, ErrorMessage = "EntityType has a max length of 50 letters ")]
public string EntityType
		{ 
		    get { return this.linetypefieldmappings.EntityType; }
			set
			{
			    if (value == this.linetypefieldmappings.EntityType) return;
				this.linetypefieldmappings.EntityType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EntityType");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "IsRequired is required")]
       
public bool IsRequired
		{ 
		    get { return this.linetypefieldmappings.IsRequired; }
			set
			{
			    if (value == this.linetypefieldmappings.IsRequired) return;
				this.linetypefieldmappings.IsRequired = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsRequired");
			}
		}
     

       private LineTypes _LineTypes;
        public  LineTypes LineTypes
		{
		    get
               { 
                  if (this.linetypefieldmappings != null)
                   {
                       if (_LineTypes != null)
                       {
                           if (this.linetypefieldmappings.LineTypes !=
                               _LineTypes.DTO)
                           {
                                if (this.linetypefieldmappings.LineTypes  != null)
                               _LineTypes = new LineTypes(this.linetypefieldmappings.LineTypes);
                           }
                       }
                       else
                       {
                             if (this.linetypefieldmappings.LineTypes  != null)
                           _LineTypes = new LineTypes(this.linetypefieldmappings.LineTypes);
                       }
                   }


             //       if (_LineTypes != null) return _LineTypes;
                       
             //       var i = new LineTypes(){TrackingState = TrackingState.Added};
			//		//if (this.linetypefieldmappings.LineTypes == null) Debugger.Break();
			//		if (this.linetypefieldmappings.LineTypes != null)
            //        {
            //           i. = this.linetypefieldmappings.LineTypes;
            //        }
            //        else
            //        {
            //            this.linetypefieldmappings.LineTypes = i.;
             //       }
                           
            //        _LineTypes = i;
                     
                    return _LineTypes;
               }
			set
			{
			    if (value == _LineTypes) return;
                _LineTypes = value;
                if(value != null)
                     this.linetypefieldmappings.LineTypes = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("LineTypes");
			}
		}
        


        ChangeTrackingCollection<DTO.LineTypeFieldMappings> _changeTracker;    
        public ChangeTrackingCollection<DTO.LineTypeFieldMappings> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class RegExChain: BaseEntity<RegExChain>
    {
        DTO.RegExChain regexchain;
        public RegExChain(DTO.RegExChain dto )
        {
              regexchain = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.RegExChain>(regexchain);

        }

        public DTO.RegExChain DTO
        {
            get
            {
             return regexchain;
            }
            set
            {
                regexchain = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.regexchain.Id; }
			set
			{
			    if (value == this.regexchain.Id) return;
				this.regexchain.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "RegEx is required")]
       
public int RegExId
		{ 
		    get { return this.regexchain.RegExId; }
			set
			{
			    if (value == this.regexchain.RegExId) return;
				this.regexchain.RegExId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegExId");
			}
		}
     

        ObservableCollection<End> _End = null;
        public  ObservableCollection<End> End
		{
            
		    get 
				{ 
					if(_End != null) return _End;
					//if (this.regexchain.End == null) Debugger.Break();
					if(this.regexchain.End != null)
					{
						_End = new ObservableCollection<End>(this.regexchain.End.Select(x => new End(x)));
					}
					
						_End.CollectionChanged += End_CollectionChanged; 
					
					return _End; 
				}
			set
			{
			    if (Equals(value, _End)) return;
				if (value != null)
					this.regexchain.End = new ChangeTrackingCollection<DTO.End>(value.Select(x => x.DTO).ToList());
                _End = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_End != null)
				_End.CollectionChanged += End_CollectionChanged;               
				NotifyPropertyChanged("End");
			}
		}
        
        void End_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (End itm in e.NewItems)
                    {
                        if (itm != null)
                        regexchain.End.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (End itm in e.OldItems)
                    {
                        if (itm != null)
                        regexchain.End.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private RegularExpressions _RegularExpressions;
        public  RegularExpressions RegularExpressions
		{
		    get
               { 
                  if (this.regexchain != null)
                   {
                       if (_RegularExpressions != null)
                       {
                           if (this.regexchain.RegularExpressions !=
                               _RegularExpressions.DTO)
                           {
                                if (this.regexchain.RegularExpressions  != null)
                               _RegularExpressions = new RegularExpressions(this.regexchain.RegularExpressions);
                           }
                       }
                       else
                       {
                             if (this.regexchain.RegularExpressions  != null)
                           _RegularExpressions = new RegularExpressions(this.regexchain.RegularExpressions);
                       }
                   }


             //       if (_RegularExpressions != null) return _RegularExpressions;
                       
             //       var i = new RegularExpressions(){TrackingState = TrackingState.Added};
			//		//if (this.regexchain.RegularExpressions == null) Debugger.Break();
			//		if (this.regexchain.RegularExpressions != null)
            //        {
            //           i. = this.regexchain.RegularExpressions;
            //        }
            //        else
            //        {
            //            this.regexchain.RegularExpressions = i.;
             //       }
                           
            //        _RegularExpressions = i;
                     
                    return _RegularExpressions;
               }
			set
			{
			    if (value == _RegularExpressions) return;
                _RegularExpressions = value;
                if(value != null)
                     this.regexchain.RegularExpressions = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("RegularExpressions");
			}
		}
        

        ObservableCollection<Start> _Start = null;
        public  ObservableCollection<Start> Start
		{
            
		    get 
				{ 
					if(_Start != null) return _Start;
					//if (this.regexchain.Start == null) Debugger.Break();
					if(this.regexchain.Start != null)
					{
						_Start = new ObservableCollection<Start>(this.regexchain.Start.Select(x => new Start(x)));
					}
					
						_Start.CollectionChanged += Start_CollectionChanged; 
					
					return _Start; 
				}
			set
			{
			    if (Equals(value, _Start)) return;
				if (value != null)
					this.regexchain.Start = new ChangeTrackingCollection<DTO.Start>(value.Select(x => x.DTO).ToList());
                _Start = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Start != null)
				_Start.CollectionChanged += Start_CollectionChanged;               
				NotifyPropertyChanged("Start");
			}
		}
        
        void Start_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Start itm in e.NewItems)
                    {
                        if (itm != null)
                        regexchain.Start.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Start itm in e.OldItems)
                    {
                        if (itm != null)
                        regexchain.Start.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<Lines> _Lines = null;
        public  ObservableCollection<Lines> Lines
		{
            
		    get 
				{ 
					if(_Lines != null) return _Lines;
					//if (this.regexchain.Lines == null) Debugger.Break();
					if(this.regexchain.Lines != null)
					{
						_Lines = new ObservableCollection<Lines>(this.regexchain.Lines.Select(x => new Lines(x)));
					}
					
						_Lines.CollectionChanged += Lines_CollectionChanged; 
					
					return _Lines; 
				}
			set
			{
			    if (Equals(value, _Lines)) return;
				if (value != null)
					this.regexchain.Lines = new ChangeTrackingCollection<DTO.Lines>(value.Select(x => x.DTO).ToList());
                _Lines = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Lines != null)
				_Lines.CollectionChanged += Lines_CollectionChanged;               
				NotifyPropertyChanged("Lines");
			}
		}
        
        void Lines_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Lines itm in e.NewItems)
                    {
                        if (itm != null)
                        regexchain.Lines.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Lines itm in e.OldItems)
                    {
                        if (itm != null)
                        regexchain.Lines.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private RegExParent _RegExParent;
        public  RegExParent RegExParent
		{
		    get
               { 
                  if (this.regexchain != null)
                   {
                       if (_RegExParent != null)
                       {
                           if (this.regexchain.RegExParent !=
                               _RegExParent.DTO)
                           {
                                if (this.regexchain.RegExParent  != null)
                               _RegExParent = new RegExParent(this.regexchain.RegExParent);
                           }
                       }
                       else
                       {
                             if (this.regexchain.RegExParent  != null)
                           _RegExParent = new RegExParent(this.regexchain.RegExParent);
                       }
                   }


             //       if (_RegExParent != null) return _RegExParent;
                       
             //       var i = new RegExParent(){TrackingState = TrackingState.Added};
			//		//if (this.regexchain.RegExParent == null) Debugger.Break();
			//		if (this.regexchain.RegExParent != null)
            //        {
            //           i. = this.regexchain.RegExParent;
            //        }
            //        else
            //        {
            //            this.regexchain.RegExParent = i.;
             //       }
                           
            //        _RegExParent = i;
                     
                    return _RegExParent;
               }
			set
			{
			    if (value == _RegExParent) return;
                _RegExParent = value;
                if(value != null)
                     this.regexchain.RegExParent = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("RegExParent");
			}
		}
        

        ObservableCollection<RegExParent> _PreviousRegExParent = null;
        public  ObservableCollection<RegExParent> PreviousRegExParent
		{
            
		    get 
				{ 
					if(_PreviousRegExParent != null) return _PreviousRegExParent;
					//if (this.regexchain.PreviousRegExParent == null) Debugger.Break();
					if(this.regexchain.PreviousRegExParent != null)
					{
						_PreviousRegExParent = new ObservableCollection<RegExParent>(this.regexchain.PreviousRegExParent.Select(x => new RegExParent(x)));
					}
					
						_PreviousRegExParent.CollectionChanged += PreviousRegExParent_CollectionChanged; 
					
					return _PreviousRegExParent; 
				}
			set
			{
			    if (Equals(value, _PreviousRegExParent)) return;
				if (value != null)
					this.regexchain.PreviousRegExParent = new ChangeTrackingCollection<DTO.RegExParent>(value.Select(x => x.DTO).ToList());
                _PreviousRegExParent = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_PreviousRegExParent != null)
				_PreviousRegExParent.CollectionChanged += PreviousRegExParent_CollectionChanged;               
				NotifyPropertyChanged("PreviousRegExParent");
			}
		}
        
        void PreviousRegExParent_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (RegExParent itm in e.NewItems)
                    {
                        if (itm != null)
                        regexchain.PreviousRegExParent.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (RegExParent itm in e.OldItems)
                    {
                        if (itm != null)
                        regexchain.PreviousRegExParent.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.RegExChain> _changeTracker;    
        public ChangeTrackingCollection<DTO.RegExChain> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



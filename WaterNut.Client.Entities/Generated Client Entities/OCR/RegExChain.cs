// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class RegExChain: BaseEntity<RegExChain>
    {
        DTO.RegExChain regexchain;
        public RegExChain(DTO.RegExChain dto )
        {
              regexchain = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.RegExChain>(regexchain);

        }

        public DTO.RegExChain DTO
        {
            get
            {
             return regexchain;
            }
            set
            {
                regexchain = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.regexchain.Id; }
			set
			{
			    if (value == this.regexchain.Id) return;
				this.regexchain.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "RegEx is required")]
       
public int RegExId
		{ 
		    get { return this.regexchain.RegExId; }
			set
			{
			    if (value == this.regexchain.RegExId) return;
				this.regexchain.RegExId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegExId");
			}
		}
     

       
       
public Nullable<int> PreviousRegExId
		{ 
		    get { return this.regexchain.PreviousRegExId; }
			set
			{
			    if (value == this.regexchain.PreviousRegExId) return;
				this.regexchain.PreviousRegExId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PreviousRegExId");
			}
		}
     

        ObservableCollection<RegExChain> _RegExChain1 = null;
        public  ObservableCollection<RegExChain> RegExChain1
		{
            
		    get 
				{ 
					if(_RegExChain1 != null) return _RegExChain1;
					//if (this.regexchain.RegExChain1 == null) Debugger.Break();
					if(this.regexchain.RegExChain1 != null)
					{
						_RegExChain1 = new ObservableCollection<RegExChain>(this.regexchain.RegExChain1.Select(x => new RegExChain(x)));
					}
					
						_RegExChain1.CollectionChanged += RegExChain1_CollectionChanged; 
					
					return _RegExChain1; 
				}
			set
			{
			    if (Equals(value, _RegExChain1)) return;
				if (value != null)
					this.regexchain.RegExChain1 = new ChangeTrackingCollection<DTO.RegExChain>(value.Select(x => x.DTO).ToList());
                _RegExChain1 = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_RegExChain1 != null)
				_RegExChain1.CollectionChanged += RegExChain1_CollectionChanged;               
				NotifyPropertyChanged("RegExChain1");
			}
		}
        
        void RegExChain1_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (RegExChain itm in e.NewItems)
                    {
                        if (itm != null)
                        regexchain.RegExChain1.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (RegExChain itm in e.OldItems)
                    {
                        if (itm != null)
                        regexchain.RegExChain1.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private RegExChain _RegExChain2;
        public  RegExChain RegExChain2
		{
		    get
               { 
                  if (this.regexchain != null)
                   {
                       if (_RegExChain2 != null)
                       {
                           if (this.regexchain.RegExChain2 !=
                               _RegExChain2.DTO)
                           {
                                if (this.regexchain.RegExChain2  != null)
                               _RegExChain2 = new RegExChain(this.regexchain.RegExChain2);
                           }
                       }
                       else
                       {
                             if (this.regexchain.RegExChain2  != null)
                           _RegExChain2 = new RegExChain(this.regexchain.RegExChain2);
                       }
                   }


             //       if (_RegExChain2 != null) return _RegExChain2;
                       
             //       var i = new RegExChain(){TrackingState = TrackingState.Added};
			//		//if (this.regexchain.RegExChain2 == null) Debugger.Break();
			//		if (this.regexchain.RegExChain2 != null)
            //        {
            //           i. = this.regexchain.RegExChain2;
            //        }
            //        else
            //        {
            //            this.regexchain.RegExChain2 = i.;
             //       }
                           
            //        _RegExChain2 = i;
                     
                    return _RegExChain2;
               }
			set
			{
			    if (value == _RegExChain2) return;
                _RegExChain2 = value;
                if(value != null)
                     this.regexchain.RegExChain2 = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("RegExChain2");
			}
		}
        

       private RegularExpressions _RegularExpressions;
        public  RegularExpressions RegularExpressions
		{
		    get
               { 
                  if (this.regexchain != null)
                   {
                       if (_RegularExpressions != null)
                       {
                           if (this.regexchain.RegularExpressions !=
                               _RegularExpressions.DTO)
                           {
                                if (this.regexchain.RegularExpressions  != null)
                               _RegularExpressions = new RegularExpressions(this.regexchain.RegularExpressions);
                           }
                       }
                       else
                       {
                             if (this.regexchain.RegularExpressions  != null)
                           _RegularExpressions = new RegularExpressions(this.regexchain.RegularExpressions);
                       }
                   }


             //       if (_RegularExpressions != null) return _RegularExpressions;
                       
             //       var i = new RegularExpressions(){TrackingState = TrackingState.Added};
			//		//if (this.regexchain.RegularExpressions == null) Debugger.Break();
			//		if (this.regexchain.RegularExpressions != null)
            //        {
            //           i. = this.regexchain.RegularExpressions;
            //        }
            //        else
            //        {
            //            this.regexchain.RegularExpressions = i.;
             //       }
                           
            //        _RegularExpressions = i;
                     
                    return _RegularExpressions;
               }
			set
			{
			    if (value == _RegularExpressions) return;
                _RegularExpressions = value;
                if(value != null)
                     this.regexchain.RegularExpressions = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("RegularExpressions");
			}
		}
        

        ObservableCollection<TemplateLinesRegularExpressions> _TemplateLinesRegularExpressions = null;
        public  ObservableCollection<TemplateLinesRegularExpressions> TemplateLinesRegularExpressions
		{
            
		    get 
				{ 
					if(_TemplateLinesRegularExpressions != null) return _TemplateLinesRegularExpressions;
					//if (this.regexchain.TemplateLinesRegularExpressions == null) Debugger.Break();
					if(this.regexchain.TemplateLinesRegularExpressions != null)
					{
						_TemplateLinesRegularExpressions = new ObservableCollection<TemplateLinesRegularExpressions>(this.regexchain.TemplateLinesRegularExpressions.Select(x => new TemplateLinesRegularExpressions(x)));
					}
					
						_TemplateLinesRegularExpressions.CollectionChanged += TemplateLinesRegularExpressions_CollectionChanged; 
					
					return _TemplateLinesRegularExpressions; 
				}
			set
			{
			    if (Equals(value, _TemplateLinesRegularExpressions)) return;
				if (value != null)
					this.regexchain.TemplateLinesRegularExpressions = new ChangeTrackingCollection<DTO.TemplateLinesRegularExpressions>(value.Select(x => x.DTO).ToList());
                _TemplateLinesRegularExpressions = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TemplateLinesRegularExpressions != null)
				_TemplateLinesRegularExpressions.CollectionChanged += TemplateLinesRegularExpressions_CollectionChanged;               
				NotifyPropertyChanged("TemplateLinesRegularExpressions");
			}
		}
        
        void TemplateLinesRegularExpressions_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateLinesRegularExpressions itm in e.NewItems)
                    {
                        if (itm != null)
                        regexchain.TemplateLinesRegularExpressions.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateLinesRegularExpressions itm in e.OldItems)
                    {
                        if (itm != null)
                        regexchain.TemplateLinesRegularExpressions.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<TemplateRegularExpressions> _TemplateRegularExpressions = null;
        public  ObservableCollection<TemplateRegularExpressions> TemplateRegularExpressions
		{
            
		    get 
				{ 
					if(_TemplateRegularExpressions != null) return _TemplateRegularExpressions;
					//if (this.regexchain.TemplateRegularExpressions == null) Debugger.Break();
					if(this.regexchain.TemplateRegularExpressions != null)
					{
						_TemplateRegularExpressions = new ObservableCollection<TemplateRegularExpressions>(this.regexchain.TemplateRegularExpressions.Select(x => new TemplateRegularExpressions(x)));
					}
					
						_TemplateRegularExpressions.CollectionChanged += TemplateRegularExpressions_CollectionChanged; 
					
					return _TemplateRegularExpressions; 
				}
			set
			{
			    if (Equals(value, _TemplateRegularExpressions)) return;
				if (value != null)
					this.regexchain.TemplateRegularExpressions = new ChangeTrackingCollection<DTO.TemplateRegularExpressions>(value.Select(x => x.DTO).ToList());
                _TemplateRegularExpressions = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TemplateRegularExpressions != null)
				_TemplateRegularExpressions.CollectionChanged += TemplateRegularExpressions_CollectionChanged;               
				NotifyPropertyChanged("TemplateRegularExpressions");
			}
		}
        
        void TemplateRegularExpressions_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateRegularExpressions itm in e.NewItems)
                    {
                        if (itm != null)
                        regexchain.TemplateRegularExpressions.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateRegularExpressions itm in e.OldItems)
                    {
                        if (itm != null)
                        regexchain.TemplateRegularExpressions.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.RegExChain> _changeTracker;    
        public ChangeTrackingCollection<DTO.RegExChain> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



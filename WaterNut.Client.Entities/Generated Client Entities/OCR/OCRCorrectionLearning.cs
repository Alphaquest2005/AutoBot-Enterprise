// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class OCRCorrectionLearning: BaseEntity<OCRCorrectionLearning>
    {
        DTO.OCRCorrectionLearning ocrcorrectionlearning;
        public OCRCorrectionLearning(DTO.OCRCorrectionLearning dto )
        {
              ocrcorrectionlearning = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.OCRCorrectionLearning>(ocrcorrectionlearning);

        }

        public DTO.OCRCorrectionLearning DTO
        {
            get
            {
             return ocrcorrectionlearning;
            }
            set
            {
                ocrcorrectionlearning = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.ocrcorrectionlearning.Id; }
			set
			{
			    if (value == this.ocrcorrectionlearning.Id) return;
				this.ocrcorrectionlearning.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "FieldName is required")]
       
                
                [MaxLength(255, ErrorMessage = "FieldName has a max length of 255 letters ")]
public string FieldName
		{ 
		    get { return this.ocrcorrectionlearning.FieldName; }
			set
			{
			    if (value == this.ocrcorrectionlearning.FieldName) return;
				this.ocrcorrectionlearning.FieldName = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FieldName");
			}
		}
     

       
       
                
                
public string OriginalError
		{ 
		    get { return this.ocrcorrectionlearning.OriginalError; }
			set
			{
			    if (value == this.ocrcorrectionlearning.OriginalError) return;
				this.ocrcorrectionlearning.OriginalError = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("OriginalError");
			}
		}
     

       
       
                
                
public string CorrectValue
		{ 
		    get { return this.ocrcorrectionlearning.CorrectValue; }
			set
			{
			    if (value == this.ocrcorrectionlearning.CorrectValue) return;
				this.ocrcorrectionlearning.CorrectValue = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CorrectValue");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> LineNumber
		{ 
		    get { return this.ocrcorrectionlearning.LineNumber; }
			set
			{
			    if (value == this.ocrcorrectionlearning.LineNumber) return;
				this.ocrcorrectionlearning.LineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineNumber");
			}
		}
     

       
       
                
                
public string LineText
		{ 
		    get { return this.ocrcorrectionlearning.LineText; }
			set
			{
			    if (value == this.ocrcorrectionlearning.LineText) return;
				this.ocrcorrectionlearning.LineText = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineText");
			}
		}
     

       
       
                
                
public string WindowText
		{ 
		    get { return this.ocrcorrectionlearning.WindowText; }
			set
			{
			    if (value == this.ocrcorrectionlearning.WindowText) return;
				this.ocrcorrectionlearning.WindowText = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("WindowText");
			}
		}
     

       
       
                
                [MaxLength(100, ErrorMessage = "CorrectionType has a max length of 100 letters ")]
public string CorrectionType
		{ 
		    get { return this.ocrcorrectionlearning.CorrectionType; }
			set
			{
			    if (value == this.ocrcorrectionlearning.CorrectionType) return;
				this.ocrcorrectionlearning.CorrectionType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CorrectionType");
			}
		}
     

       
       
                
                
public string DeepSeekReasoning
		{ 
		    get { return this.ocrcorrectionlearning.DeepSeekReasoning; }
			set
			{
			    if (value == this.ocrcorrectionlearning.DeepSeekReasoning) return;
				this.ocrcorrectionlearning.DeepSeekReasoning = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DeepSeekReasoning");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> Confidence
		{ 
		    get { return this.ocrcorrectionlearning.Confidence; }
			set
			{
			    if (value == this.ocrcorrectionlearning.Confidence) return;
				this.ocrcorrectionlearning.Confidence = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Confidence");
			}
		}
     

       
       
                
                [MaxLength(100, ErrorMessage = "InvoiceType has a max length of 100 letters ")]
public string InvoiceType
		{ 
		    get { return this.ocrcorrectionlearning.InvoiceType; }
			set
			{
			    if (value == this.ocrcorrectionlearning.InvoiceType) return;
				this.ocrcorrectionlearning.InvoiceType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceType");
			}
		}
     

       
       
                
                [MaxLength(500, ErrorMessage = "FilePath has a max length of 500 letters ")]
public string FilePath
		{ 
		    get { return this.ocrcorrectionlearning.FilePath; }
			set
			{
			    if (value == this.ocrcorrectionlearning.FilePath) return;
				this.ocrcorrectionlearning.FilePath = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FilePath");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Success is required")]
       
public bool Success
		{ 
		    get { return this.ocrcorrectionlearning.Success; }
			set
			{
			    if (value == this.ocrcorrectionlearning.Success) return;
				this.ocrcorrectionlearning.Success = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Success");
			}
		}
     

       
       
                
                
public string ErrorMessage
		{ 
		    get { return this.ocrcorrectionlearning.ErrorMessage; }
			set
			{
			    if (value == this.ocrcorrectionlearning.ErrorMessage) return;
				this.ocrcorrectionlearning.ErrorMessage = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ErrorMessage");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CreatedDate is required")]
       
public System.DateTime CreatedDate
		{ 
		    get { return this.ocrcorrectionlearning.CreatedDate; }
			set
			{
			    if (value == this.ocrcorrectionlearning.CreatedDate) return;
				this.ocrcorrectionlearning.CreatedDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CreatedDate");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CreatedBy is required")]
       
                
                [MaxLength(100, ErrorMessage = "CreatedBy has a max length of 100 letters ")]
public string CreatedBy
		{ 
		    get { return this.ocrcorrectionlearning.CreatedBy; }
			set
			{
			    if (value == this.ocrcorrectionlearning.CreatedBy) return;
				this.ocrcorrectionlearning.CreatedBy = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CreatedBy");
			}
		}
     

       
       
public Nullable<bool> RequiresMultilineRegex
		{ 
		    get { return this.ocrcorrectionlearning.RequiresMultilineRegex; }
			set
			{
			    if (value == this.ocrcorrectionlearning.RequiresMultilineRegex) return;
				this.ocrcorrectionlearning.RequiresMultilineRegex = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RequiresMultilineRegex");
			}
		}
     

       
       
                
                
public string ContextLinesBefore
		{ 
		    get { return this.ocrcorrectionlearning.ContextLinesBefore; }
			set
			{
			    if (value == this.ocrcorrectionlearning.ContextLinesBefore) return;
				this.ocrcorrectionlearning.ContextLinesBefore = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ContextLinesBefore");
			}
		}
     

       
       
                
                
public string ContextLinesAfter
		{ 
		    get { return this.ocrcorrectionlearning.ContextLinesAfter; }
			set
			{
			    if (value == this.ocrcorrectionlearning.ContextLinesAfter) return;
				this.ocrcorrectionlearning.ContextLinesAfter = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ContextLinesAfter");
			}
		}
     

       
       
public Nullable<int> LineId
		{ 
		    get { return this.ocrcorrectionlearning.LineId; }
			set
			{
			    if (value == this.ocrcorrectionlearning.LineId) return;
				this.ocrcorrectionlearning.LineId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineId");
			}
		}
     

       
       
public Nullable<int> PartId
		{ 
		    get { return this.ocrcorrectionlearning.PartId; }
			set
			{
			    if (value == this.ocrcorrectionlearning.PartId) return;
				this.ocrcorrectionlearning.PartId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PartId");
			}
		}
     

       
       
public Nullable<int> RegexId
		{ 
		    get { return this.ocrcorrectionlearning.RegexId; }
			set
			{
			    if (value == this.ocrcorrectionlearning.RegexId) return;
				this.ocrcorrectionlearning.RegexId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegexId");
			}
		}
     

       
       
                
                
public string SuggestedRegex
		{ 
		    get { return this.ocrcorrectionlearning.SuggestedRegex; }
			set
			{
			    if (value == this.ocrcorrectionlearning.SuggestedRegex) return;
				this.ocrcorrectionlearning.SuggestedRegex = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SuggestedRegex");
			}
		}
     

       
       
                
                [MaxLength(450, ErrorMessage = "SuggestedRegex_Indexed has a max length of 450 letters ")]
public string SuggestedRegex_Indexed
		{ 
		    get { return this.ocrcorrectionlearning.SuggestedRegex_Indexed; }
			set
			{
			    if (value == this.ocrcorrectionlearning.SuggestedRegex_Indexed) return;
				this.ocrcorrectionlearning.SuggestedRegex_Indexed = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SuggestedRegex_Indexed");
			}
		}
     


        ChangeTrackingCollection<DTO.OCRCorrectionLearning> _changeTracker;    
        public ChangeTrackingCollection<DTO.OCRCorrectionLearning> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



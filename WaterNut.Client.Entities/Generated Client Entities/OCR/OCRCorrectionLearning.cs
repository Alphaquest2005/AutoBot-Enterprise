// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class OCRCorrectionLearning: BaseEntity<OCRCorrectionLearning>
    {
        DTO.OCRCorrectionLearning ocrcorrectionlearning;
        public OCRCorrectionLearning(DTO.OCRCorrectionLearning dto )
        {
              ocrcorrectionlearning = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.OCRCorrectionLearning>(ocrcorrectionlearning);

        }

        public DTO.OCRCorrectionLearning DTO
        {
            get
            {
             return ocrcorrectionlearning;
            }
            set
            {
                ocrcorrectionlearning = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.ocrcorrectionlearning.Id; }
			set
			{
			    if (value == this.ocrcorrectionlearning.Id) return;
				this.ocrcorrectionlearning.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "FieldName is required")]
       
                
                [MaxLength(100, ErrorMessage = "FieldName has a max length of 100 letters ")]
public string FieldName
		{ 
		    get { return this.ocrcorrectionlearning.FieldName; }
			set
			{
			    if (value == this.ocrcorrectionlearning.FieldName) return;
				this.ocrcorrectionlearning.FieldName = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FieldName");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "OriginalError is required")]
       
                
                [MaxLength(500, ErrorMessage = "OriginalError has a max length of 500 letters ")]
public string OriginalError
		{ 
		    get { return this.ocrcorrectionlearning.OriginalError; }
			set
			{
			    if (value == this.ocrcorrectionlearning.OriginalError) return;
				this.ocrcorrectionlearning.OriginalError = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("OriginalError");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CorrectValue is required")]
       
                
                [MaxLength(500, ErrorMessage = "CorrectValue has a max length of 500 letters ")]
public string CorrectValue
		{ 
		    get { return this.ocrcorrectionlearning.CorrectValue; }
			set
			{
			    if (value == this.ocrcorrectionlearning.CorrectValue) return;
				this.ocrcorrectionlearning.CorrectValue = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CorrectValue");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "LineNumber is required")]
       [NumberValidationAttribute]
public int LineNumber
		{ 
		    get { return this.ocrcorrectionlearning.LineNumber; }
			set
			{
			    if (value == this.ocrcorrectionlearning.LineNumber) return;
				this.ocrcorrectionlearning.LineNumber = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineNumber");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "LineText is required")]
       
                
                [MaxLength(1000, ErrorMessage = "LineText has a max length of 1000 letters ")]
public string LineText
		{ 
		    get { return this.ocrcorrectionlearning.LineText; }
			set
			{
			    if (value == this.ocrcorrectionlearning.LineText) return;
				this.ocrcorrectionlearning.LineText = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LineText");
			}
		}
     

       
       
                
                
public string WindowText
		{ 
		    get { return this.ocrcorrectionlearning.WindowText; }
			set
			{
			    if (value == this.ocrcorrectionlearning.WindowText) return;
				this.ocrcorrectionlearning.WindowText = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("WindowText");
			}
		}
     

       
       
                
                [MaxLength(1000, ErrorMessage = "ExistingRegex has a max length of 1000 letters ")]
public string ExistingRegex
		{ 
		    get { return this.ocrcorrectionlearning.ExistingRegex; }
			set
			{
			    if (value == this.ocrcorrectionlearning.ExistingRegex) return;
				this.ocrcorrectionlearning.ExistingRegex = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ExistingRegex");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CorrectionType is required")]
       
                
                [MaxLength(50, ErrorMessage = "CorrectionType has a max length of 50 letters ")]
public string CorrectionType
		{ 
		    get { return this.ocrcorrectionlearning.CorrectionType; }
			set
			{
			    if (value == this.ocrcorrectionlearning.CorrectionType) return;
				this.ocrcorrectionlearning.CorrectionType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CorrectionType");
			}
		}
     

       
       
                
                [MaxLength(1000, ErrorMessage = "NewRegexPattern has a max length of 1000 letters ")]
public string NewRegexPattern
		{ 
		    get { return this.ocrcorrectionlearning.NewRegexPattern; }
			set
			{
			    if (value == this.ocrcorrectionlearning.NewRegexPattern) return;
				this.ocrcorrectionlearning.NewRegexPattern = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("NewRegexPattern");
			}
		}
     

       
       
                
                [MaxLength(500, ErrorMessage = "ReplacementPattern has a max length of 500 letters ")]
public string ReplacementPattern
		{ 
		    get { return this.ocrcorrectionlearning.ReplacementPattern; }
			set
			{
			    if (value == this.ocrcorrectionlearning.ReplacementPattern) return;
				this.ocrcorrectionlearning.ReplacementPattern = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReplacementPattern");
			}
		}
     

       
       
                
                
public string DeepSeekReasoning
		{ 
		    get { return this.ocrcorrectionlearning.DeepSeekReasoning; }
			set
			{
			    if (value == this.ocrcorrectionlearning.DeepSeekReasoning) return;
				this.ocrcorrectionlearning.DeepSeekReasoning = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DeepSeekReasoning");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<decimal> Confidence
		{ 
		    get { return this.ocrcorrectionlearning.Confidence; }
			set
			{
			    if (value == this.ocrcorrectionlearning.Confidence) return;
				this.ocrcorrectionlearning.Confidence = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Confidence");
			}
		}
     

       
       
                
                [MaxLength(100, ErrorMessage = "InvoiceType has a max length of 100 letters ")]
public string InvoiceType
		{ 
		    get { return this.ocrcorrectionlearning.InvoiceType; }
			set
			{
			    if (value == this.ocrcorrectionlearning.InvoiceType) return;
				this.ocrcorrectionlearning.InvoiceType = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceType");
			}
		}
     

       
       
                
                [MaxLength(500, ErrorMessage = "FilePath has a max length of 500 letters ")]
public string FilePath
		{ 
		    get { return this.ocrcorrectionlearning.FilePath; }
			set
			{
			    if (value == this.ocrcorrectionlearning.FilePath) return;
				this.ocrcorrectionlearning.FilePath = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FilePath");
			}
		}
     

       
       
public Nullable<int> FieldId
		{ 
		    get { return this.ocrcorrectionlearning.FieldId; }
			set
			{
			    if (value == this.ocrcorrectionlearning.FieldId) return;
				this.ocrcorrectionlearning.FieldId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FieldId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Success is required")]
       
public bool Success
		{ 
		    get { return this.ocrcorrectionlearning.Success; }
			set
			{
			    if (value == this.ocrcorrectionlearning.Success) return;
				this.ocrcorrectionlearning.Success = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Success");
			}
		}
     

       
       
                
                [MaxLength(1000, ErrorMessage = "ErrorMessage has a max length of 1000 letters ")]
public string ErrorMessage
		{ 
		    get { return this.ocrcorrectionlearning.ErrorMessage; }
			set
			{
			    if (value == this.ocrcorrectionlearning.ErrorMessage) return;
				this.ocrcorrectionlearning.ErrorMessage = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ErrorMessage");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "CreatedDate is required")]
       
public System.DateTime CreatedDate
		{ 
		    get { return this.ocrcorrectionlearning.CreatedDate; }
			set
			{
			    if (value == this.ocrcorrectionlearning.CreatedDate) return;
				this.ocrcorrectionlearning.CreatedDate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CreatedDate");
			}
		}
     

       
       
                
                [MaxLength(100, ErrorMessage = "CreatedBy has a max length of 100 letters ")]
public string CreatedBy
		{ 
		    get { return this.ocrcorrectionlearning.CreatedBy; }
			set
			{
			    if (value == this.ocrcorrectionlearning.CreatedBy) return;
				this.ocrcorrectionlearning.CreatedBy = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CreatedBy");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> ProcessingTimeMs
		{ 
		    get { return this.ocrcorrectionlearning.ProcessingTimeMs; }
			set
			{
			    if (value == this.ocrcorrectionlearning.ProcessingTimeMs) return;
				this.ocrcorrectionlearning.ProcessingTimeMs = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ProcessingTimeMs");
			}
		}
     

       
       
                
                
public string DeepSeekPrompt
		{ 
		    get { return this.ocrcorrectionlearning.DeepSeekPrompt; }
			set
			{
			    if (value == this.ocrcorrectionlearning.DeepSeekPrompt) return;
				this.ocrcorrectionlearning.DeepSeekPrompt = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DeepSeekPrompt");
			}
		}
     

       
       
                
                
public string DeepSeekResponse
		{ 
		    get { return this.ocrcorrectionlearning.DeepSeekResponse; }
			set
			{
			    if (value == this.ocrcorrectionlearning.DeepSeekResponse) return;
				this.ocrcorrectionlearning.DeepSeekResponse = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DeepSeekResponse");
			}
		}
     


        ChangeTrackingCollection<DTO.OCRCorrectionLearning> _changeTracker;    
        public ChangeTrackingCollection<DTO.OCRCorrectionLearning> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



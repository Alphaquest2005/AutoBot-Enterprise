// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class Templates: BaseEntity<Templates>
    {
        DTO.Templates templates;
        public Templates(DTO.Templates dto )
        {
              templates = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Templates>(templates);

        }

        public DTO.Templates DTO
        {
            get
            {
             return templates;
            }
            set
            {
                templates = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.templates.Id; }
			set
			{
			    if (value == this.templates.Id) return;
				this.templates.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Name is required")]
       
                
                [MaxLength(50, ErrorMessage = "Name has a max length of 50 letters ")]
public string Name
		{ 
		    get { return this.templates.Name; }
			set
			{
			    if (value == this.templates.Name) return;
				this.templates.Name = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Name");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "FileType is required")]
       
public int FileTypeId
		{ 
		    get { return this.templates.FileTypeId; }
			set
			{
			    if (value == this.templates.FileTypeId) return;
				this.templates.FileTypeId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("FileTypeId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.templates.ApplicationSettingsId; }
			set
			{
			    if (value == this.templates.ApplicationSettingsId) return;
				this.templates.ApplicationSettingsId = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "IsActive is required")]
       
public bool IsActive
		{ 
		    get { return this.templates.IsActive; }
			set
			{
			    if (value == this.templates.IsActive) return;
				this.templates.IsActive = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsActive");
			}
		}
     

        ObservableCollection<Parts> _Parts = null;
        public  ObservableCollection<Parts> Parts
		{
            
		    get 
				{ 
					if(_Parts != null) return _Parts;
					//if (this.templates.Parts == null) Debugger.Break();
					if(this.templates.Parts != null)
					{
						_Parts = new ObservableCollection<Parts>(this.templates.Parts.Select(x => new Parts(x)));
					}
					
						_Parts.CollectionChanged += Parts_CollectionChanged; 
					
					return _Parts; 
				}
			set
			{
			    if (Equals(value, _Parts)) return;
				if (value != null)
					this.templates.Parts = new ChangeTrackingCollection<DTO.Parts>(value.Select(x => x.DTO).ToList());
                _Parts = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_Parts != null)
				_Parts.CollectionChanged += Parts_CollectionChanged;               
				NotifyPropertyChanged("Parts");
			}
		}
        
        void Parts_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Parts itm in e.NewItems)
                    {
                        if (itm != null)
                        templates.Parts.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Parts itm in e.OldItems)
                    {
                        if (itm != null)
                        templates.Parts.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<TemplateRegEx> _RegEx = null;
        public  ObservableCollection<TemplateRegEx> RegEx
		{
            
		    get 
				{ 
					if(_RegEx != null) return _RegEx;
					//if (this.templates.RegEx == null) Debugger.Break();
					if(this.templates.RegEx != null)
					{
						_RegEx = new ObservableCollection<TemplateRegEx>(this.templates.RegEx.Select(x => new TemplateRegEx(x)));
					}
					
						_RegEx.CollectionChanged += RegEx_CollectionChanged; 
					
					return _RegEx; 
				}
			set
			{
			    if (Equals(value, _RegEx)) return;
				if (value != null)
					this.templates.RegEx = new ChangeTrackingCollection<DTO.TemplateRegEx>(value.Select(x => x.DTO).ToList());
                _RegEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_RegEx != null)
				_RegEx.CollectionChanged += RegEx_CollectionChanged;               
				NotifyPropertyChanged("RegEx");
			}
		}
        
        void RegEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateRegEx itm in e.NewItems)
                    {
                        if (itm != null)
                        templates.RegEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateRegEx itm in e.OldItems)
                    {
                        if (itm != null)
                        templates.RegEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<TemplateIdentificatonRegEx> _TemplateIdentificatonRegEx = null;
        public  ObservableCollection<TemplateIdentificatonRegEx> TemplateIdentificatonRegEx
		{
            
		    get 
				{ 
					if(_TemplateIdentificatonRegEx != null) return _TemplateIdentificatonRegEx;
					//if (this.templates.TemplateIdentificatonRegEx == null) Debugger.Break();
					if(this.templates.TemplateIdentificatonRegEx != null)
					{
						_TemplateIdentificatonRegEx = new ObservableCollection<TemplateIdentificatonRegEx>(this.templates.TemplateIdentificatonRegEx.Select(x => new TemplateIdentificatonRegEx(x)));
					}
					
						_TemplateIdentificatonRegEx.CollectionChanged += TemplateIdentificatonRegEx_CollectionChanged; 
					
					return _TemplateIdentificatonRegEx; 
				}
			set
			{
			    if (Equals(value, _TemplateIdentificatonRegEx)) return;
				if (value != null)
					this.templates.TemplateIdentificatonRegEx = new ChangeTrackingCollection<DTO.TemplateIdentificatonRegEx>(value.Select(x => x.DTO).ToList());
                _TemplateIdentificatonRegEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TemplateIdentificatonRegEx != null)
				_TemplateIdentificatonRegEx.CollectionChanged += TemplateIdentificatonRegEx_CollectionChanged;               
				NotifyPropertyChanged("TemplateIdentificatonRegEx");
			}
		}
        
        void TemplateIdentificatonRegEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateIdentificatonRegEx itm in e.NewItems)
                    {
                        if (itm != null)
                        templates.TemplateIdentificatonRegEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateIdentificatonRegEx itm in e.OldItems)
                    {
                        if (itm != null)
                        templates.TemplateIdentificatonRegEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.Templates> _changeTracker;    
        public ChangeTrackingCollection<DTO.Templates> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



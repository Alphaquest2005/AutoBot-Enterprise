// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using OCR.Client.DTO;


using Core.Common.Validation;

namespace OCR.Client.Entities
{
       public partial class Templates: BaseEntity<Templates>
    {
        DTO.Templates templates;
        public Templates(DTO.Templates dto )
        {
              templates = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.Templates>(templates);

        }

        public DTO.Templates DTO
        {
            get
            {
             return templates;
            }
            set
            {
                templates = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.templates.Id; }
			set
			{
			    if (value == this.templates.Id) return;
				this.templates.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "Name is required")]
       
                
                [MaxLength(50, ErrorMessage = "Name has a max length of 50 letters ")]
public string Name
		{ 
		    get { return this.templates.Name; }
			set
			{
			    if (value == this.templates.Name) return;
				this.templates.Name = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Name");
			}
		}
     

        ObservableCollection<TemplateLines> _TemplateLines = null;
        public  ObservableCollection<TemplateLines> TemplateLines
		{
            
		    get 
				{ 
					if(_TemplateLines != null) return _TemplateLines;
					//if (this.templates.TemplateLines == null) Debugger.Break();
					if(this.templates.TemplateLines != null)
					{
						_TemplateLines = new ObservableCollection<TemplateLines>(this.templates.TemplateLines.Select(x => new TemplateLines(x)));
					}
					
						_TemplateLines.CollectionChanged += TemplateLines_CollectionChanged; 
					
					return _TemplateLines; 
				}
			set
			{
			    if (Equals(value, _TemplateLines)) return;
				if (value != null)
					this.templates.TemplateLines = new ChangeTrackingCollection<DTO.TemplateLines>(value.Select(x => x.DTO).ToList());
                _TemplateLines = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TemplateLines != null)
				_TemplateLines.CollectionChanged += TemplateLines_CollectionChanged;               
				NotifyPropertyChanged("TemplateLines");
			}
		}
        
        void TemplateLines_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateLines itm in e.NewItems)
                    {
                        if (itm != null)
                        templates.TemplateLines.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateLines itm in e.OldItems)
                    {
                        if (itm != null)
                        templates.TemplateLines.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

        ObservableCollection<TemplateRegularExpressions> _TemplateRegularExpressions = null;
        public  ObservableCollection<TemplateRegularExpressions> TemplateRegularExpressions
		{
            
		    get 
				{ 
					if(_TemplateRegularExpressions != null) return _TemplateRegularExpressions;
					//if (this.templates.TemplateRegularExpressions == null) Debugger.Break();
					if(this.templates.TemplateRegularExpressions != null)
					{
						_TemplateRegularExpressions = new ObservableCollection<TemplateRegularExpressions>(this.templates.TemplateRegularExpressions.Select(x => new TemplateRegularExpressions(x)));
					}
					
						_TemplateRegularExpressions.CollectionChanged += TemplateRegularExpressions_CollectionChanged; 
					
					return _TemplateRegularExpressions; 
				}
			set
			{
			    if (Equals(value, _TemplateRegularExpressions)) return;
				if (value != null)
					this.templates.TemplateRegularExpressions = new ChangeTrackingCollection<DTO.TemplateRegularExpressions>(value.Select(x => x.DTO).ToList());
                _TemplateRegularExpressions = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TemplateRegularExpressions != null)
				_TemplateRegularExpressions.CollectionChanged += TemplateRegularExpressions_CollectionChanged;               
				NotifyPropertyChanged("TemplateRegularExpressions");
			}
		}
        
        void TemplateRegularExpressions_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TemplateRegularExpressions itm in e.NewItems)
                    {
                        if (itm != null)
                        templates.TemplateRegularExpressions.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TemplateRegularExpressions itm in e.OldItems)
                    {
                        if (itm != null)
                        templates.TemplateRegularExpressions.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.Templates> _changeTracker;    
        public ChangeTrackingCollection<DTO.Templates> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



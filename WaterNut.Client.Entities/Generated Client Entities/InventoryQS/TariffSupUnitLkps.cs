// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using InventoryQS.Client.DTO;


using Core.Common.Validation;

namespace InventoryQS.Client.Entities
{
       public partial class TariffSupUnitLkps: BaseEntity<TariffSupUnitLkps>
    {
        DTO.TariffSupUnitLkps tariffsupunitlkps;
        public TariffSupUnitLkps(DTO.TariffSupUnitLkps dto )
        {
              tariffsupunitlkps = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TariffSupUnitLkps>(tariffsupunitlkps);

        }

        public DTO.TariffSupUnitLkps DTO
        {
            get
            {
             return tariffsupunitlkps;
            }
            set
            {
                tariffsupunitlkps = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "SuppUnitCode2 is required")]
       
                
                [MaxLength(50, ErrorMessage = "SuppUnitCode2 has a max length of 50 letters ")]
public string SuppUnitCode2
		{ 
		    get { return this.tariffsupunitlkps.SuppUnitCode2; }
			set
			{
			    if (value == this.tariffsupunitlkps.SuppUnitCode2) return;
				this.tariffsupunitlkps.SuppUnitCode2 = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SuppUnitCode2");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "SuppUnitName2 has a max length of 50 letters ")]
public string SuppUnitName2
		{ 
		    get { return this.tariffsupunitlkps.SuppUnitName2; }
			set
			{
			    if (value == this.tariffsupunitlkps.SuppUnitName2) return;
				this.tariffsupunitlkps.SuppUnitName2 = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SuppUnitName2");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= "SuppQty is required")]
       [NumberValidationAttribute]
public double SuppQty
		{ 
		    get { return this.tariffsupunitlkps.SuppQty; }
			set
			{
			    if (value == this.tariffsupunitlkps.SuppQty) return;
				this.tariffsupunitlkps.SuppQty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SuppQty");
			}
		}
     

       [RequiredValidationAttribute(ErrorMessage= " is required")]
       
public int Id
		{ 
		    get { return this.tariffsupunitlkps.Id; }
			set
			{
			    if (value == this.tariffsupunitlkps.Id) return;
				this.tariffsupunitlkps.Id = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Id");
			}
		}
     

        ObservableCollection<TariffCategoryCodeSuppUnit> _TariffCategoryCodeSuppUnit = null;
        public  ObservableCollection<TariffCategoryCodeSuppUnit> TariffCategoryCodeSuppUnit
		{
            
		    get 
				{ 
					if(_TariffCategoryCodeSuppUnit != null) return _TariffCategoryCodeSuppUnit;
					//if (this.tariffsupunitlkps.TariffCategoryCodeSuppUnit == null) Debugger.Break();
					if(this.tariffsupunitlkps.TariffCategoryCodeSuppUnit != null)
					{
						_TariffCategoryCodeSuppUnit = new ObservableCollection<TariffCategoryCodeSuppUnit>(this.tariffsupunitlkps.TariffCategoryCodeSuppUnit.Select(x => new TariffCategoryCodeSuppUnit(x)));
					}
					
						_TariffCategoryCodeSuppUnit.CollectionChanged += TariffCategoryCodeSuppUnit_CollectionChanged; 
					
					return _TariffCategoryCodeSuppUnit; 
				}
			set
			{
			    if (Equals(value, _TariffCategoryCodeSuppUnit)) return;
				if (value != null)
					this.tariffsupunitlkps.TariffCategoryCodeSuppUnit = new ChangeTrackingCollection<DTO.TariffCategoryCodeSuppUnit>(value.Select(x => x.DTO).ToList());
                _TariffCategoryCodeSuppUnit = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_TariffCategoryCodeSuppUnit != null)
				_TariffCategoryCodeSuppUnit.CollectionChanged += TariffCategoryCodeSuppUnit_CollectionChanged;               
				NotifyPropertyChanged("TariffCategoryCodeSuppUnit");
			}
		}
        
        void TariffCategoryCodeSuppUnit_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (TariffCategoryCodeSuppUnit itm in e.NewItems)
                    {
                        if (itm != null)
                        tariffsupunitlkps.TariffCategoryCodeSuppUnit.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (TariffCategoryCodeSuppUnit itm in e.OldItems)
                    {
                        if (itm != null)
                        tariffsupunitlkps.TariffCategoryCodeSuppUnit.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.TariffSupUnitLkps> _changeTracker;    
        public ChangeTrackingCollection<DTO.TariffSupUnitLkps> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using TrackableEntities.Client;
using Core.Common.Client.Entities;
using InventoryQS.Client.DTO;


using Core.Common.Validation;

namespace InventoryQS.Client.Entities
{
       public partial class TariffCodes: BaseEntity<TariffCodes>
    {
        DTO.TariffCodes tariffcodes;
        public TariffCodes(DTO.TariffCodes dto )
        {
              tariffcodes = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.TariffCodes>(tariffcodes);

        }

        public DTO.TariffCodes DTO
        {
            get
            {
             return tariffcodes;
            }
            set
            {
                tariffcodes = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "TariffCode is required")]
       
                
                [MaxLength(50, ErrorMessage = "TariffCode has a max length of 50 letters ")]
public string TariffCode
		{ 
		    get { return this.tariffcodes.TariffCode; }
			set
			{
			    if (value == this.tariffcodes.TariffCode) return;
				this.tariffcodes.TariffCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCode");
			}
		}
     

       
       
                
                [MaxLength(999, ErrorMessage = "Description has a max length of 999 letters ")]
public string Description
		{ 
		    get { return this.tariffcodes.Description; }
			set
			{
			    if (value == this.tariffcodes.Description) return;
				this.tariffcodes.Description = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "RateofDuty has a max length of 50 letters ")]
public string RateofDuty
		{ 
		    get { return this.tariffcodes.RateofDuty; }
			set
			{
			    if (value == this.tariffcodes.RateofDuty) return;
				this.tariffcodes.RateofDuty = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RateofDuty");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "EnvironmentalLevy has a max length of 50 letters ")]
public string EnvironmentalLevy
		{ 
		    get { return this.tariffcodes.EnvironmentalLevy; }
			set
			{
			    if (value == this.tariffcodes.EnvironmentalLevy) return;
				this.tariffcodes.EnvironmentalLevy = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EnvironmentalLevy");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "CustomsServiceCharge has a max length of 50 letters ")]
public string CustomsServiceCharge
		{ 
		    get { return this.tariffcodes.CustomsServiceCharge; }
			set
			{
			    if (value == this.tariffcodes.CustomsServiceCharge) return;
				this.tariffcodes.CustomsServiceCharge = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CustomsServiceCharge");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "ExciseTax has a max length of 50 letters ")]
public string ExciseTax
		{ 
		    get { return this.tariffcodes.ExciseTax; }
			set
			{
			    if (value == this.tariffcodes.ExciseTax) return;
				this.tariffcodes.ExciseTax = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ExciseTax");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "VatRate has a max length of 50 letters ")]
public string VatRate
		{ 
		    get { return this.tariffcodes.VatRate; }
			set
			{
			    if (value == this.tariffcodes.VatRate) return;
				this.tariffcodes.VatRate = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("VatRate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "PetrolTax has a max length of 50 letters ")]
public string PetrolTax
		{ 
		    get { return this.tariffcodes.PetrolTax; }
			set
			{
			    if (value == this.tariffcodes.PetrolTax) return;
				this.tariffcodes.PetrolTax = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PetrolTax");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "Units has a max length of 50 letters ")]
public string Units
		{ 
		    get { return this.tariffcodes.Units; }
			set
			{
			    if (value == this.tariffcodes.Units) return;
				this.tariffcodes.Units = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Units");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "SiteRev3 has a max length of 50 letters ")]
public string SiteRev3
		{ 
		    get { return this.tariffcodes.SiteRev3; }
			set
			{
			    if (value == this.tariffcodes.SiteRev3) return;
				this.tariffcodes.SiteRev3 = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SiteRev3");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "TariffCategoryCode has a max length of 50 letters ")]
public string TariffCategoryCode
		{ 
		    get { return this.tariffcodes.TariffCategoryCode; }
			set
			{
			    if (value == this.tariffcodes.TariffCategoryCode) return;
				this.tariffcodes.TariffCategoryCode = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TariffCategoryCode");
			}
		}
     

       
       
public Nullable<bool> LicenseRequired
		{ 
		    get { return this.tariffcodes.LicenseRequired; }
			set
			{
			    if (value == this.tariffcodes.LicenseRequired) return;
				this.tariffcodes.LicenseRequired = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("LicenseRequired");
			}
		}
     

       
       
public Nullable<bool> Invalid
		{ 
		    get { return this.tariffcodes.Invalid; }
			set
			{
			    if (value == this.tariffcodes.Invalid) return;
				this.tariffcodes.Invalid = value;
                if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Invalid");
			}
		}
     

       private TariffCategory _TariffCategory;
        public  TariffCategory TariffCategory
		{
		    get
               { 
                  if (this.tariffcodes != null)
                   {
                       if (_TariffCategory != null)
                       {
                           if (this.tariffcodes.TariffCategory !=
                               _TariffCategory.DTO)
                           {
                                if (this.tariffcodes.TariffCategory  != null)
                               _TariffCategory = new TariffCategory(this.tariffcodes.TariffCategory);
                           }
                       }
                       else
                       {
                             if (this.tariffcodes.TariffCategory  != null)
                           _TariffCategory = new TariffCategory(this.tariffcodes.TariffCategory);
                       }
                   }


             //       if (_TariffCategory != null) return _TariffCategory;
                       
             //       var i = new TariffCategory(){TrackingState = TrackingState.Added};
			//		//if (this.tariffcodes.TariffCategory == null) Debugger.Break();
			//		if (this.tariffcodes.TariffCategory != null)
            //        {
            //           i. = this.tariffcodes.TariffCategory;
            //        }
            //        else
            //        {
            //            this.tariffcodes.TariffCategory = i.;
             //       }
                           
            //        _TariffCategory = i;
                     
                    return _TariffCategory;
               }
			set
			{
			    if (value == _TariffCategory) return;
                _TariffCategory = value;
                if(value != null)
                     this.tariffcodes.TariffCategory = value.DTO;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("TariffCategory");
			}
		}
        

        ObservableCollection<InventoryItemsEx> _InventoryItemsEx = null;
        public  ObservableCollection<InventoryItemsEx> InventoryItemsEx
		{
            
		    get 
				{ 
					if(_InventoryItemsEx != null) return _InventoryItemsEx;
					//if (this.tariffcodes.InventoryItemsEx == null) Debugger.Break();
					if(this.tariffcodes.InventoryItemsEx != null)
					{
						_InventoryItemsEx = new ObservableCollection<InventoryItemsEx>(this.tariffcodes.InventoryItemsEx.Select(x => new InventoryItemsEx(x)));
					}
					
						_InventoryItemsEx.CollectionChanged += InventoryItemsEx_CollectionChanged; 
					
					return _InventoryItemsEx; 
				}
			set
			{
			    if (Equals(value, _InventoryItemsEx)) return;
				if (value != null)
					this.tariffcodes.InventoryItemsEx = new ChangeTrackingCollection<DTO.InventoryItemsEx>(value.Select(x => x.DTO).ToList());
                _InventoryItemsEx = value;
				if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_InventoryItemsEx != null)
				_InventoryItemsEx.CollectionChanged += InventoryItemsEx_CollectionChanged;               
				NotifyPropertyChanged("InventoryItemsEx");
			}
		}
        
        void InventoryItemsEx_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (InventoryItemsEx itm in e.NewItems)
                    {
                        if (itm != null)
                        tariffcodes.InventoryItemsEx.Add(itm.DTO);
                    }
                    if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (InventoryItemsEx itm in e.OldItems)
                    {
                        if (itm != null)
                        tariffcodes.InventoryItemsEx.Remove(itm.DTO);
                    }
					if(this.TrackingState == TrackableEntities.TrackingState.Unchanged)this.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.TariffCodes> _changeTracker;    
        public ChangeTrackingCollection<DTO.TariffCodes> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}



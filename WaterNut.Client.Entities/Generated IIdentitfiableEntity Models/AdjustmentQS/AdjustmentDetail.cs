// <autogenerated>
//   This file was generated by T4 code generator AllClientModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Linq;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Services;
//using WaterNut.Client.Services;
using AdjustmentQS.Client.Services;

using System;

namespace AdjustmentQS.Client.Entities
{
    public partial class AdjustmentDetail
    {
       
       #region IIdentifiable Entities
        public override string EntityId
        {
            get
            {
                return this.EntryDataDetailsId.ToString();//this.EntryDataDetailsId == null?"0":			
            }
            set
            {
                this.EntryDataDetailsId = Convert.ToInt32(value);
            }
        }
        public string AdjustmentExEntityName
        {
            get
            {
                return this.AdjustmentEx == null ? "" : this.AdjustmentEx.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (AdjustmentExClient ctx = new AdjustmentExClient())
                    {
                        var dto = ctx.GetAdjustmentExes().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.AdjustmentEx = (AdjustmentEx)new AdjustmentEx().CreateEntityFromString(value);
							
							this.EntryDataDetailsId = Convert.ToInt32(this.AdjustmentEx.InvoiceNo);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddAdjustmentEx");
                        }
                        else
                        {
                            var obj = new AdjustmentEx(dto);
                           if (this.AdjustmentEx == null || this.AdjustmentEx.EntityId != obj.EntityId) this.AdjustmentEx = obj;
                           
                        }
                         


                    }
            
            }

      }
        public string AdjustmentShortsEntityName
        {
            get
            {
                return this.AdjustmentShorts == null ? "" : this.AdjustmentShorts.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (AdjustmentShortClient ctx = new AdjustmentShortClient())
                    {
                        var dto = ctx.GetAdjustmentShorts().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.AdjustmentShorts = (AdjustmentShort)new AdjustmentShort().CreateEntityFromString(value);
							
							this.EntryDataDetailsId = Convert.ToInt32(this.AdjustmentShorts.EntryDataDetailsId);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddAdjustmentShorts");
                        }
                        else
                        {
                            var obj = new AdjustmentShort(dto);
                           if (this.AdjustmentShorts == null || this.AdjustmentShorts.EntityId != obj.EntityId) this.AdjustmentShorts = obj;
                           
                        }
                         


                    }
            
            }

      }
        public string AdjustmentOversEntityName
        {
            get
            {
                return this.AdjustmentOvers == null ? "" : this.AdjustmentOvers.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (AdjustmentOverClient ctx = new AdjustmentOverClient())
                    {
                        var dto = ctx.GetAdjustmentOvers().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.AdjustmentOvers = (AdjustmentOver)new AdjustmentOver().CreateEntityFromString(value);
							
							this.EntryDataDetailsId = Convert.ToInt32(this.AdjustmentOvers.EntryDataDetailsId);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddAdjustmentOvers");
                        }
                        else
                        {
                            var obj = new AdjustmentOver(dto);
                           if (this.AdjustmentOvers == null || this.AdjustmentOvers.EntityId != obj.EntityId) this.AdjustmentOvers = obj;
                           
                        }
                         


                    }
            
            }

      }
        public string SystemDocumentSetEntityName
        {
            get
            {
                return this.SystemDocumentSet == null ? "" : this.SystemDocumentSet.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (SystemDocumentSetClient ctx = new SystemDocumentSetClient())
                    {
                        var dto = ctx.GetSystemDocumentSets().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.SystemDocumentSet = (SystemDocumentSet)new SystemDocumentSet().CreateEntityFromString(value);
							
							this.EntryDataDetailsId = Convert.ToInt32(this.SystemDocumentSet.Id);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddSystemDocumentSet");
                        }
                        else
                        {
                            var obj = new SystemDocumentSet(dto);
                           if (this.SystemDocumentSet == null || this.SystemDocumentSet.EntityId != obj.EntityId) this.SystemDocumentSet = obj;
                           
                        }
                         


                    }
            
            }

      }
        public string ApplicationSettingsEntityName
        {
            get
            {
 
                if(this.ApplicationSettings == null) UpdateApplicationSettings();
                return this.ApplicationSettings == null ? "" : this.ApplicationSettings.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (ApplicationSettingsClient ctx = new ApplicationSettingsClient())
                    {
                        var dto = ctx.GetApplicationSettings().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.ApplicationSettings = (ApplicationSettings)new ApplicationSettings().CreateEntityFromString(value);
							
							this.ApplicationSettingsId = Convert.ToInt32(this.ApplicationSettings.ApplicationSettingsId);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddApplicationSettings");
                        }
                        else
                        {
                            var obj = new ApplicationSettings(dto);
                           if (this.ApplicationSettings == null || this.ApplicationSettings.EntityId != obj.EntityId) this.ApplicationSettings = obj;
                           
                        }
                         


                    }
            
            }

      }



         #endregion
    }
   
}
		
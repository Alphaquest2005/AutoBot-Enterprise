// <autogenerated>
//   This file was generated by T4 code generator AllClientModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Linq;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Services;
//using WaterNut.Client.Services;
using CoreEntities.Client.Services;

using System;

namespace CoreEntities.Client.Entities
{
    public partial class InfoMappingRegEx
    {
       
       #region IIdentifiable Entities
        public override string EntityId
        {
            get
            {
                return this.Id.ToString();//this.Id == null?"0":			
            }
            set
            {
                this.Id = Convert.ToInt32(value);
            }
        }
        public string InfoMappingEntityName
        {
            get
            {
                return this.InfoMapping == null ? "" : this.InfoMapping.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (InfoMappingClient ctx = new InfoMappingClient())
                    {
                        var dto = ctx.GetInfoMapping().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.InfoMapping = (InfoMapping)new InfoMapping().CreateEntityFromString(value);
							
							this.Id = Convert.ToInt32(this.InfoMapping.Id);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddInfoMapping");
                        }
                        else
                        {
                            var obj = new InfoMapping(dto);
                           if (this.InfoMapping == null || this.InfoMapping.EntityId != obj.EntityId) this.InfoMapping = obj;
                           
                        }
                         


                    }
            
            }

      }



         #endregion
    }
   
}
		
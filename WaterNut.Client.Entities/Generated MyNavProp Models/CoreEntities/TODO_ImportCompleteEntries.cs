// <autogenerated>
//   This file was generated by T4 code generator AllClientModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using CoreEntities;
using CoreEntities.Client.Entities;
//using WaterNut.Client.Services;
using CoreEntities.Client.Services;
using System.Linq;

namespace CoreEntities.Client.Entities
{
    public partial class TODO_ImportCompleteEntries
    {
        
            partial void MyNavPropStartUp()
            {

              PropertyChanged += UpdateMyNavProp;

            }


      
       #region MyNavProp Entities
      
      

        void UpdateMyNavProp(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
           if (e.PropertyName == "AsycudaDocumentSetId")
            {
                UpdateAsycudaDocumentSet();
            }
           if (e.PropertyName == "ApplicationSettingsId")
            {
                UpdateApplicationSettings();
            }
        }

        private void UpdateAsycudaDocumentSet()
        {
            using (var ctx = new AsycudaDocumentSetClient())
            {
                var dto = ctx.GetAsycudaDocumentSet().Result.FirstOrDefault(x => x.AsycudaDocumentSetId == this.AsycudaDocumentSetId);
                if(dto != null)AsycudaDocumentSet = new AsycudaDocumentSet(dto);
            }
        }        

        AsycudaDocumentSet _asycudaDocumentSet = null;

        public AsycudaDocumentSet AsycudaDocumentSet
        {
            get
            {
                if(_asycudaDocumentSet != null) return _asycudaDocumentSet;
                UpdateAsycudaDocumentSet();
                return _asycudaDocumentSet;
            }
            set
            {
                if (value != null)
                {
                    _asycudaDocumentSet = value;

                    AsycudaDocumentSetId = _asycudaDocumentSet.AsycudaDocumentSetId;

                    NotifyPropertyChanged("AsycudaDocumentSet");
                }
            }

        }
 
        private void UpdateApplicationSettings()
        {
            using (var ctx = new ApplicationSettingsClient())
            {
                var dto = ctx.GetApplicationSettings().Result.FirstOrDefault(x => x.ApplicationSettingsId == this.ApplicationSettingsId);
                if(dto != null)ApplicationSettings = new ApplicationSettings(dto);
            }
        }        

        ApplicationSettings _applicationSettings = null;

        public ApplicationSettings ApplicationSettings
        {
            get
            {
                if(_applicationSettings != null) return _applicationSettings;
                UpdateApplicationSettings();
                return _applicationSettings;
            }
            set
            {
                if (value != null)
                {
                    _applicationSettings = value;

                    ApplicationSettingsId = _applicationSettings.ApplicationSettingsId;

                    NotifyPropertyChanged("ApplicationSettings");
                }
            }

        }
        

         #endregion
 
    }
   
}
		
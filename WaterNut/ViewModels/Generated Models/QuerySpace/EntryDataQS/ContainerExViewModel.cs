// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using EntryDataQS.Client.Entities;
using EntryDataQS.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.EntryDataQS.ViewModels
{
    
	public partial class ContainerExViewModel_AutoGen : ViewModelBase<ContainerExViewModel_AutoGen>
	{

       private static readonly ContainerExViewModel_AutoGen instance;
       static ContainerExViewModel_AutoGen()
        {
            instance = new ContainerExViewModel_AutoGen();
        }

       public static ContainerExViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public ContainerExViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<ContainerEx>(MessageToken.CurrentContainerExChanged, OnCurrentContainerExChanged);
            RegisterToReceiveMessages(MessageToken.ContainerExesChanged, OnContainerExesChanged);
			RegisterToReceiveMessages(MessageToken.ContainerExesFilterExpressionChanged, OnContainerExesFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			ContainerExes = new VirtualList<ContainerEx>(vloader);
			ContainerExes.LoadingStateChanged += ContainerExes_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(ContainerExes, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<ContainerEx> _ContainerExes = null;
        public VirtualList<ContainerEx> ContainerExes
        {
            get
            {
                return _ContainerExes;
            }
            set
            {
                _ContainerExes = value;
            }
        }

		 private void OnContainerExesFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			ContainerExes.Refresh();
            SelectedContainerExes.Clear();
            NotifyPropertyChanged(x => SelectedContainerExes);
            BeginSendMessage(MessageToken.SelectedContainerExesChanged, new NotificationEventArgs(MessageToken.SelectedContainerExesChanged));
        }

		void ContainerExes_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (ContainerExes.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => ContainerExes);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("ContainerExes | Error occured..." + ContainerExes.LastLoadingError.Message);
                    NotifyPropertyChanged(x => ContainerExes);
                    break;
            }
           
        }

		
		public readonly ContainerExVirturalListLoader vloader = new ContainerExVirturalListLoader();

		private ObservableCollection<ContainerEx> _selectedContainerExes = new ObservableCollection<ContainerEx>();
        public ObservableCollection<ContainerEx> SelectedContainerExes
        {
            get
            {
                return _selectedContainerExes;
            }
            set
            {
                _selectedContainerExes = value;
				BeginSendMessage(MessageToken.SelectedContainerExesChanged,
                                    new NotificationEventArgs(MessageToken.SelectedContainerExesChanged));
				 NotifyPropertyChanged(x => SelectedContainerExes);
            }
        }

        internal void OnCurrentContainerExChanged(object sender, NotificationEventArgs<ContainerEx> e)
        {
            if(BaseViewModel.Instance.CurrentContainerEx != null) BaseViewModel.Instance.CurrentContainerEx.PropertyChanged += CurrentContainerEx__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentContainerEx);
        }   

            void CurrentContainerEx__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal void OnContainerExesChanged(object sender, NotificationEventArgs e)
        {
            _ContainerExes.Refresh();
			NotifyPropertyChanged(x => this.ContainerExes);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_ContainerExes.Refresh();
			NotifyPropertyChanged(x => this.ContainerExes);
		}

		public async Task SelectAll()
        {
            IEnumerable<ContainerEx> lst = null;
            using (var ctx = new ContainerExRepository())
            {
                lst = await ctx.GetContainerExesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedContainerExes = new ObservableCollection<ContainerEx>(lst);
        }

 

		private string _container_identityFilter;
        public string Container_identityFilter
        {
            get
            {
                return _container_identityFilter;
            }
            set
            {
                _container_identityFilter = value;
				NotifyPropertyChanged(x => Container_identityFilter);
                FilterData();
                
            }
        }	

 

		private string _container_typeFilter;
        public string Container_typeFilter
        {
            get
            {
                return _container_typeFilter;
            }
            set
            {
                _container_typeFilter = value;
				NotifyPropertyChanged(x => Container_typeFilter);
                FilterData();
                
            }
        }	

 

		private string _empty_full_indicatorFilter;
        public string Empty_full_indicatorFilter
        {
            get
            {
                return _empty_full_indicatorFilter;
            }
            set
            {
                _empty_full_indicatorFilter = value;
				NotifyPropertyChanged(x => Empty_full_indicatorFilter);
                FilterData();
                
            }
        }	

 

		private Double? _gross_weightFilter;
        public Double? Gross_weightFilter
        {
            get
            {
                return _gross_weightFilter;
            }
            set
            {
                _gross_weightFilter = value;
				NotifyPropertyChanged(x => Gross_weightFilter);
                FilterData();
                
            }
        }	

 

		private string _goods_descriptionFilter;
        public string Goods_descriptionFilter
        {
            get
            {
                return _goods_descriptionFilter;
            }
            set
            {
                _goods_descriptionFilter = value;
				NotifyPropertyChanged(x => Goods_descriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _packages_numberFilter;
        public string Packages_numberFilter
        {
            get
            {
                return _packages_numberFilter;
            }
            set
            {
                _packages_numberFilter = value;
				NotifyPropertyChanged(x => Packages_numberFilter);
                FilterData();
                
            }
        }	

 

		private string _packages_typeFilter;
        public string Packages_typeFilter
        {
            get
            {
                return _packages_typeFilter;
            }
            set
            {
                _packages_typeFilter = value;
				NotifyPropertyChanged(x => Packages_typeFilter);
                FilterData();
                
            }
        }	

 

		private Double? _packages_weightFilter;
        public Double? Packages_weightFilter
        {
            get
            {
                return _packages_weightFilter;
            }
            set
            {
                _packages_weightFilter = value;
				NotifyPropertyChanged(x => Packages_weightFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalValueFilter;
        public Double? TotalValueFilter
        {
            get
            {
                return _totalValueFilter;
            }
            set
            {
                _totalValueFilter = value;
				NotifyPropertyChanged(x => TotalValueFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startShipDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartShipDateFilter
        {
            get
            {
                return _startShipDateFilter;
            }
            set
            {
                _startShipDateFilter = value;
				NotifyPropertyChanged(x => StartShipDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endShipDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndShipDateFilter
        {
            get
            {
                return _endShipDateFilter;
            }
            set
            {
                _endShipDateFilter = value;
				NotifyPropertyChanged(x => EndShipDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _shipDateFilter;
        public DateTime? ShipDateFilter
        {
            get
            {
                return _shipDateFilter;
            }
            set
            {
                _shipDateFilter = value;
				NotifyPropertyChanged(x => ShipDateFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startDeliveryDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartDeliveryDateFilter
        {
            get
            {
                return _startDeliveryDateFilter;
            }
            set
            {
                _startDeliveryDateFilter = value;
				NotifyPropertyChanged(x => StartDeliveryDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endDeliveryDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndDeliveryDateFilter
        {
            get
            {
                return _endDeliveryDateFilter;
            }
            set
            {
                _endDeliveryDateFilter = value;
				NotifyPropertyChanged(x => EndDeliveryDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _deliveryDateFilter;
        public DateTime? DeliveryDateFilter
        {
            get
            {
                return _deliveryDateFilter;
            }
            set
            {
                _deliveryDateFilter = value;
				NotifyPropertyChanged(x => DeliveryDateFilter);
                FilterData();
                
            }
        }	

 

		private string _sealFilter;
        public string SealFilter
        {
            get
            {
                return _sealFilter;
            }
            set
            {
                _sealFilter = value;
				NotifyPropertyChanged(x => SealFilter);
                FilterData();
                
            }
        }	

 

		private string _entryDataIdFilter;
        public string EntryDataIdFilter
        {
            get
            {
                return _entryDataIdFilter;
            }
            set
            {
                _entryDataIdFilter = value;
				NotifyPropertyChanged(x => EntryDataIdFilter);
                FilterData();
                
            }
        }	

 

		private string _packageDescriptionFilter;
        public string PackageDescriptionFilter
        {
            get
            {
                return _packageDescriptionFilter;
            }
            set
            {
                _packageDescriptionFilter = value;
				NotifyPropertyChanged(x => PackageDescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _containerTypeDescriptionFilter;
        public string ContainerTypeDescriptionFilter
        {
            get
            {
                return _containerTypeDescriptionFilter;
            }
            set
            {
                _containerTypeDescriptionFilter = value;
				NotifyPropertyChanged(x => ContainerTypeDescriptionFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			ContainerExes.Refresh();
			NotifyPropertyChanged(x => this.ContainerExes);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(Container_identityFilter) == false)
						res.Append(" && " + string.Format("Container_identity.Contains(\"{0}\")",  Container_identityFilter));						
 

									if(string.IsNullOrEmpty(Container_typeFilter) == false)
						res.Append(" && " + string.Format("Container_type.Contains(\"{0}\")",  Container_typeFilter));						
 

									if(string.IsNullOrEmpty(Empty_full_indicatorFilter) == false)
						res.Append(" && " + string.Format("Empty_full_indicator.Contains(\"{0}\")",  Empty_full_indicatorFilter));						
 

					if(Gross_weightFilter.HasValue)
						res.Append(" && " + string.Format("Gross_weight == {0}",  Gross_weightFilter.ToString()));				 

									if(string.IsNullOrEmpty(Goods_descriptionFilter) == false)
						res.Append(" && " + string.Format("Goods_description.Contains(\"{0}\")",  Goods_descriptionFilter));						
 

									if(string.IsNullOrEmpty(Packages_numberFilter) == false)
						res.Append(" && " + string.Format("Packages_number.Contains(\"{0}\")",  Packages_numberFilter));						
 

									if(string.IsNullOrEmpty(Packages_typeFilter) == false)
						res.Append(" && " + string.Format("Packages_type.Contains(\"{0}\")",  Packages_typeFilter));						
 

					if(Packages_weightFilter.HasValue)
						res.Append(" && " + string.Format("Packages_weight == {0}",  Packages_weightFilter.ToString()));				 

					if(TotalValueFilter.HasValue)
						res.Append(" && " + string.Format("TotalValue == {0}",  TotalValueFilter.ToString()));				 

 

				if (Convert.ToDateTime(StartShipDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndShipDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartShipDateFilter).Date != DateTime.MinValue)
						{
							if(StartShipDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndShipDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("ShipDate >= \"{0}\"",  Convert.ToDateTime(StartShipDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndShipDateFilter).Date != DateTime.MinValue)
						{
							if(EndShipDateFilter.HasValue)
								res.Append(" && " + string.Format("ShipDate <= \"{0}\"",  Convert.ToDateTime(EndShipDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartShipDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndShipDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_shipDateFilter).Date != DateTime.MinValue)
						{
							if(ShipDateFilter.HasValue)
								res.Append(" && " + string.Format("ShipDate == \"{0}\"",  Convert.ToDateTime(ShipDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

 

				if (Convert.ToDateTime(StartDeliveryDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndDeliveryDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartDeliveryDateFilter).Date != DateTime.MinValue)
						{
							if(StartDeliveryDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndDeliveryDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("DeliveryDate >= \"{0}\"",  Convert.ToDateTime(StartDeliveryDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndDeliveryDateFilter).Date != DateTime.MinValue)
						{
							if(EndDeliveryDateFilter.HasValue)
								res.Append(" && " + string.Format("DeliveryDate <= \"{0}\"",  Convert.ToDateTime(EndDeliveryDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartDeliveryDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndDeliveryDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_deliveryDateFilter).Date != DateTime.MinValue)
						{
							if(DeliveryDateFilter.HasValue)
								res.Append(" && " + string.Format("DeliveryDate == \"{0}\"",  Convert.ToDateTime(DeliveryDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(SealFilter) == false)
						res.Append(" && " + string.Format("Seal.Contains(\"{0}\")",  SealFilter));						
 

									if(string.IsNullOrEmpty(EntryDataIdFilter) == false)
						res.Append(" && " + string.Format("EntryDataId.Contains(\"{0}\")",  EntryDataIdFilter));						
 

									if(string.IsNullOrEmpty(PackageDescriptionFilter) == false)
						res.Append(" && " + string.Format("PackageDescription.Contains(\"{0}\")",  PackageDescriptionFilter));						
 

									if(string.IsNullOrEmpty(ContainerTypeDescriptionFilter) == false)
						res.Append(" && " + string.Format("ContainerTypeDescription.Contains(\"{0}\")",  ContainerTypeDescriptionFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<ContainerEx> lst = null;
            using (var ctx = new ContainerExRepository())
            {
                lst = await ctx.GetContainerExesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<ContainerExExcelLine, List<ContainerExExcelLine>>
            {
                dataToPrint = lst.Select(x => new ContainerExExcelLine
                {
 
                    Container_identity = x.Container_identity ,
                    
 
                    Container_type = x.Container_type ,
                    
 
                    Empty_full_indicator = x.Empty_full_indicator ,
                    
 
                    Gross_weight = x.Gross_weight ,
                    
 
                    Goods_description = x.Goods_description ,
                    
 
                    Packages_number = x.Packages_number ,
                    
 
                    Packages_type = x.Packages_type ,
                    
 
                    Packages_weight = x.Packages_weight ,
                    
 
                    TotalValue = x.TotalValue ,
                    
 
                    ShipDate = x.ShipDate ,
                    
 
                    DeliveryDate = x.DeliveryDate ,
                    
 
                    Seal = x.Seal ,
                    
 
                    EntryDataId = x.EntryDataId ,
                    
 
                    PackageDescription = x.PackageDescription ,
                    
 
                    ContainerTypeDescription = x.ContainerTypeDescription 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class ContainerExExcelLine
        {
		 
                    public string Container_identity { get; set; } 
                    
 
                    public string Container_type { get; set; } 
                    
 
                    public string Empty_full_indicator { get; set; } 
                    
 
                    public double Gross_weight { get; set; } 
                    
 
                    public string Goods_description { get; set; } 
                    
 
                    public string Packages_number { get; set; } 
                    
 
                    public string Packages_type { get; set; } 
                    
 
                    public double Packages_weight { get; set; } 
                    
 
                    public Nullable<double> TotalValue { get; set; } 
                    
 
                    public Nullable<System.DateTime> ShipDate { get; set; } 
                    
 
                    public Nullable<System.DateTime> DeliveryDate { get; set; } 
                    
 
                    public string Seal { get; set; } 
                    
 
                    public string EntryDataId { get; set; } 
                    
 
                    public string PackageDescription { get; set; } 
                    
 
                    public string ContainerTypeDescription { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using EntryDataQS.Client.Entities;
using EntryDataQS.Client.Repositories;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;



namespace WaterNut.QuerySpace.EntryDataQS.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // CoreEntities.ViewModels.BaseViewModel
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class EntryDataQSOnCreated: BaseViewModel
        {
           // Load Repository
                public EntryDataQSOnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentEntryDataIDChanged, OnCurrentAsycudaDocumentEntryDataIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailIDChanged, OnCurrentAsycudaDocumentItemEntryDataDetailIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentSetEntryDataIDChanged, OnCurrentAsycudaDocumentSetEntryDataIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentSetEntryDataDetailIDChanged, OnCurrentAsycudaDocumentSetEntryDataDetailIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentContainerExIDChanged, OnCurrentContainerExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEmptyFullCodeIDChanged, OnCurrentEmptyFullCodeIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEntryDataIDChanged, OnCurrentEntryDataIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEntryDataDetailsExIDChanged, OnCurrentEntryDataDetailsExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEntryDataExIDChanged, OnCurrentEntryDataExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInventoryItemsExIDChanged, OnCurrentInventoryItemsExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentPackageTypeIDChanged, OnCurrentPackageTypeIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<AsycudaDocumentEntryData>(MessageToken.CurrentAsycudaDocumentEntryDataChanged, OnCurrentAsycudaDocumentEntryDataChanged);
                        RegisterToReceiveMessages<AsycudaDocumentItemEntryDataDetail>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailChanged, OnCurrentAsycudaDocumentItemEntryDataDetailChanged);
                        RegisterToReceiveMessages<AsycudaDocumentSetEntryData>(MessageToken.CurrentAsycudaDocumentSetEntryDataChanged, OnCurrentAsycudaDocumentSetEntryDataChanged);
                        RegisterToReceiveMessages<AsycudaDocumentSetEntryDataDetail>(MessageToken.CurrentAsycudaDocumentSetEntryDataDetailChanged, OnCurrentAsycudaDocumentSetEntryDataDetailChanged);
                        RegisterToReceiveMessages<ContainerEx>(MessageToken.CurrentContainerExChanged, OnCurrentContainerExChanged);
                        RegisterToReceiveMessages<EmptyFullCode>(MessageToken.CurrentEmptyFullCodeChanged, OnCurrentEmptyFullCodeChanged);
                        RegisterToReceiveMessages<EntryData>(MessageToken.CurrentEntryDataChanged, OnCurrentEntryDataChanged);
                        RegisterToReceiveMessages<EntryDataDetailsEx>(MessageToken.CurrentEntryDataDetailsExChanged, OnCurrentEntryDataDetailsExChanged);
                        RegisterToReceiveMessages<EntryDataEx>(MessageToken.CurrentEntryDataExChanged, OnCurrentEntryDataExChanged);
                        RegisterToReceiveMessages<InventoryItemsEx>(MessageToken.CurrentInventoryItemsExChanged, OnCurrentInventoryItemsExChanged);
                        RegisterToReceiveMessages<PackageType>(MessageToken.CurrentPackageTypeChanged, OnCurrentPackageTypeChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentAsycudaDocumentEntryDataIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentEntryDataRepository ctx = new AsycudaDocumentEntryDataRepository())
                            {
                                CurrentAsycudaDocumentEntryData = await ctx.GetAsycudaDocumentEntryData(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentEntryData);
                        }

                        private  string _currentAsycudaDocumentEntryDataID = "";
                        public string CurrentAsycudaDocumentEntryDataID
                        {
                            get
                            {
                                return _currentAsycudaDocumentEntryDataID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentEntryDataID != value)
                                {
                                    _currentAsycudaDocumentEntryDataID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentEntryDataID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentEntryDataIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentEntryDataIDChanged, _currentAsycudaDocumentEntryDataID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentEntryDataID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentItemEntryDataDetailIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentItemEntryDataDetailRepository ctx = new AsycudaDocumentItemEntryDataDetailRepository())
                            {
                                CurrentAsycudaDocumentItemEntryDataDetail = await ctx.GetAsycudaDocumentItemEntryDataDetail(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentItemEntryDataDetail);
                        }

                        private  string _currentAsycudaDocumentItemEntryDataDetailID = "";
                        public string CurrentAsycudaDocumentItemEntryDataDetailID
                        {
                            get
                            {
                                return _currentAsycudaDocumentItemEntryDataDetailID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentItemEntryDataDetailID != value)
                                {
                                    _currentAsycudaDocumentItemEntryDataDetailID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentItemEntryDataDetailID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailIDChanged, _currentAsycudaDocumentItemEntryDataDetailID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemEntryDataDetailID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentSetEntryDataIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentSetEntryDataRepository ctx = new AsycudaDocumentSetEntryDataRepository())
                            {
                                CurrentAsycudaDocumentSetEntryData = await ctx.GetAsycudaDocumentSetEntryData(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentSetEntryData);
                        }

                        private  string _currentAsycudaDocumentSetEntryDataID = "";
                        public string CurrentAsycudaDocumentSetEntryDataID
                        {
                            get
                            {
                                return _currentAsycudaDocumentSetEntryDataID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentSetEntryDataID != value)
                                {
                                    _currentAsycudaDocumentSetEntryDataID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentSetEntryDataID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetEntryDataIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentSetEntryDataIDChanged, _currentAsycudaDocumentSetEntryDataID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryDataID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentSetEntryDataDetailIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentSetEntryDataDetailRepository ctx = new AsycudaDocumentSetEntryDataDetailRepository())
                            {
                                CurrentAsycudaDocumentSetEntryDataDetail = await ctx.GetAsycudaDocumentSetEntryDataDetail(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentSetEntryDataDetail);
                        }

                        private  string _currentAsycudaDocumentSetEntryDataDetailID = "";
                        public string CurrentAsycudaDocumentSetEntryDataDetailID
                        {
                            get
                            {
                                return _currentAsycudaDocumentSetEntryDataDetailID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentSetEntryDataDetailID != value)
                                {
                                    _currentAsycudaDocumentSetEntryDataDetailID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentSetEntryDataDetailID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetEntryDataDetailIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentSetEntryDataDetailIDChanged, _currentAsycudaDocumentSetEntryDataDetailID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryDataDetailID);  
                                }
                            }
                        }
                        internal async void OnCurrentContainerExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ContainerExRepository ctx = new ContainerExRepository())
                            {
                                CurrentContainerEx = await ctx.GetContainerEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentContainerEx);
                        }

                        private  string _currentContainerExID = "";
                        public string CurrentContainerExID
                        {
                            get
                            {
                                return _currentContainerExID;
                            }
                            set
                            {
                                if (_currentContainerExID != value)
                                {
                                    _currentContainerExID = value;
                                    if (!string.IsNullOrEmpty(_currentContainerExID)) BeginSendMessage(MessageToken.CurrentContainerExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentContainerExIDChanged, _currentContainerExID));
                                    NotifyPropertyChanged(x => this.CurrentContainerExID);  
                                }
                            }
                        }
                        internal async void OnCurrentEmptyFullCodeIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EmptyFullCodeRepository ctx = new EmptyFullCodeRepository())
                            {
                                CurrentEmptyFullCode = await ctx.GetEmptyFullCode(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEmptyFullCode);
                        }

                        private  string _currentEmptyFullCodeID = "";
                        public string CurrentEmptyFullCodeID
                        {
                            get
                            {
                                return _currentEmptyFullCodeID;
                            }
                            set
                            {
                                if (_currentEmptyFullCodeID != value)
                                {
                                    _currentEmptyFullCodeID = value;
                                    if (!string.IsNullOrEmpty(_currentEmptyFullCodeID)) BeginSendMessage(MessageToken.CurrentEmptyFullCodeIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEmptyFullCodeIDChanged, _currentEmptyFullCodeID));
                                    NotifyPropertyChanged(x => this.CurrentEmptyFullCodeID);  
                                }
                            }
                        }
                        internal async void OnCurrentEntryDataIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EntryDataRepository ctx = new EntryDataRepository())
                            {
                                CurrentEntryData = await ctx.GetEntryData(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEntryData);
                        }

                        private  string _currentEntryDataID = "";
                        public string CurrentEntryDataID
                        {
                            get
                            {
                                return _currentEntryDataID;
                            }
                            set
                            {
                                if (_currentEntryDataID != value)
                                {
                                    _currentEntryDataID = value;
                                    if (!string.IsNullOrEmpty(_currentEntryDataID)) BeginSendMessage(MessageToken.CurrentEntryDataIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEntryDataIDChanged, _currentEntryDataID));
                                    NotifyPropertyChanged(x => this.CurrentEntryDataID);  
                                }
                            }
                        }
                        internal async void OnCurrentEntryDataDetailsExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EntryDataDetailsExRepository ctx = new EntryDataDetailsExRepository())
                            {
                                CurrentEntryDataDetailsEx = await ctx.GetEntryDataDetailsEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEntryDataDetailsEx);
                        }

                        private  string _currentEntryDataDetailsExID = "";
                        public string CurrentEntryDataDetailsExID
                        {
                            get
                            {
                                return _currentEntryDataDetailsExID;
                            }
                            set
                            {
                                if (_currentEntryDataDetailsExID != value)
                                {
                                    _currentEntryDataDetailsExID = value;
                                    if (!string.IsNullOrEmpty(_currentEntryDataDetailsExID)) BeginSendMessage(MessageToken.CurrentEntryDataDetailsExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEntryDataDetailsExIDChanged, _currentEntryDataDetailsExID));
                                    NotifyPropertyChanged(x => this.CurrentEntryDataDetailsExID);  
                                }
                            }
                        }
                        internal async void OnCurrentEntryDataExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EntryDataExRepository ctx = new EntryDataExRepository())
                            {
                                CurrentEntryDataEx = await ctx.GetEntryDataEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEntryDataEx);
                        }

                        private  string _currentEntryDataExID = "";
                        public string CurrentEntryDataExID
                        {
                            get
                            {
                                return _currentEntryDataExID;
                            }
                            set
                            {
                                if (_currentEntryDataExID != value)
                                {
                                    _currentEntryDataExID = value;
                                    if (!string.IsNullOrEmpty(_currentEntryDataExID)) BeginSendMessage(MessageToken.CurrentEntryDataExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEntryDataExIDChanged, _currentEntryDataExID));
                                    NotifyPropertyChanged(x => this.CurrentEntryDataExID);  
                                }
                            }
                        }
                        internal async void OnCurrentInventoryItemsExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InventoryItemsExRepository ctx = new InventoryItemsExRepository())
                            {
                                CurrentInventoryItemsEx = await ctx.GetInventoryItemsEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInventoryItemsEx);
                        }

                        private  string _currentInventoryItemsExID = "";
                        public string CurrentInventoryItemsExID
                        {
                            get
                            {
                                return _currentInventoryItemsExID;
                            }
                            set
                            {
                                if (_currentInventoryItemsExID != value)
                                {
                                    _currentInventoryItemsExID = value;
                                    if (!string.IsNullOrEmpty(_currentInventoryItemsExID)) BeginSendMessage(MessageToken.CurrentInventoryItemsExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInventoryItemsExIDChanged, _currentInventoryItemsExID));
                                    NotifyPropertyChanged(x => this.CurrentInventoryItemsExID);  
                                }
                            }
                        }
                        internal async void OnCurrentPackageTypeIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (PackageTypeRepository ctx = new PackageTypeRepository())
                            {
                                CurrentPackageType = await ctx.GetPackageType(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentPackageType);
                        }

                        private  string _currentPackageTypeID = "";
                        public string CurrentPackageTypeID
                        {
                            get
                            {
                                return _currentPackageTypeID;
                            }
                            set
                            {
                                if (_currentPackageTypeID != value)
                                {
                                    _currentPackageTypeID = value;
                                    if (!string.IsNullOrEmpty(_currentPackageTypeID)) BeginSendMessage(MessageToken.CurrentPackageTypeIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentPackageTypeIDChanged, _currentPackageTypeID));
                                    NotifyPropertyChanged(x => this.CurrentPackageTypeID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentAsycudaDocumentEntryDataChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentEntryData> e)
        {
            //CurrentAsycudaDocumentEntryData = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentEntryData);
        }

        private  AsycudaDocumentEntryData _currentAsycudaDocumentEntryData;
        public AsycudaDocumentEntryData CurrentAsycudaDocumentEntryData
        {
            get
            {
                return _currentAsycudaDocumentEntryData;
            }
            set
            {
                if (_currentAsycudaDocumentEntryData != value)
                {
                    _currentAsycudaDocumentEntryData = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentEntryDataChanged,
                                                     new NotificationEventArgs<AsycudaDocumentEntryData>(MessageToken.CurrentAsycudaDocumentEntryDataChanged, _currentAsycudaDocumentEntryData)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentEntryData);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentEntryData> _vcurrentAsycudaDocumentEntryData;
        public VirtualListItem<AsycudaDocumentEntryData> VCurrentAsycudaDocumentEntryData
        {
            get
            {
                return _vcurrentAsycudaDocumentEntryData;
            }
            set
            {
                if (_vcurrentAsycudaDocumentEntryData != value)
                {
                    _vcurrentAsycudaDocumentEntryData = value;
					if(_vcurrentAsycudaDocumentEntryData != null) CurrentAsycudaDocumentEntryData = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentEntryData);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentItemEntryDataDetailChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItemEntryDataDetail> e)
        {
            //CurrentAsycudaDocumentItemEntryDataDetail = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentItemEntryDataDetail);
        }

        private  AsycudaDocumentItemEntryDataDetail _currentAsycudaDocumentItemEntryDataDetail;
        public AsycudaDocumentItemEntryDataDetail CurrentAsycudaDocumentItemEntryDataDetail
        {
            get
            {
                return _currentAsycudaDocumentItemEntryDataDetail;
            }
            set
            {
                if (_currentAsycudaDocumentItemEntryDataDetail != value)
                {
                    _currentAsycudaDocumentItemEntryDataDetail = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailChanged,
                                                     new NotificationEventArgs<AsycudaDocumentItemEntryDataDetail>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailChanged, _currentAsycudaDocumentItemEntryDataDetail)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemEntryDataDetail);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentItemEntryDataDetail> _vcurrentAsycudaDocumentItemEntryDataDetail;
        public VirtualListItem<AsycudaDocumentItemEntryDataDetail> VCurrentAsycudaDocumentItemEntryDataDetail
        {
            get
            {
                return _vcurrentAsycudaDocumentItemEntryDataDetail;
            }
            set
            {
                if (_vcurrentAsycudaDocumentItemEntryDataDetail != value)
                {
                    _vcurrentAsycudaDocumentItemEntryDataDetail = value;
					if(_vcurrentAsycudaDocumentItemEntryDataDetail != null) CurrentAsycudaDocumentItemEntryDataDetail = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentItemEntryDataDetail);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentSetEntryDataChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEntryData> e)
        {
            //CurrentAsycudaDocumentSetEntryData = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentSetEntryData);
        }

        private  AsycudaDocumentSetEntryData _currentAsycudaDocumentSetEntryData;
        public AsycudaDocumentSetEntryData CurrentAsycudaDocumentSetEntryData
        {
            get
            {
                return _currentAsycudaDocumentSetEntryData;
            }
            set
            {
                if (_currentAsycudaDocumentSetEntryData != value)
                {
                    _currentAsycudaDocumentSetEntryData = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetEntryDataChanged,
                                                     new NotificationEventArgs<AsycudaDocumentSetEntryData>(MessageToken.CurrentAsycudaDocumentSetEntryDataChanged, _currentAsycudaDocumentSetEntryData)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryData);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentSetEntryData> _vcurrentAsycudaDocumentSetEntryData;
        public VirtualListItem<AsycudaDocumentSetEntryData> VCurrentAsycudaDocumentSetEntryData
        {
            get
            {
                return _vcurrentAsycudaDocumentSetEntryData;
            }
            set
            {
                if (_vcurrentAsycudaDocumentSetEntryData != value)
                {
                    _vcurrentAsycudaDocumentSetEntryData = value;
					if(_vcurrentAsycudaDocumentSetEntryData != null) CurrentAsycudaDocumentSetEntryData = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentSetEntryData);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentSetEntryDataDetailChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEntryDataDetail> e)
        {
            //CurrentAsycudaDocumentSetEntryDataDetail = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentSetEntryDataDetail);
        }

        private  AsycudaDocumentSetEntryDataDetail _currentAsycudaDocumentSetEntryDataDetail;
        public AsycudaDocumentSetEntryDataDetail CurrentAsycudaDocumentSetEntryDataDetail
        {
            get
            {
                return _currentAsycudaDocumentSetEntryDataDetail;
            }
            set
            {
                if (_currentAsycudaDocumentSetEntryDataDetail != value)
                {
                    _currentAsycudaDocumentSetEntryDataDetail = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetEntryDataDetailChanged,
                                                     new NotificationEventArgs<AsycudaDocumentSetEntryDataDetail>(MessageToken.CurrentAsycudaDocumentSetEntryDataDetailChanged, _currentAsycudaDocumentSetEntryDataDetail)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryDataDetail);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentSetEntryDataDetail> _vcurrentAsycudaDocumentSetEntryDataDetail;
        public VirtualListItem<AsycudaDocumentSetEntryDataDetail> VCurrentAsycudaDocumentSetEntryDataDetail
        {
            get
            {
                return _vcurrentAsycudaDocumentSetEntryDataDetail;
            }
            set
            {
                if (_vcurrentAsycudaDocumentSetEntryDataDetail != value)
                {
                    _vcurrentAsycudaDocumentSetEntryDataDetail = value;
					if(_vcurrentAsycudaDocumentSetEntryDataDetail != null) CurrentAsycudaDocumentSetEntryDataDetail = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentSetEntryDataDetail);                    
                }
            }
        }



                     
       

        internal void OnCurrentContainerExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ContainerEx> e)
        {
            //CurrentContainerEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentContainerEx);
        }

        private  ContainerEx _currentContainerEx;
        public ContainerEx CurrentContainerEx
        {
            get
            {
                return _currentContainerEx;
            }
            set
            {
                if (_currentContainerEx != value)
                {
                    _currentContainerEx = value;
                    BeginSendMessage(MessageToken.CurrentContainerExChanged,
                                                     new NotificationEventArgs<ContainerEx>(MessageToken.CurrentContainerExChanged, _currentContainerEx)); 
                    NotifyPropertyChanged(x => this.CurrentContainerEx);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<ContainerEx> _vcurrentContainerEx;
        public VirtualListItem<ContainerEx> VCurrentContainerEx
        {
            get
            {
                return _vcurrentContainerEx;
            }
            set
            {
                if (_vcurrentContainerEx != value)
                {
                    _vcurrentContainerEx = value;
					if(_vcurrentContainerEx != null) CurrentContainerEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentContainerEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentEmptyFullCodeChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EmptyFullCode> e)
        {
            //CurrentEmptyFullCode = e.Data;
            NotifyPropertyChanged(m => this.CurrentEmptyFullCode);
        }

        private  EmptyFullCode _currentEmptyFullCode;
        public EmptyFullCode CurrentEmptyFullCode
        {
            get
            {
                return _currentEmptyFullCode;
            }
            set
            {
                if (_currentEmptyFullCode != value)
                {
                    _currentEmptyFullCode = value;
                    BeginSendMessage(MessageToken.CurrentEmptyFullCodeChanged,
                                                     new NotificationEventArgs<EmptyFullCode>(MessageToken.CurrentEmptyFullCodeChanged, _currentEmptyFullCode)); 
                    NotifyPropertyChanged(x => this.CurrentEmptyFullCode);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<EmptyFullCode> _vcurrentEmptyFullCode;
        public VirtualListItem<EmptyFullCode> VCurrentEmptyFullCode
        {
            get
            {
                return _vcurrentEmptyFullCode;
            }
            set
            {
                if (_vcurrentEmptyFullCode != value)
                {
                    _vcurrentEmptyFullCode = value;
					if(_vcurrentEmptyFullCode != null) CurrentEmptyFullCode = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEmptyFullCode);                    
                }
            }
        }



                     
       

        internal void OnCurrentEntryDataChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EntryData> e)
        {
            //CurrentEntryData = e.Data;
            NotifyPropertyChanged(m => this.CurrentEntryData);
        }

        private  EntryData _currentEntryData;
        public EntryData CurrentEntryData
        {
            get
            {
                return _currentEntryData;
            }
            set
            {
                if (_currentEntryData != value)
                {
                    _currentEntryData = value;
                    BeginSendMessage(MessageToken.CurrentEntryDataChanged,
                                                     new NotificationEventArgs<EntryData>(MessageToken.CurrentEntryDataChanged, _currentEntryData)); 
                    NotifyPropertyChanged(x => this.CurrentEntryData);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentEntryData = null;
                 CurrentAsycudaDocumentSetEntryData = null;
   
                }
            }
        }

		VirtualListItem<EntryData> _vcurrentEntryData;
        public VirtualListItem<EntryData> VCurrentEntryData
        {
            get
            {
                return _vcurrentEntryData;
            }
            set
            {
                if (_vcurrentEntryData != value)
                {
                    _vcurrentEntryData = value;
					if(_vcurrentEntryData != null) CurrentEntryData = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEntryData);                    
                }
            }
        }



                     
       

        internal void OnCurrentEntryDataDetailsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EntryDataDetailsEx> e)
        {
            //CurrentEntryDataDetailsEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentEntryDataDetailsEx);
        }

        private  EntryDataDetailsEx _currentEntryDataDetailsEx;
        public EntryDataDetailsEx CurrentEntryDataDetailsEx
        {
            get
            {
                return _currentEntryDataDetailsEx;
            }
            set
            {
                if (_currentEntryDataDetailsEx != value)
                {
                    _currentEntryDataDetailsEx = value;
                    BeginSendMessage(MessageToken.CurrentEntryDataDetailsExChanged,
                                                     new NotificationEventArgs<EntryDataDetailsEx>(MessageToken.CurrentEntryDataDetailsExChanged, _currentEntryDataDetailsEx)); 
                    NotifyPropertyChanged(x => this.CurrentEntryDataDetailsEx);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentSetEntryDataDetail = null;
   
                }
            }
        }

		VirtualListItem<EntryDataDetailsEx> _vcurrentEntryDataDetailsEx;
        public VirtualListItem<EntryDataDetailsEx> VCurrentEntryDataDetailsEx
        {
            get
            {
                return _vcurrentEntryDataDetailsEx;
            }
            set
            {
                if (_vcurrentEntryDataDetailsEx != value)
                {
                    _vcurrentEntryDataDetailsEx = value;
					if(_vcurrentEntryDataDetailsEx != null) CurrentEntryDataDetailsEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEntryDataDetailsEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentEntryDataExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EntryDataEx> e)
        {
            //CurrentEntryDataEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentEntryDataEx);
        }

        private  EntryDataEx _currentEntryDataEx;
        public EntryDataEx CurrentEntryDataEx
        {
            get
            {
                return _currentEntryDataEx;
            }
            set
            {
                if (_currentEntryDataEx != value)
                {
                    _currentEntryDataEx = value;
                    BeginSendMessage(MessageToken.CurrentEntryDataExChanged,
                                                     new NotificationEventArgs<EntryDataEx>(MessageToken.CurrentEntryDataExChanged, _currentEntryDataEx)); 
                    NotifyPropertyChanged(x => this.CurrentEntryDataEx);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentSetEntryData = null;
                 CurrentAsycudaDocumentEntryData = null;
                 CurrentEntryDataDetailsEx = null;
   
                }
            }
        }

		VirtualListItem<EntryDataEx> _vcurrentEntryDataEx;
        public VirtualListItem<EntryDataEx> VCurrentEntryDataEx
        {
            get
            {
                return _vcurrentEntryDataEx;
            }
            set
            {
                if (_vcurrentEntryDataEx != value)
                {
                    _vcurrentEntryDataEx = value;
					if(_vcurrentEntryDataEx != null) CurrentEntryDataEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEntryDataEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentInventoryItemsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItemsEx> e)
        {
            //CurrentInventoryItemsEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentInventoryItemsEx);
        }

        private  InventoryItemsEx _currentInventoryItemsEx;
        public InventoryItemsEx CurrentInventoryItemsEx
        {
            get
            {
                return _currentInventoryItemsEx;
            }
            set
            {
                if (_currentInventoryItemsEx != value)
                {
                    _currentInventoryItemsEx = value;
                    BeginSendMessage(MessageToken.CurrentInventoryItemsExChanged,
                                                     new NotificationEventArgs<InventoryItemsEx>(MessageToken.CurrentInventoryItemsExChanged, _currentInventoryItemsEx)); 
                    NotifyPropertyChanged(x => this.CurrentInventoryItemsEx);    
                    // all current navigation properties = null
                 CurrentEntryDataDetailsEx = null;
   
                }
            }
        }

		VirtualListItem<InventoryItemsEx> _vcurrentInventoryItemsEx;
        public VirtualListItem<InventoryItemsEx> VCurrentInventoryItemsEx
        {
            get
            {
                return _vcurrentInventoryItemsEx;
            }
            set
            {
                if (_vcurrentInventoryItemsEx != value)
                {
                    _vcurrentInventoryItemsEx = value;
					if(_vcurrentInventoryItemsEx != null) CurrentInventoryItemsEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInventoryItemsEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentPackageTypeChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<PackageType> e)
        {
            //CurrentPackageType = e.Data;
            NotifyPropertyChanged(m => this.CurrentPackageType);
        }

        private  PackageType _currentPackageType;
        public PackageType CurrentPackageType
        {
            get
            {
                return _currentPackageType;
            }
            set
            {
                if (_currentPackageType != value)
                {
                    _currentPackageType = value;
                    BeginSendMessage(MessageToken.CurrentPackageTypeChanged,
                                                     new NotificationEventArgs<PackageType>(MessageToken.CurrentPackageTypeChanged, _currentPackageType)); 
                    NotifyPropertyChanged(x => this.CurrentPackageType);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<PackageType> _vcurrentPackageType;
        public VirtualListItem<PackageType> VCurrentPackageType
        {
            get
            {
                return _vcurrentPackageType;
            }
            set
            {
                if (_vcurrentPackageType != value)
                {
                    _vcurrentPackageType = value;
					if(_vcurrentPackageType != null) CurrentPackageType = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentPackageType);                    
                }
            }
        }






        static EntryDataQSOnCreated newEntryDataQSOnCreated = new EntryDataQSOnCreated();
    }		
}

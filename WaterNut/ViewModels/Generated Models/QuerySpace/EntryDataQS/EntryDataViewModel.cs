// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using EntryDataQS.Client.Entities;
using EntryDataQS.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.EntryDataQS.ViewModels
{
    
	public partial class EntryDataViewModel_AutoGen : ViewModelBase<EntryDataViewModel_AutoGen>
	{

       private static readonly EntryDataViewModel_AutoGen instance;
       static EntryDataViewModel_AutoGen()
        {
            instance = new EntryDataViewModel_AutoGen();
        }

       public static EntryDataViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public EntryDataViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<EntryData>(MessageToken.CurrentEntryDataChanged, OnCurrentEntryDataChanged);
            RegisterToReceiveMessages(MessageToken.EntryDatasChanged, OnEntryDatasChanged);
			RegisterToReceiveMessages(MessageToken.EntryDatasFilterExpressionChanged, OnEntryDatasFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
                        RegisterToReceiveMessages<ApplicationSettings>(CoreEntities.MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
 

			EntryDatas = new VirtualList<EntryData>(vloader);
			EntryDatas.LoadingStateChanged += EntryDatas_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(EntryDatas, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<EntryData> _EntryDatas = null;
        public VirtualList<EntryData> EntryDatas
        {
            get
            {
                return _EntryDatas;
            }
            set
            {
                _EntryDatas = value;
            }
        }

		 private void OnEntryDatasFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			EntryDatas.Refresh();
            SelectedEntryDatas.Clear();
            NotifyPropertyChanged(x => SelectedEntryDatas);
            BeginSendMessage(MessageToken.SelectedEntryDatasChanged, new NotificationEventArgs(MessageToken.SelectedEntryDatasChanged));
        }

		void EntryDatas_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (EntryDatas.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => EntryDatas);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("EntryDatas | Error occured..." + EntryDatas.LastLoadingError.Message);
                    NotifyPropertyChanged(x => EntryDatas);
                    break;
            }
           
        }

		
		public readonly EntryDataVirturalListLoader vloader = new EntryDataVirturalListLoader();

		private ObservableCollection<EntryData> _selectedEntryDatas = new ObservableCollection<EntryData>();
        public ObservableCollection<EntryData> SelectedEntryDatas
        {
            get
            {
                return _selectedEntryDatas;
            }
            set
            {
                _selectedEntryDatas = value;
				BeginSendMessage(MessageToken.SelectedEntryDatasChanged,
                                    new NotificationEventArgs(MessageToken.SelectedEntryDatasChanged));
				 NotifyPropertyChanged(x => SelectedEntryDatas);
            }
        }

        internal void OnCurrentEntryDataChanged(object sender, NotificationEventArgs<EntryData> e)
        {
            if(BaseViewModel.Instance.CurrentEntryData != null) BaseViewModel.Instance.CurrentEntryData.PropertyChanged += CurrentEntryData__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentEntryData);
        }   

            void CurrentEntryData__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentEntryData.ApplicationSettings) == false) ApplicationSettings.Add(CurrentEntryData.ApplicationSettings);
                    //}
                 } 
        internal void OnEntryDatasChanged(object sender, NotificationEventArgs e)
        {
            _EntryDatas.Refresh();
			NotifyPropertyChanged(x => this.EntryDatas);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    EntryDatas.Refresh();
					NotifyPropertyChanged(x => this.EntryDatas);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_EntryDatas.Refresh();
			NotifyPropertyChanged(x => this.EntryDatas);
		}

		public async Task SelectAll()
        {
            IEnumerable<EntryData> lst = null;
            using (var ctx = new EntryDataRepository())
            {
                lst = await ctx.GetEntryDatasByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedEntryDatas = new ObservableCollection<EntryData>(lst);
        }

 

		private string _entryDataIdFilter;
        public string EntryDataIdFilter
        {
            get
            {
                return _entryDataIdFilter;
            }
            set
            {
                _entryDataIdFilter = value;
				NotifyPropertyChanged(x => EntryDataIdFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startEntryDataDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartEntryDataDateFilter
        {
            get
            {
                return _startEntryDataDateFilter;
            }
            set
            {
                _startEntryDataDateFilter = value;
				NotifyPropertyChanged(x => StartEntryDataDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endEntryDataDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndEntryDataDateFilter
        {
            get
            {
                return _endEntryDataDateFilter;
            }
            set
            {
                _endEntryDataDateFilter = value;
				NotifyPropertyChanged(x => EndEntryDataDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _entryDataDateFilter;
        public DateTime? EntryDataDateFilter
        {
            get
            {
                return _entryDataDateFilter;
            }
            set
            {
                _entryDataDateFilter = value;
				NotifyPropertyChanged(x => EntryDataDateFilter);
                FilterData();
                
            }
        }	

 

		private Double? _importedTotalFilter;
        public Double? ImportedTotalFilter
        {
            get
            {
                return _importedTotalFilter;
            }
            set
            {
                _importedTotalFilter = value;
				NotifyPropertyChanged(x => ImportedTotalFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _importedLinesFilter;
        public Int32? ImportedLinesFilter
        {
            get
            {
                return _importedLinesFilter;
            }
            set
            {
                _importedLinesFilter = value;
				NotifyPropertyChanged(x => ImportedLinesFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalFreightFilter;
        public Double? TotalFreightFilter
        {
            get
            {
                return _totalFreightFilter;
            }
            set
            {
                _totalFreightFilter = value;
				NotifyPropertyChanged(x => TotalFreightFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalInternalFreightFilter;
        public Double? TotalInternalFreightFilter
        {
            get
            {
                return _totalInternalFreightFilter;
            }
            set
            {
                _totalInternalFreightFilter = value;
				NotifyPropertyChanged(x => TotalInternalFreightFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalWeightFilter;
        public Double? TotalWeightFilter
        {
            get
            {
                return _totalWeightFilter;
            }
            set
            {
                _totalWeightFilter = value;
				NotifyPropertyChanged(x => TotalWeightFilter);
                FilterData();
                
            }
        }	

 

		private string _currencyFilter;
        public string CurrencyFilter
        {
            get
            {
                return _currencyFilter;
            }
            set
            {
                _currencyFilter = value;
				NotifyPropertyChanged(x => CurrencyFilter);
                FilterData();
                
            }
        }	

 

		private Double? _taxAmountFilter;
        public Double? TaxAmountFilter
        {
            get
            {
                return _taxAmountFilter;
            }
            set
            {
                _taxAmountFilter = value;
				NotifyPropertyChanged(x => TaxAmountFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			EntryDatas.Refresh();
			NotifyPropertyChanged(x => this.EntryDatas);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(EntryDataIdFilter) == false)
						res.Append(" && " + string.Format("EntryDataId.Contains(\"{0}\")",  EntryDataIdFilter));						
 

 

				if (Convert.ToDateTime(StartEntryDataDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEntryDataDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartEntryDataDateFilter).Date != DateTime.MinValue)
						{
							if(StartEntryDataDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndEntryDataDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("EntryDataDate >= \"{0}\"",  Convert.ToDateTime(StartEntryDataDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndEntryDataDateFilter).Date != DateTime.MinValue)
						{
							if(EndEntryDataDateFilter.HasValue)
								res.Append(" && " + string.Format("EntryDataDate <= \"{0}\"",  Convert.ToDateTime(EndEntryDataDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartEntryDataDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEntryDataDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_entryDataDateFilter).Date != DateTime.MinValue)
						{
							if(EntryDataDateFilter.HasValue)
								res.Append(" && " + string.Format("EntryDataDate == \"{0}\"",  Convert.ToDateTime(EntryDataDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(ImportedTotalFilter.HasValue)
						res.Append(" && " + string.Format("ImportedTotal == {0}",  ImportedTotalFilter.ToString()));				 

					if(ImportedLinesFilter.HasValue)
						res.Append(" && " + string.Format("ImportedLines == {0}",  ImportedLinesFilter.ToString()));				 

					if(TotalFreightFilter.HasValue)
						res.Append(" && " + string.Format("TotalFreight == {0}",  TotalFreightFilter.ToString()));				 

					if(TotalInternalFreightFilter.HasValue)
						res.Append(" && " + string.Format("TotalInternalFreight == {0}",  TotalInternalFreightFilter.ToString()));				 

					if(TotalWeightFilter.HasValue)
						res.Append(" && " + string.Format("TotalWeight == {0}",  TotalWeightFilter.ToString()));				 

									if(string.IsNullOrEmpty(CurrencyFilter) == false)
						res.Append(" && " + string.Format("Currency.Contains(\"{0}\")",  CurrencyFilter));						
 

					if(TaxAmountFilter.HasValue)
						res.Append(" && " + string.Format("TaxAmount == {0}",  TaxAmountFilter.ToString()));							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<EntryData> lst = null;
            using (var ctx = new EntryDataRepository())
            {
                lst = await ctx.GetEntryDatasByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<EntryDataExcelLine, List<EntryDataExcelLine>>
            {
                dataToPrint = lst.Select(x => new EntryDataExcelLine
                {
 
                    EntryDataId = x.EntryDataId ,
                    
 
                    EntryDataDate = x.EntryDataDate ,
                    
 
                    ImportedTotal = x.ImportedTotal ,
                    
 
                    ImportedLines = x.ImportedLines ,
                    
 
                    TotalFreight = x.TotalFreight ,
                    
 
                    TotalInternalFreight = x.TotalInternalFreight ,
                    
 
                    TotalWeight = x.TotalWeight ,
                    
 
                    Currency = x.Currency ,
                    
 
                    TaxAmount = x.TaxAmount 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class EntryDataExcelLine
        {
		 
                    public string EntryDataId { get; set; } 
                    
 
                    public System.DateTime EntryDataDate { get; set; } 
                    
 
                    public Nullable<double> ImportedTotal { get; set; } 
                    
 
                    public Nullable<int> ImportedLines { get; set; } 
                    
 
                    public Nullable<double> TotalFreight { get; set; } 
                    
 
                    public Nullable<double> TotalInternalFreight { get; set; } 
                    
 
                    public Nullable<double> TotalWeight { get; set; } 
                    
 
                    public string Currency { get; set; } 
                    
 
                    public Nullable<double> TaxAmount { get; set; } 
                    
        }

		
    }
}
		

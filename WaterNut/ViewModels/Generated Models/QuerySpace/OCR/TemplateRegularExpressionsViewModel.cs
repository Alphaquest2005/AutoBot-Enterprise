// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class TemplateRegularExpressionsViewModel_AutoGen : ViewModelBase<TemplateRegularExpressionsViewModel_AutoGen>
	{

       private static readonly TemplateRegularExpressionsViewModel_AutoGen instance;
       static TemplateRegularExpressionsViewModel_AutoGen()
        {
            instance = new TemplateRegularExpressionsViewModel_AutoGen();
        }

       public static TemplateRegularExpressionsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TemplateRegularExpressionsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TemplateRegularExpressions>(MessageToken.CurrentTemplateRegularExpressionsChanged, OnCurrentTemplateRegularExpressionsChanged);
            RegisterToReceiveMessages(MessageToken.TemplateRegularExpressionsChanged, OnTemplateRegularExpressionsChanged);
			RegisterToReceiveMessages(MessageToken.TemplateRegularExpressionsFilterExpressionChanged, OnTemplateRegularExpressionsFilterExpressionChanged);

 
			RegisterToReceiveMessages<RegExChain>(MessageToken.CurrentRegExChainChanged, OnCurrentRegExChainChanged);
 
			RegisterToReceiveMessages<Templates>(MessageToken.CurrentTemplatesChanged, OnCurrentTemplatesChanged);

 			// Recieve messages for Core Current Entities Changed
 

			TemplateRegularExpressions = new VirtualList<TemplateRegularExpressions>(vloader);
			TemplateRegularExpressions.LoadingStateChanged += TemplateRegularExpressions_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TemplateRegularExpressions, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TemplateRegularExpressions> _TemplateRegularExpressions = null;
        public VirtualList<TemplateRegularExpressions> TemplateRegularExpressions
        {
            get
            {
                return _TemplateRegularExpressions;
            }
            set
            {
                _TemplateRegularExpressions = value;
            }
        }

		 private void OnTemplateRegularExpressionsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			TemplateRegularExpressions.Refresh();
            SelectedTemplateRegularExpressions.Clear();
            NotifyPropertyChanged(x => SelectedTemplateRegularExpressions);
            BeginSendMessage(MessageToken.SelectedTemplateRegularExpressionsChanged, new NotificationEventArgs(MessageToken.SelectedTemplateRegularExpressionsChanged));
        }

		void TemplateRegularExpressions_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TemplateRegularExpressions.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TemplateRegularExpressions);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TemplateRegularExpressions | Error occured..." + TemplateRegularExpressions.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TemplateRegularExpressions);
                    break;
            }
           
        }

		
		public readonly TemplateRegularExpressionsVirturalListLoader vloader = new TemplateRegularExpressionsVirturalListLoader();

		private ObservableCollection<TemplateRegularExpressions> _selectedTemplateRegularExpressions = new ObservableCollection<TemplateRegularExpressions>();
        public ObservableCollection<TemplateRegularExpressions> SelectedTemplateRegularExpressions
        {
            get
            {
                return _selectedTemplateRegularExpressions;
            }
            set
            {
                _selectedTemplateRegularExpressions = value;
				BeginSendMessage(MessageToken.SelectedTemplateRegularExpressionsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTemplateRegularExpressionsChanged));
				 NotifyPropertyChanged(x => SelectedTemplateRegularExpressions);
            }
        }

        internal virtual void OnCurrentTemplateRegularExpressionsChanged(object sender, NotificationEventArgs<TemplateRegularExpressions> e)
        {
            if(BaseViewModel.Instance.CurrentTemplateRegularExpressions != null) BaseViewModel.Instance.CurrentTemplateRegularExpressions.PropertyChanged += CurrentTemplateRegularExpressions__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTemplateRegularExpressions);
        }   

            void CurrentTemplateRegularExpressions__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddRegExChain")
                   // {
                   //    if(RegExChain.Contains(CurrentTemplateRegularExpressions.RegExChain) == false) RegExChain.Add(CurrentTemplateRegularExpressions.RegExChain);
                    //}
                    //if (e.PropertyName == "AddTemplates")
                   // {
                   //    if(Templates.Contains(CurrentTemplateRegularExpressions.Templates) == false) Templates.Add(CurrentTemplateRegularExpressions.Templates);
                    //}
                 } 
        internal virtual void OnTemplateRegularExpressionsChanged(object sender, NotificationEventArgs e)
        {
            _TemplateRegularExpressions.Refresh();
			NotifyPropertyChanged(x => this.TemplateRegularExpressions);
        }   


 	
		 internal virtual void OnCurrentRegExChainChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegExChain> e)
			{
			if(ViewCurrentRegExChain == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("RegExChainId == {0}", e.Data.Id.ToString());
                 }

				TemplateRegularExpressions.Refresh();
				NotifyPropertyChanged(x => this.TemplateRegularExpressions);
                // SendMessage(MessageToken.TemplateRegularExpressionsChanged, new NotificationEventArgs(MessageToken.TemplateRegularExpressionsChanged));
                			}
	
		 internal virtual void OnCurrentTemplatesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Templates> e)
			{
			if(ViewCurrentTemplates == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("TemplateId == {0}", e.Data.Id.ToString());
                 }

				TemplateRegularExpressions.Refresh();
				NotifyPropertyChanged(x => this.TemplateRegularExpressions);
                // SendMessage(MessageToken.TemplateRegularExpressionsChanged, new NotificationEventArgs(MessageToken.TemplateRegularExpressionsChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentRegExChain = false;
         public bool ViewCurrentRegExChain
         {
             get
             {
                 return _viewCurrentRegExChain;
             }
             set
             {
                 _viewCurrentRegExChain = value;
                 NotifyPropertyChanged(x => x.ViewCurrentRegExChain);
                FilterData();
             }
         }
 	
		 bool _viewCurrentTemplates = false;
         public bool ViewCurrentTemplates
         {
             get
             {
                 return _viewCurrentTemplates;
             }
             set
             {
                 _viewCurrentTemplates = value;
                 NotifyPropertyChanged(x => x.ViewCurrentTemplates);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_TemplateRegularExpressions.Refresh();
			NotifyPropertyChanged(x => this.TemplateRegularExpressions);
		}

		public async Task SelectAll()
        {
            IEnumerable<TemplateRegularExpressions> lst = null;
            using (var ctx = new TemplateRegularExpressionsRepository())
            {
                lst = await ctx.GetTemplateRegularExpressionsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTemplateRegularExpressions = new ObservableCollection<TemplateRegularExpressions>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TemplateRegularExpressions.Refresh();
			NotifyPropertyChanged(x => this.TemplateRegularExpressions);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TemplateRegularExpressions> lst = null;
            using (var ctx = new TemplateRegularExpressionsRepository())
            {
                lst = await ctx.GetTemplateRegularExpressionsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TemplateRegularExpressionsExcelLine, List<TemplateRegularExpressionsExcelLine>>
            {
                dataToPrint = lst.Select(x => new TemplateRegularExpressionsExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TemplateRegularExpressionsExcelLine
        {
		        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class LineViewModel_AutoGen : ViewModelBase<LineViewModel_AutoGen>
	{

       private static readonly LineViewModel_AutoGen instance;
       static LineViewModel_AutoGen()
        {
            instance = new LineViewModel_AutoGen();
        }

       public static LineViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public LineViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<Line>(MessageToken.CurrentLineChanged, OnCurrentLineChanged);
            RegisterToReceiveMessages(MessageToken.LineSetChanged, OnLineSetChanged);
			RegisterToReceiveMessages(MessageToken.LineSetFilterExpressionChanged, OnLineSetFilterExpressionChanged);

 
			RegisterToReceiveMessages<Part>(MessageToken.CurrentPartChanged, OnCurrentPartChanged);

 			// Recieve messages for Core Current Entities Changed
 

			LineSet = new VirtualList<Line>(vloader);
			LineSet.LoadingStateChanged += LineSet_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(LineSet, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<Line> _LineSet = null;
        public VirtualList<Line> LineSet
        {
            get
            {
                return _LineSet;
            }
            set
            {
                _LineSet = value;
                NotifyPropertyChanged( x => x.LineSet);
            }
        }

		 private void OnLineSetFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => LineSet.Refresh()).ConfigureAwait(false);
            SelectedLineSet.Clear();
            NotifyPropertyChanged(x => SelectedLineSet);
            BeginSendMessage(MessageToken.SelectedLineSetChanged, new NotificationEventArgs(MessageToken.SelectedLineSetChanged));
        }

		void LineSet_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (LineSet.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => LineSet);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("LineSet | Error occured..." + LineSet.LastLoadingError.Message);
                    NotifyPropertyChanged(x => LineSet);
                    break;
            }
           
        }

		
		public readonly LineVirturalListLoader vloader = new LineVirturalListLoader();

		private ObservableCollection<Line> _selectedLineSet = new ObservableCollection<Line>();
        public ObservableCollection<Line> SelectedLineSet
        {
            get
            {
                return _selectedLineSet;
            }
            set
            {
                _selectedLineSet = value;
				BeginSendMessage(MessageToken.SelectedLineSetChanged,
                                    new NotificationEventArgs(MessageToken.SelectedLineSetChanged));
				 NotifyPropertyChanged(x => SelectedLineSet);
            }
        }

        internal virtual void OnCurrentLineChanged(object sender, NotificationEventArgs<Line> e)
        {
            if(BaseViewModel.Instance.CurrentLine != null) BaseViewModel.Instance.CurrentLine.PropertyChanged += CurrentLine__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentLine);
        }   

            void CurrentLine__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddPart")
                   // {
                   //    if(PartExs.Contains(CurrentLine.Part) == false) PartExs.Add(CurrentLine.Part);
                    //}
                 } 
        internal virtual void OnLineSetChanged(object sender, NotificationEventArgs e)
        {
            _LineSet.Refresh();
			NotifyPropertyChanged(x => this.LineSet);
        }   


 	
		 internal virtual void OnCurrentPartChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Part> e)
			{
			if(ViewCurrentPart == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("PartId == {0}", e.Data.Id.ToString());
                 }

				LineSet.Refresh();
				NotifyPropertyChanged(x => this.LineSet);
                // SendMessage(MessageToken.LineSetChanged, new NotificationEventArgs(MessageToken.LineSetChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentPart = false;
         public bool ViewCurrentPart
         {
             get
             {
                 return _viewCurrentPart;
             }
             set
             {
                 _viewCurrentPart = value;
                 NotifyPropertyChanged(x => x.ViewCurrentPart);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_LineSet.Refresh();
			NotifyPropertyChanged(x => this.LineSet);
		}

		public async Task SelectAll()
        {
            IEnumerable<Line> lst = null;
            using (var ctx = new LineRepository())
            {
                lst = await ctx.GetLineSetByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedLineSet = new ObservableCollection<Line>(lst);
        }

 

		private string _invoiceFilter;
        public string InvoiceFilter
        {
            get
            {
                return _invoiceFilter;
            }
            set
            {
                _invoiceFilter = value;
				NotifyPropertyChanged(x => InvoiceFilter);
                FilterData();
                
            }
        }	

 

		private string _partNameFilter;
        public string PartNameFilter
        {
            get
            {
                return _partNameFilter;
            }
            set
            {
                _partNameFilter = value;
				NotifyPropertyChanged(x => PartNameFilter);
                FilterData();
                
            }
        }	

 

		private string _nameFilter;
        public string NameFilter
        {
            get
            {
                return _nameFilter;
            }
            set
            {
                _nameFilter = value;
				NotifyPropertyChanged(x => NameFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _multiLineFilter;
        public Boolean? MultiLineFilter
        {
            get
            {
                return _multiLineFilter;
            }
            set
            {
                _multiLineFilter = value;
				NotifyPropertyChanged(x => MultiLineFilter);
                FilterData();
                
            }
        }	

 

		private string _regExFilter;
        public string RegExFilter
        {
            get
            {
                return _regExFilter;
            }
            set
            {
                _regExFilter = value;
				NotifyPropertyChanged(x => RegExFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			LineSet.Refresh();
			NotifyPropertyChanged(x => this.LineSet);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(InvoiceFilter) == false)
						res.Append(" && " + string.Format("Invoice.Contains(\"{0}\")",  InvoiceFilter));						
 

									if(string.IsNullOrEmpty(PartNameFilter) == false)
						res.Append(" && " + string.Format("PartName.Contains(\"{0}\")",  PartNameFilter));						
 

									if(string.IsNullOrEmpty(NameFilter) == false)
						res.Append(" && " + string.Format("Name.Contains(\"{0}\")",  NameFilter));						
 

									if(MultiLineFilter.HasValue)
						res.Append(" && " + string.Format("MultiLine == {0}",  MultiLineFilter));						
 

									if(string.IsNullOrEmpty(RegExFilter) == false)
						res.Append(" && " + string.Format("RegEx.Contains(\"{0}\")",  RegExFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<Line> lst = null;
            using (var ctx = new LineRepository())
            {
                lst = await ctx.GetLineSetByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<LineExcelLine, List<LineExcelLine>>
            {
                dataToPrint = lst.Select(x => new LineExcelLine
                {
 
                    Invoice = x.Invoice ,
                    
 
                    PartName = x.PartName ,
                    
 
                    Name = x.Name ,
                    
 
                    MultiLine = x.MultiLine ,
                    
 
                    RegEx = x.RegEx 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class LineExcelLine
        {
		 
                    public string Invoice { get; set; } 
                    
 
                    public string PartName { get; set; } 
                    
 
                    public string Name { get; set; } 
                    
 
                    public Nullable<bool> MultiLine { get; set; } 
                    
 
                    public string RegEx { get; set; } 
                    
        }

		
    }
}
		

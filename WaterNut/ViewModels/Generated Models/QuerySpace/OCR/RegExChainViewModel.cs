// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class RegExChainViewModel_AutoGen : ViewModelBase<RegExChainViewModel_AutoGen>
	{

       private static readonly RegExChainViewModel_AutoGen instance;
       static RegExChainViewModel_AutoGen()
        {
            instance = new RegExChainViewModel_AutoGen();
        }

       public static RegExChainViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public RegExChainViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<RegExChain>(MessageToken.CurrentRegExChainChanged, OnCurrentRegExChainChanged);
            RegisterToReceiveMessages(MessageToken.RegExChainChanged, OnRegExChainChanged);
			RegisterToReceiveMessages(MessageToken.RegExChainFilterExpressionChanged, OnRegExChainFilterExpressionChanged);

 
			RegisterToReceiveMessages<RegularExpressions>(MessageToken.CurrentRegularExpressionsChanged, OnCurrentRegularExpressionsChanged);
 
			RegisterToReceiveMessages<RegExParent>(MessageToken.CurrentRegExParentChanged, OnCurrentRegExParentChanged);

 			// Recieve messages for Core Current Entities Changed
 

			RegExChain = new VirtualList<RegExChain>(vloader);
			RegExChain.LoadingStateChanged += RegExChain_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(RegExChain, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<RegExChain> _RegExChain = null;
        public VirtualList<RegExChain> RegExChain
        {
            get
            {
                return _RegExChain;
            }
            set
            {
                _RegExChain = value;
            }
        }

		 private void OnRegExChainFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			RegExChain.Refresh();
            SelectedRegExChain.Clear();
            NotifyPropertyChanged(x => SelectedRegExChain);
            BeginSendMessage(MessageToken.SelectedRegExChainChanged, new NotificationEventArgs(MessageToken.SelectedRegExChainChanged));
        }

		void RegExChain_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (RegExChain.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => RegExChain);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("RegExChain | Error occured..." + RegExChain.LastLoadingError.Message);
                    NotifyPropertyChanged(x => RegExChain);
                    break;
            }
           
        }

		
		public readonly RegExChainVirturalListLoader vloader = new RegExChainVirturalListLoader();

		private ObservableCollection<RegExChain> _selectedRegExChain = new ObservableCollection<RegExChain>();
        public ObservableCollection<RegExChain> SelectedRegExChain
        {
            get
            {
                return _selectedRegExChain;
            }
            set
            {
                _selectedRegExChain = value;
				BeginSendMessage(MessageToken.SelectedRegExChainChanged,
                                    new NotificationEventArgs(MessageToken.SelectedRegExChainChanged));
				 NotifyPropertyChanged(x => SelectedRegExChain);
            }
        }

        internal virtual void OnCurrentRegExChainChanged(object sender, NotificationEventArgs<RegExChain> e)
        {
            if(BaseViewModel.Instance.CurrentRegExChain != null) BaseViewModel.Instance.CurrentRegExChain.PropertyChanged += CurrentRegExChain__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentRegExChain);
        }   

            void CurrentRegExChain__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddRegularExpressions")
                   // {
                   //    if(RegularExpressions.Contains(CurrentRegExChain.RegularExpressions) == false) RegularExpressions.Add(CurrentRegExChain.RegularExpressions);
                    //}
                    //if (e.PropertyName == "AddRegExParent")
                   // {
                   //    if(RegExParent.Contains(CurrentRegExChain.RegExParent) == false) RegExParent.Add(CurrentRegExChain.RegExParent);
                    //}
                 } 
        internal virtual void OnRegExChainChanged(object sender, NotificationEventArgs e)
        {
            _RegExChain.Refresh();
			NotifyPropertyChanged(x => this.RegExChain);
        }   


 	
		 internal virtual void OnCurrentRegularExpressionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegularExpressions> e)
			{
			if(ViewCurrentRegularExpressions == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("RegExId == {0}", e.Data.Id.ToString());
                 }

				RegExChain.Refresh();
				NotifyPropertyChanged(x => this.RegExChain);
                // SendMessage(MessageToken.RegExChainChanged, new NotificationEventArgs(MessageToken.RegExChainChanged));
                			}
	
		 internal virtual void OnCurrentRegExParentChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegExParent> e)
			{
			if(ViewCurrentRegExParent == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
                }

				RegExChain.Refresh();
				NotifyPropertyChanged(x => this.RegExChain);
                // SendMessage(MessageToken.RegExChainChanged, new NotificationEventArgs(MessageToken.RegExChainChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentRegularExpressions = false;
         public bool ViewCurrentRegularExpressions
         {
             get
             {
                 return _viewCurrentRegularExpressions;
             }
             set
             {
                 _viewCurrentRegularExpressions = value;
                 NotifyPropertyChanged(x => x.ViewCurrentRegularExpressions);
                FilterData();
             }
         }
 	
		 bool _viewCurrentRegExParent = false;
         public bool ViewCurrentRegExParent
         {
             get
             {
                 return _viewCurrentRegExParent;
             }
             set
             {
                 _viewCurrentRegExParent = value;
                 NotifyPropertyChanged(x => x.ViewCurrentRegExParent);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_RegExChain.Refresh();
			NotifyPropertyChanged(x => this.RegExChain);
		}

		public async Task SelectAll()
        {
            IEnumerable<RegExChain> lst = null;
            using (var ctx = new RegExChainRepository())
            {
                lst = await ctx.GetRegExChainByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedRegExChain = new ObservableCollection<RegExChain>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			RegExChain.Refresh();
			NotifyPropertyChanged(x => this.RegExChain);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<RegExChain> lst = null;
            using (var ctx = new RegExChainRepository())
            {
                lst = await ctx.GetRegExChainByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<RegExChainExcelLine, List<RegExChainExcelLine>>
            {
                dataToPrint = lst.Select(x => new RegExChainExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class RegExChainExcelLine
        {
		        }

		
    }
}
		

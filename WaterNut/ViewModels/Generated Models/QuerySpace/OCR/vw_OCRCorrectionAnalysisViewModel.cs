// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class vw_OCRCorrectionAnalysisViewModel_AutoGen : ViewModelBase<vw_OCRCorrectionAnalysisViewModel_AutoGen>
	{

       private static readonly vw_OCRCorrectionAnalysisViewModel_AutoGen instance;
       static vw_OCRCorrectionAnalysisViewModel_AutoGen()
        {
            instance = new vw_OCRCorrectionAnalysisViewModel_AutoGen();
        }

       public static vw_OCRCorrectionAnalysisViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public vw_OCRCorrectionAnalysisViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<vw_OCRCorrectionAnalysis>(MessageToken.Currentvw_OCRCorrectionAnalysisChanged, OnCurrentvw_OCRCorrectionAnalysisChanged);
            RegisterToReceiveMessages(MessageToken.vw_OCRCorrectionAnalysisChanged, Onvw_OCRCorrectionAnalysisChanged);
			RegisterToReceiveMessages(MessageToken.vw_OCRCorrectionAnalysisFilterExpressionChanged, Onvw_OCRCorrectionAnalysisFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			vw_OCRCorrectionAnalysis = new VirtualList<vw_OCRCorrectionAnalysis>(vloader);
			vw_OCRCorrectionAnalysis.LoadingStateChanged += vw_OCRCorrectionAnalysis_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(vw_OCRCorrectionAnalysis, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<vw_OCRCorrectionAnalysis> _vw_OCRCorrectionAnalysis = null;
        public VirtualList<vw_OCRCorrectionAnalysis> vw_OCRCorrectionAnalysis
        {
            get
            {
                return _vw_OCRCorrectionAnalysis;
            }
            set
            {
                _vw_OCRCorrectionAnalysis = value;
                NotifyPropertyChanged( x => x.vw_OCRCorrectionAnalysis);
            }
        }

		 private void Onvw_OCRCorrectionAnalysisFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => vw_OCRCorrectionAnalysis.Refresh()).ConfigureAwait(false);
            Selectedvw_OCRCorrectionAnalysis.Clear();
            NotifyPropertyChanged(x => Selectedvw_OCRCorrectionAnalysis);
            BeginSendMessage(MessageToken.Selectedvw_OCRCorrectionAnalysisChanged, new NotificationEventArgs(MessageToken.Selectedvw_OCRCorrectionAnalysisChanged));
        }

		void vw_OCRCorrectionAnalysis_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (vw_OCRCorrectionAnalysis.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => vw_OCRCorrectionAnalysis);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("vw_OCRCorrectionAnalysis | Error occured..." + vw_OCRCorrectionAnalysis.LastLoadingError.Message);
                    NotifyPropertyChanged(x => vw_OCRCorrectionAnalysis);
                    break;
            }
           
        }

		
		public readonly vw_OCRCorrectionAnalysisVirturalListLoader vloader = new vw_OCRCorrectionAnalysisVirturalListLoader();

		private ObservableCollection<vw_OCRCorrectionAnalysis> _selectedvw_OCRCorrectionAnalysis = new ObservableCollection<vw_OCRCorrectionAnalysis>();
        public ObservableCollection<vw_OCRCorrectionAnalysis> Selectedvw_OCRCorrectionAnalysis
        {
            get
            {
                return _selectedvw_OCRCorrectionAnalysis;
            }
            set
            {
                _selectedvw_OCRCorrectionAnalysis = value;
				BeginSendMessage(MessageToken.Selectedvw_OCRCorrectionAnalysisChanged,
                                    new NotificationEventArgs(MessageToken.Selectedvw_OCRCorrectionAnalysisChanged));
				 NotifyPropertyChanged(x => Selectedvw_OCRCorrectionAnalysis);
            }
        }

        internal virtual void OnCurrentvw_OCRCorrectionAnalysisChanged(object sender, NotificationEventArgs<vw_OCRCorrectionAnalysis> e)
        {
            if(BaseViewModel.Instance.Currentvw_OCRCorrectionAnalysis != null) BaseViewModel.Instance.Currentvw_OCRCorrectionAnalysis.PropertyChanged += Currentvw_OCRCorrectionAnalysis__propertyChanged;
           // NotifyPropertyChanged(x => this.Currentvw_OCRCorrectionAnalysis);
        }   

            void Currentvw_OCRCorrectionAnalysis__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void Onvw_OCRCorrectionAnalysisChanged(object sender, NotificationEventArgs e)
        {
            _vw_OCRCorrectionAnalysis.Refresh();
			NotifyPropertyChanged(x => this.vw_OCRCorrectionAnalysis);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_vw_OCRCorrectionAnalysis.Refresh();
			NotifyPropertyChanged(x => this.vw_OCRCorrectionAnalysis);
		}

		public async Task SelectAll()
        {
            IEnumerable<vw_OCRCorrectionAnalysis> lst = null;
            using (var ctx = new vw_OCRCorrectionAnalysisRepository())
            {
                lst = await ctx.Getvw_OCRCorrectionAnalysisByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            Selectedvw_OCRCorrectionAnalysis = new ObservableCollection<vw_OCRCorrectionAnalysis>(lst);
        }

 

		private string _fieldNameFilter;
        public string FieldNameFilter
        {
            get
            {
                return _fieldNameFilter;
            }
            set
            {
                _fieldNameFilter = value;
				NotifyPropertyChanged(x => FieldNameFilter);
                FilterData();
                
            }
        }	

 

		private string _correctionTypeFilter;
        public string CorrectionTypeFilter
        {
            get
            {
                return _correctionTypeFilter;
            }
            set
            {
                _correctionTypeFilter = value;
				NotifyPropertyChanged(x => CorrectionTypeFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _totalCorrectionsFilter;
        public Int32? TotalCorrectionsFilter
        {
            get
            {
                return _totalCorrectionsFilter;
            }
            set
            {
                _totalCorrectionsFilter = value;
				NotifyPropertyChanged(x => TotalCorrectionsFilter);
                FilterData();
                
            }
        }	

 

		private Double? _avgConfidenceFilter;
        public Double? AvgConfidenceFilter
        {
            get
            {
                return _avgConfidenceFilter;
            }
            set
            {
                _avgConfidenceFilter = value;
				NotifyPropertyChanged(x => AvgConfidenceFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _successfulCorrectionsFilter;
        public Int32? SuccessfulCorrectionsFilter
        {
            get
            {
                return _successfulCorrectionsFilter;
            }
            set
            {
                _successfulCorrectionsFilter = value;
				NotifyPropertyChanged(x => SuccessfulCorrectionsFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _failedCorrectionsFilter;
        public Int32? FailedCorrectionsFilter
        {
            get
            {
                return _failedCorrectionsFilter;
            }
            set
            {
                _failedCorrectionsFilter = value;
				NotifyPropertyChanged(x => FailedCorrectionsFilter);
                FilterData();
                
            }
        }	

 

		private Double? _successRateFilter;
        public Double? SuccessRateFilter
        {
            get
            {
                return _successRateFilter;
            }
            set
            {
                _successRateFilter = value;
				NotifyPropertyChanged(x => SuccessRateFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startFirstCorrectionFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartFirstCorrectionFilter
        {
            get
            {
                return _startFirstCorrectionFilter;
            }
            set
            {
                _startFirstCorrectionFilter = value;
				NotifyPropertyChanged(x => StartFirstCorrectionFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endFirstCorrectionFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndFirstCorrectionFilter
        {
            get
            {
                return _endFirstCorrectionFilter;
            }
            set
            {
                _endFirstCorrectionFilter = value;
				NotifyPropertyChanged(x => EndFirstCorrectionFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _firstCorrectionFilter;
        public DateTime? FirstCorrectionFilter
        {
            get
            {
                return _firstCorrectionFilter;
            }
            set
            {
                _firstCorrectionFilter = value;
				NotifyPropertyChanged(x => FirstCorrectionFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startLastCorrectionFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartLastCorrectionFilter
        {
            get
            {
                return _startLastCorrectionFilter;
            }
            set
            {
                _startLastCorrectionFilter = value;
				NotifyPropertyChanged(x => StartLastCorrectionFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endLastCorrectionFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndLastCorrectionFilter
        {
            get
            {
                return _endLastCorrectionFilter;
            }
            set
            {
                _endLastCorrectionFilter = value;
				NotifyPropertyChanged(x => EndLastCorrectionFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _lastCorrectionFilter;
        public DateTime? LastCorrectionFilter
        {
            get
            {
                return _lastCorrectionFilter;
            }
            set
            {
                _lastCorrectionFilter = value;
				NotifyPropertyChanged(x => LastCorrectionFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			vw_OCRCorrectionAnalysis.Refresh();
			NotifyPropertyChanged(x => this.vw_OCRCorrectionAnalysis);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(FieldNameFilter) == false)
						res.Append(" && " + string.Format("FieldName.Contains(\"{0}\")",  FieldNameFilter));						
 

									if(string.IsNullOrEmpty(CorrectionTypeFilter) == false)
						res.Append(" && " + string.Format("CorrectionType.Contains(\"{0}\")",  CorrectionTypeFilter));						
 

					if(TotalCorrectionsFilter.HasValue)
						res.Append(" && " + string.Format("TotalCorrections == {0}",  TotalCorrectionsFilter.ToString()));				 

					if(AvgConfidenceFilter.HasValue)
						res.Append(" && " + string.Format("AvgConfidence == {0}",  AvgConfidenceFilter.ToString()));				 

					if(SuccessfulCorrectionsFilter.HasValue)
						res.Append(" && " + string.Format("SuccessfulCorrections == {0}",  SuccessfulCorrectionsFilter.ToString()));				 

					if(FailedCorrectionsFilter.HasValue)
						res.Append(" && " + string.Format("FailedCorrections == {0}",  FailedCorrectionsFilter.ToString()));				 

					if(SuccessRateFilter.HasValue)
						res.Append(" && " + string.Format("SuccessRate == {0}",  SuccessRateFilter.ToString()));				 

 

				if (Convert.ToDateTime(StartFirstCorrectionFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndFirstCorrectionFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartFirstCorrectionFilter).Date != DateTime.MinValue)
						{
							if(StartFirstCorrectionFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndFirstCorrectionFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("FirstCorrection >= \"{0}\"",  Convert.ToDateTime(StartFirstCorrectionFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndFirstCorrectionFilter).Date != DateTime.MinValue)
						{
							if(EndFirstCorrectionFilter.HasValue)
								res.Append(" && " + string.Format("FirstCorrection <= \"{0}\"",  Convert.ToDateTime(EndFirstCorrectionFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartFirstCorrectionFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndFirstCorrectionFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_firstCorrectionFilter).Date != DateTime.MinValue)
						{
							if(FirstCorrectionFilter.HasValue)
								res.Append(" && " + string.Format("FirstCorrection == \"{0}\"",  Convert.ToDateTime(FirstCorrectionFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

 

				if (Convert.ToDateTime(StartLastCorrectionFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndLastCorrectionFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartLastCorrectionFilter).Date != DateTime.MinValue)
						{
							if(StartLastCorrectionFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndLastCorrectionFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("LastCorrection >= \"{0}\"",  Convert.ToDateTime(StartLastCorrectionFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndLastCorrectionFilter).Date != DateTime.MinValue)
						{
							if(EndLastCorrectionFilter.HasValue)
								res.Append(" && " + string.Format("LastCorrection <= \"{0}\"",  Convert.ToDateTime(EndLastCorrectionFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartLastCorrectionFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndLastCorrectionFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_lastCorrectionFilter).Date != DateTime.MinValue)
						{
							if(LastCorrectionFilter.HasValue)
								res.Append(" && " + string.Format("LastCorrection == \"{0}\"",  Convert.ToDateTime(LastCorrectionFilter).Date.ToString("MM/dd/yyyy")));
						}
							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<vw_OCRCorrectionAnalysis> lst = null;
            using (var ctx = new vw_OCRCorrectionAnalysisRepository())
            {
                lst = await ctx.Getvw_OCRCorrectionAnalysisByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<vw_OCRCorrectionAnalysisExcelLine, List<vw_OCRCorrectionAnalysisExcelLine>>
            {
                dataToPrint = lst.Select(x => new vw_OCRCorrectionAnalysisExcelLine
                {
 
                    FieldName = x.FieldName ,
                    
 
                    CorrectionType = x.CorrectionType ,
                    
 
                    TotalCorrections = x.TotalCorrections ,
                    
 
                    AvgConfidence = x.AvgConfidence ,
                    
 
                    SuccessfulCorrections = x.SuccessfulCorrections ,
                    
 
                    FailedCorrections = x.FailedCorrections ,
                    
 
                    SuccessRate = x.SuccessRate ,
                    
 
                    FirstCorrection = x.FirstCorrection ,
                    
 
                    LastCorrection = x.LastCorrection 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class vw_OCRCorrectionAnalysisExcelLine
        {
		 
                    public string FieldName { get; set; } 
                    
 
                    public string CorrectionType { get; set; } 
                    
 
                    public Nullable<int> TotalCorrections { get; set; } 
                    
 
                    public Nullable<double> AvgConfidence { get; set; } 
                    
 
                    public Nullable<int> SuccessfulCorrections { get; set; } 
                    
 
                    public Nullable<int> FailedCorrections { get; set; } 
                    
 
                    public Nullable<double> SuccessRate { get; set; } 
                    
 
                    public Nullable<System.DateTime> FirstCorrection { get; set; } 
                    
 
                    public Nullable<System.DateTime> LastCorrection { get; set; } 
                    
        }

		
    }
}
		

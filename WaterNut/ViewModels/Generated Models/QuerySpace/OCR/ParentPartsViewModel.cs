// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class ParentPartsViewModel_AutoGen : ViewModelBase<ParentPartsViewModel_AutoGen>
	{

       private static readonly ParentPartsViewModel_AutoGen instance;
       static ParentPartsViewModel_AutoGen()
        {
            instance = new ParentPartsViewModel_AutoGen();
        }

       public static ParentPartsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public ParentPartsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<ParentParts>(MessageToken.CurrentParentPartsChanged, OnCurrentParentPartsChanged);
            RegisterToReceiveMessages(MessageToken.ParentPartsChanged, OnParentPartsChanged);
			RegisterToReceiveMessages(MessageToken.ParentPartsFilterExpressionChanged, OnParentPartsFilterExpressionChanged);

 
			RegisterToReceiveMessages<Parts>(MessageToken.CurrentPartsChanged, OnCurrentPartChanged);
 
			RegisterToReceiveMessages<Parts>(MessageToken.CurrentPartsChanged, OnCurrentParentPartChanged);

 			// Recieve messages for Core Current Entities Changed
 

			ParentParts = new VirtualList<ParentParts>(vloader);
			ParentParts.LoadingStateChanged += ParentParts_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(ParentParts, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<ParentParts> _ParentParts = null;
        public VirtualList<ParentParts> ParentParts
        {
            get
            {
                return _ParentParts;
            }
            set
            {
                _ParentParts = value;
            }
        }

		 private void OnParentPartsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			ParentParts.Refresh();
            SelectedParentParts.Clear();
            NotifyPropertyChanged(x => SelectedParentParts);
            BeginSendMessage(MessageToken.SelectedParentPartsChanged, new NotificationEventArgs(MessageToken.SelectedParentPartsChanged));
        }

		void ParentParts_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (ParentParts.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => ParentParts);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("ParentParts | Error occured..." + ParentParts.LastLoadingError.Message);
                    NotifyPropertyChanged(x => ParentParts);
                    break;
            }
           
        }

		
		public readonly ParentPartsVirturalListLoader vloader = new ParentPartsVirturalListLoader();

		private ObservableCollection<ParentParts> _selectedParentParts = new ObservableCollection<ParentParts>();
        public ObservableCollection<ParentParts> SelectedParentParts
        {
            get
            {
                return _selectedParentParts;
            }
            set
            {
                _selectedParentParts = value;
				BeginSendMessage(MessageToken.SelectedParentPartsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedParentPartsChanged));
				 NotifyPropertyChanged(x => SelectedParentParts);
            }
        }

        internal virtual void OnCurrentParentPartsChanged(object sender, NotificationEventArgs<ParentParts> e)
        {
            if(BaseViewModel.Instance.CurrentParentParts != null) BaseViewModel.Instance.CurrentParentParts.PropertyChanged += CurrentParentParts__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentParentParts);
        }   

            void CurrentParentParts__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddPart")
                   // {
                   //    if(Parts.Contains(CurrentParentParts.Part) == false) Parts.Add(CurrentParentParts.Part);
                    //}
                    //if (e.PropertyName == "AddParentPart")
                   // {
                   //    if(Parts.Contains(CurrentParentParts.ParentPart) == false) Parts.Add(CurrentParentParts.ParentPart);
                    //}
                 } 
        internal virtual void OnParentPartsChanged(object sender, NotificationEventArgs e)
        {
            _ParentParts.Refresh();
			NotifyPropertyChanged(x => this.ParentParts);
        }   


 	
		 internal virtual void OnCurrentPartChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Parts> e)
			{
			if(ViewCurrentPart == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("Id == {0}", e.Data.Id.ToString());
                 }

				ParentParts.Refresh();
				NotifyPropertyChanged(x => this.ParentParts);
                // SendMessage(MessageToken.ParentPartsChanged, new NotificationEventArgs(MessageToken.ParentPartsChanged));
                			}
	
		 internal virtual void OnCurrentParentPartChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Parts> e)
			{
			if(ViewCurrentParentPart == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("ParentPartId == {0}", e.Data.Id.ToString());
                 }

				ParentParts.Refresh();
				NotifyPropertyChanged(x => this.ParentParts);
                // SendMessage(MessageToken.ParentPartsChanged, new NotificationEventArgs(MessageToken.ParentPartsChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentPart = false;
         public bool ViewCurrentPart
         {
             get
             {
                 return _viewCurrentPart;
             }
             set
             {
                 _viewCurrentPart = value;
                 NotifyPropertyChanged(x => x.ViewCurrentPart);
                FilterData();
             }
         }
 	
		 bool _viewCurrentParentPart = false;
         public bool ViewCurrentParentPart
         {
             get
             {
                 return _viewCurrentParentPart;
             }
             set
             {
                 _viewCurrentParentPart = value;
                 NotifyPropertyChanged(x => x.ViewCurrentParentPart);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_ParentParts.Refresh();
			NotifyPropertyChanged(x => this.ParentParts);
		}

		public async Task SelectAll()
        {
            IEnumerable<ParentParts> lst = null;
            using (var ctx = new ParentPartsRepository())
            {
                lst = await ctx.GetParentPartsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedParentParts = new ObservableCollection<ParentParts>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			ParentParts.Refresh();
			NotifyPropertyChanged(x => this.ParentParts);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<ParentParts> lst = null;
            using (var ctx = new ParentPartsRepository())
            {
                lst = await ctx.GetParentPartsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<ParentPartsExcelLine, List<ParentPartsExcelLine>>
            {
                dataToPrint = lst.Select(x => new ParentPartsExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class ParentPartsExcelLine
        {
		        }

		
    }
}
		

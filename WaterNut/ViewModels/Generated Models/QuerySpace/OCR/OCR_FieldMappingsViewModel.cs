// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class OCR_FieldMappingsViewModel_AutoGen : ViewModelBase<OCR_FieldMappingsViewModel_AutoGen>
	{

       private static readonly OCR_FieldMappingsViewModel_AutoGen instance;
       static OCR_FieldMappingsViewModel_AutoGen()
        {
            instance = new OCR_FieldMappingsViewModel_AutoGen();
        }

       public static OCR_FieldMappingsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public OCR_FieldMappingsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<OCR_FieldMappings>(MessageToken.CurrentOCR_FieldMappingsChanged, OnCurrentOCR_FieldMappingsChanged);
            RegisterToReceiveMessages(MessageToken.OCR_FieldMappingsChanged, OnOCR_FieldMappingsChanged);
			RegisterToReceiveMessages(MessageToken.OCR_FieldMappingsFilterExpressionChanged, OnOCR_FieldMappingsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			OCR_FieldMappings = new VirtualList<OCR_FieldMappings>(vloader);
			OCR_FieldMappings.LoadingStateChanged += OCR_FieldMappings_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(OCR_FieldMappings, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<OCR_FieldMappings> _OCR_FieldMappings = null;
        public VirtualList<OCR_FieldMappings> OCR_FieldMappings
        {
            get
            {
                return _OCR_FieldMappings;
            }
            set
            {
                _OCR_FieldMappings = value;
                NotifyPropertyChanged( x => x.OCR_FieldMappings);
            }
        }

		 private void OnOCR_FieldMappingsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => OCR_FieldMappings.Refresh()).ConfigureAwait(false);
            SelectedOCR_FieldMappings.Clear();
            NotifyPropertyChanged(x => SelectedOCR_FieldMappings);
            BeginSendMessage(MessageToken.SelectedOCR_FieldMappingsChanged, new NotificationEventArgs(MessageToken.SelectedOCR_FieldMappingsChanged));
        }

		void OCR_FieldMappings_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (OCR_FieldMappings.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => OCR_FieldMappings);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("OCR_FieldMappings | Error occured..." + OCR_FieldMappings.LastLoadingError.Message);
                    NotifyPropertyChanged(x => OCR_FieldMappings);
                    break;
            }
           
        }

		
		public readonly OCR_FieldMappingsVirturalListLoader vloader = new OCR_FieldMappingsVirturalListLoader();

		private ObservableCollection<OCR_FieldMappings> _selectedOCR_FieldMappings = new ObservableCollection<OCR_FieldMappings>();
        public ObservableCollection<OCR_FieldMappings> SelectedOCR_FieldMappings
        {
            get
            {
                return _selectedOCR_FieldMappings;
            }
            set
            {
                _selectedOCR_FieldMappings = value;
				BeginSendMessage(MessageToken.SelectedOCR_FieldMappingsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedOCR_FieldMappingsChanged));
				 NotifyPropertyChanged(x => SelectedOCR_FieldMappings);
            }
        }

        internal virtual void OnCurrentOCR_FieldMappingsChanged(object sender, NotificationEventArgs<OCR_FieldMappings> e)
        {
            if(BaseViewModel.Instance.CurrentOCR_FieldMappings != null) BaseViewModel.Instance.CurrentOCR_FieldMappings.PropertyChanged += CurrentOCR_FieldMappings__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentOCR_FieldMappings);
        }   

            void CurrentOCR_FieldMappings__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnOCR_FieldMappingsChanged(object sender, NotificationEventArgs e)
        {
            _OCR_FieldMappings.Refresh();
			NotifyPropertyChanged(x => this.OCR_FieldMappings);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_OCR_FieldMappings.Refresh();
			NotifyPropertyChanged(x => this.OCR_FieldMappings);
		}

		public async Task SelectAll()
        {
            IEnumerable<OCR_FieldMappings> lst = null;
            using (var ctx = new OCR_FieldMappingsRepository())
            {
                lst = await ctx.GetOCR_FieldMappingsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedOCR_FieldMappings = new ObservableCollection<OCR_FieldMappings>(lst);
        }

 

		private string _keyFilter;
        public string KeyFilter
        {
            get
            {
                return _keyFilter;
            }
            set
            {
                _keyFilter = value;
				NotifyPropertyChanged(x => KeyFilter);
                FilterData();
                
            }
        }	

 

		private string _fieldFilter;
        public string FieldFilter
        {
            get
            {
                return _fieldFilter;
            }
            set
            {
                _fieldFilter = value;
				NotifyPropertyChanged(x => FieldFilter);
                FilterData();
                
            }
        }	

 

		private string _entityTypeFilter;
        public string EntityTypeFilter
        {
            get
            {
                return _entityTypeFilter;
            }
            set
            {
                _entityTypeFilter = value;
				NotifyPropertyChanged(x => EntityTypeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isRequiredFilter;
        public Boolean? IsRequiredFilter
        {
            get
            {
                return _isRequiredFilter;
            }
            set
            {
                _isRequiredFilter = value;
				NotifyPropertyChanged(x => IsRequiredFilter);
                FilterData();
                
            }
        }	

 

		private string _dataTypeFilter;
        public string DataTypeFilter
        {
            get
            {
                return _dataTypeFilter;
            }
            set
            {
                _dataTypeFilter = value;
				NotifyPropertyChanged(x => DataTypeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _appendValuesFilter;
        public Boolean? AppendValuesFilter
        {
            get
            {
                return _appendValuesFilter;
            }
            set
            {
                _appendValuesFilter = value;
				NotifyPropertyChanged(x => AppendValuesFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			OCR_FieldMappings.Refresh();
			NotifyPropertyChanged(x => this.OCR_FieldMappings);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(KeyFilter) == false)
						res.Append(" && " + string.Format("Key.Contains(\"{0}\")",  KeyFilter));						
 

									if(string.IsNullOrEmpty(FieldFilter) == false)
						res.Append(" && " + string.Format("Field.Contains(\"{0}\")",  FieldFilter));						
 

									if(string.IsNullOrEmpty(EntityTypeFilter) == false)
						res.Append(" && " + string.Format("EntityType.Contains(\"{0}\")",  EntityTypeFilter));						
 

									if(IsRequiredFilter.HasValue)
						res.Append(" && " + string.Format("IsRequired == {0}",  IsRequiredFilter));						
 

									if(string.IsNullOrEmpty(DataTypeFilter) == false)
						res.Append(" && " + string.Format("DataType.Contains(\"{0}\")",  DataTypeFilter));						
 

									if(AppendValuesFilter.HasValue)
						res.Append(" && " + string.Format("AppendValues == {0}",  AppendValuesFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<OCR_FieldMappings> lst = null;
            using (var ctx = new OCR_FieldMappingsRepository())
            {
                lst = await ctx.GetOCR_FieldMappingsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<OCR_FieldMappingsExcelLine, List<OCR_FieldMappingsExcelLine>>
            {
                dataToPrint = lst.Select(x => new OCR_FieldMappingsExcelLine
                {
 
                    Key = x.Key ,
                    
 
                    Field = x.Field ,
                    
 
                    EntityType = x.EntityType ,
                    
 
                    IsRequired = x.IsRequired ,
                    
 
                    DataType = x.DataType ,
                    
 
                    AppendValues = x.AppendValues 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class OCR_FieldMappingsExcelLine
        {
		 
                    public string Key { get; set; } 
                    
 
                    public string Field { get; set; } 
                    
 
                    public string EntityType { get; set; } 
                    
 
                    public bool IsRequired { get; set; } 
                    
 
                    public string DataType { get; set; } 
                    
 
                    public Nullable<bool> AppendValues { get; set; } 
                    
        }

		
    }
}
		

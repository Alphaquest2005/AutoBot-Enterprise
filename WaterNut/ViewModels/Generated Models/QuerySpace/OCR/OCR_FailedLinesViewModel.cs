// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;
using OCR.Client.Entities;
using OCR.Client.Repositories;
using SimpleMvvmToolkit;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class OCR_FailedLinesViewModel_AutoGen : ViewModelBase<OCR_FailedLinesViewModel_AutoGen>
	{

       private static readonly OCR_FailedLinesViewModel_AutoGen instance;
       static OCR_FailedLinesViewModel_AutoGen()
        {
            instance = new OCR_FailedLinesViewModel_AutoGen();
        }

       public static OCR_FailedLinesViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public OCR_FailedLinesViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<OCR_FailedLines>(MessageToken.CurrentOCR_FailedLinesChanged, OnCurrentOCR_FailedLinesChanged);
            RegisterToReceiveMessages(MessageToken.OCR_FailedLinesChanged, OnOCR_FailedLinesChanged);
			RegisterToReceiveMessages(MessageToken.OCR_FailedLinesFilterExpressionChanged, OnOCR_FailedLinesFilterExpressionChanged);

 
			RegisterToReceiveMessages<ImportErrors>(MessageToken.CurrentImportErrorsChanged, OnCurrentImportErrorsChanged);
 
			RegisterToReceiveMessages<Lines>(MessageToken.CurrentLinesChanged, OnCurrentOCR_LinesChanged);

 			// Recieve messages for Core Current Entities Changed
 

			OCR_FailedLines = new VirtualList<OCR_FailedLines>(vloader);
			OCR_FailedLines.LoadingStateChanged += OCR_FailedLines_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(OCR_FailedLines, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<OCR_FailedLines> _OCR_FailedLines = null;
        public VirtualList<OCR_FailedLines> OCR_FailedLines
        {
            get
            {
                return _OCR_FailedLines;
            }
            set
            {
                _OCR_FailedLines = value;
                NotifyPropertyChanged( x => x.OCR_FailedLines);
            }
        }

		 private void OnOCR_FailedLinesFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => OCR_FailedLines.Refresh()).ConfigureAwait(false);
            SelectedOCR_FailedLines.Clear();
            NotifyPropertyChanged(x => SelectedOCR_FailedLines);
            BeginSendMessage(MessageToken.SelectedOCR_FailedLinesChanged, new NotificationEventArgs(MessageToken.SelectedOCR_FailedLinesChanged));
        }

		void OCR_FailedLines_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (OCR_FailedLines.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => OCR_FailedLines);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("OCR_FailedLines | Error occured..." + OCR_FailedLines.LastLoadingError.Message);
                    NotifyPropertyChanged(x => OCR_FailedLines);
                    break;
            }
           
        }

		
		public readonly OCR_FailedLinesVirturalListLoader vloader = new OCR_FailedLinesVirturalListLoader();

		private ObservableCollection<OCR_FailedLines> _selectedOCR_FailedLines = new ObservableCollection<OCR_FailedLines>();
        public ObservableCollection<OCR_FailedLines> SelectedOCR_FailedLines
        {
            get
            {
                return _selectedOCR_FailedLines;
            }
            set
            {
                _selectedOCR_FailedLines = value;
				BeginSendMessage(MessageToken.SelectedOCR_FailedLinesChanged,
                                    new NotificationEventArgs(MessageToken.SelectedOCR_FailedLinesChanged));
				 NotifyPropertyChanged(x => SelectedOCR_FailedLines);
            }
        }

        internal virtual void OnCurrentOCR_FailedLinesChanged(object sender, NotificationEventArgs<OCR_FailedLines> e)
        {
            if(BaseViewModel.Instance.CurrentOCR_FailedLines != null) BaseViewModel.Instance.CurrentOCR_FailedLines.PropertyChanged += CurrentOCR_FailedLines__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentOCR_FailedLines);
        }   

            void CurrentOCR_FailedLines__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddImportErrors")
                   // {
                   //    if(ImportErrors.Contains(CurrentOCR_FailedLines.ImportErrors) == false) ImportErrors.Add(CurrentOCR_FailedLines.ImportErrors);
                    //}
                    //if (e.PropertyName == "AddOCR_Lines")
                   // {
                   //    if(Lines.Contains(CurrentOCR_FailedLines.OCR_Lines) == false) Lines.Add(CurrentOCR_FailedLines.OCR_Lines);
                    //}
                 } 
        internal virtual void OnOCR_FailedLinesChanged(object sender, NotificationEventArgs e)
        {
            _OCR_FailedLines.Refresh();
			NotifyPropertyChanged(x => this.OCR_FailedLines);
        }   


 	
		 internal virtual void OnCurrentImportErrorsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ImportErrors> e)
			{
			if(ViewCurrentImportErrors == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("DocSetAttachmentId == {0}", e.Data.Id.ToString());
                 }

				OCR_FailedLines.Refresh();
				NotifyPropertyChanged(x => this.OCR_FailedLines);
                // SendMessage(MessageToken.OCR_FailedLinesChanged, new NotificationEventArgs(MessageToken.OCR_FailedLinesChanged));
                			}
	
		 internal virtual void OnCurrentOCR_LinesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Lines> e)
			{
			if(ViewCurrentOCR_Lines == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("LineId == {0}", e.Data.Id.ToString());
                 }

				OCR_FailedLines.Refresh();
				NotifyPropertyChanged(x => this.OCR_FailedLines);
                // SendMessage(MessageToken.OCR_FailedLinesChanged, new NotificationEventArgs(MessageToken.OCR_FailedLinesChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentImportErrors = false;
         public bool ViewCurrentImportErrors
         {
             get
             {
                 return _viewCurrentImportErrors;
             }
             set
             {
                 _viewCurrentImportErrors = value;
                 NotifyPropertyChanged(x => x.ViewCurrentImportErrors);
                FilterData();
             }
         }
 	
		 bool _viewCurrentOCR_Lines = false;
         public bool ViewCurrentOCR_Lines
         {
             get
             {
                 return _viewCurrentOCR_Lines;
             }
             set
             {
                 _viewCurrentOCR_Lines = value;
                 NotifyPropertyChanged(x => x.ViewCurrentOCR_Lines);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_OCR_FailedLines.Refresh();
			NotifyPropertyChanged(x => this.OCR_FailedLines);
		}

		public async Task SelectAll()
        {
            IEnumerable<OCR_FailedLines> lst = null;
            using (var ctx = new OCR_FailedLinesRepository())
            {
                lst = await ctx.GetOCR_FailedLinesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedOCR_FailedLines = new ObservableCollection<OCR_FailedLines>(lst);
        }

 

		private Boolean? _resolvedFilter;
        public Boolean? ResolvedFilter
        {
            get
            {
                return _resolvedFilter;
            }
            set
            {
                _resolvedFilter = value;
				NotifyPropertyChanged(x => ResolvedFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			OCR_FailedLines.Refresh();
			NotifyPropertyChanged(x => this.OCR_FailedLines);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(ResolvedFilter.HasValue)
						res.Append(" && " + string.Format("Resolved == {0}",  ResolvedFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<OCR_FailedLines> lst = null;
            using (var ctx = new OCR_FailedLinesRepository())
            {
                lst = await ctx.GetOCR_FailedLinesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<OCR_FailedLinesExcelLine, List<OCR_FailedLinesExcelLine>>
            {
                dataToPrint = lst.Select(x => new OCR_FailedLinesExcelLine
                {
 
                    Resolved = x.Resolved 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class OCR_FailedLinesExcelLine
        {
		 
                    public bool Resolved { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class PartViewModel_AutoGen : ViewModelBase<PartViewModel_AutoGen>
	{

       private static readonly PartViewModel_AutoGen instance;
       static PartViewModel_AutoGen()
        {
            instance = new PartViewModel_AutoGen();
        }

       public static PartViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public PartViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<Part>(MessageToken.CurrentPartChanged, OnCurrentPartChanged);
            RegisterToReceiveMessages(MessageToken.PartExsChanged, OnPartExsChanged);
			RegisterToReceiveMessages(MessageToken.PartExsFilterExpressionChanged, OnPartExsFilterExpressionChanged);

 
			RegisterToReceiveMessages<Invoice>(MessageToken.CurrentInvoiceChanged, OnCurrentInvoiceChanged);

 			// Recieve messages for Core Current Entities Changed
 

			PartExs = new VirtualList<Part>(vloader);
			PartExs.LoadingStateChanged += PartExs_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(PartExs, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<Part> _PartExs = null;
        public VirtualList<Part> PartExs
        {
            get
            {
                return _PartExs;
            }
            set
            {
                _PartExs = value;
                NotifyPropertyChanged( x => x.PartExs);
            }
        }

		 private void OnPartExsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => PartExs.Refresh()).ConfigureAwait(false);
            SelectedPartExs.Clear();
            NotifyPropertyChanged(x => SelectedPartExs);
            BeginSendMessage(MessageToken.SelectedPartExsChanged, new NotificationEventArgs(MessageToken.SelectedPartExsChanged));
        }

		void PartExs_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (PartExs.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => PartExs);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("PartExs | Error occured..." + PartExs.LastLoadingError.Message);
                    NotifyPropertyChanged(x => PartExs);
                    break;
            }
           
        }

		
		public readonly PartVirturalListLoader vloader = new PartVirturalListLoader();

		private ObservableCollection<Part> _selectedPartExs = new ObservableCollection<Part>();
        public ObservableCollection<Part> SelectedPartExs
        {
            get
            {
                return _selectedPartExs;
            }
            set
            {
                _selectedPartExs = value;
				BeginSendMessage(MessageToken.SelectedPartExsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedPartExsChanged));
				 NotifyPropertyChanged(x => SelectedPartExs);
            }
        }

        internal virtual void OnCurrentPartChanged(object sender, NotificationEventArgs<Part> e)
        {
            if(BaseViewModel.Instance.CurrentPart != null) BaseViewModel.Instance.CurrentPart.PropertyChanged += CurrentPart__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentPart);
        }   

            void CurrentPart__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddInvoice")
                   // {
                   //    if(InvoiceExs.Contains(CurrentPart.Invoice) == false) InvoiceExs.Add(CurrentPart.Invoice);
                    //}
                 } 
        internal virtual void OnPartExsChanged(object sender, NotificationEventArgs e)
        {
            _PartExs.Refresh();
			NotifyPropertyChanged(x => this.PartExs);
        }   


 	
		 internal virtual void OnCurrentInvoiceChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Invoice> e)
			{
			if(ViewCurrentInvoice == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("InvoiceId == {0}", e.Data.Id.ToString());
                 }

				PartExs.Refresh();
				NotifyPropertyChanged(x => this.PartExs);
                // SendMessage(MessageToken.PartExsChanged, new NotificationEventArgs(MessageToken.PartExsChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentInvoice = false;
         public bool ViewCurrentInvoice
         {
             get
             {
                 return _viewCurrentInvoice;
             }
             set
             {
                 _viewCurrentInvoice = value;
                 NotifyPropertyChanged(x => x.ViewCurrentInvoice);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_PartExs.Refresh();
			NotifyPropertyChanged(x => this.PartExs);
		}

		public async Task SelectAll()
        {
            IEnumerable<Part> lst = null;
            using (var ctx = new PartRepository())
            {
                lst = await ctx.GetPartExsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedPartExs = new ObservableCollection<Part>(lst);
        }

 

		private string _nameFilter;
        public string NameFilter
        {
            get
            {
                return _nameFilter;
            }
            set
            {
                _nameFilter = value;
				NotifyPropertyChanged(x => NameFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _startMultiLineFilter;
        public Boolean? StartMultiLineFilter
        {
            get
            {
                return _startMultiLineFilter;
            }
            set
            {
                _startMultiLineFilter = value;
				NotifyPropertyChanged(x => StartMultiLineFilter);
                FilterData();
                
            }
        }	

 

		private string _startFilter;
        public string StartFilter
        {
            get
            {
                return _startFilter;
            }
            set
            {
                _startFilter = value;
				NotifyPropertyChanged(x => StartFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _endMultiLineFilter;
        public Boolean? EndMultiLineFilter
        {
            get
            {
                return _endMultiLineFilter;
            }
            set
            {
                _endMultiLineFilter = value;
				NotifyPropertyChanged(x => EndMultiLineFilter);
                FilterData();
                
            }
        }	

 

		private string _endFilter;
        public string EndFilter
        {
            get
            {
                return _endFilter;
            }
            set
            {
                _endFilter = value;
				NotifyPropertyChanged(x => EndFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isRecuringFilter;
        public Boolean? IsRecuringFilter
        {
            get
            {
                return _isRecuringFilter;
            }
            set
            {
                _isRecuringFilter = value;
				NotifyPropertyChanged(x => IsRecuringFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isCompositeFilter;
        public Boolean? IsCompositeFilter
        {
            get
            {
                return _isCompositeFilter;
            }
            set
            {
                _isCompositeFilter = value;
				NotifyPropertyChanged(x => IsCompositeFilter);
                FilterData();
                
            }
        }	

 

		private string _invoiceNameFilter;
        public string InvoiceNameFilter
        {
            get
            {
                return _invoiceNameFilter;
            }
            set
            {
                _invoiceNameFilter = value;
				NotifyPropertyChanged(x => InvoiceNameFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			PartExs.Refresh();
			NotifyPropertyChanged(x => this.PartExs);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(NameFilter) == false)
						res.Append(" && " + string.Format("Name.Contains(\"{0}\")",  NameFilter));						
 

									if(StartMultiLineFilter.HasValue)
						res.Append(" && " + string.Format("StartMultiLine == {0}",  StartMultiLineFilter));						
 

									if(string.IsNullOrEmpty(StartFilter) == false)
						res.Append(" && " + string.Format("Start.Contains(\"{0}\")",  StartFilter));						
 

									if(EndMultiLineFilter.HasValue)
						res.Append(" && " + string.Format("EndMultiLine == {0}",  EndMultiLineFilter));						
 

									if(string.IsNullOrEmpty(EndFilter) == false)
						res.Append(" && " + string.Format("End.Contains(\"{0}\")",  EndFilter));						
 

									if(IsRecuringFilter.HasValue)
						res.Append(" && " + string.Format("IsRecuring == {0}",  IsRecuringFilter));						
 

									if(IsCompositeFilter.HasValue)
						res.Append(" && " + string.Format("IsComposite == {0}",  IsCompositeFilter));						
 

									if(string.IsNullOrEmpty(InvoiceNameFilter) == false)
						res.Append(" && " + string.Format("InvoiceName.Contains(\"{0}\")",  InvoiceNameFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<Part> lst = null;
            using (var ctx = new PartRepository())
            {
                lst = await ctx.GetPartExsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<PartExcelLine, List<PartExcelLine>>
            {
                dataToPrint = lst.Select(x => new PartExcelLine
                {
 
                    Name = x.Name ,
                    
 
                    StartMultiLine = x.StartMultiLine ,
                    
 
                    Start = x.Start ,
                    
 
                    EndMultiLine = x.EndMultiLine ,
                    
 
                    End = x.End ,
                    
 
                    IsRecuring = x.IsRecuring ,
                    
 
                    IsComposite = x.IsComposite ,
                    
 
                    InvoiceName = x.InvoiceName 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class PartExcelLine
        {
		 
                    public string Name { get; set; } 
                    
 
                    public Nullable<bool> StartMultiLine { get; set; } 
                    
 
                    public string Start { get; set; } 
                    
 
                    public Nullable<bool> EndMultiLine { get; set; } 
                    
 
                    public string End { get; set; } 
                    
 
                    public Nullable<bool> IsRecuring { get; set; } 
                    
 
                    public Nullable<bool> IsComposite { get; set; } 
                    
 
                    public string InvoiceName { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;



namespace WaterNut.QuerySpace.OCR.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // CoreEntities.ViewModels.BaseViewModel
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class OCROnCreated: BaseViewModel
        {
           // Load Repository
                public OCROnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentEndIDChanged, OnCurrentEndIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFieldsIDChanged, OnCurrentFieldsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInvoicesIDChanged, OnCurrentInvoicesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentLinesIDChanged, OnCurrentLinesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentParentPartsIDChanged, OnCurrentParentPartsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentPartsIDChanged, OnCurrentPartsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentPartTypesIDChanged, OnCurrentPartTypesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentRecuringPartIDChanged, OnCurrentRecuringPartIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentRegExChainIDChanged, OnCurrentRegExChainIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentRegExParentIDChanged, OnCurrentRegExParentIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentRegularExpressionsIDChanged, OnCurrentRegularExpressionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentStartIDChanged, OnCurrentStartIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<End>(MessageToken.CurrentEndChanged, OnCurrentEndChanged);
                        RegisterToReceiveMessages<Fields>(MessageToken.CurrentFieldsChanged, OnCurrentFieldsChanged);
                        RegisterToReceiveMessages<Invoices>(MessageToken.CurrentInvoicesChanged, OnCurrentInvoicesChanged);
                        RegisterToReceiveMessages<Lines>(MessageToken.CurrentLinesChanged, OnCurrentLinesChanged);
                        RegisterToReceiveMessages<ParentParts>(MessageToken.CurrentParentPartsChanged, OnCurrentParentPartsChanged);
                        RegisterToReceiveMessages<Parts>(MessageToken.CurrentPartsChanged, OnCurrentPartsChanged);
                        RegisterToReceiveMessages<PartTypes>(MessageToken.CurrentPartTypesChanged, OnCurrentPartTypesChanged);
                        RegisterToReceiveMessages<RecuringPart>(MessageToken.CurrentRecuringPartChanged, OnCurrentRecuringPartChanged);
                        RegisterToReceiveMessages<RegExChain>(MessageToken.CurrentRegExChainChanged, OnCurrentRegExChainChanged);
                        RegisterToReceiveMessages<RegExParent>(MessageToken.CurrentRegExParentChanged, OnCurrentRegExParentChanged);
                        RegisterToReceiveMessages<RegularExpressions>(MessageToken.CurrentRegularExpressionsChanged, OnCurrentRegularExpressionsChanged);
                        RegisterToReceiveMessages<Start>(MessageToken.CurrentStartChanged, OnCurrentStartChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentEndIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EndRepository ctx = new EndRepository())
                            {
                                CurrentEnd = await ctx.GetEnd(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEnd);
                        }

                        private  string _currentEndID = "";
                        public string CurrentEndID
                        {
                            get
                            {
                                return _currentEndID;
                            }
                            set
                            {
                                if (_currentEndID != value)
                                {
                                    _currentEndID = value;
                                    if (!string.IsNullOrEmpty(_currentEndID)) BeginSendMessage(MessageToken.CurrentEndIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEndIDChanged, _currentEndID));
                                    NotifyPropertyChanged(x => this.CurrentEndID);  
                                }
                            }
                        }
                        internal async void OnCurrentFieldsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FieldsRepository ctx = new FieldsRepository())
                            {
                                CurrentFields = await ctx.GetFields(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFields);
                        }

                        private  string _currentFieldsID = "";
                        public string CurrentFieldsID
                        {
                            get
                            {
                                return _currentFieldsID;
                            }
                            set
                            {
                                if (_currentFieldsID != value)
                                {
                                    _currentFieldsID = value;
                                    if (!string.IsNullOrEmpty(_currentFieldsID)) BeginSendMessage(MessageToken.CurrentFieldsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFieldsIDChanged, _currentFieldsID));
                                    NotifyPropertyChanged(x => this.CurrentFieldsID);  
                                }
                            }
                        }
                        internal async void OnCurrentInvoicesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InvoicesRepository ctx = new InvoicesRepository())
                            {
                                CurrentInvoices = await ctx.GetInvoices(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInvoices);
                        }

                        private  string _currentInvoicesID = "";
                        public string CurrentInvoicesID
                        {
                            get
                            {
                                return _currentInvoicesID;
                            }
                            set
                            {
                                if (_currentInvoicesID != value)
                                {
                                    _currentInvoicesID = value;
                                    if (!string.IsNullOrEmpty(_currentInvoicesID)) BeginSendMessage(MessageToken.CurrentInvoicesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInvoicesIDChanged, _currentInvoicesID));
                                    NotifyPropertyChanged(x => this.CurrentInvoicesID);  
                                }
                            }
                        }
                        internal async void OnCurrentLinesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (LinesRepository ctx = new LinesRepository())
                            {
                                CurrentLines = await ctx.GetLines(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentLines);
                        }

                        private  string _currentLinesID = "";
                        public string CurrentLinesID
                        {
                            get
                            {
                                return _currentLinesID;
                            }
                            set
                            {
                                if (_currentLinesID != value)
                                {
                                    _currentLinesID = value;
                                    if (!string.IsNullOrEmpty(_currentLinesID)) BeginSendMessage(MessageToken.CurrentLinesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentLinesIDChanged, _currentLinesID));
                                    NotifyPropertyChanged(x => this.CurrentLinesID);  
                                }
                            }
                        }
                        internal async void OnCurrentParentPartsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ParentPartsRepository ctx = new ParentPartsRepository())
                            {
                                CurrentParentParts = await ctx.GetParentParts(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentParentParts);
                        }

                        private  string _currentParentPartsID = "";
                        public string CurrentParentPartsID
                        {
                            get
                            {
                                return _currentParentPartsID;
                            }
                            set
                            {
                                if (_currentParentPartsID != value)
                                {
                                    _currentParentPartsID = value;
                                    if (!string.IsNullOrEmpty(_currentParentPartsID)) BeginSendMessage(MessageToken.CurrentParentPartsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentParentPartsIDChanged, _currentParentPartsID));
                                    NotifyPropertyChanged(x => this.CurrentParentPartsID);  
                                }
                            }
                        }
                        internal async void OnCurrentPartsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (PartsRepository ctx = new PartsRepository())
                            {
                                CurrentParts = await ctx.GetParts(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentParts);
                        }

                        private  string _currentPartsID = "";
                        public string CurrentPartsID
                        {
                            get
                            {
                                return _currentPartsID;
                            }
                            set
                            {
                                if (_currentPartsID != value)
                                {
                                    _currentPartsID = value;
                                    if (!string.IsNullOrEmpty(_currentPartsID)) BeginSendMessage(MessageToken.CurrentPartsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentPartsIDChanged, _currentPartsID));
                                    NotifyPropertyChanged(x => this.CurrentPartsID);  
                                }
                            }
                        }
                        internal async void OnCurrentPartTypesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (PartTypesRepository ctx = new PartTypesRepository())
                            {
                                CurrentPartTypes = await ctx.GetPartTypes(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentPartTypes);
                        }

                        private  string _currentPartTypesID = "";
                        public string CurrentPartTypesID
                        {
                            get
                            {
                                return _currentPartTypesID;
                            }
                            set
                            {
                                if (_currentPartTypesID != value)
                                {
                                    _currentPartTypesID = value;
                                    if (!string.IsNullOrEmpty(_currentPartTypesID)) BeginSendMessage(MessageToken.CurrentPartTypesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentPartTypesIDChanged, _currentPartTypesID));
                                    NotifyPropertyChanged(x => this.CurrentPartTypesID);  
                                }
                            }
                        }
                        internal async void OnCurrentRecuringPartIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (RecuringPartRepository ctx = new RecuringPartRepository())
                            {
                                CurrentRecuringPart = await ctx.GetRecuringPart(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentRecuringPart);
                        }

                        private  string _currentRecuringPartID = "";
                        public string CurrentRecuringPartID
                        {
                            get
                            {
                                return _currentRecuringPartID;
                            }
                            set
                            {
                                if (_currentRecuringPartID != value)
                                {
                                    _currentRecuringPartID = value;
                                    if (!string.IsNullOrEmpty(_currentRecuringPartID)) BeginSendMessage(MessageToken.CurrentRecuringPartIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentRecuringPartIDChanged, _currentRecuringPartID));
                                    NotifyPropertyChanged(x => this.CurrentRecuringPartID);  
                                }
                            }
                        }
                        internal async void OnCurrentRegExChainIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (RegExChainRepository ctx = new RegExChainRepository())
                            {
                                CurrentRegExChain = await ctx.GetRegExChain(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentRegExChain);
                        }

                        private  string _currentRegExChainID = "";
                        public string CurrentRegExChainID
                        {
                            get
                            {
                                return _currentRegExChainID;
                            }
                            set
                            {
                                if (_currentRegExChainID != value)
                                {
                                    _currentRegExChainID = value;
                                    if (!string.IsNullOrEmpty(_currentRegExChainID)) BeginSendMessage(MessageToken.CurrentRegExChainIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentRegExChainIDChanged, _currentRegExChainID));
                                    NotifyPropertyChanged(x => this.CurrentRegExChainID);  
                                }
                            }
                        }
                        internal async void OnCurrentRegExParentIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (RegExParentRepository ctx = new RegExParentRepository())
                            {
                                CurrentRegExParent = await ctx.GetRegExParent(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentRegExParent);
                        }

                        private  string _currentRegExParentID = "";
                        public string CurrentRegExParentID
                        {
                            get
                            {
                                return _currentRegExParentID;
                            }
                            set
                            {
                                if (_currentRegExParentID != value)
                                {
                                    _currentRegExParentID = value;
                                    if (!string.IsNullOrEmpty(_currentRegExParentID)) BeginSendMessage(MessageToken.CurrentRegExParentIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentRegExParentIDChanged, _currentRegExParentID));
                                    NotifyPropertyChanged(x => this.CurrentRegExParentID);  
                                }
                            }
                        }
                        internal async void OnCurrentRegularExpressionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (RegularExpressionsRepository ctx = new RegularExpressionsRepository())
                            {
                                CurrentRegularExpressions = await ctx.GetRegularExpressions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentRegularExpressions);
                        }

                        private  string _currentRegularExpressionsID = "";
                        public string CurrentRegularExpressionsID
                        {
                            get
                            {
                                return _currentRegularExpressionsID;
                            }
                            set
                            {
                                if (_currentRegularExpressionsID != value)
                                {
                                    _currentRegularExpressionsID = value;
                                    if (!string.IsNullOrEmpty(_currentRegularExpressionsID)) BeginSendMessage(MessageToken.CurrentRegularExpressionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentRegularExpressionsIDChanged, _currentRegularExpressionsID));
                                    NotifyPropertyChanged(x => this.CurrentRegularExpressionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentStartIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (StartRepository ctx = new StartRepository())
                            {
                                CurrentStart = await ctx.GetStart(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentStart);
                        }

                        private  string _currentStartID = "";
                        public string CurrentStartID
                        {
                            get
                            {
                                return _currentStartID;
                            }
                            set
                            {
                                if (_currentStartID != value)
                                {
                                    _currentStartID = value;
                                    if (!string.IsNullOrEmpty(_currentStartID)) BeginSendMessage(MessageToken.CurrentStartIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentStartIDChanged, _currentStartID));
                                    NotifyPropertyChanged(x => this.CurrentStartID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentEndChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<End> e)
        {
            //CurrentEnd = e.Data;
            NotifyPropertyChanged(m => this.CurrentEnd);
        }

        private  End _currentEnd;
        public End CurrentEnd
        {
            get
            {
                return _currentEnd;
            }
            set
            {
                if (_currentEnd != value)
                {
                    _currentEnd = value;
                    BeginSendMessage(MessageToken.CurrentEndChanged,
                                                     new NotificationEventArgs<End>(MessageToken.CurrentEndChanged, _currentEnd)); 
                    NotifyPropertyChanged(x => this.CurrentEnd);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<End> _vcurrentEnd;
        public VirtualListItem<End> VCurrentEnd
        {
            get
            {
                return _vcurrentEnd;
            }
            set
            {
                if (_vcurrentEnd != value)
                {
                    _vcurrentEnd = value;
					if(_vcurrentEnd != null) CurrentEnd = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEnd);                    
                }
            }
        }



                     
       

        internal void OnCurrentFieldsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Fields> e)
        {
            //CurrentFields = e.Data;
            NotifyPropertyChanged(m => this.CurrentFields);
        }

        private  Fields _currentFields;
        public Fields CurrentFields
        {
            get
            {
                return _currentFields;
            }
            set
            {
                if (_currentFields != value)
                {
                    _currentFields = value;
                    BeginSendMessage(MessageToken.CurrentFieldsChanged,
                                                     new NotificationEventArgs<Fields>(MessageToken.CurrentFieldsChanged, _currentFields)); 
                    NotifyPropertyChanged(x => this.CurrentFields);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<Fields> _vcurrentFields;
        public VirtualListItem<Fields> VCurrentFields
        {
            get
            {
                return _vcurrentFields;
            }
            set
            {
                if (_vcurrentFields != value)
                {
                    _vcurrentFields = value;
					if(_vcurrentFields != null) CurrentFields = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFields);                    
                }
            }
        }



                     
       

        internal void OnCurrentInvoicesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Invoices> e)
        {
            //CurrentInvoices = e.Data;
            NotifyPropertyChanged(m => this.CurrentInvoices);
        }

        private  Invoices _currentInvoices;
        public Invoices CurrentInvoices
        {
            get
            {
                return _currentInvoices;
            }
            set
            {
                if (_currentInvoices != value)
                {
                    _currentInvoices = value;
                    BeginSendMessage(MessageToken.CurrentInvoicesChanged,
                                                     new NotificationEventArgs<Invoices>(MessageToken.CurrentInvoicesChanged, _currentInvoices)); 
                    NotifyPropertyChanged(x => this.CurrentInvoices);    
                    // all current navigation properties = null
                 CurrentParts = null;
   
                }
            }
        }

		VirtualListItem<Invoices> _vcurrentInvoices;
        public VirtualListItem<Invoices> VCurrentInvoices
        {
            get
            {
                return _vcurrentInvoices;
            }
            set
            {
                if (_vcurrentInvoices != value)
                {
                    _vcurrentInvoices = value;
					if(_vcurrentInvoices != null) CurrentInvoices = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInvoices);                    
                }
            }
        }



                     
       

        internal void OnCurrentLinesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Lines> e)
        {
            //CurrentLines = e.Data;
            NotifyPropertyChanged(m => this.CurrentLines);
        }

        private  Lines _currentLines;
        public Lines CurrentLines
        {
            get
            {
                return _currentLines;
            }
            set
            {
                if (_currentLines != value)
                {
                    _currentLines = value;
                    BeginSendMessage(MessageToken.CurrentLinesChanged,
                                                     new NotificationEventArgs<Lines>(MessageToken.CurrentLinesChanged, _currentLines)); 
                    NotifyPropertyChanged(x => this.CurrentLines);    
                    // all current navigation properties = null
                 CurrentFields = null;
   
                }
            }
        }

		VirtualListItem<Lines> _vcurrentLines;
        public VirtualListItem<Lines> VCurrentLines
        {
            get
            {
                return _vcurrentLines;
            }
            set
            {
                if (_vcurrentLines != value)
                {
                    _vcurrentLines = value;
					if(_vcurrentLines != null) CurrentLines = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentLines);                    
                }
            }
        }



                     
       

        internal void OnCurrentParentPartsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ParentParts> e)
        {
            //CurrentParentParts = e.Data;
            NotifyPropertyChanged(m => this.CurrentParentParts);
        }

        private  ParentParts _currentParentParts;
        public ParentParts CurrentParentParts
        {
            get
            {
                return _currentParentParts;
            }
            set
            {
                if (_currentParentParts != value)
                {
                    _currentParentParts = value;
                    BeginSendMessage(MessageToken.CurrentParentPartsChanged,
                                                     new NotificationEventArgs<ParentParts>(MessageToken.CurrentParentPartsChanged, _currentParentParts)); 
                    NotifyPropertyChanged(x => this.CurrentParentParts);    
                    // all current navigation properties = null
                 CurrentParts = null;
   
                }
            }
        }

		VirtualListItem<ParentParts> _vcurrentParentParts;
        public VirtualListItem<ParentParts> VCurrentParentParts
        {
            get
            {
                return _vcurrentParentParts;
            }
            set
            {
                if (_vcurrentParentParts != value)
                {
                    _vcurrentParentParts = value;
					if(_vcurrentParentParts != null) CurrentParentParts = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentParentParts);                    
                }
            }
        }



                     
       

        internal void OnCurrentPartsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Parts> e)
        {
            //CurrentParts = e.Data;
            NotifyPropertyChanged(m => this.CurrentParts);
        }

        private  Parts _currentParts;
        public Parts CurrentParts
        {
            get
            {
                return _currentParts;
            }
            set
            {
                if (_currentParts != value)
                {
                    _currentParts = value;
                    BeginSendMessage(MessageToken.CurrentPartsChanged,
                                                     new NotificationEventArgs<Parts>(MessageToken.CurrentPartsChanged, _currentParts)); 
                    NotifyPropertyChanged(x => this.CurrentParts);    
                    // all current navigation properties = null
                 CurrentEnd = null;
                 CurrentStart = null;
                 CurrentLines = null;
                 CurrentRecuringPart = null;
                 CurrentParentParts = null;
   
                }
            }
        }

		VirtualListItem<Parts> _vcurrentParts;
        public VirtualListItem<Parts> VCurrentParts
        {
            get
            {
                return _vcurrentParts;
            }
            set
            {
                if (_vcurrentParts != value)
                {
                    _vcurrentParts = value;
					if(_vcurrentParts != null) CurrentParts = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentParts);                    
                }
            }
        }



                     
       

        internal void OnCurrentPartTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<PartTypes> e)
        {
            //CurrentPartTypes = e.Data;
            NotifyPropertyChanged(m => this.CurrentPartTypes);
        }

        private  PartTypes _currentPartTypes;
        public PartTypes CurrentPartTypes
        {
            get
            {
                return _currentPartTypes;
            }
            set
            {
                if (_currentPartTypes != value)
                {
                    _currentPartTypes = value;
                    BeginSendMessage(MessageToken.CurrentPartTypesChanged,
                                                     new NotificationEventArgs<PartTypes>(MessageToken.CurrentPartTypesChanged, _currentPartTypes)); 
                    NotifyPropertyChanged(x => this.CurrentPartTypes);    
                    // all current navigation properties = null
                 CurrentParts = null;
   
                }
            }
        }

		VirtualListItem<PartTypes> _vcurrentPartTypes;
        public VirtualListItem<PartTypes> VCurrentPartTypes
        {
            get
            {
                return _vcurrentPartTypes;
            }
            set
            {
                if (_vcurrentPartTypes != value)
                {
                    _vcurrentPartTypes = value;
					if(_vcurrentPartTypes != null) CurrentPartTypes = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentPartTypes);                    
                }
            }
        }



                     
       

        internal void OnCurrentRecuringPartChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RecuringPart> e)
        {
            //CurrentRecuringPart = e.Data;
            NotifyPropertyChanged(m => this.CurrentRecuringPart);
        }

        private  RecuringPart _currentRecuringPart;
        public RecuringPart CurrentRecuringPart
        {
            get
            {
                return _currentRecuringPart;
            }
            set
            {
                if (_currentRecuringPart != value)
                {
                    _currentRecuringPart = value;
                    BeginSendMessage(MessageToken.CurrentRecuringPartChanged,
                                                     new NotificationEventArgs<RecuringPart>(MessageToken.CurrentRecuringPartChanged, _currentRecuringPart)); 
                    NotifyPropertyChanged(x => this.CurrentRecuringPart);    
                    // all current navigation properties = null
                 CurrentParts = null;
   
                }
            }
        }

		VirtualListItem<RecuringPart> _vcurrentRecuringPart;
        public VirtualListItem<RecuringPart> VCurrentRecuringPart
        {
            get
            {
                return _vcurrentRecuringPart;
            }
            set
            {
                if (_vcurrentRecuringPart != value)
                {
                    _vcurrentRecuringPart = value;
					if(_vcurrentRecuringPart != null) CurrentRecuringPart = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentRecuringPart);                    
                }
            }
        }



                     
       

        internal void OnCurrentRegExChainChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegExChain> e)
        {
            //CurrentRegExChain = e.Data;
            NotifyPropertyChanged(m => this.CurrentRegExChain);
        }

        private  RegExChain _currentRegExChain;
        public RegExChain CurrentRegExChain
        {
            get
            {
                return _currentRegExChain;
            }
            set
            {
                if (_currentRegExChain != value)
                {
                    _currentRegExChain = value;
                    BeginSendMessage(MessageToken.CurrentRegExChainChanged,
                                                     new NotificationEventArgs<RegExChain>(MessageToken.CurrentRegExChainChanged, _currentRegExChain)); 
                    NotifyPropertyChanged(x => this.CurrentRegExChain);    
                    // all current navigation properties = null
                 CurrentEnd = null;
                 CurrentStart = null;
                 CurrentLines = null;
                 CurrentRegExParent = null;
   
                }
            }
        }

		VirtualListItem<RegExChain> _vcurrentRegExChain;
        public VirtualListItem<RegExChain> VCurrentRegExChain
        {
            get
            {
                return _vcurrentRegExChain;
            }
            set
            {
                if (_vcurrentRegExChain != value)
                {
                    _vcurrentRegExChain = value;
					if(_vcurrentRegExChain != null) CurrentRegExChain = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentRegExChain);                    
                }
            }
        }



                     
       

        internal void OnCurrentRegExParentChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegExParent> e)
        {
            //CurrentRegExParent = e.Data;
            NotifyPropertyChanged(m => this.CurrentRegExParent);
        }

        private  RegExParent _currentRegExParent;
        public RegExParent CurrentRegExParent
        {
            get
            {
                return _currentRegExParent;
            }
            set
            {
                if (_currentRegExParent != value)
                {
                    _currentRegExParent = value;
                    BeginSendMessage(MessageToken.CurrentRegExParentChanged,
                                                     new NotificationEventArgs<RegExParent>(MessageToken.CurrentRegExParentChanged, _currentRegExParent)); 
                    NotifyPropertyChanged(x => this.CurrentRegExParent);    
                    // all current navigation properties = null
                 CurrentRegExChain = null;
   
                }
            }
        }

		VirtualListItem<RegExParent> _vcurrentRegExParent;
        public VirtualListItem<RegExParent> VCurrentRegExParent
        {
            get
            {
                return _vcurrentRegExParent;
            }
            set
            {
                if (_vcurrentRegExParent != value)
                {
                    _vcurrentRegExParent = value;
					if(_vcurrentRegExParent != null) CurrentRegExParent = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentRegExParent);                    
                }
            }
        }



                     
       

        internal void OnCurrentRegularExpressionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegularExpressions> e)
        {
            //CurrentRegularExpressions = e.Data;
            NotifyPropertyChanged(m => this.CurrentRegularExpressions);
        }

        private  RegularExpressions _currentRegularExpressions;
        public RegularExpressions CurrentRegularExpressions
        {
            get
            {
                return _currentRegularExpressions;
            }
            set
            {
                if (_currentRegularExpressions != value)
                {
                    _currentRegularExpressions = value;
                    BeginSendMessage(MessageToken.CurrentRegularExpressionsChanged,
                                                     new NotificationEventArgs<RegularExpressions>(MessageToken.CurrentRegularExpressionsChanged, _currentRegularExpressions)); 
                    NotifyPropertyChanged(x => this.CurrentRegularExpressions);    
                    // all current navigation properties = null
                 CurrentRegExChain = null;
   
                }
            }
        }

		VirtualListItem<RegularExpressions> _vcurrentRegularExpressions;
        public VirtualListItem<RegularExpressions> VCurrentRegularExpressions
        {
            get
            {
                return _vcurrentRegularExpressions;
            }
            set
            {
                if (_vcurrentRegularExpressions != value)
                {
                    _vcurrentRegularExpressions = value;
					if(_vcurrentRegularExpressions != null) CurrentRegularExpressions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentRegularExpressions);                    
                }
            }
        }



                     
       

        internal void OnCurrentStartChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Start> e)
        {
            //CurrentStart = e.Data;
            NotifyPropertyChanged(m => this.CurrentStart);
        }

        private  Start _currentStart;
        public Start CurrentStart
        {
            get
            {
                return _currentStart;
            }
            set
            {
                if (_currentStart != value)
                {
                    _currentStart = value;
                    BeginSendMessage(MessageToken.CurrentStartChanged,
                                                     new NotificationEventArgs<Start>(MessageToken.CurrentStartChanged, _currentStart)); 
                    NotifyPropertyChanged(x => this.CurrentStart);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<Start> _vcurrentStart;
        public VirtualListItem<Start> VCurrentStart
        {
            get
            {
                return _vcurrentStart;
            }
            set
            {
                if (_vcurrentStart != value)
                {
                    _vcurrentStart = value;
					if(_vcurrentStart != null) CurrentStart = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentStart);                    
                }
            }
        }






        static OCROnCreated newOCROnCreated = new OCROnCreated();
    }		
}

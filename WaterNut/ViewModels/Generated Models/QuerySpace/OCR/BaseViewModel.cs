// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;



namespace WaterNut.QuerySpace.OCR.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // CoreEntities.ViewModels.BaseViewModel
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class OCROnCreated: BaseViewModel
        {
           // Load Repository
                public OCROnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentLineTypeFieldMappingsIDChanged, OnCurrentLineTypeFieldMappingsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentLineTypesIDChanged, OnCurrentLineTypesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentRegExChainIDChanged, OnCurrentRegExChainIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentRegularExpressionsIDChanged, OnCurrentRegularExpressionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTemplateLinesIDChanged, OnCurrentTemplateLinesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTemplateLinesRegularExpressionsIDChanged, OnCurrentTemplateLinesRegularExpressionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTemplateRegularExpressionsIDChanged, OnCurrentTemplateRegularExpressionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTemplatesIDChanged, OnCurrentTemplatesIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<LineTypeFieldMappings>(MessageToken.CurrentLineTypeFieldMappingsChanged, OnCurrentLineTypeFieldMappingsChanged);
                        RegisterToReceiveMessages<LineTypes>(MessageToken.CurrentLineTypesChanged, OnCurrentLineTypesChanged);
                        RegisterToReceiveMessages<RegExChain>(MessageToken.CurrentRegExChainChanged, OnCurrentRegExChainChanged);
                        RegisterToReceiveMessages<RegularExpressions>(MessageToken.CurrentRegularExpressionsChanged, OnCurrentRegularExpressionsChanged);
                        RegisterToReceiveMessages<TemplateLines>(MessageToken.CurrentTemplateLinesChanged, OnCurrentTemplateLinesChanged);
                        RegisterToReceiveMessages<TemplateLinesRegularExpressions>(MessageToken.CurrentTemplateLinesRegularExpressionsChanged, OnCurrentTemplateLinesRegularExpressionsChanged);
                        RegisterToReceiveMessages<TemplateRegularExpressions>(MessageToken.CurrentTemplateRegularExpressionsChanged, OnCurrentTemplateRegularExpressionsChanged);
                        RegisterToReceiveMessages<Templates>(MessageToken.CurrentTemplatesChanged, OnCurrentTemplatesChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentLineTypeFieldMappingsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (LineTypeFieldMappingsRepository ctx = new LineTypeFieldMappingsRepository())
                            {
                                CurrentLineTypeFieldMappings = await ctx.GetLineTypeFieldMappings(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentLineTypeFieldMappings);
                        }

                        private  string _currentLineTypeFieldMappingsID = "";
                        public string CurrentLineTypeFieldMappingsID
                        {
                            get
                            {
                                return _currentLineTypeFieldMappingsID;
                            }
                            set
                            {
                                if (_currentLineTypeFieldMappingsID != value)
                                {
                                    _currentLineTypeFieldMappingsID = value;
                                    if (!string.IsNullOrEmpty(_currentLineTypeFieldMappingsID)) BeginSendMessage(MessageToken.CurrentLineTypeFieldMappingsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentLineTypeFieldMappingsIDChanged, _currentLineTypeFieldMappingsID));
                                    NotifyPropertyChanged(x => this.CurrentLineTypeFieldMappingsID);  
                                }
                            }
                        }
                        internal async void OnCurrentLineTypesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (LineTypesRepository ctx = new LineTypesRepository())
                            {
                                CurrentLineTypes = await ctx.GetLineTypes(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentLineTypes);
                        }

                        private  string _currentLineTypesID = "";
                        public string CurrentLineTypesID
                        {
                            get
                            {
                                return _currentLineTypesID;
                            }
                            set
                            {
                                if (_currentLineTypesID != value)
                                {
                                    _currentLineTypesID = value;
                                    if (!string.IsNullOrEmpty(_currentLineTypesID)) BeginSendMessage(MessageToken.CurrentLineTypesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentLineTypesIDChanged, _currentLineTypesID));
                                    NotifyPropertyChanged(x => this.CurrentLineTypesID);  
                                }
                            }
                        }
                        internal async void OnCurrentRegExChainIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (RegExChainRepository ctx = new RegExChainRepository())
                            {
                                CurrentRegExChain = await ctx.GetRegExChain(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentRegExChain);
                        }

                        private  string _currentRegExChainID = "";
                        public string CurrentRegExChainID
                        {
                            get
                            {
                                return _currentRegExChainID;
                            }
                            set
                            {
                                if (_currentRegExChainID != value)
                                {
                                    _currentRegExChainID = value;
                                    if (!string.IsNullOrEmpty(_currentRegExChainID)) BeginSendMessage(MessageToken.CurrentRegExChainIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentRegExChainIDChanged, _currentRegExChainID));
                                    NotifyPropertyChanged(x => this.CurrentRegExChainID);  
                                }
                            }
                        }
                        internal async void OnCurrentRegularExpressionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (RegularExpressionsRepository ctx = new RegularExpressionsRepository())
                            {
                                CurrentRegularExpressions = await ctx.GetRegularExpressions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentRegularExpressions);
                        }

                        private  string _currentRegularExpressionsID = "";
                        public string CurrentRegularExpressionsID
                        {
                            get
                            {
                                return _currentRegularExpressionsID;
                            }
                            set
                            {
                                if (_currentRegularExpressionsID != value)
                                {
                                    _currentRegularExpressionsID = value;
                                    if (!string.IsNullOrEmpty(_currentRegularExpressionsID)) BeginSendMessage(MessageToken.CurrentRegularExpressionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentRegularExpressionsIDChanged, _currentRegularExpressionsID));
                                    NotifyPropertyChanged(x => this.CurrentRegularExpressionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTemplateLinesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TemplateLinesRepository ctx = new TemplateLinesRepository())
                            {
                                CurrentTemplateLines = await ctx.GetTemplateLines(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTemplateLines);
                        }

                        private  string _currentTemplateLinesID = "";
                        public string CurrentTemplateLinesID
                        {
                            get
                            {
                                return _currentTemplateLinesID;
                            }
                            set
                            {
                                if (_currentTemplateLinesID != value)
                                {
                                    _currentTemplateLinesID = value;
                                    if (!string.IsNullOrEmpty(_currentTemplateLinesID)) BeginSendMessage(MessageToken.CurrentTemplateLinesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTemplateLinesIDChanged, _currentTemplateLinesID));
                                    NotifyPropertyChanged(x => this.CurrentTemplateLinesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTemplateLinesRegularExpressionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TemplateLinesRegularExpressionsRepository ctx = new TemplateLinesRegularExpressionsRepository())
                            {
                                CurrentTemplateLinesRegularExpressions = await ctx.GetTemplateLinesRegularExpressions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTemplateLinesRegularExpressions);
                        }

                        private  string _currentTemplateLinesRegularExpressionsID = "";
                        public string CurrentTemplateLinesRegularExpressionsID
                        {
                            get
                            {
                                return _currentTemplateLinesRegularExpressionsID;
                            }
                            set
                            {
                                if (_currentTemplateLinesRegularExpressionsID != value)
                                {
                                    _currentTemplateLinesRegularExpressionsID = value;
                                    if (!string.IsNullOrEmpty(_currentTemplateLinesRegularExpressionsID)) BeginSendMessage(MessageToken.CurrentTemplateLinesRegularExpressionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTemplateLinesRegularExpressionsIDChanged, _currentTemplateLinesRegularExpressionsID));
                                    NotifyPropertyChanged(x => this.CurrentTemplateLinesRegularExpressionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTemplateRegularExpressionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TemplateRegularExpressionsRepository ctx = new TemplateRegularExpressionsRepository())
                            {
                                CurrentTemplateRegularExpressions = await ctx.GetTemplateRegularExpressions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTemplateRegularExpressions);
                        }

                        private  string _currentTemplateRegularExpressionsID = "";
                        public string CurrentTemplateRegularExpressionsID
                        {
                            get
                            {
                                return _currentTemplateRegularExpressionsID;
                            }
                            set
                            {
                                if (_currentTemplateRegularExpressionsID != value)
                                {
                                    _currentTemplateRegularExpressionsID = value;
                                    if (!string.IsNullOrEmpty(_currentTemplateRegularExpressionsID)) BeginSendMessage(MessageToken.CurrentTemplateRegularExpressionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTemplateRegularExpressionsIDChanged, _currentTemplateRegularExpressionsID));
                                    NotifyPropertyChanged(x => this.CurrentTemplateRegularExpressionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTemplatesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TemplatesRepository ctx = new TemplatesRepository())
                            {
                                CurrentTemplates = await ctx.GetTemplates(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTemplates);
                        }

                        private  string _currentTemplatesID = "";
                        public string CurrentTemplatesID
                        {
                            get
                            {
                                return _currentTemplatesID;
                            }
                            set
                            {
                                if (_currentTemplatesID != value)
                                {
                                    _currentTemplatesID = value;
                                    if (!string.IsNullOrEmpty(_currentTemplatesID)) BeginSendMessage(MessageToken.CurrentTemplatesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTemplatesIDChanged, _currentTemplatesID));
                                    NotifyPropertyChanged(x => this.CurrentTemplatesID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentLineTypeFieldMappingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<LineTypeFieldMappings> e)
        {
            //CurrentLineTypeFieldMappings = e.Data;
            NotifyPropertyChanged(m => this.CurrentLineTypeFieldMappings);
        }

        private  LineTypeFieldMappings _currentLineTypeFieldMappings;
        public LineTypeFieldMappings CurrentLineTypeFieldMappings
        {
            get
            {
                return _currentLineTypeFieldMappings;
            }
            set
            {
                if (_currentLineTypeFieldMappings != value)
                {
                    _currentLineTypeFieldMappings = value;
                    BeginSendMessage(MessageToken.CurrentLineTypeFieldMappingsChanged,
                                                     new NotificationEventArgs<LineTypeFieldMappings>(MessageToken.CurrentLineTypeFieldMappingsChanged, _currentLineTypeFieldMappings)); 
                    NotifyPropertyChanged(x => this.CurrentLineTypeFieldMappings);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<LineTypeFieldMappings> _vcurrentLineTypeFieldMappings;
        public VirtualListItem<LineTypeFieldMappings> VCurrentLineTypeFieldMappings
        {
            get
            {
                return _vcurrentLineTypeFieldMappings;
            }
            set
            {
                if (_vcurrentLineTypeFieldMappings != value)
                {
                    _vcurrentLineTypeFieldMappings = value;
					if(_vcurrentLineTypeFieldMappings != null) CurrentLineTypeFieldMappings = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentLineTypeFieldMappings);                    
                }
            }
        }



                     
       

        internal void OnCurrentLineTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<LineTypes> e)
        {
            //CurrentLineTypes = e.Data;
            NotifyPropertyChanged(m => this.CurrentLineTypes);
        }

        private  LineTypes _currentLineTypes;
        public LineTypes CurrentLineTypes
        {
            get
            {
                return _currentLineTypes;
            }
            set
            {
                if (_currentLineTypes != value)
                {
                    _currentLineTypes = value;
                    BeginSendMessage(MessageToken.CurrentLineTypesChanged,
                                                     new NotificationEventArgs<LineTypes>(MessageToken.CurrentLineTypesChanged, _currentLineTypes)); 
                    NotifyPropertyChanged(x => this.CurrentLineTypes);    
                    // all current navigation properties = null
                 CurrentLineTypeFieldMappings = null;
                 CurrentTemplateLines = null;
   
                }
            }
        }

		VirtualListItem<LineTypes> _vcurrentLineTypes;
        public VirtualListItem<LineTypes> VCurrentLineTypes
        {
            get
            {
                return _vcurrentLineTypes;
            }
            set
            {
                if (_vcurrentLineTypes != value)
                {
                    _vcurrentLineTypes = value;
					if(_vcurrentLineTypes != null) CurrentLineTypes = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentLineTypes);                    
                }
            }
        }



                     
       

        internal void OnCurrentRegExChainChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegExChain> e)
        {
            //CurrentRegExChain = e.Data;
            NotifyPropertyChanged(m => this.CurrentRegExChain);
        }

        private  RegExChain _currentRegExChain;
        public RegExChain CurrentRegExChain
        {
            get
            {
                return _currentRegExChain;
            }
            set
            {
                if (_currentRegExChain != value)
                {
                    _currentRegExChain = value;
                    BeginSendMessage(MessageToken.CurrentRegExChainChanged,
                                                     new NotificationEventArgs<RegExChain>(MessageToken.CurrentRegExChainChanged, _currentRegExChain)); 
                    NotifyPropertyChanged(x => this.CurrentRegExChain);    
                    // all current navigation properties = null
                 CurrentTemplateLinesRegularExpressions = null;
                 CurrentTemplateRegularExpressions = null;
   
                }
            }
        }

		VirtualListItem<RegExChain> _vcurrentRegExChain;
        public VirtualListItem<RegExChain> VCurrentRegExChain
        {
            get
            {
                return _vcurrentRegExChain;
            }
            set
            {
                if (_vcurrentRegExChain != value)
                {
                    _vcurrentRegExChain = value;
					if(_vcurrentRegExChain != null) CurrentRegExChain = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentRegExChain);                    
                }
            }
        }



                     
       

        internal void OnCurrentRegularExpressionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegularExpressions> e)
        {
            //CurrentRegularExpressions = e.Data;
            NotifyPropertyChanged(m => this.CurrentRegularExpressions);
        }

        private  RegularExpressions _currentRegularExpressions;
        public RegularExpressions CurrentRegularExpressions
        {
            get
            {
                return _currentRegularExpressions;
            }
            set
            {
                if (_currentRegularExpressions != value)
                {
                    _currentRegularExpressions = value;
                    BeginSendMessage(MessageToken.CurrentRegularExpressionsChanged,
                                                     new NotificationEventArgs<RegularExpressions>(MessageToken.CurrentRegularExpressionsChanged, _currentRegularExpressions)); 
                    NotifyPropertyChanged(x => this.CurrentRegularExpressions);    
                    // all current navigation properties = null
                 CurrentRegExChain = null;
   
                }
            }
        }

		VirtualListItem<RegularExpressions> _vcurrentRegularExpressions;
        public VirtualListItem<RegularExpressions> VCurrentRegularExpressions
        {
            get
            {
                return _vcurrentRegularExpressions;
            }
            set
            {
                if (_vcurrentRegularExpressions != value)
                {
                    _vcurrentRegularExpressions = value;
					if(_vcurrentRegularExpressions != null) CurrentRegularExpressions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentRegularExpressions);                    
                }
            }
        }



                     
       

        internal void OnCurrentTemplateLinesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TemplateLines> e)
        {
            //CurrentTemplateLines = e.Data;
            NotifyPropertyChanged(m => this.CurrentTemplateLines);
        }

        private  TemplateLines _currentTemplateLines;
        public TemplateLines CurrentTemplateLines
        {
            get
            {
                return _currentTemplateLines;
            }
            set
            {
                if (_currentTemplateLines != value)
                {
                    _currentTemplateLines = value;
                    BeginSendMessage(MessageToken.CurrentTemplateLinesChanged,
                                                     new NotificationEventArgs<TemplateLines>(MessageToken.CurrentTemplateLinesChanged, _currentTemplateLines)); 
                    NotifyPropertyChanged(x => this.CurrentTemplateLines);    
                    // all current navigation properties = null
                 CurrentTemplateLinesRegularExpressions = null;
   
                }
            }
        }

		VirtualListItem<TemplateLines> _vcurrentTemplateLines;
        public VirtualListItem<TemplateLines> VCurrentTemplateLines
        {
            get
            {
                return _vcurrentTemplateLines;
            }
            set
            {
                if (_vcurrentTemplateLines != value)
                {
                    _vcurrentTemplateLines = value;
					if(_vcurrentTemplateLines != null) CurrentTemplateLines = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTemplateLines);                    
                }
            }
        }



                     
       

        internal void OnCurrentTemplateLinesRegularExpressionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TemplateLinesRegularExpressions> e)
        {
            //CurrentTemplateLinesRegularExpressions = e.Data;
            NotifyPropertyChanged(m => this.CurrentTemplateLinesRegularExpressions);
        }

        private  TemplateLinesRegularExpressions _currentTemplateLinesRegularExpressions;
        public TemplateLinesRegularExpressions CurrentTemplateLinesRegularExpressions
        {
            get
            {
                return _currentTemplateLinesRegularExpressions;
            }
            set
            {
                if (_currentTemplateLinesRegularExpressions != value)
                {
                    _currentTemplateLinesRegularExpressions = value;
                    BeginSendMessage(MessageToken.CurrentTemplateLinesRegularExpressionsChanged,
                                                     new NotificationEventArgs<TemplateLinesRegularExpressions>(MessageToken.CurrentTemplateLinesRegularExpressionsChanged, _currentTemplateLinesRegularExpressions)); 
                    NotifyPropertyChanged(x => this.CurrentTemplateLinesRegularExpressions);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TemplateLinesRegularExpressions> _vcurrentTemplateLinesRegularExpressions;
        public VirtualListItem<TemplateLinesRegularExpressions> VCurrentTemplateLinesRegularExpressions
        {
            get
            {
                return _vcurrentTemplateLinesRegularExpressions;
            }
            set
            {
                if (_vcurrentTemplateLinesRegularExpressions != value)
                {
                    _vcurrentTemplateLinesRegularExpressions = value;
					if(_vcurrentTemplateLinesRegularExpressions != null) CurrentTemplateLinesRegularExpressions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTemplateLinesRegularExpressions);                    
                }
            }
        }



                     
       

        internal void OnCurrentTemplateRegularExpressionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TemplateRegularExpressions> e)
        {
            //CurrentTemplateRegularExpressions = e.Data;
            NotifyPropertyChanged(m => this.CurrentTemplateRegularExpressions);
        }

        private  TemplateRegularExpressions _currentTemplateRegularExpressions;
        public TemplateRegularExpressions CurrentTemplateRegularExpressions
        {
            get
            {
                return _currentTemplateRegularExpressions;
            }
            set
            {
                if (_currentTemplateRegularExpressions != value)
                {
                    _currentTemplateRegularExpressions = value;
                    BeginSendMessage(MessageToken.CurrentTemplateRegularExpressionsChanged,
                                                     new NotificationEventArgs<TemplateRegularExpressions>(MessageToken.CurrentTemplateRegularExpressionsChanged, _currentTemplateRegularExpressions)); 
                    NotifyPropertyChanged(x => this.CurrentTemplateRegularExpressions);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TemplateRegularExpressions> _vcurrentTemplateRegularExpressions;
        public VirtualListItem<TemplateRegularExpressions> VCurrentTemplateRegularExpressions
        {
            get
            {
                return _vcurrentTemplateRegularExpressions;
            }
            set
            {
                if (_vcurrentTemplateRegularExpressions != value)
                {
                    _vcurrentTemplateRegularExpressions = value;
					if(_vcurrentTemplateRegularExpressions != null) CurrentTemplateRegularExpressions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTemplateRegularExpressions);                    
                }
            }
        }



                     
       

        internal void OnCurrentTemplatesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Templates> e)
        {
            //CurrentTemplates = e.Data;
            NotifyPropertyChanged(m => this.CurrentTemplates);
        }

        private  Templates _currentTemplates;
        public Templates CurrentTemplates
        {
            get
            {
                return _currentTemplates;
            }
            set
            {
                if (_currentTemplates != value)
                {
                    _currentTemplates = value;
                    BeginSendMessage(MessageToken.CurrentTemplatesChanged,
                                                     new NotificationEventArgs<Templates>(MessageToken.CurrentTemplatesChanged, _currentTemplates)); 
                    NotifyPropertyChanged(x => this.CurrentTemplates);    
                    // all current navigation properties = null
                 CurrentTemplateLines = null;
                 CurrentTemplateRegularExpressions = null;
   
                }
            }
        }

		VirtualListItem<Templates> _vcurrentTemplates;
        public VirtualListItem<Templates> VCurrentTemplates
        {
            get
            {
                return _vcurrentTemplates;
            }
            set
            {
                if (_vcurrentTemplates != value)
                {
                    _vcurrentTemplates = value;
					if(_vcurrentTemplates != null) CurrentTemplates = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTemplates);                    
                }
            }
        }






        static OCROnCreated newOCROnCreated = new OCROnCreated();
    }		
}

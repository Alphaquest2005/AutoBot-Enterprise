// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class FieldsViewModel_AutoGen : ViewModelBase<FieldsViewModel_AutoGen>
	{

       private static readonly FieldsViewModel_AutoGen instance;
       static FieldsViewModel_AutoGen()
        {
            instance = new FieldsViewModel_AutoGen();
        }

       public static FieldsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public FieldsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<Fields>(MessageToken.CurrentFieldsChanged, OnCurrentFieldsChanged);
            RegisterToReceiveMessages(MessageToken.FieldsChanged, OnFieldsChanged);
			RegisterToReceiveMessages(MessageToken.FieldsFilterExpressionChanged, OnFieldsFilterExpressionChanged);

 
			RegisterToReceiveMessages<Lines>(MessageToken.CurrentLinesChanged, OnCurrentLinesChanged);
 
			RegisterToReceiveMessages<OCR_FieldValue>(MessageToken.CurrentOCR_FieldValueChanged, OnCurrentFieldValueChanged);

 			// Recieve messages for Core Current Entities Changed
 

			Fields = new VirtualList<Fields>(vloader);
			Fields.LoadingStateChanged += Fields_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(Fields, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<Fields> _Fields = null;
        public VirtualList<Fields> Fields
        {
            get
            {
                return _Fields;
            }
            set
            {
                _Fields = value;
                NotifyPropertyChanged( x => x.Fields);
            }
        }

		 private void OnFieldsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => Fields.Refresh()).ConfigureAwait(false);
            SelectedFields.Clear();
            NotifyPropertyChanged(x => SelectedFields);
            BeginSendMessage(MessageToken.SelectedFieldsChanged, new NotificationEventArgs(MessageToken.SelectedFieldsChanged));
        }

		void Fields_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (Fields.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => Fields);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("Fields | Error occured..." + Fields.LastLoadingError.Message);
                    NotifyPropertyChanged(x => Fields);
                    break;
            }
           
        }

		
		public readonly FieldsVirturalListLoader vloader = new FieldsVirturalListLoader();

		private ObservableCollection<Fields> _selectedFields = new ObservableCollection<Fields>();
        public ObservableCollection<Fields> SelectedFields
        {
            get
            {
                return _selectedFields;
            }
            set
            {
                _selectedFields = value;
				BeginSendMessage(MessageToken.SelectedFieldsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedFieldsChanged));
				 NotifyPropertyChanged(x => SelectedFields);
            }
        }

        internal virtual void OnCurrentFieldsChanged(object sender, NotificationEventArgs<Fields> e)
        {
            if(BaseViewModel.Instance.CurrentFields != null) BaseViewModel.Instance.CurrentFields.PropertyChanged += CurrentFields__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentFields);
        }   

            void CurrentFields__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddLines")
                   // {
                   //    if(Lines.Contains(CurrentFields.Lines) == false) Lines.Add(CurrentFields.Lines);
                    //}
                    //if (e.PropertyName == "AddFieldValue")
                   // {
                   //    if(OCR_FieldValue.Contains(CurrentFields.FieldValue) == false) OCR_FieldValue.Add(CurrentFields.FieldValue);
                    //}
                    //if (e.PropertyName == "AddParentField")
                   // {
                   //    if(Fields.Contains(CurrentFields.ParentField) == false) Fields.Add(CurrentFields.ParentField);
                    //}
                 } 
        internal virtual void OnFieldsChanged(object sender, NotificationEventArgs e)
        {
            _Fields.Refresh();
			NotifyPropertyChanged(x => this.Fields);
        }   


 	
		 internal virtual void OnCurrentLinesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Lines> e)
			{
			if(ViewCurrentLines == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("LineId == {0}", e.Data.Id.ToString());
                 }

				Fields.Refresh();
				NotifyPropertyChanged(x => this.Fields);
                // SendMessage(MessageToken.FieldsChanged, new NotificationEventArgs(MessageToken.FieldsChanged));
                			}
	
		 internal virtual void OnCurrentFieldValueChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OCR_FieldValue> e)
			{
			if(ViewCurrentFieldValue == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
                }

				Fields.Refresh();
				NotifyPropertyChanged(x => this.Fields);
                // SendMessage(MessageToken.FieldsChanged, new NotificationEventArgs(MessageToken.FieldsChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentLines = false;
         public bool ViewCurrentLines
         {
             get
             {
                 return _viewCurrentLines;
             }
             set
             {
                 _viewCurrentLines = value;
                 NotifyPropertyChanged(x => x.ViewCurrentLines);
                FilterData();
             }
         }
 	
		 bool _viewCurrentFieldValue = false;
         public bool ViewCurrentFieldValue
         {
             get
             {
                 return _viewCurrentFieldValue;
             }
             set
             {
                 _viewCurrentFieldValue = value;
                 NotifyPropertyChanged(x => x.ViewCurrentFieldValue);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_Fields.Refresh();
			NotifyPropertyChanged(x => this.Fields);
		}

		public async Task SelectAll()
        {
            IEnumerable<Fields> lst = null;
            using (var ctx = new FieldsRepository())
            {
                lst = await ctx.GetFieldsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedFields = new ObservableCollection<Fields>(lst);
        }

 

		private string _fieldFilter;
        public string FieldFilter
        {
            get
            {
                return _fieldFilter;
            }
            set
            {
                _fieldFilter = value;
				NotifyPropertyChanged(x => FieldFilter);
                FilterData();
                
            }
        }	

 

		private string _entityTypeFilter;
        public string EntityTypeFilter
        {
            get
            {
                return _entityTypeFilter;
            }
            set
            {
                _entityTypeFilter = value;
				NotifyPropertyChanged(x => EntityTypeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isRequiredFilter;
        public Boolean? IsRequiredFilter
        {
            get
            {
                return _isRequiredFilter;
            }
            set
            {
                _isRequiredFilter = value;
				NotifyPropertyChanged(x => IsRequiredFilter);
                FilterData();
                
            }
        }	

 

		private string _dataTypeFilter;
        public string DataTypeFilter
        {
            get
            {
                return _dataTypeFilter;
            }
            set
            {
                _dataTypeFilter = value;
				NotifyPropertyChanged(x => DataTypeFilter);
                FilterData();
                
            }
        }	

 

		private string _keyFilter;
        public string KeyFilter
        {
            get
            {
                return _keyFilter;
            }
            set
            {
                _keyFilter = value;
				NotifyPropertyChanged(x => KeyFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			Fields.Refresh();
			NotifyPropertyChanged(x => this.Fields);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(FieldFilter) == false)
						res.Append(" && " + string.Format("Field.Contains(\"{0}\")",  FieldFilter));						
 

									if(string.IsNullOrEmpty(EntityTypeFilter) == false)
						res.Append(" && " + string.Format("EntityType.Contains(\"{0}\")",  EntityTypeFilter));						
 

									if(IsRequiredFilter.HasValue)
						res.Append(" && " + string.Format("IsRequired == {0}",  IsRequiredFilter));						
 

									if(string.IsNullOrEmpty(DataTypeFilter) == false)
						res.Append(" && " + string.Format("DataType.Contains(\"{0}\")",  DataTypeFilter));						
 

									if(string.IsNullOrEmpty(KeyFilter) == false)
						res.Append(" && " + string.Format("Key.Contains(\"{0}\")",  KeyFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<Fields> lst = null;
            using (var ctx = new FieldsRepository())
            {
                lst = await ctx.GetFieldsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<FieldsExcelLine, List<FieldsExcelLine>>
            {
                dataToPrint = lst.Select(x => new FieldsExcelLine
                {
 
                    Field = x.Field ,
                    
 
                    EntityType = x.EntityType ,
                    
 
                    IsRequired = x.IsRequired ,
                    
 
                    DataType = x.DataType ,
                    
 
                    Key = x.Key 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class FieldsExcelLine
        {
		 
                    public string Field { get; set; } 
                    
 
                    public string EntityType { get; set; } 
                    
 
                    public bool IsRequired { get; set; } 
                    
 
                    public string DataType { get; set; } 
                    
 
                    public string Key { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class TemplateLinesViewModel_AutoGen : ViewModelBase<TemplateLinesViewModel_AutoGen>
	{

       private static readonly TemplateLinesViewModel_AutoGen instance;
       static TemplateLinesViewModel_AutoGen()
        {
            instance = new TemplateLinesViewModel_AutoGen();
        }

       public static TemplateLinesViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TemplateLinesViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TemplateLines>(MessageToken.CurrentTemplateLinesChanged, OnCurrentTemplateLinesChanged);
            RegisterToReceiveMessages(MessageToken.TemplateLinesChanged, OnTemplateLinesChanged);
			RegisterToReceiveMessages(MessageToken.TemplateLinesFilterExpressionChanged, OnTemplateLinesFilterExpressionChanged);

 
			RegisterToReceiveMessages<LineTypes>(MessageToken.CurrentLineTypesChanged, OnCurrentLineTypesChanged);
 
			RegisterToReceiveMessages<Templates>(MessageToken.CurrentTemplatesChanged, OnCurrentTemplatesChanged);

 			// Recieve messages for Core Current Entities Changed
 

			TemplateLines = new VirtualList<TemplateLines>(vloader);
			TemplateLines.LoadingStateChanged += TemplateLines_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TemplateLines, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TemplateLines> _TemplateLines = null;
        public VirtualList<TemplateLines> TemplateLines
        {
            get
            {
                return _TemplateLines;
            }
            set
            {
                _TemplateLines = value;
            }
        }

		 private void OnTemplateLinesFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			TemplateLines.Refresh();
            SelectedTemplateLines.Clear();
            NotifyPropertyChanged(x => SelectedTemplateLines);
            BeginSendMessage(MessageToken.SelectedTemplateLinesChanged, new NotificationEventArgs(MessageToken.SelectedTemplateLinesChanged));
        }

		void TemplateLines_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TemplateLines.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TemplateLines);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TemplateLines | Error occured..." + TemplateLines.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TemplateLines);
                    break;
            }
           
        }

		
		public readonly TemplateLinesVirturalListLoader vloader = new TemplateLinesVirturalListLoader();

		private ObservableCollection<TemplateLines> _selectedTemplateLines = new ObservableCollection<TemplateLines>();
        public ObservableCollection<TemplateLines> SelectedTemplateLines
        {
            get
            {
                return _selectedTemplateLines;
            }
            set
            {
                _selectedTemplateLines = value;
				BeginSendMessage(MessageToken.SelectedTemplateLinesChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTemplateLinesChanged));
				 NotifyPropertyChanged(x => SelectedTemplateLines);
            }
        }

        internal virtual void OnCurrentTemplateLinesChanged(object sender, NotificationEventArgs<TemplateLines> e)
        {
            if(BaseViewModel.Instance.CurrentTemplateLines != null) BaseViewModel.Instance.CurrentTemplateLines.PropertyChanged += CurrentTemplateLines__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTemplateLines);
        }   

            void CurrentTemplateLines__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddLineTypes")
                   // {
                   //    if(LineTypes.Contains(CurrentTemplateLines.LineTypes) == false) LineTypes.Add(CurrentTemplateLines.LineTypes);
                    //}
                    //if (e.PropertyName == "AddTemplates")
                   // {
                   //    if(Templates.Contains(CurrentTemplateLines.Templates) == false) Templates.Add(CurrentTemplateLines.Templates);
                    //}
                 } 
        internal virtual void OnTemplateLinesChanged(object sender, NotificationEventArgs e)
        {
            _TemplateLines.Refresh();
			NotifyPropertyChanged(x => this.TemplateLines);
        }   


 	
		 internal virtual void OnCurrentLineTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<LineTypes> e)
			{
			if(ViewCurrentLineTypes == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("TypeId == {0}", e.Data.Id.ToString());
                 }

				TemplateLines.Refresh();
				NotifyPropertyChanged(x => this.TemplateLines);
                // SendMessage(MessageToken.TemplateLinesChanged, new NotificationEventArgs(MessageToken.TemplateLinesChanged));
                			}
	
		 internal virtual void OnCurrentTemplatesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Templates> e)
			{
			if(ViewCurrentTemplates == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("TemplateId == {0}", e.Data.Id.ToString());
                 }

				TemplateLines.Refresh();
				NotifyPropertyChanged(x => this.TemplateLines);
                // SendMessage(MessageToken.TemplateLinesChanged, new NotificationEventArgs(MessageToken.TemplateLinesChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentLineTypes = false;
         public bool ViewCurrentLineTypes
         {
             get
             {
                 return _viewCurrentLineTypes;
             }
             set
             {
                 _viewCurrentLineTypes = value;
                 NotifyPropertyChanged(x => x.ViewCurrentLineTypes);
                FilterData();
             }
         }
 	
		 bool _viewCurrentTemplates = false;
         public bool ViewCurrentTemplates
         {
             get
             {
                 return _viewCurrentTemplates;
             }
             set
             {
                 _viewCurrentTemplates = value;
                 NotifyPropertyChanged(x => x.ViewCurrentTemplates);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_TemplateLines.Refresh();
			NotifyPropertyChanged(x => this.TemplateLines);
		}

		public async Task SelectAll()
        {
            IEnumerable<TemplateLines> lst = null;
            using (var ctx = new TemplateLinesRepository())
            {
                lst = await ctx.GetTemplateLinesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTemplateLines = new ObservableCollection<TemplateLines>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TemplateLines.Refresh();
			NotifyPropertyChanged(x => this.TemplateLines);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TemplateLines> lst = null;
            using (var ctx = new TemplateLinesRepository())
            {
                lst = await ctx.GetTemplateLinesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TemplateLinesExcelLine, List<TemplateLinesExcelLine>>
            {
                dataToPrint = lst.Select(x => new TemplateLinesExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TemplateLinesExcelLine
        {
		        }

		
    }
}
		

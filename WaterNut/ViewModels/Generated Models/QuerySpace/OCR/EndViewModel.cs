// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class EndViewModel_AutoGen : ViewModelBase<EndViewModel_AutoGen>
	{

       private static readonly EndViewModel_AutoGen instance;
       static EndViewModel_AutoGen()
        {
            instance = new EndViewModel_AutoGen();
        }

       public static EndViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public EndViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<End>(MessageToken.CurrentEndChanged, OnCurrentEndChanged);
            RegisterToReceiveMessages(MessageToken.EndChanged, OnEndChanged);
			RegisterToReceiveMessages(MessageToken.EndFilterExpressionChanged, OnEndFilterExpressionChanged);

 
			RegisterToReceiveMessages<Parts>(MessageToken.CurrentPartsChanged, OnCurrentPartsChanged);
 
			RegisterToReceiveMessages<RegExChain>(MessageToken.CurrentRegExChainChanged, OnCurrentRegExChainChanged);

 			// Recieve messages for Core Current Entities Changed
 

			End = new VirtualList<End>(vloader);
			End.LoadingStateChanged += End_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(End, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<End> _End = null;
        public VirtualList<End> End
        {
            get
            {
                return _End;
            }
            set
            {
                _End = value;
            }
        }

		 private void OnEndFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			End.Refresh();
            SelectedEnd.Clear();
            NotifyPropertyChanged(x => SelectedEnd);
            BeginSendMessage(MessageToken.SelectedEndChanged, new NotificationEventArgs(MessageToken.SelectedEndChanged));
        }

		void End_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (End.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => End);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("End | Error occured..." + End.LastLoadingError.Message);
                    NotifyPropertyChanged(x => End);
                    break;
            }
           
        }

		
		public readonly EndVirturalListLoader vloader = new EndVirturalListLoader();

		private ObservableCollection<End> _selectedEnd = new ObservableCollection<End>();
        public ObservableCollection<End> SelectedEnd
        {
            get
            {
                return _selectedEnd;
            }
            set
            {
                _selectedEnd = value;
				BeginSendMessage(MessageToken.SelectedEndChanged,
                                    new NotificationEventArgs(MessageToken.SelectedEndChanged));
				 NotifyPropertyChanged(x => SelectedEnd);
            }
        }

        internal virtual void OnCurrentEndChanged(object sender, NotificationEventArgs<End> e)
        {
            if(BaseViewModel.Instance.CurrentEnd != null) BaseViewModel.Instance.CurrentEnd.PropertyChanged += CurrentEnd__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentEnd);
        }   

            void CurrentEnd__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddParts")
                   // {
                   //    if(Parts.Contains(CurrentEnd.Parts) == false) Parts.Add(CurrentEnd.Parts);
                    //}
                    //if (e.PropertyName == "AddRegExChain")
                   // {
                   //    if(RegExChain.Contains(CurrentEnd.RegExChain) == false) RegExChain.Add(CurrentEnd.RegExChain);
                    //}
                 } 
        internal virtual void OnEndChanged(object sender, NotificationEventArgs e)
        {
            _End.Refresh();
			NotifyPropertyChanged(x => this.End);
        }   


 	
		 internal virtual void OnCurrentPartsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Parts> e)
			{
			if(ViewCurrentParts == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("PartId == {0}", e.Data.Id.ToString());
                 }

				End.Refresh();
				NotifyPropertyChanged(x => this.End);
                // SendMessage(MessageToken.EndChanged, new NotificationEventArgs(MessageToken.EndChanged));
                			}
	
		 internal virtual void OnCurrentRegExChainChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegExChain> e)
			{
			if(ViewCurrentRegExChain == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("RegExChainId == {0}", e.Data.Id.ToString());
                 }

				End.Refresh();
				NotifyPropertyChanged(x => this.End);
                // SendMessage(MessageToken.EndChanged, new NotificationEventArgs(MessageToken.EndChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentParts = false;
         public bool ViewCurrentParts
         {
             get
             {
                 return _viewCurrentParts;
             }
             set
             {
                 _viewCurrentParts = value;
                 NotifyPropertyChanged(x => x.ViewCurrentParts);
                FilterData();
             }
         }
 	
		 bool _viewCurrentRegExChain = false;
         public bool ViewCurrentRegExChain
         {
             get
             {
                 return _viewCurrentRegExChain;
             }
             set
             {
                 _viewCurrentRegExChain = value;
                 NotifyPropertyChanged(x => x.ViewCurrentRegExChain);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_End.Refresh();
			NotifyPropertyChanged(x => this.End);
		}

		public async Task SelectAll()
        {
            IEnumerable<End> lst = null;
            using (var ctx = new EndRepository())
            {
                lst = await ctx.GetEndByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedEnd = new ObservableCollection<End>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			End.Refresh();
			NotifyPropertyChanged(x => this.End);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<End> lst = null;
            using (var ctx = new EndRepository())
            {
                lst = await ctx.GetEndByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<EndExcelLine, List<EndExcelLine>>
            {
                dataToPrint = lst.Select(x => new EndExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class EndExcelLine
        {
		        }

		
    }
}
		

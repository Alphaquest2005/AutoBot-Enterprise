// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class InvoiceRegExViewModel_AutoGen : ViewModelBase<InvoiceRegExViewModel_AutoGen>
	{

       private static readonly InvoiceRegExViewModel_AutoGen instance;
       static InvoiceRegExViewModel_AutoGen()
        {
            instance = new InvoiceRegExViewModel_AutoGen();
        }

       public static InvoiceRegExViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public InvoiceRegExViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<InvoiceRegEx>(MessageToken.CurrentInvoiceRegExChanged, OnCurrentInvoiceRegExChanged);
            RegisterToReceiveMessages(MessageToken.OCR_InvoiceRegExChanged, OnOCR_InvoiceRegExChanged);
			RegisterToReceiveMessages(MessageToken.OCR_InvoiceRegExFilterExpressionChanged, OnOCR_InvoiceRegExFilterExpressionChanged);

 
			RegisterToReceiveMessages<Invoices>(MessageToken.CurrentInvoicesChanged, OnCurrentOCR_InvoicesChanged);
 
			RegisterToReceiveMessages<RegularExpressions>(MessageToken.CurrentRegularExpressionsChanged, OnCurrentRegExChanged);
 
			RegisterToReceiveMessages<RegularExpressions>(MessageToken.CurrentRegularExpressionsChanged, OnCurrentReplacementRegExChanged);

 			// Recieve messages for Core Current Entities Changed
 

			OCR_InvoiceRegEx = new VirtualList<InvoiceRegEx>(vloader);
			OCR_InvoiceRegEx.LoadingStateChanged += OCR_InvoiceRegEx_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(OCR_InvoiceRegEx, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<InvoiceRegEx> _OCR_InvoiceRegEx = null;
        public VirtualList<InvoiceRegEx> OCR_InvoiceRegEx
        {
            get
            {
                return _OCR_InvoiceRegEx;
            }
            set
            {
                _OCR_InvoiceRegEx = value;
                NotifyPropertyChanged( x => x.OCR_InvoiceRegEx);
            }
        }

		 private void OnOCR_InvoiceRegExFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => OCR_InvoiceRegEx.Refresh()).ConfigureAwait(false);
            SelectedOCR_InvoiceRegEx.Clear();
            NotifyPropertyChanged(x => SelectedOCR_InvoiceRegEx);
            BeginSendMessage(MessageToken.SelectedOCR_InvoiceRegExChanged, new NotificationEventArgs(MessageToken.SelectedOCR_InvoiceRegExChanged));
        }

		void OCR_InvoiceRegEx_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (OCR_InvoiceRegEx.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => OCR_InvoiceRegEx);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("OCR_InvoiceRegEx | Error occured..." + OCR_InvoiceRegEx.LastLoadingError.Message);
                    NotifyPropertyChanged(x => OCR_InvoiceRegEx);
                    break;
            }
           
        }

		
		public readonly InvoiceRegExVirturalListLoader vloader = new InvoiceRegExVirturalListLoader();

		private ObservableCollection<InvoiceRegEx> _selectedOCR_InvoiceRegEx = new ObservableCollection<InvoiceRegEx>();
        public ObservableCollection<InvoiceRegEx> SelectedOCR_InvoiceRegEx
        {
            get
            {
                return _selectedOCR_InvoiceRegEx;
            }
            set
            {
                _selectedOCR_InvoiceRegEx = value;
				BeginSendMessage(MessageToken.SelectedOCR_InvoiceRegExChanged,
                                    new NotificationEventArgs(MessageToken.SelectedOCR_InvoiceRegExChanged));
				 NotifyPropertyChanged(x => SelectedOCR_InvoiceRegEx);
            }
        }

        internal virtual void OnCurrentInvoiceRegExChanged(object sender, NotificationEventArgs<InvoiceRegEx> e)
        {
            if(BaseViewModel.Instance.CurrentInvoiceRegEx != null) BaseViewModel.Instance.CurrentInvoiceRegEx.PropertyChanged += CurrentInvoiceRegEx__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentInvoiceRegEx);
        }   

            void CurrentInvoiceRegEx__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddOCR_Invoices")
                   // {
                   //    if(Invoices.Contains(CurrentInvoiceRegEx.OCR_Invoices) == false) Invoices.Add(CurrentInvoiceRegEx.OCR_Invoices);
                    //}
                    //if (e.PropertyName == "AddRegEx")
                   // {
                   //    if(RegularExpressions.Contains(CurrentInvoiceRegEx.RegEx) == false) RegularExpressions.Add(CurrentInvoiceRegEx.RegEx);
                    //}
                    //if (e.PropertyName == "AddReplacementRegEx")
                   // {
                   //    if(RegularExpressions.Contains(CurrentInvoiceRegEx.ReplacementRegEx) == false) RegularExpressions.Add(CurrentInvoiceRegEx.ReplacementRegEx);
                    //}
                 } 
        internal virtual void OnOCR_InvoiceRegExChanged(object sender, NotificationEventArgs e)
        {
            _OCR_InvoiceRegEx.Refresh();
			NotifyPropertyChanged(x => this.OCR_InvoiceRegEx);
        }   


 	
		 internal virtual void OnCurrentOCR_InvoicesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Invoices> e)
			{
			if(ViewCurrentOCR_Invoices == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("InvoiceId == {0}", e.Data.Id.ToString());
                 }

				OCR_InvoiceRegEx.Refresh();
				NotifyPropertyChanged(x => this.OCR_InvoiceRegEx);
                // SendMessage(MessageToken.OCR_InvoiceRegExChanged, new NotificationEventArgs(MessageToken.OCR_InvoiceRegExChanged));
                			}
	
		 internal virtual void OnCurrentRegExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegularExpressions> e)
			{
			if(ViewCurrentRegEx == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("RegExId == {0}", e.Data.Id.ToString());
                 }

				OCR_InvoiceRegEx.Refresh();
				NotifyPropertyChanged(x => this.OCR_InvoiceRegEx);
                // SendMessage(MessageToken.OCR_InvoiceRegExChanged, new NotificationEventArgs(MessageToken.OCR_InvoiceRegExChanged));
                			}
	
		 internal virtual void OnCurrentReplacementRegExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegularExpressions> e)
			{
			if(ViewCurrentReplacementRegEx == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("ReplacementRegExId == {0}", e.Data.Id.ToString());
                 }

				OCR_InvoiceRegEx.Refresh();
				NotifyPropertyChanged(x => this.OCR_InvoiceRegEx);
                // SendMessage(MessageToken.OCR_InvoiceRegExChanged, new NotificationEventArgs(MessageToken.OCR_InvoiceRegExChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentOCR_Invoices = false;
         public bool ViewCurrentOCR_Invoices
         {
             get
             {
                 return _viewCurrentOCR_Invoices;
             }
             set
             {
                 _viewCurrentOCR_Invoices = value;
                 NotifyPropertyChanged(x => x.ViewCurrentOCR_Invoices);
                FilterData();
             }
         }
 	
		 bool _viewCurrentRegEx = false;
         public bool ViewCurrentRegEx
         {
             get
             {
                 return _viewCurrentRegEx;
             }
             set
             {
                 _viewCurrentRegEx = value;
                 NotifyPropertyChanged(x => x.ViewCurrentRegEx);
                FilterData();
             }
         }
 	
		 bool _viewCurrentReplacementRegEx = false;
         public bool ViewCurrentReplacementRegEx
         {
             get
             {
                 return _viewCurrentReplacementRegEx;
             }
             set
             {
                 _viewCurrentReplacementRegEx = value;
                 NotifyPropertyChanged(x => x.ViewCurrentReplacementRegEx);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_OCR_InvoiceRegEx.Refresh();
			NotifyPropertyChanged(x => this.OCR_InvoiceRegEx);
		}

		public async Task SelectAll()
        {
            IEnumerable<InvoiceRegEx> lst = null;
            using (var ctx = new InvoiceRegExRepository())
            {
                lst = await ctx.GetOCR_InvoiceRegExByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedOCR_InvoiceRegEx = new ObservableCollection<InvoiceRegEx>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			OCR_InvoiceRegEx.Refresh();
			NotifyPropertyChanged(x => this.OCR_InvoiceRegEx);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<InvoiceRegEx> lst = null;
            using (var ctx = new InvoiceRegExRepository())
            {
                lst = await ctx.GetOCR_InvoiceRegExByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<InvoiceRegExExcelLine, List<InvoiceRegExExcelLine>>
            {
                dataToPrint = lst.Select(x => new InvoiceRegExExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class InvoiceRegExExcelLine
        {
		        }

		
    }
}
		

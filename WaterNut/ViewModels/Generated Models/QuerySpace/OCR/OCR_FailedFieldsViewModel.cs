// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class OCR_FailedFieldsViewModel_AutoGen : ViewModelBase<OCR_FailedFieldsViewModel_AutoGen>
	{

       private static readonly OCR_FailedFieldsViewModel_AutoGen instance;
       static OCR_FailedFieldsViewModel_AutoGen()
        {
            instance = new OCR_FailedFieldsViewModel_AutoGen();
        }

       public static OCR_FailedFieldsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public OCR_FailedFieldsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<OCR_FailedFields>(MessageToken.CurrentOCR_FailedFieldsChanged, OnCurrentOCR_FailedFieldsChanged);
            RegisterToReceiveMessages(MessageToken.OCR_FailedFieldsChanged, OnOCR_FailedFieldsChanged);
			RegisterToReceiveMessages(MessageToken.OCR_FailedFieldsFilterExpressionChanged, OnOCR_FailedFieldsFilterExpressionChanged);

 
			RegisterToReceiveMessages<OCR_FailedLines>(MessageToken.CurrentOCR_FailedLinesChanged, OnCurrentOCR_FailedLinesChanged);
 
			RegisterToReceiveMessages<Fields>(MessageToken.CurrentFieldsChanged, OnCurrentOCR_FieldsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			OCR_FailedFields = new VirtualList<OCR_FailedFields>(vloader);
			OCR_FailedFields.LoadingStateChanged += OCR_FailedFields_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(OCR_FailedFields, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<OCR_FailedFields> _OCR_FailedFields = null;
        public VirtualList<OCR_FailedFields> OCR_FailedFields
        {
            get
            {
                return _OCR_FailedFields;
            }
            set
            {
                _OCR_FailedFields = value;
                NotifyPropertyChanged( x => x.OCR_FailedFields);
            }
        }

		 private void OnOCR_FailedFieldsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => OCR_FailedFields.Refresh()).ConfigureAwait(false);
            SelectedOCR_FailedFields.Clear();
            NotifyPropertyChanged(x => SelectedOCR_FailedFields);
            BeginSendMessage(MessageToken.SelectedOCR_FailedFieldsChanged, new NotificationEventArgs(MessageToken.SelectedOCR_FailedFieldsChanged));
        }

		void OCR_FailedFields_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (OCR_FailedFields.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => OCR_FailedFields);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("OCR_FailedFields | Error occured..." + OCR_FailedFields.LastLoadingError.Message);
                    NotifyPropertyChanged(x => OCR_FailedFields);
                    break;
            }
           
        }

		
		public readonly OCR_FailedFieldsVirturalListLoader vloader = new OCR_FailedFieldsVirturalListLoader();

		private ObservableCollection<OCR_FailedFields> _selectedOCR_FailedFields = new ObservableCollection<OCR_FailedFields>();
        public ObservableCollection<OCR_FailedFields> SelectedOCR_FailedFields
        {
            get
            {
                return _selectedOCR_FailedFields;
            }
            set
            {
                _selectedOCR_FailedFields = value;
				BeginSendMessage(MessageToken.SelectedOCR_FailedFieldsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedOCR_FailedFieldsChanged));
				 NotifyPropertyChanged(x => SelectedOCR_FailedFields);
            }
        }

        internal virtual void OnCurrentOCR_FailedFieldsChanged(object sender, NotificationEventArgs<OCR_FailedFields> e)
        {
            if(BaseViewModel.Instance.CurrentOCR_FailedFields != null) BaseViewModel.Instance.CurrentOCR_FailedFields.PropertyChanged += CurrentOCR_FailedFields__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentOCR_FailedFields);
        }   

            void CurrentOCR_FailedFields__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddOCR_FailedLines")
                   // {
                   //    if(OCR_FailedLines.Contains(CurrentOCR_FailedFields.OCR_FailedLines) == false) OCR_FailedLines.Add(CurrentOCR_FailedFields.OCR_FailedLines);
                    //}
                    //if (e.PropertyName == "AddOCR_Fields")
                   // {
                   //    if(Fields.Contains(CurrentOCR_FailedFields.OCR_Fields) == false) Fields.Add(CurrentOCR_FailedFields.OCR_Fields);
                    //}
                 } 
        internal virtual void OnOCR_FailedFieldsChanged(object sender, NotificationEventArgs e)
        {
            _OCR_FailedFields.Refresh();
			NotifyPropertyChanged(x => this.OCR_FailedFields);
        }   


 	
		 internal virtual void OnCurrentOCR_FailedLinesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OCR_FailedLines> e)
			{
			if(ViewCurrentOCR_FailedLines == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("FailedLineEventId == {0}", e.Data.Id.ToString());
                 }

				OCR_FailedFields.Refresh();
				NotifyPropertyChanged(x => this.OCR_FailedFields);
                // SendMessage(MessageToken.OCR_FailedFieldsChanged, new NotificationEventArgs(MessageToken.OCR_FailedFieldsChanged));
                			}
	
		 internal virtual void OnCurrentOCR_FieldsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Fields> e)
			{
			if(ViewCurrentOCR_Fields == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("FieldId == {0}", e.Data.Id.ToString());
                 }

				OCR_FailedFields.Refresh();
				NotifyPropertyChanged(x => this.OCR_FailedFields);
                // SendMessage(MessageToken.OCR_FailedFieldsChanged, new NotificationEventArgs(MessageToken.OCR_FailedFieldsChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentOCR_FailedLines = false;
         public bool ViewCurrentOCR_FailedLines
         {
             get
             {
                 return _viewCurrentOCR_FailedLines;
             }
             set
             {
                 _viewCurrentOCR_FailedLines = value;
                 NotifyPropertyChanged(x => x.ViewCurrentOCR_FailedLines);
                FilterData();
             }
         }
 	
		 bool _viewCurrentOCR_Fields = false;
         public bool ViewCurrentOCR_Fields
         {
             get
             {
                 return _viewCurrentOCR_Fields;
             }
             set
             {
                 _viewCurrentOCR_Fields = value;
                 NotifyPropertyChanged(x => x.ViewCurrentOCR_Fields);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_OCR_FailedFields.Refresh();
			NotifyPropertyChanged(x => this.OCR_FailedFields);
		}

		public async Task SelectAll()
        {
            IEnumerable<OCR_FailedFields> lst = null;
            using (var ctx = new OCR_FailedFieldsRepository())
            {
                lst = await ctx.GetOCR_FailedFieldsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedOCR_FailedFields = new ObservableCollection<OCR_FailedFields>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			OCR_FailedFields.Refresh();
			NotifyPropertyChanged(x => this.OCR_FailedFields);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<OCR_FailedFields> lst = null;
            using (var ctx = new OCR_FailedFieldsRepository())
            {
                lst = await ctx.GetOCR_FailedFieldsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<OCR_FailedFieldsExcelLine, List<OCR_FailedFieldsExcelLine>>
            {
                dataToPrint = lst.Select(x => new OCR_FailedFieldsExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class OCR_FailedFieldsExcelLine
        {
		        }

		
    }
}
		

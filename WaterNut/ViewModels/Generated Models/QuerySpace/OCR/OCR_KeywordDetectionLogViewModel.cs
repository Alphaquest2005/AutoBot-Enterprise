// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class OCR_KeywordDetectionLogViewModel_AutoGen : ViewModelBase<OCR_KeywordDetectionLogViewModel_AutoGen>
	{

       private static readonly OCR_KeywordDetectionLogViewModel_AutoGen instance;
       static OCR_KeywordDetectionLogViewModel_AutoGen()
        {
            instance = new OCR_KeywordDetectionLogViewModel_AutoGen();
        }

       public static OCR_KeywordDetectionLogViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public OCR_KeywordDetectionLogViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<OCR_KeywordDetectionLog>(MessageToken.CurrentOCR_KeywordDetectionLogChanged, OnCurrentOCR_KeywordDetectionLogChanged);
            RegisterToReceiveMessages(MessageToken.OCR_KeywordDetectionLogChanged, OnOCR_KeywordDetectionLogChanged);
			RegisterToReceiveMessages(MessageToken.OCR_KeywordDetectionLogFilterExpressionChanged, OnOCR_KeywordDetectionLogFilterExpressionChanged);

 
			RegisterToReceiveMessages<OCR_TemplateTableMapping>(MessageToken.CurrentOCR_TemplateTableMappingChanged, OnCurrentOCR_TemplateTableMappingChanged);

 			// Recieve messages for Core Current Entities Changed
 

			OCR_KeywordDetectionLog = new VirtualList<OCR_KeywordDetectionLog>(vloader);
			OCR_KeywordDetectionLog.LoadingStateChanged += OCR_KeywordDetectionLog_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(OCR_KeywordDetectionLog, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<OCR_KeywordDetectionLog> _OCR_KeywordDetectionLog = null;
        public VirtualList<OCR_KeywordDetectionLog> OCR_KeywordDetectionLog
        {
            get
            {
                return _OCR_KeywordDetectionLog;
            }
            set
            {
                _OCR_KeywordDetectionLog = value;
                NotifyPropertyChanged( x => x.OCR_KeywordDetectionLog);
            }
        }

		 private void OnOCR_KeywordDetectionLogFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => OCR_KeywordDetectionLog.Refresh()).ConfigureAwait(false);
            SelectedOCR_KeywordDetectionLog.Clear();
            NotifyPropertyChanged(x => SelectedOCR_KeywordDetectionLog);
            BeginSendMessage(MessageToken.SelectedOCR_KeywordDetectionLogChanged, new NotificationEventArgs(MessageToken.SelectedOCR_KeywordDetectionLogChanged));
        }

		void OCR_KeywordDetectionLog_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (OCR_KeywordDetectionLog.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => OCR_KeywordDetectionLog);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("OCR_KeywordDetectionLog | Error occured..." + OCR_KeywordDetectionLog.LastLoadingError.Message);
                    NotifyPropertyChanged(x => OCR_KeywordDetectionLog);
                    break;
            }
           
        }

		
		public readonly OCR_KeywordDetectionLogVirturalListLoader vloader = new OCR_KeywordDetectionLogVirturalListLoader();

		private ObservableCollection<OCR_KeywordDetectionLog> _selectedOCR_KeywordDetectionLog = new ObservableCollection<OCR_KeywordDetectionLog>();
        public ObservableCollection<OCR_KeywordDetectionLog> SelectedOCR_KeywordDetectionLog
        {
            get
            {
                return _selectedOCR_KeywordDetectionLog;
            }
            set
            {
                _selectedOCR_KeywordDetectionLog = value;
				BeginSendMessage(MessageToken.SelectedOCR_KeywordDetectionLogChanged,
                                    new NotificationEventArgs(MessageToken.SelectedOCR_KeywordDetectionLogChanged));
				 NotifyPropertyChanged(x => SelectedOCR_KeywordDetectionLog);
            }
        }

        internal virtual void OnCurrentOCR_KeywordDetectionLogChanged(object sender, NotificationEventArgs<OCR_KeywordDetectionLog> e)
        {
            if(BaseViewModel.Instance.CurrentOCR_KeywordDetectionLog != null) BaseViewModel.Instance.CurrentOCR_KeywordDetectionLog.PropertyChanged += CurrentOCR_KeywordDetectionLog__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentOCR_KeywordDetectionLog);
        }   

            void CurrentOCR_KeywordDetectionLog__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddOCR_TemplateTableMapping")
                   // {
                   //    if(OCR_TemplateTableMapping.Contains(CurrentOCR_KeywordDetectionLog.OCR_TemplateTableMapping) == false) OCR_TemplateTableMapping.Add(CurrentOCR_KeywordDetectionLog.OCR_TemplateTableMapping);
                    //}
                 } 
        internal virtual void OnOCR_KeywordDetectionLogChanged(object sender, NotificationEventArgs e)
        {
            _OCR_KeywordDetectionLog.Refresh();
			NotifyPropertyChanged(x => this.OCR_KeywordDetectionLog);
        }   


 	
		 internal virtual void OnCurrentOCR_TemplateTableMappingChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OCR_TemplateTableMapping> e)
			{
			if(ViewCurrentOCR_TemplateTableMapping == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("DetectedMappingId == {0}", e.Data.Id.ToString());
                 }

				OCR_KeywordDetectionLog.Refresh();
				NotifyPropertyChanged(x => this.OCR_KeywordDetectionLog);
                // SendMessage(MessageToken.OCR_KeywordDetectionLogChanged, new NotificationEventArgs(MessageToken.OCR_KeywordDetectionLogChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentOCR_TemplateTableMapping = false;
         public bool ViewCurrentOCR_TemplateTableMapping
         {
             get
             {
                 return _viewCurrentOCR_TemplateTableMapping;
             }
             set
             {
                 _viewCurrentOCR_TemplateTableMapping = value;
                 NotifyPropertyChanged(x => x.ViewCurrentOCR_TemplateTableMapping);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_OCR_KeywordDetectionLog.Refresh();
			NotifyPropertyChanged(x => this.OCR_KeywordDetectionLog);
		}

		public async Task SelectAll()
        {
            IEnumerable<OCR_KeywordDetectionLog> lst = null;
            using (var ctx = new OCR_KeywordDetectionLogRepository())
            {
                lst = await ctx.GetOCR_KeywordDetectionLogByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedOCR_KeywordDetectionLog = new ObservableCollection<OCR_KeywordDetectionLog>(lst);
        }

 

		private string _documentPathFilter;
        public string DocumentPathFilter
        {
            get
            {
                return _documentPathFilter;
            }
            set
            {
                _documentPathFilter = value;
				NotifyPropertyChanged(x => DocumentPathFilter);
                FilterData();
                
            }
        }	

 

		private string _documentContentFilter;
        public string DocumentContentFilter
        {
            get
            {
                return _documentContentFilter;
            }
            set
            {
                _documentContentFilter = value;
				NotifyPropertyChanged(x => DocumentContentFilter);
                FilterData();
                
            }
        }	

 

		private string _keywordMatchesFilter;
        public string KeywordMatchesFilter
        {
            get
            {
                return _keywordMatchesFilter;
            }
            set
            {
                _keywordMatchesFilter = value;
				NotifyPropertyChanged(x => KeywordMatchesFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _matchScoreFilter;
        public Decimal? MatchScoreFilter
        {
            get
            {
                return _matchScoreFilter;
            }
            set
            {
                _matchScoreFilter = value;
				NotifyPropertyChanged(x => MatchScoreFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _processingTimeMsFilter;
        public Int32? ProcessingTimeMsFilter
        {
            get
            {
                return _processingTimeMsFilter;
            }
            set
            {
                _processingTimeMsFilter = value;
				NotifyPropertyChanged(x => ProcessingTimeMsFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _successFilter;
        public Boolean? SuccessFilter
        {
            get
            {
                return _successFilter;
            }
            set
            {
                _successFilter = value;
				NotifyPropertyChanged(x => SuccessFilter);
                FilterData();
                
            }
        }	

 

		private string _errorMessageFilter;
        public string ErrorMessageFilter
        {
            get
            {
                return _errorMessageFilter;
            }
            set
            {
                _errorMessageFilter = value;
				NotifyPropertyChanged(x => ErrorMessageFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startCreatedDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartCreatedDateFilter
        {
            get
            {
                return _startCreatedDateFilter;
            }
            set
            {
                _startCreatedDateFilter = value;
				NotifyPropertyChanged(x => StartCreatedDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endCreatedDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndCreatedDateFilter
        {
            get
            {
                return _endCreatedDateFilter;
            }
            set
            {
                _endCreatedDateFilter = value;
				NotifyPropertyChanged(x => EndCreatedDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _createdDateFilter;
        public DateTime? CreatedDateFilter
        {
            get
            {
                return _createdDateFilter;
            }
            set
            {
                _createdDateFilter = value;
				NotifyPropertyChanged(x => CreatedDateFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			OCR_KeywordDetectionLog.Refresh();
			NotifyPropertyChanged(x => this.OCR_KeywordDetectionLog);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(DocumentPathFilter) == false)
						res.Append(" && " + string.Format("DocumentPath.Contains(\"{0}\")",  DocumentPathFilter));						
 

									if(string.IsNullOrEmpty(DocumentContentFilter) == false)
						res.Append(" && " + string.Format("DocumentContent.Contains(\"{0}\")",  DocumentContentFilter));						
 

									if(string.IsNullOrEmpty(KeywordMatchesFilter) == false)
						res.Append(" && " + string.Format("KeywordMatches.Contains(\"{0}\")",  KeywordMatchesFilter));						
 

					if(MatchScoreFilter.HasValue)
						res.Append(" && " + string.Format("MatchScore == {0}",  MatchScoreFilter.ToString()));				 

					if(ProcessingTimeMsFilter.HasValue)
						res.Append(" && " + string.Format("ProcessingTimeMs == {0}",  ProcessingTimeMsFilter.ToString()));				 

									if(SuccessFilter.HasValue)
						res.Append(" && " + string.Format("Success == {0}",  SuccessFilter));						
 

									if(string.IsNullOrEmpty(ErrorMessageFilter) == false)
						res.Append(" && " + string.Format("ErrorMessage.Contains(\"{0}\")",  ErrorMessageFilter));						
 

 

				if (Convert.ToDateTime(StartCreatedDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartCreatedDateFilter).Date != DateTime.MinValue)
						{
							if(StartCreatedDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("CreatedDate >= \"{0}\"",  Convert.ToDateTime(StartCreatedDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue)
						{
							if(EndCreatedDateFilter.HasValue)
								res.Append(" && " + string.Format("CreatedDate <= \"{0}\"",  Convert.ToDateTime(EndCreatedDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartCreatedDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_createdDateFilter).Date != DateTime.MinValue)
						{
							if(CreatedDateFilter.HasValue)
								res.Append(" && " + string.Format("CreatedDate == \"{0}\"",  Convert.ToDateTime(CreatedDateFilter).Date.ToString("MM/dd/yyyy")));
						}
							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<OCR_KeywordDetectionLog> lst = null;
            using (var ctx = new OCR_KeywordDetectionLogRepository())
            {
                lst = await ctx.GetOCR_KeywordDetectionLogByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<OCR_KeywordDetectionLogExcelLine, List<OCR_KeywordDetectionLogExcelLine>>
            {
                dataToPrint = lst.Select(x => new OCR_KeywordDetectionLogExcelLine
                {
 
                    DocumentPath = x.DocumentPath ,
                    
 
                    DocumentContent = x.DocumentContent ,
                    
 
                    KeywordMatches = x.KeywordMatches ,
                    
 
                    MatchScore = x.MatchScore ,
                    
 
                    ProcessingTimeMs = x.ProcessingTimeMs ,
                    
 
                    Success = x.Success ,
                    
 
                    ErrorMessage = x.ErrorMessage ,
                    
 
                    CreatedDate = x.CreatedDate 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class OCR_KeywordDetectionLogExcelLine
        {
		 
                    public string DocumentPath { get; set; } 
                    
 
                    public string DocumentContent { get; set; } 
                    
 
                    public string KeywordMatches { get; set; } 
                    
 
                    public Nullable<decimal> MatchScore { get; set; } 
                    
 
                    public Nullable<int> ProcessingTimeMs { get; set; } 
                    
 
                    public bool Success { get; set; } 
                    
 
                    public string ErrorMessage { get; set; } 
                    
 
                    public System.DateTime CreatedDate { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class TemplateIdentificatonRegExViewModel_AutoGen : ViewModelBase<TemplateIdentificatonRegExViewModel_AutoGen>
	{

       private static readonly TemplateIdentificatonRegExViewModel_AutoGen instance;
       static TemplateIdentificatonRegExViewModel_AutoGen()
        {
            instance = new TemplateIdentificatonRegExViewModel_AutoGen();
        }

       public static TemplateIdentificatonRegExViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TemplateIdentificatonRegExViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TemplateIdentificatonRegEx>(MessageToken.CurrentTemplateIdentificatonRegExChanged, OnCurrentTemplateIdentificatonRegExChanged);
            RegisterToReceiveMessages(MessageToken.TemplatesIdentificatonRegExChanged, OnTemplatesIdentificatonRegExChanged);
			RegisterToReceiveMessages(MessageToken.TemplatesIdentificatonRegExFilterExpressionChanged, OnTemplatesIdentificatonRegExFilterExpressionChanged);

 
			RegisterToReceiveMessages<Templates>(MessageToken.CurrentTemplatesChanged, OnCurrentOCR_TemplatesChanged);
 
			RegisterToReceiveMessages<RegularExpressions>(MessageToken.CurrentRegularExpressionsChanged, OnCurrentOCR_RegularExpressionsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			TemplatesIdentificatonRegEx = new VirtualList<TemplateIdentificatonRegEx>(vloader);
			TemplatesIdentificatonRegEx.LoadingStateChanged += TemplatesIdentificatonRegEx_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TemplatesIdentificatonRegEx, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TemplateIdentificatonRegEx> _TemplatesIdentificatonRegEx = null;
        public VirtualList<TemplateIdentificatonRegEx> TemplatesIdentificatonRegEx
        {
            get
            {
                return _TemplatesIdentificatonRegEx;
            }
            set
            {
                _TemplatesIdentificatonRegEx = value;
                NotifyPropertyChanged( x => x.TemplatesIdentificatonRegEx);
            }
        }

		 private void OnTemplatesIdentificatonRegExFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => TemplatesIdentificatonRegEx.Refresh()).ConfigureAwait(false);
            SelectedTemplatesIdentificatonRegEx.Clear();
            NotifyPropertyChanged(x => SelectedTemplatesIdentificatonRegEx);
            BeginSendMessage(MessageToken.SelectedTemplatesIdentificatonRegExChanged, new NotificationEventArgs(MessageToken.SelectedTemplatesIdentificatonRegExChanged));
        }

		void TemplatesIdentificatonRegEx_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TemplatesIdentificatonRegEx.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TemplatesIdentificatonRegEx);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TemplatesIdentificatonRegEx | Error occured..." + TemplatesIdentificatonRegEx.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TemplatesIdentificatonRegEx);
                    break;
            }
           
        }

		
		public readonly TemplateIdentificatonRegExVirturalListLoader vloader = new TemplateIdentificatonRegExVirturalListLoader();

		private ObservableCollection<TemplateIdentificatonRegEx> _selectedTemplatesIdentificatonRegEx = new ObservableCollection<TemplateIdentificatonRegEx>();
        public ObservableCollection<TemplateIdentificatonRegEx> SelectedTemplatesIdentificatonRegEx
        {
            get
            {
                return _selectedTemplatesIdentificatonRegEx;
            }
            set
            {
                _selectedTemplatesIdentificatonRegEx = value;
				BeginSendMessage(MessageToken.SelectedTemplatesIdentificatonRegExChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTemplatesIdentificatonRegExChanged));
				 NotifyPropertyChanged(x => SelectedTemplatesIdentificatonRegEx);
            }
        }

        internal virtual void OnCurrentTemplateIdentificatonRegExChanged(object sender, NotificationEventArgs<TemplateIdentificatonRegEx> e)
        {
            if(BaseViewModel.Instance.CurrentTemplateIdentificatonRegEx != null) BaseViewModel.Instance.CurrentTemplateIdentificatonRegEx.PropertyChanged += CurrentTemplateIdentificatonRegEx__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTemplateIdentificatonRegEx);
        }   

            void CurrentTemplateIdentificatonRegEx__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddOCR_Templates")
                   // {
                   //    if(Templates.Contains(CurrentTemplateIdentificatonRegEx.OCR_Templates) == false) Templates.Add(CurrentTemplateIdentificatonRegEx.OCR_Templates);
                    //}
                    //if (e.PropertyName == "AddOCR_RegularExpressions")
                   // {
                   //    if(RegularExpressions.Contains(CurrentTemplateIdentificatonRegEx.OCR_RegularExpressions) == false) RegularExpressions.Add(CurrentTemplateIdentificatonRegEx.OCR_RegularExpressions);
                    //}
                 } 
        internal virtual void OnTemplatesIdentificatonRegExChanged(object sender, NotificationEventArgs e)
        {
            _TemplatesIdentificatonRegEx.Refresh();
			NotifyPropertyChanged(x => this.TemplatesIdentificatonRegEx);
        }   


 	
		 internal virtual void OnCurrentOCR_TemplatesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Templates> e)
			{
			if(ViewCurrentOCR_Templates == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("TemplateId == {0}", e.Data.Id.ToString());
                 }

				TemplatesIdentificatonRegEx.Refresh();
				NotifyPropertyChanged(x => this.TemplatesIdentificatonRegEx);
                // SendMessage(MessageToken.TemplatesIdentificatonRegExChanged, new NotificationEventArgs(MessageToken.TemplatesIdentificatonRegExChanged));
                			}
	
		 internal virtual void OnCurrentOCR_RegularExpressionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<RegularExpressions> e)
			{
			if(ViewCurrentOCR_RegularExpressions == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("RegExId == {0}", e.Data.Id.ToString());
                 }

				TemplatesIdentificatonRegEx.Refresh();
				NotifyPropertyChanged(x => this.TemplatesIdentificatonRegEx);
                // SendMessage(MessageToken.TemplatesIdentificatonRegExChanged, new NotificationEventArgs(MessageToken.TemplatesIdentificatonRegExChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentOCR_Templates = false;
         public bool ViewCurrentOCR_Templates
         {
             get
             {
                 return _viewCurrentOCR_Templates;
             }
             set
             {
                 _viewCurrentOCR_Templates = value;
                 NotifyPropertyChanged(x => x.ViewCurrentOCR_Templates);
                FilterData();
             }
         }
 	
		 bool _viewCurrentOCR_RegularExpressions = false;
         public bool ViewCurrentOCR_RegularExpressions
         {
             get
             {
                 return _viewCurrentOCR_RegularExpressions;
             }
             set
             {
                 _viewCurrentOCR_RegularExpressions = value;
                 NotifyPropertyChanged(x => x.ViewCurrentOCR_RegularExpressions);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_TemplatesIdentificatonRegEx.Refresh();
			NotifyPropertyChanged(x => this.TemplatesIdentificatonRegEx);
		}

		public async Task SelectAll()
        {
            IEnumerable<TemplateIdentificatonRegEx> lst = null;
            using (var ctx = new TemplateIdentificatonRegExRepository())
            {
                lst = await ctx.GetTemplatesIdentificatonRegExByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTemplatesIdentificatonRegEx = new ObservableCollection<TemplateIdentificatonRegEx>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TemplatesIdentificatonRegEx.Refresh();
			NotifyPropertyChanged(x => this.TemplatesIdentificatonRegEx);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TemplateIdentificatonRegEx> lst = null;
            using (var ctx = new TemplateIdentificatonRegExRepository())
            {
                lst = await ctx.GetTemplatesIdentificatonRegExByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TemplateIdentificatonRegExExcelLine, List<TemplateIdentificatonRegExExcelLine>>
            {
                dataToPrint = lst.Select(x => new TemplateIdentificatonRegExExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class TemplateIdentificatonRegExExcelLine
        {
		        }

		
    }
}
		

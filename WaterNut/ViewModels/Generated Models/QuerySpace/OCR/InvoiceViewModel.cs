// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class InvoiceViewModel_AutoGen : ViewModelBase<InvoiceViewModel_AutoGen>
	{

       private static readonly InvoiceViewModel_AutoGen instance;
       static InvoiceViewModel_AutoGen()
        {
            instance = new InvoiceViewModel_AutoGen();
        }

       public static InvoiceViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public InvoiceViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<Invoice>(MessageToken.CurrentInvoiceChanged, OnCurrentInvoiceChanged);
            RegisterToReceiveMessages(MessageToken.InvoiceExsChanged, OnInvoiceExsChanged);
			RegisterToReceiveMessages(MessageToken.InvoiceExsFilterExpressionChanged, OnInvoiceExsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
                        RegisterToReceiveMessages<ApplicationSettings>(CoreEntities.MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
 

			InvoiceExs = new VirtualList<Invoice>(vloader);
			InvoiceExs.LoadingStateChanged += InvoiceExs_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(InvoiceExs, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<Invoice> _InvoiceExs = null;
        public VirtualList<Invoice> InvoiceExs
        {
            get
            {
                return _InvoiceExs;
            }
            set
            {
                _InvoiceExs = value;
                NotifyPropertyChanged( x => x.InvoiceExs);
            }
        }

		 private void OnInvoiceExsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => InvoiceExs.Refresh()).ConfigureAwait(false);
            SelectedInvoiceExs.Clear();
            NotifyPropertyChanged(x => SelectedInvoiceExs);
            BeginSendMessage(MessageToken.SelectedInvoiceExsChanged, new NotificationEventArgs(MessageToken.SelectedInvoiceExsChanged));
        }

		void InvoiceExs_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (InvoiceExs.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => InvoiceExs);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("InvoiceExs | Error occured..." + InvoiceExs.LastLoadingError.Message);
                    NotifyPropertyChanged(x => InvoiceExs);
                    break;
            }
           
        }

		
		public readonly InvoiceVirturalListLoader vloader = new InvoiceVirturalListLoader();

		private ObservableCollection<Invoice> _selectedInvoiceExs = new ObservableCollection<Invoice>();
        public ObservableCollection<Invoice> SelectedInvoiceExs
        {
            get
            {
                return _selectedInvoiceExs;
            }
            set
            {
                _selectedInvoiceExs = value;
				BeginSendMessage(MessageToken.SelectedInvoiceExsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedInvoiceExsChanged));
				 NotifyPropertyChanged(x => SelectedInvoiceExs);
            }
        }

        internal virtual void OnCurrentInvoiceChanged(object sender, NotificationEventArgs<Invoice> e)
        {
            if(BaseViewModel.Instance.CurrentInvoice != null) BaseViewModel.Instance.CurrentInvoice.PropertyChanged += CurrentInvoice__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentInvoice);
        }   

            void CurrentInvoice__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentInvoice.ApplicationSettings) == false) ApplicationSettings.Add(CurrentInvoice.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnInvoiceExsChanged(object sender, NotificationEventArgs e)
        {
            _InvoiceExs.Refresh();
			NotifyPropertyChanged(x => this.InvoiceExs);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    InvoiceExs.Refresh();
					NotifyPropertyChanged(x => this.InvoiceExs);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_InvoiceExs.Refresh();
			NotifyPropertyChanged(x => this.InvoiceExs);
		}

		public async Task SelectAll()
        {
            IEnumerable<Invoice> lst = null;
            using (var ctx = new InvoiceRepository())
            {
                lst = await ctx.GetInvoiceExsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedInvoiceExs = new ObservableCollection<Invoice>(lst);
        }

 

		private string _nameFilter;
        public string NameFilter
        {
            get
            {
                return _nameFilter;
            }
            set
            {
                _nameFilter = value;
				NotifyPropertyChanged(x => NameFilter);
                FilterData();
                
            }
        }	

 

		private string _typeFilter;
        public string TypeFilter
        {
            get
            {
                return _typeFilter;
            }
            set
            {
                _typeFilter = value;
				NotifyPropertyChanged(x => TypeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isActiveFilter;
        public Boolean? IsActiveFilter
        {
            get
            {
                return _isActiveFilter;
            }
            set
            {
                _isActiveFilter = value;
				NotifyPropertyChanged(x => IsActiveFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			InvoiceExs.Refresh();
			NotifyPropertyChanged(x => this.InvoiceExs);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(NameFilter) == false)
						res.Append(" && " + string.Format("Name.Contains(\"{0}\")",  NameFilter));						
 

									if(string.IsNullOrEmpty(TypeFilter) == false)
						res.Append(" && " + string.Format("Type.Contains(\"{0}\")",  TypeFilter));						
 

									if(IsActiveFilter.HasValue)
						res.Append(" && " + string.Format("IsActive == {0}",  IsActiveFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<Invoice> lst = null;
            using (var ctx = new InvoiceRepository())
            {
                lst = await ctx.GetInvoiceExsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<InvoiceExcelLine, List<InvoiceExcelLine>>
            {
                dataToPrint = lst.Select(x => new InvoiceExcelLine
                {
 
                    Name = x.Name ,
                    
 
                    Type = x.Type ,
                    
 
                    IsActive = x.IsActive 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class InvoiceExcelLine
        {
		 
                    public string Name { get; set; } 
                    
 
                    public string Type { get; set; } 
                    
 
                    public bool IsActive { get; set; } 
                    
        }

		
    }
}
		

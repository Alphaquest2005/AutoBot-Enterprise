// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class RegularExpressionsViewModel_AutoGen : ViewModelBase<RegularExpressionsViewModel_AutoGen>
	{

       private static readonly RegularExpressionsViewModel_AutoGen instance;
       static RegularExpressionsViewModel_AutoGen()
        {
            instance = new RegularExpressionsViewModel_AutoGen();
        }

       public static RegularExpressionsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public RegularExpressionsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<RegularExpressions>(MessageToken.CurrentRegularExpressionsChanged, OnCurrentRegularExpressionsChanged);
            RegisterToReceiveMessages(MessageToken.RegularExpressionsChanged, OnRegularExpressionsChanged);
			RegisterToReceiveMessages(MessageToken.RegularExpressionsFilterExpressionChanged, OnRegularExpressionsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			RegularExpressions = new VirtualList<RegularExpressions>(vloader);
			RegularExpressions.LoadingStateChanged += RegularExpressions_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(RegularExpressions, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<RegularExpressions> _RegularExpressions = null;
        public VirtualList<RegularExpressions> RegularExpressions
        {
            get
            {
                return _RegularExpressions;
            }
            set
            {
                _RegularExpressions = value;
                NotifyPropertyChanged( x => x.RegularExpressions);
            }
        }

		 private void OnRegularExpressionsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => RegularExpressions.Refresh()).ConfigureAwait(false);
            SelectedRegularExpressions.Clear();
            NotifyPropertyChanged(x => SelectedRegularExpressions);
            BeginSendMessage(MessageToken.SelectedRegularExpressionsChanged, new NotificationEventArgs(MessageToken.SelectedRegularExpressionsChanged));
        }

		void RegularExpressions_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (RegularExpressions.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => RegularExpressions);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("RegularExpressions | Error occured..." + RegularExpressions.LastLoadingError.Message);
                    NotifyPropertyChanged(x => RegularExpressions);
                    break;
            }
           
        }

		
		public readonly RegularExpressionsVirturalListLoader vloader = new RegularExpressionsVirturalListLoader();

		private ObservableCollection<RegularExpressions> _selectedRegularExpressions = new ObservableCollection<RegularExpressions>();
        public ObservableCollection<RegularExpressions> SelectedRegularExpressions
        {
            get
            {
                return _selectedRegularExpressions;
            }
            set
            {
                _selectedRegularExpressions = value;
				BeginSendMessage(MessageToken.SelectedRegularExpressionsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedRegularExpressionsChanged));
				 NotifyPropertyChanged(x => SelectedRegularExpressions);
            }
        }

        internal virtual void OnCurrentRegularExpressionsChanged(object sender, NotificationEventArgs<RegularExpressions> e)
        {
            if(BaseViewModel.Instance.CurrentRegularExpressions != null) BaseViewModel.Instance.CurrentRegularExpressions.PropertyChanged += CurrentRegularExpressions__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentRegularExpressions);
        }   

            void CurrentRegularExpressions__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnRegularExpressionsChanged(object sender, NotificationEventArgs e)
        {
            _RegularExpressions.Refresh();
			NotifyPropertyChanged(x => this.RegularExpressions);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_RegularExpressions.Refresh();
			NotifyPropertyChanged(x => this.RegularExpressions);
		}

		public async Task SelectAll()
        {
            IEnumerable<RegularExpressions> lst = null;
            using (var ctx = new RegularExpressionsRepository())
            {
                lst = await ctx.GetRegularExpressionsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedRegularExpressions = new ObservableCollection<RegularExpressions>(lst);
        }

 

		private string _regExFilter;
        public string RegExFilter
        {
            get
            {
                return _regExFilter;
            }
            set
            {
                _regExFilter = value;
				NotifyPropertyChanged(x => RegExFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _multiLineFilter;
        public Boolean? MultiLineFilter
        {
            get
            {
                return _multiLineFilter;
            }
            set
            {
                _multiLineFilter = value;
				NotifyPropertyChanged(x => MultiLineFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _maxLinesFilter;
        public Int32? MaxLinesFilter
        {
            get
            {
                return _maxLinesFilter;
            }
            set
            {
                _maxLinesFilter = value;
				NotifyPropertyChanged(x => MaxLinesFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			RegularExpressions.Refresh();
			NotifyPropertyChanged(x => this.RegularExpressions);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(RegExFilter) == false)
						res.Append(" && " + string.Format("RegEx.Contains(\"{0}\")",  RegExFilter));						
 

									if(MultiLineFilter.HasValue)
						res.Append(" && " + string.Format("MultiLine == {0}",  MultiLineFilter));						
 

					if(MaxLinesFilter.HasValue)
						res.Append(" && " + string.Format("MaxLines == {0}",  MaxLinesFilter.ToString()));							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<RegularExpressions> lst = null;
            using (var ctx = new RegularExpressionsRepository())
            {
                lst = await ctx.GetRegularExpressionsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<RegularExpressionsExcelLine, List<RegularExpressionsExcelLine>>
            {
                dataToPrint = lst.Select(x => new RegularExpressionsExcelLine
                {
 
                    RegEx = x.RegEx ,
                    
 
                    MultiLine = x.MultiLine ,
                    
 
                    MaxLines = x.MaxLines 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class RegularExpressionsExcelLine
        {
		 
                    public string RegEx { get; set; } 
                    
 
                    public Nullable<bool> MultiLine { get; set; } 
                    
 
                    public Nullable<int> MaxLines { get; set; } 
                    
        }

		
    }
}
		

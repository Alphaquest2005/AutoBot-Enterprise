// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class LineTypeFieldMappingsViewModel_AutoGen : ViewModelBase<LineTypeFieldMappingsViewModel_AutoGen>
	{

       private static readonly LineTypeFieldMappingsViewModel_AutoGen instance;
       static LineTypeFieldMappingsViewModel_AutoGen()
        {
            instance = new LineTypeFieldMappingsViewModel_AutoGen();
        }

       public static LineTypeFieldMappingsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public LineTypeFieldMappingsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<LineTypeFieldMappings>(MessageToken.CurrentLineTypeFieldMappingsChanged, OnCurrentLineTypeFieldMappingsChanged);
            RegisterToReceiveMessages(MessageToken.LineTypeFieldMappingsChanged, OnLineTypeFieldMappingsChanged);
			RegisterToReceiveMessages(MessageToken.LineTypeFieldMappingsFilterExpressionChanged, OnLineTypeFieldMappingsFilterExpressionChanged);

 
			RegisterToReceiveMessages<LineTypes>(MessageToken.CurrentLineTypesChanged, OnCurrentLineTypesChanged);

 			// Recieve messages for Core Current Entities Changed
 

			LineTypeFieldMappings = new VirtualList<LineTypeFieldMappings>(vloader);
			LineTypeFieldMappings.LoadingStateChanged += LineTypeFieldMappings_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(LineTypeFieldMappings, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<LineTypeFieldMappings> _LineTypeFieldMappings = null;
        public VirtualList<LineTypeFieldMappings> LineTypeFieldMappings
        {
            get
            {
                return _LineTypeFieldMappings;
            }
            set
            {
                _LineTypeFieldMappings = value;
            }
        }

		 private void OnLineTypeFieldMappingsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			LineTypeFieldMappings.Refresh();
            SelectedLineTypeFieldMappings.Clear();
            NotifyPropertyChanged(x => SelectedLineTypeFieldMappings);
            BeginSendMessage(MessageToken.SelectedLineTypeFieldMappingsChanged, new NotificationEventArgs(MessageToken.SelectedLineTypeFieldMappingsChanged));
        }

		void LineTypeFieldMappings_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (LineTypeFieldMappings.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => LineTypeFieldMappings);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("LineTypeFieldMappings | Error occured..." + LineTypeFieldMappings.LastLoadingError.Message);
                    NotifyPropertyChanged(x => LineTypeFieldMappings);
                    break;
            }
           
        }

		
		public readonly LineTypeFieldMappingsVirturalListLoader vloader = new LineTypeFieldMappingsVirturalListLoader();

		private ObservableCollection<LineTypeFieldMappings> _selectedLineTypeFieldMappings = new ObservableCollection<LineTypeFieldMappings>();
        public ObservableCollection<LineTypeFieldMappings> SelectedLineTypeFieldMappings
        {
            get
            {
                return _selectedLineTypeFieldMappings;
            }
            set
            {
                _selectedLineTypeFieldMappings = value;
				BeginSendMessage(MessageToken.SelectedLineTypeFieldMappingsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedLineTypeFieldMappingsChanged));
				 NotifyPropertyChanged(x => SelectedLineTypeFieldMappings);
            }
        }

        internal virtual void OnCurrentLineTypeFieldMappingsChanged(object sender, NotificationEventArgs<LineTypeFieldMappings> e)
        {
            if(BaseViewModel.Instance.CurrentLineTypeFieldMappings != null) BaseViewModel.Instance.CurrentLineTypeFieldMappings.PropertyChanged += CurrentLineTypeFieldMappings__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentLineTypeFieldMappings);
        }   

            void CurrentLineTypeFieldMappings__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddLineTypes")
                   // {
                   //    if(LineTypes.Contains(CurrentLineTypeFieldMappings.LineTypes) == false) LineTypes.Add(CurrentLineTypeFieldMappings.LineTypes);
                    //}
                 } 
        internal virtual void OnLineTypeFieldMappingsChanged(object sender, NotificationEventArgs e)
        {
            _LineTypeFieldMappings.Refresh();
			NotifyPropertyChanged(x => this.LineTypeFieldMappings);
        }   


 	
		 internal virtual void OnCurrentLineTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<LineTypes> e)
			{
			if(ViewCurrentLineTypes == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("LineTypeId == {0}", e.Data.Id.ToString());
                 }

				LineTypeFieldMappings.Refresh();
				NotifyPropertyChanged(x => this.LineTypeFieldMappings);
                // SendMessage(MessageToken.LineTypeFieldMappingsChanged, new NotificationEventArgs(MessageToken.LineTypeFieldMappingsChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentLineTypes = false;
         public bool ViewCurrentLineTypes
         {
             get
             {
                 return _viewCurrentLineTypes;
             }
             set
             {
                 _viewCurrentLineTypes = value;
                 NotifyPropertyChanged(x => x.ViewCurrentLineTypes);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_LineTypeFieldMappings.Refresh();
			NotifyPropertyChanged(x => this.LineTypeFieldMappings);
		}

		public async Task SelectAll()
        {
            IEnumerable<LineTypeFieldMappings> lst = null;
            using (var ctx = new LineTypeFieldMappingsRepository())
            {
                lst = await ctx.GetLineTypeFieldMappingsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedLineTypeFieldMappings = new ObservableCollection<LineTypeFieldMappings>(lst);
        }

 

		private string _keyFilter;
        public string KeyFilter
        {
            get
            {
                return _keyFilter;
            }
            set
            {
                _keyFilter = value;
				NotifyPropertyChanged(x => KeyFilter);
                FilterData();
                
            }
        }	

 

		private string _fieldFilter;
        public string FieldFilter
        {
            get
            {
                return _fieldFilter;
            }
            set
            {
                _fieldFilter = value;
				NotifyPropertyChanged(x => FieldFilter);
                FilterData();
                
            }
        }	

 

		private string _entityTypeFilter;
        public string EntityTypeFilter
        {
            get
            {
                return _entityTypeFilter;
            }
            set
            {
                _entityTypeFilter = value;
				NotifyPropertyChanged(x => EntityTypeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isRequiredFilter;
        public Boolean? IsRequiredFilter
        {
            get
            {
                return _isRequiredFilter;
            }
            set
            {
                _isRequiredFilter = value;
				NotifyPropertyChanged(x => IsRequiredFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			LineTypeFieldMappings.Refresh();
			NotifyPropertyChanged(x => this.LineTypeFieldMappings);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(KeyFilter) == false)
						res.Append(" && " + string.Format("Key.Contains(\"{0}\")",  KeyFilter));						
 

									if(string.IsNullOrEmpty(FieldFilter) == false)
						res.Append(" && " + string.Format("Field.Contains(\"{0}\")",  FieldFilter));						
 

									if(string.IsNullOrEmpty(EntityTypeFilter) == false)
						res.Append(" && " + string.Format("EntityType.Contains(\"{0}\")",  EntityTypeFilter));						
 

									if(IsRequiredFilter.HasValue)
						res.Append(" && " + string.Format("IsRequired == {0}",  IsRequiredFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<LineTypeFieldMappings> lst = null;
            using (var ctx = new LineTypeFieldMappingsRepository())
            {
                lst = await ctx.GetLineTypeFieldMappingsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<LineTypeFieldMappingsExcelLine, List<LineTypeFieldMappingsExcelLine>>
            {
                dataToPrint = lst.Select(x => new LineTypeFieldMappingsExcelLine
                {
 
                    Key = x.Key ,
                    
 
                    Field = x.Field ,
                    
 
                    EntityType = x.EntityType ,
                    
 
                    IsRequired = x.IsRequired 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class LineTypeFieldMappingsExcelLine
        {
		 
                    public string Key { get; set; } 
                    
 
                    public string Field { get; set; } 
                    
 
                    public string EntityType { get; set; } 
                    
 
                    public bool IsRequired { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class OCRCorrectionLearningViewModel_AutoGen : ViewModelBase<OCRCorrectionLearningViewModel_AutoGen>
	{

       private static readonly OCRCorrectionLearningViewModel_AutoGen instance;
       static OCRCorrectionLearningViewModel_AutoGen()
        {
            instance = new OCRCorrectionLearningViewModel_AutoGen();
        }

       public static OCRCorrectionLearningViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public OCRCorrectionLearningViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<OCRCorrectionLearning>(MessageToken.CurrentOCRCorrectionLearningChanged, OnCurrentOCRCorrectionLearningChanged);
            RegisterToReceiveMessages(MessageToken.OCRCorrectionLearningChanged, OnOCRCorrectionLearningChanged);
			RegisterToReceiveMessages(MessageToken.OCRCorrectionLearningFilterExpressionChanged, OnOCRCorrectionLearningFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			OCRCorrectionLearning = new VirtualList<OCRCorrectionLearning>(vloader);
			OCRCorrectionLearning.LoadingStateChanged += OCRCorrectionLearning_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(OCRCorrectionLearning, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<OCRCorrectionLearning> _OCRCorrectionLearning = null;
        public VirtualList<OCRCorrectionLearning> OCRCorrectionLearning
        {
            get
            {
                return _OCRCorrectionLearning;
            }
            set
            {
                _OCRCorrectionLearning = value;
                NotifyPropertyChanged( x => x.OCRCorrectionLearning);
            }
        }

		 private void OnOCRCorrectionLearningFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => OCRCorrectionLearning.Refresh()).ConfigureAwait(false);
            SelectedOCRCorrectionLearning.Clear();
            NotifyPropertyChanged(x => SelectedOCRCorrectionLearning);
            BeginSendMessage(MessageToken.SelectedOCRCorrectionLearningChanged, new NotificationEventArgs(MessageToken.SelectedOCRCorrectionLearningChanged));
        }

		void OCRCorrectionLearning_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (OCRCorrectionLearning.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => OCRCorrectionLearning);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("OCRCorrectionLearning | Error occured..." + OCRCorrectionLearning.LastLoadingError.Message);
                    NotifyPropertyChanged(x => OCRCorrectionLearning);
                    break;
            }
           
        }

		
		public readonly OCRCorrectionLearningVirturalListLoader vloader = new OCRCorrectionLearningVirturalListLoader();

		private ObservableCollection<OCRCorrectionLearning> _selectedOCRCorrectionLearning = new ObservableCollection<OCRCorrectionLearning>();
        public ObservableCollection<OCRCorrectionLearning> SelectedOCRCorrectionLearning
        {
            get
            {
                return _selectedOCRCorrectionLearning;
            }
            set
            {
                _selectedOCRCorrectionLearning = value;
				BeginSendMessage(MessageToken.SelectedOCRCorrectionLearningChanged,
                                    new NotificationEventArgs(MessageToken.SelectedOCRCorrectionLearningChanged));
				 NotifyPropertyChanged(x => SelectedOCRCorrectionLearning);
            }
        }

        internal virtual void OnCurrentOCRCorrectionLearningChanged(object sender, NotificationEventArgs<OCRCorrectionLearning> e)
        {
            if(BaseViewModel.Instance.CurrentOCRCorrectionLearning != null) BaseViewModel.Instance.CurrentOCRCorrectionLearning.PropertyChanged += CurrentOCRCorrectionLearning__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentOCRCorrectionLearning);
        }   

            void CurrentOCRCorrectionLearning__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnOCRCorrectionLearningChanged(object sender, NotificationEventArgs e)
        {
            _OCRCorrectionLearning.Refresh();
			NotifyPropertyChanged(x => this.OCRCorrectionLearning);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_OCRCorrectionLearning.Refresh();
			NotifyPropertyChanged(x => this.OCRCorrectionLearning);
		}

		public async Task SelectAll()
        {
            IEnumerable<OCRCorrectionLearning> lst = null;
            using (var ctx = new OCRCorrectionLearningRepository())
            {
                lst = await ctx.GetOCRCorrectionLearningByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedOCRCorrectionLearning = new ObservableCollection<OCRCorrectionLearning>(lst);
        }

 

		private string _fieldNameFilter;
        public string FieldNameFilter
        {
            get
            {
                return _fieldNameFilter;
            }
            set
            {
                _fieldNameFilter = value;
				NotifyPropertyChanged(x => FieldNameFilter);
                FilterData();
                
            }
        }	

 

		private string _originalErrorFilter;
        public string OriginalErrorFilter
        {
            get
            {
                return _originalErrorFilter;
            }
            set
            {
                _originalErrorFilter = value;
				NotifyPropertyChanged(x => OriginalErrorFilter);
                FilterData();
                
            }
        }	

 

		private string _correctValueFilter;
        public string CorrectValueFilter
        {
            get
            {
                return _correctValueFilter;
            }
            set
            {
                _correctValueFilter = value;
				NotifyPropertyChanged(x => CorrectValueFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _lineNumberFilter;
        public Int32? LineNumberFilter
        {
            get
            {
                return _lineNumberFilter;
            }
            set
            {
                _lineNumberFilter = value;
				NotifyPropertyChanged(x => LineNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _lineTextFilter;
        public string LineTextFilter
        {
            get
            {
                return _lineTextFilter;
            }
            set
            {
                _lineTextFilter = value;
				NotifyPropertyChanged(x => LineTextFilter);
                FilterData();
                
            }
        }	

 

		private string _windowTextFilter;
        public string WindowTextFilter
        {
            get
            {
                return _windowTextFilter;
            }
            set
            {
                _windowTextFilter = value;
				NotifyPropertyChanged(x => WindowTextFilter);
                FilterData();
                
            }
        }	

 

		private string _correctionTypeFilter;
        public string CorrectionTypeFilter
        {
            get
            {
                return _correctionTypeFilter;
            }
            set
            {
                _correctionTypeFilter = value;
				NotifyPropertyChanged(x => CorrectionTypeFilter);
                FilterData();
                
            }
        }	

 

		private string _deepSeekReasoningFilter;
        public string DeepSeekReasoningFilter
        {
            get
            {
                return _deepSeekReasoningFilter;
            }
            set
            {
                _deepSeekReasoningFilter = value;
				NotifyPropertyChanged(x => DeepSeekReasoningFilter);
                FilterData();
                
            }
        }	

 

		private Double? _confidenceFilter;
        public Double? ConfidenceFilter
        {
            get
            {
                return _confidenceFilter;
            }
            set
            {
                _confidenceFilter = value;
				NotifyPropertyChanged(x => ConfidenceFilter);
                FilterData();
                
            }
        }	

 

		private string _filePathFilter;
        public string FilePathFilter
        {
            get
            {
                return _filePathFilter;
            }
            set
            {
                _filePathFilter = value;
				NotifyPropertyChanged(x => FilePathFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _successFilter;
        public Boolean? SuccessFilter
        {
            get
            {
                return _successFilter;
            }
            set
            {
                _successFilter = value;
				NotifyPropertyChanged(x => SuccessFilter);
                FilterData();
                
            }
        }	

 

		private string _errorMessageFilter;
        public string ErrorMessageFilter
        {
            get
            {
                return _errorMessageFilter;
            }
            set
            {
                _errorMessageFilter = value;
				NotifyPropertyChanged(x => ErrorMessageFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startCreatedDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartCreatedDateFilter
        {
            get
            {
                return _startCreatedDateFilter;
            }
            set
            {
                _startCreatedDateFilter = value;
				NotifyPropertyChanged(x => StartCreatedDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endCreatedDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndCreatedDateFilter
        {
            get
            {
                return _endCreatedDateFilter;
            }
            set
            {
                _endCreatedDateFilter = value;
				NotifyPropertyChanged(x => EndCreatedDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _createdDateFilter;
        public DateTime? CreatedDateFilter
        {
            get
            {
                return _createdDateFilter;
            }
            set
            {
                _createdDateFilter = value;
				NotifyPropertyChanged(x => CreatedDateFilter);
                FilterData();
                
            }
        }	

 

		private string _createdByFilter;
        public string CreatedByFilter
        {
            get
            {
                return _createdByFilter;
            }
            set
            {
                _createdByFilter = value;
				NotifyPropertyChanged(x => CreatedByFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _requiresMultilineRegexFilter;
        public Boolean? RequiresMultilineRegexFilter
        {
            get
            {
                return _requiresMultilineRegexFilter;
            }
            set
            {
                _requiresMultilineRegexFilter = value;
				NotifyPropertyChanged(x => RequiresMultilineRegexFilter);
                FilterData();
                
            }
        }	

 

		private string _contextLinesBeforeFilter;
        public string ContextLinesBeforeFilter
        {
            get
            {
                return _contextLinesBeforeFilter;
            }
            set
            {
                _contextLinesBeforeFilter = value;
				NotifyPropertyChanged(x => ContextLinesBeforeFilter);
                FilterData();
                
            }
        }	

 

		private string _contextLinesAfterFilter;
        public string ContextLinesAfterFilter
        {
            get
            {
                return _contextLinesAfterFilter;
            }
            set
            {
                _contextLinesAfterFilter = value;
				NotifyPropertyChanged(x => ContextLinesAfterFilter);
                FilterData();
                
            }
        }	

 

		private string _suggestedRegexFilter;
        public string SuggestedRegexFilter
        {
            get
            {
                return _suggestedRegexFilter;
            }
            set
            {
                _suggestedRegexFilter = value;
				NotifyPropertyChanged(x => SuggestedRegexFilter);
                FilterData();
                
            }
        }	

 

		private string _suggestedRegex_IndexedFilter;
        public string SuggestedRegex_IndexedFilter
        {
            get
            {
                return _suggestedRegex_IndexedFilter;
            }
            set
            {
                _suggestedRegex_IndexedFilter = value;
				NotifyPropertyChanged(x => SuggestedRegex_IndexedFilter);
                FilterData();
                
            }
        }	

 

		private string _documentTypeFilter;
        public string DocumentTypeFilter
        {
            get
            {
                return _documentTypeFilter;
            }
            set
            {
                _documentTypeFilter = value;
				NotifyPropertyChanged(x => DocumentTypeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			OCRCorrectionLearning.Refresh();
			NotifyPropertyChanged(x => this.OCRCorrectionLearning);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(FieldNameFilter) == false)
						res.Append(" && " + string.Format("FieldName.Contains(\"{0}\")",  FieldNameFilter));						
 

									if(string.IsNullOrEmpty(OriginalErrorFilter) == false)
						res.Append(" && " + string.Format("OriginalError.Contains(\"{0}\")",  OriginalErrorFilter));						
 

									if(string.IsNullOrEmpty(CorrectValueFilter) == false)
						res.Append(" && " + string.Format("CorrectValue.Contains(\"{0}\")",  CorrectValueFilter));						
 

					if(LineNumberFilter.HasValue)
						res.Append(" && " + string.Format("LineNumber == {0}",  LineNumberFilter.ToString()));				 

									if(string.IsNullOrEmpty(LineTextFilter) == false)
						res.Append(" && " + string.Format("LineText.Contains(\"{0}\")",  LineTextFilter));						
 

									if(string.IsNullOrEmpty(WindowTextFilter) == false)
						res.Append(" && " + string.Format("WindowText.Contains(\"{0}\")",  WindowTextFilter));						
 

									if(string.IsNullOrEmpty(CorrectionTypeFilter) == false)
						res.Append(" && " + string.Format("CorrectionType.Contains(\"{0}\")",  CorrectionTypeFilter));						
 

									if(string.IsNullOrEmpty(DeepSeekReasoningFilter) == false)
						res.Append(" && " + string.Format("DeepSeekReasoning.Contains(\"{0}\")",  DeepSeekReasoningFilter));						
 

					if(ConfidenceFilter.HasValue)
						res.Append(" && " + string.Format("Confidence == {0}",  ConfidenceFilter.ToString()));				 

									if(string.IsNullOrEmpty(FilePathFilter) == false)
						res.Append(" && " + string.Format("FilePath.Contains(\"{0}\")",  FilePathFilter));						
 

									if(SuccessFilter.HasValue)
						res.Append(" && " + string.Format("Success == {0}",  SuccessFilter));						
 

									if(string.IsNullOrEmpty(ErrorMessageFilter) == false)
						res.Append(" && " + string.Format("ErrorMessage.Contains(\"{0}\")",  ErrorMessageFilter));						
 

 

				if (Convert.ToDateTime(StartCreatedDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartCreatedDateFilter).Date != DateTime.MinValue)
						{
							if(StartCreatedDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("CreatedDate >= \"{0}\"",  Convert.ToDateTime(StartCreatedDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue)
						{
							if(EndCreatedDateFilter.HasValue)
								res.Append(" && " + string.Format("CreatedDate <= \"{0}\"",  Convert.ToDateTime(EndCreatedDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartCreatedDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_createdDateFilter).Date != DateTime.MinValue)
						{
							if(CreatedDateFilter.HasValue)
								res.Append(" && " + string.Format("CreatedDate == \"{0}\"",  Convert.ToDateTime(CreatedDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(CreatedByFilter) == false)
						res.Append(" && " + string.Format("CreatedBy.Contains(\"{0}\")",  CreatedByFilter));						
 

									if(RequiresMultilineRegexFilter.HasValue)
						res.Append(" && " + string.Format("RequiresMultilineRegex == {0}",  RequiresMultilineRegexFilter));						
 

									if(string.IsNullOrEmpty(ContextLinesBeforeFilter) == false)
						res.Append(" && " + string.Format("ContextLinesBefore.Contains(\"{0}\")",  ContextLinesBeforeFilter));						
 

									if(string.IsNullOrEmpty(ContextLinesAfterFilter) == false)
						res.Append(" && " + string.Format("ContextLinesAfter.Contains(\"{0}\")",  ContextLinesAfterFilter));						
 

									if(string.IsNullOrEmpty(SuggestedRegexFilter) == false)
						res.Append(" && " + string.Format("SuggestedRegex.Contains(\"{0}\")",  SuggestedRegexFilter));						
 

									if(string.IsNullOrEmpty(SuggestedRegex_IndexedFilter) == false)
						res.Append(" && " + string.Format("SuggestedRegex_Indexed.Contains(\"{0}\")",  SuggestedRegex_IndexedFilter));						
 

									if(string.IsNullOrEmpty(DocumentTypeFilter) == false)
						res.Append(" && " + string.Format("DocumentType.Contains(\"{0}\")",  DocumentTypeFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<OCRCorrectionLearning> lst = null;
            using (var ctx = new OCRCorrectionLearningRepository())
            {
                lst = await ctx.GetOCRCorrectionLearningByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<OCRCorrectionLearningExcelLine, List<OCRCorrectionLearningExcelLine>>
            {
                dataToPrint = lst.Select(x => new OCRCorrectionLearningExcelLine
                {
 
                    FieldName = x.FieldName ,
                    
 
                    OriginalError = x.OriginalError ,
                    
 
                    CorrectValue = x.CorrectValue ,
                    
 
                    LineNumber = x.LineNumber ,
                    
 
                    LineText = x.LineText ,
                    
 
                    WindowText = x.WindowText ,
                    
 
                    CorrectionType = x.CorrectionType ,
                    
 
                    DeepSeekReasoning = x.DeepSeekReasoning ,
                    
 
                    Confidence = x.Confidence ,
                    
 
                    FilePath = x.FilePath ,
                    
 
                    Success = x.Success ,
                    
 
                    ErrorMessage = x.ErrorMessage ,
                    
 
                    CreatedDate = x.CreatedDate ,
                    
 
                    CreatedBy = x.CreatedBy ,
                    
 
                    RequiresMultilineRegex = x.RequiresMultilineRegex ,
                    
 
                    ContextLinesBefore = x.ContextLinesBefore ,
                    
 
                    ContextLinesAfter = x.ContextLinesAfter ,
                    
 
                    SuggestedRegex = x.SuggestedRegex ,
                    
 
                    SuggestedRegex_Indexed = x.SuggestedRegex_Indexed ,
                    
 
                    DocumentType = x.DocumentType 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class OCRCorrectionLearningExcelLine
        {
		 
                    public string FieldName { get; set; } 
                    
 
                    public string OriginalError { get; set; } 
                    
 
                    public string CorrectValue { get; set; } 
                    
 
                    public Nullable<int> LineNumber { get; set; } 
                    
 
                    public string LineText { get; set; } 
                    
 
                    public string WindowText { get; set; } 
                    
 
                    public string CorrectionType { get; set; } 
                    
 
                    public string DeepSeekReasoning { get; set; } 
                    
 
                    public Nullable<double> Confidence { get; set; } 
                    
 
                    public string FilePath { get; set; } 
                    
 
                    public bool Success { get; set; } 
                    
 
                    public string ErrorMessage { get; set; } 
                    
 
                    public System.DateTime CreatedDate { get; set; } 
                    
 
                    public string CreatedBy { get; set; } 
                    
 
                    public Nullable<bool> RequiresMultilineRegex { get; set; } 
                    
 
                    public string ContextLinesBefore { get; set; } 
                    
 
                    public string ContextLinesAfter { get; set; } 
                    
 
                    public string SuggestedRegex { get; set; } 
                    
 
                    public string SuggestedRegex_Indexed { get; set; } 
                    
 
                    public string DocumentType { get; set; } 
                    
        }

		
    }
}
		

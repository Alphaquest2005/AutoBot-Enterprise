// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OCR.Client.Entities;
using OCR.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.OCR.ViewModels
{
    
	public partial class OCR_TemplateTableMappingViewModel_AutoGen : ViewModelBase<OCR_TemplateTableMappingViewModel_AutoGen>
	{

       private static readonly OCR_TemplateTableMappingViewModel_AutoGen instance;
       static OCR_TemplateTableMappingViewModel_AutoGen()
        {
            instance = new OCR_TemplateTableMappingViewModel_AutoGen();
        }

       public static OCR_TemplateTableMappingViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public OCR_TemplateTableMappingViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<OCR_TemplateTableMapping>(MessageToken.CurrentOCR_TemplateTableMappingChanged, OnCurrentOCR_TemplateTableMappingChanged);
            RegisterToReceiveMessages(MessageToken.OCR_TemplateTableMappingChanged, OnOCR_TemplateTableMappingChanged);
			RegisterToReceiveMessages(MessageToken.OCR_TemplateTableMappingFilterExpressionChanged, OnOCR_TemplateTableMappingFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			OCR_TemplateTableMapping = new VirtualList<OCR_TemplateTableMapping>(vloader);
			OCR_TemplateTableMapping.LoadingStateChanged += OCR_TemplateTableMapping_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(OCR_TemplateTableMapping, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<OCR_TemplateTableMapping> _OCR_TemplateTableMapping = null;
        public VirtualList<OCR_TemplateTableMapping> OCR_TemplateTableMapping
        {
            get
            {
                return _OCR_TemplateTableMapping;
            }
            set
            {
                _OCR_TemplateTableMapping = value;
                NotifyPropertyChanged( x => x.OCR_TemplateTableMapping);
            }
        }

		 private void OnOCR_TemplateTableMappingFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => OCR_TemplateTableMapping.Refresh()).ConfigureAwait(false);
            SelectedOCR_TemplateTableMapping.Clear();
            NotifyPropertyChanged(x => SelectedOCR_TemplateTableMapping);
            BeginSendMessage(MessageToken.SelectedOCR_TemplateTableMappingChanged, new NotificationEventArgs(MessageToken.SelectedOCR_TemplateTableMappingChanged));
        }

		void OCR_TemplateTableMapping_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (OCR_TemplateTableMapping.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => OCR_TemplateTableMapping);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("OCR_TemplateTableMapping | Error occured..." + OCR_TemplateTableMapping.LastLoadingError.Message);
                    NotifyPropertyChanged(x => OCR_TemplateTableMapping);
                    break;
            }
           
        }

		
		public readonly OCR_TemplateTableMappingVirturalListLoader vloader = new OCR_TemplateTableMappingVirturalListLoader();

		private ObservableCollection<OCR_TemplateTableMapping> _selectedOCR_TemplateTableMapping = new ObservableCollection<OCR_TemplateTableMapping>();
        public ObservableCollection<OCR_TemplateTableMapping> SelectedOCR_TemplateTableMapping
        {
            get
            {
                return _selectedOCR_TemplateTableMapping;
            }
            set
            {
                _selectedOCR_TemplateTableMapping = value;
				BeginSendMessage(MessageToken.SelectedOCR_TemplateTableMappingChanged,
                                    new NotificationEventArgs(MessageToken.SelectedOCR_TemplateTableMappingChanged));
				 NotifyPropertyChanged(x => SelectedOCR_TemplateTableMapping);
            }
        }

        internal virtual void OnCurrentOCR_TemplateTableMappingChanged(object sender, NotificationEventArgs<OCR_TemplateTableMapping> e)
        {
            if(BaseViewModel.Instance.CurrentOCR_TemplateTableMapping != null) BaseViewModel.Instance.CurrentOCR_TemplateTableMapping.PropertyChanged += CurrentOCR_TemplateTableMapping__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentOCR_TemplateTableMapping);
        }   

            void CurrentOCR_TemplateTableMapping__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddOCR_TemplateTableMapping2")
                   // {
                   //    if(OCR_TemplateTableMapping.Contains(CurrentOCR_TemplateTableMapping.OCR_TemplateTableMapping2) == false) OCR_TemplateTableMapping.Add(CurrentOCR_TemplateTableMapping.OCR_TemplateTableMapping2);
                    //}
                 } 
        internal virtual void OnOCR_TemplateTableMappingChanged(object sender, NotificationEventArgs e)
        {
            _OCR_TemplateTableMapping.Refresh();
			NotifyPropertyChanged(x => this.OCR_TemplateTableMapping);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_OCR_TemplateTableMapping.Refresh();
			NotifyPropertyChanged(x => this.OCR_TemplateTableMapping);
		}

		public async Task SelectAll()
        {
            IEnumerable<OCR_TemplateTableMapping> lst = null;
            using (var ctx = new OCR_TemplateTableMappingRepository())
            {
                lst = await ctx.GetOCR_TemplateTableMappingByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedOCR_TemplateTableMapping = new ObservableCollection<OCR_TemplateTableMapping>(lst);
        }

 

		private string _documentTypeFilter;
        public string DocumentTypeFilter
        {
            get
            {
                return _documentTypeFilter;
            }
            set
            {
                _documentTypeFilter = value;
				NotifyPropertyChanged(x => DocumentTypeFilter);
                FilterData();
                
            }
        }	

 

		private string _targetTableFilter;
        public string TargetTableFilter
        {
            get
            {
                return _targetTableFilter;
            }
            set
            {
                _targetTableFilter = value;
				NotifyPropertyChanged(x => TargetTableFilter);
                FilterData();
                
            }
        }	

 

		private string _keywordsFilter;
        public string KeywordsFilter
        {
            get
            {
                return _keywordsFilter;
            }
            set
            {
                _keywordsFilter = value;
				NotifyPropertyChanged(x => KeywordsFilter);
                FilterData();
                
            }
        }	

 

		private string _requiredFieldsFilter;
        public string RequiredFieldsFilter
        {
            get
            {
                return _requiredFieldsFilter;
            }
            set
            {
                _requiredFieldsFilter = value;
				NotifyPropertyChanged(x => RequiredFieldsFilter);
                FilterData();
                
            }
        }	

 

		private string _templatePrefixFilter;
        public string TemplatePrefixFilter
        {
            get
            {
                return _templatePrefixFilter;
            }
            set
            {
                _templatePrefixFilter = value;
				NotifyPropertyChanged(x => TemplatePrefixFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _priorityFilter;
        public Int32? PriorityFilter
        {
            get
            {
                return _priorityFilter;
            }
            set
            {
                _priorityFilter = value;
				NotifyPropertyChanged(x => PriorityFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isActiveFilter;
        public Boolean? IsActiveFilter
        {
            get
            {
                return _isActiveFilter;
            }
            set
            {
                _isActiveFilter = value;
				NotifyPropertyChanged(x => IsActiveFilter);
                FilterData();
                
            }
        }	

 

		private string _descriptionFilter;
        public string DescriptionFilter
        {
            get
            {
                return _descriptionFilter;
            }
            set
            {
                _descriptionFilter = value;
				NotifyPropertyChanged(x => DescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _optionalFieldsFilter;
        public string OptionalFieldsFilter
        {
            get
            {
                return _optionalFieldsFilter;
            }
            set
            {
                _optionalFieldsFilter = value;
				NotifyPropertyChanged(x => OptionalFieldsFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _matchThresholdFilter;
        public Decimal? MatchThresholdFilter
        {
            get
            {
                return _matchThresholdFilter;
            }
            set
            {
                _matchThresholdFilter = value;
				NotifyPropertyChanged(x => MatchThresholdFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isSystemEntityFilter;
        public Boolean? IsSystemEntityFilter
        {
            get
            {
                return _isSystemEntityFilter;
            }
            set
            {
                _isSystemEntityFilter = value;
				NotifyPropertyChanged(x => IsSystemEntityFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startCreatedDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartCreatedDateFilter
        {
            get
            {
                return _startCreatedDateFilter;
            }
            set
            {
                _startCreatedDateFilter = value;
				NotifyPropertyChanged(x => StartCreatedDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endCreatedDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndCreatedDateFilter
        {
            get
            {
                return _endCreatedDateFilter;
            }
            set
            {
                _endCreatedDateFilter = value;
				NotifyPropertyChanged(x => EndCreatedDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _createdDateFilter;
        public DateTime? CreatedDateFilter
        {
            get
            {
                return _createdDateFilter;
            }
            set
            {
                _createdDateFilter = value;
				NotifyPropertyChanged(x => CreatedDateFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startLastUpdatedFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartLastUpdatedFilter
        {
            get
            {
                return _startLastUpdatedFilter;
            }
            set
            {
                _startLastUpdatedFilter = value;
				NotifyPropertyChanged(x => StartLastUpdatedFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endLastUpdatedFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndLastUpdatedFilter
        {
            get
            {
                return _endLastUpdatedFilter;
            }
            set
            {
                _endLastUpdatedFilter = value;
				NotifyPropertyChanged(x => EndLastUpdatedFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _lastUpdatedFilter;
        public DateTime? LastUpdatedFilter
        {
            get
            {
                return _lastUpdatedFilter;
            }
            set
            {
                _lastUpdatedFilter = value;
				NotifyPropertyChanged(x => LastUpdatedFilter);
                FilterData();
                
            }
        }	

 

		private string _createdByFilter;
        public string CreatedByFilter
        {
            get
            {
                return _createdByFilter;
            }
            set
            {
                _createdByFilter = value;
				NotifyPropertyChanged(x => CreatedByFilter);
                FilterData();
                
            }
        }	

 

		private string _processingNotesFilter;
        public string ProcessingNotesFilter
        {
            get
            {
                return _processingNotesFilter;
            }
            set
            {
                _processingNotesFilter = value;
				NotifyPropertyChanged(x => ProcessingNotesFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			OCR_TemplateTableMapping.Refresh();
			NotifyPropertyChanged(x => this.OCR_TemplateTableMapping);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(DocumentTypeFilter) == false)
						res.Append(" && " + string.Format("DocumentType.Contains(\"{0}\")",  DocumentTypeFilter));						
 

									if(string.IsNullOrEmpty(TargetTableFilter) == false)
						res.Append(" && " + string.Format("TargetTable.Contains(\"{0}\")",  TargetTableFilter));						
 

									if(string.IsNullOrEmpty(KeywordsFilter) == false)
						res.Append(" && " + string.Format("Keywords.Contains(\"{0}\")",  KeywordsFilter));						
 

									if(string.IsNullOrEmpty(RequiredFieldsFilter) == false)
						res.Append(" && " + string.Format("RequiredFields.Contains(\"{0}\")",  RequiredFieldsFilter));						
 

									if(string.IsNullOrEmpty(TemplatePrefixFilter) == false)
						res.Append(" && " + string.Format("TemplatePrefix.Contains(\"{0}\")",  TemplatePrefixFilter));						
 

					if(PriorityFilter.HasValue)
						res.Append(" && " + string.Format("Priority == {0}",  PriorityFilter.ToString()));				 

									if(IsActiveFilter.HasValue)
						res.Append(" && " + string.Format("IsActive == {0}",  IsActiveFilter));						
 

									if(string.IsNullOrEmpty(DescriptionFilter) == false)
						res.Append(" && " + string.Format("Description.Contains(\"{0}\")",  DescriptionFilter));						
 

									if(string.IsNullOrEmpty(OptionalFieldsFilter) == false)
						res.Append(" && " + string.Format("OptionalFields.Contains(\"{0}\")",  OptionalFieldsFilter));						
 

					if(MatchThresholdFilter.HasValue)
						res.Append(" && " + string.Format("MatchThreshold == {0}",  MatchThresholdFilter.ToString()));				 

									if(IsSystemEntityFilter.HasValue)
						res.Append(" && " + string.Format("IsSystemEntity == {0}",  IsSystemEntityFilter));						
 

 

				if (Convert.ToDateTime(StartCreatedDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartCreatedDateFilter).Date != DateTime.MinValue)
						{
							if(StartCreatedDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("CreatedDate >= \"{0}\"",  Convert.ToDateTime(StartCreatedDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue)
						{
							if(EndCreatedDateFilter.HasValue)
								res.Append(" && " + string.Format("CreatedDate <= \"{0}\"",  Convert.ToDateTime(EndCreatedDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartCreatedDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndCreatedDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_createdDateFilter).Date != DateTime.MinValue)
						{
							if(CreatedDateFilter.HasValue)
								res.Append(" && " + string.Format("CreatedDate == \"{0}\"",  Convert.ToDateTime(CreatedDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

 

				if (Convert.ToDateTime(StartLastUpdatedFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndLastUpdatedFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartLastUpdatedFilter).Date != DateTime.MinValue)
						{
							if(StartLastUpdatedFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndLastUpdatedFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("LastUpdated >= \"{0}\"",  Convert.ToDateTime(StartLastUpdatedFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndLastUpdatedFilter).Date != DateTime.MinValue)
						{
							if(EndLastUpdatedFilter.HasValue)
								res.Append(" && " + string.Format("LastUpdated <= \"{0}\"",  Convert.ToDateTime(EndLastUpdatedFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartLastUpdatedFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndLastUpdatedFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_lastUpdatedFilter).Date != DateTime.MinValue)
						{
							if(LastUpdatedFilter.HasValue)
								res.Append(" && " + string.Format("LastUpdated == \"{0}\"",  Convert.ToDateTime(LastUpdatedFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(CreatedByFilter) == false)
						res.Append(" && " + string.Format("CreatedBy.Contains(\"{0}\")",  CreatedByFilter));						
 

									if(string.IsNullOrEmpty(ProcessingNotesFilter) == false)
						res.Append(" && " + string.Format("ProcessingNotes.Contains(\"{0}\")",  ProcessingNotesFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<OCR_TemplateTableMapping> lst = null;
            using (var ctx = new OCR_TemplateTableMappingRepository())
            {
                lst = await ctx.GetOCR_TemplateTableMappingByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<OCR_TemplateTableMappingExcelLine, List<OCR_TemplateTableMappingExcelLine>>
            {
                dataToPrint = lst.Select(x => new OCR_TemplateTableMappingExcelLine
                {
 
                    DocumentType = x.DocumentType ,
                    
 
                    TargetTable = x.TargetTable ,
                    
 
                    Keywords = x.Keywords ,
                    
 
                    RequiredFields = x.RequiredFields ,
                    
 
                    TemplatePrefix = x.TemplatePrefix ,
                    
 
                    Priority = x.Priority ,
                    
 
                    IsActive = x.IsActive ,
                    
 
                    Description = x.Description ,
                    
 
                    OptionalFields = x.OptionalFields ,
                    
 
                    MatchThreshold = x.MatchThreshold ,
                    
 
                    IsSystemEntity = x.IsSystemEntity ,
                    
 
                    CreatedDate = x.CreatedDate ,
                    
 
                    LastUpdated = x.LastUpdated ,
                    
 
                    CreatedBy = x.CreatedBy ,
                    
 
                    ProcessingNotes = x.ProcessingNotes 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class OCR_TemplateTableMappingExcelLine
        {
		 
                    public string DocumentType { get; set; } 
                    
 
                    public string TargetTable { get; set; } 
                    
 
                    public string Keywords { get; set; } 
                    
 
                    public string RequiredFields { get; set; } 
                    
 
                    public string TemplatePrefix { get; set; } 
                    
 
                    public int Priority { get; set; } 
                    
 
                    public bool IsActive { get; set; } 
                    
 
                    public string Description { get; set; } 
                    
 
                    public string OptionalFields { get; set; } 
                    
 
                    public decimal MatchThreshold { get; set; } 
                    
 
                    public bool IsSystemEntity { get; set; } 
                    
 
                    public System.DateTime CreatedDate { get; set; } 
                    
 
                    public System.DateTime LastUpdated { get; set; } 
                    
 
                    public string CreatedBy { get; set; } 
                    
 
                    public string ProcessingNotes { get; set; } 
                    
        }

		
    }
}
		

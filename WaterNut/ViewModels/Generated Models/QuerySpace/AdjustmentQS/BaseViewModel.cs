// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using AdjustmentQS.Client.Entities;
using AdjustmentQS.Client.Repositories;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;



namespace WaterNut.QuerySpace.AdjustmentQS.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // CoreEntities.ViewModels.BaseViewModel
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class AdjustmentQSOnCreated: BaseViewModel
        {
           // Load Repository
                public AdjustmentQSOnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentAdjustmentDetailIDChanged, OnCurrentAdjustmentDetailIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAdjustmentExIDChanged, OnCurrentAdjustmentExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAdjustmentOverIDChanged, OnCurrentAdjustmentOverIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAdjustmentOversAllocationIDChanged, OnCurrentAdjustmentOversAllocationIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAdjustmentShortIDChanged, OnCurrentAdjustmentShortIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentEntryDataIDChanged, OnCurrentAsycudaDocumentEntryDataIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailIDChanged, OnCurrentAsycudaDocumentItemEntryDataDetailIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentItemLastItemCostIDChanged, OnCurrentAsycudaDocumentItemLastItemCostIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentSetEntryDataIDChanged, OnCurrentAsycudaDocumentSetEntryDataIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaSalesAllocationIDChanged, OnCurrentAsycudaSalesAllocationIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEntryDataDetailIDChanged, OnCurrentEntryDataDetailIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInventoryItemAliasExIDChanged, OnCurrentInventoryItemAliasExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInventoryItemsExIDChanged, OnCurrentInventoryItemsExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentShortAllocationIDChanged, OnCurrentShortAllocationIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.Currentxcuda_ItemIDChanged, OnCurrentxcuda_ItemIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<AdjustmentDetail>(MessageToken.CurrentAdjustmentDetailChanged, OnCurrentAdjustmentDetailChanged);
                        RegisterToReceiveMessages<AdjustmentEx>(MessageToken.CurrentAdjustmentExChanged, OnCurrentAdjustmentExChanged);
                        RegisterToReceiveMessages<AdjustmentOver>(MessageToken.CurrentAdjustmentOverChanged, OnCurrentAdjustmentOverChanged);
                        RegisterToReceiveMessages<AdjustmentOversAllocation>(MessageToken.CurrentAdjustmentOversAllocationChanged, OnCurrentAdjustmentOversAllocationChanged);
                        RegisterToReceiveMessages<AdjustmentShort>(MessageToken.CurrentAdjustmentShortChanged, OnCurrentAdjustmentShortChanged);
                        RegisterToReceiveMessages<AsycudaDocumentEntryData>(MessageToken.CurrentAsycudaDocumentEntryDataChanged, OnCurrentAsycudaDocumentEntryDataChanged);
                        RegisterToReceiveMessages<AsycudaDocumentItemEntryDataDetail>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailChanged, OnCurrentAsycudaDocumentItemEntryDataDetailChanged);
                        RegisterToReceiveMessages<AsycudaDocumentItemLastItemCost>(MessageToken.CurrentAsycudaDocumentItemLastItemCostChanged, OnCurrentAsycudaDocumentItemLastItemCostChanged);
                        RegisterToReceiveMessages<AsycudaDocumentSetEntryData>(MessageToken.CurrentAsycudaDocumentSetEntryDataChanged, OnCurrentAsycudaDocumentSetEntryDataChanged);
                        RegisterToReceiveMessages<AsycudaSalesAllocation>(MessageToken.CurrentAsycudaSalesAllocationChanged, OnCurrentAsycudaSalesAllocationChanged);
                        RegisterToReceiveMessages<EntryDataDetail>(MessageToken.CurrentEntryDataDetailChanged, OnCurrentEntryDataDetailChanged);
                        RegisterToReceiveMessages<InventoryItemAliasEx>(MessageToken.CurrentInventoryItemAliasExChanged, OnCurrentInventoryItemAliasExChanged);
                        RegisterToReceiveMessages<InventoryItemsEx>(MessageToken.CurrentInventoryItemsExChanged, OnCurrentInventoryItemsExChanged);
                        RegisterToReceiveMessages<ShortAllocation>(MessageToken.CurrentShortAllocationChanged, OnCurrentShortAllocationChanged);
                        RegisterToReceiveMessages<xcuda_Item>(MessageToken.Currentxcuda_ItemChanged, OnCurrentxcuda_ItemChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentAdjustmentDetailIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AdjustmentDetailRepository ctx = new AdjustmentDetailRepository())
                            {
                                CurrentAdjustmentDetail = await ctx.GetAdjustmentDetail(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAdjustmentDetail);
                        }

                        private  string _currentAdjustmentDetailID = "";
                        public string CurrentAdjustmentDetailID
                        {
                            get
                            {
                                return _currentAdjustmentDetailID;
                            }
                            set
                            {
                                if (_currentAdjustmentDetailID != value)
                                {
                                    _currentAdjustmentDetailID = value;
                                    if (!string.IsNullOrEmpty(_currentAdjustmentDetailID)) BeginSendMessage(MessageToken.CurrentAdjustmentDetailIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAdjustmentDetailIDChanged, _currentAdjustmentDetailID));
                                    NotifyPropertyChanged(x => this.CurrentAdjustmentDetailID);  
                                }
                            }
                        }
                        internal async void OnCurrentAdjustmentExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AdjustmentExRepository ctx = new AdjustmentExRepository())
                            {
                                CurrentAdjustmentEx = await ctx.GetAdjustmentEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAdjustmentEx);
                        }

                        private  string _currentAdjustmentExID = "";
                        public string CurrentAdjustmentExID
                        {
                            get
                            {
                                return _currentAdjustmentExID;
                            }
                            set
                            {
                                if (_currentAdjustmentExID != value)
                                {
                                    _currentAdjustmentExID = value;
                                    if (!string.IsNullOrEmpty(_currentAdjustmentExID)) BeginSendMessage(MessageToken.CurrentAdjustmentExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAdjustmentExIDChanged, _currentAdjustmentExID));
                                    NotifyPropertyChanged(x => this.CurrentAdjustmentExID);  
                                }
                            }
                        }
                        internal async void OnCurrentAdjustmentOverIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AdjustmentOverRepository ctx = new AdjustmentOverRepository())
                            {
                                CurrentAdjustmentOver = await ctx.GetAdjustmentOver(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAdjustmentOver);
                        }

                        private  string _currentAdjustmentOverID = "";
                        public string CurrentAdjustmentOverID
                        {
                            get
                            {
                                return _currentAdjustmentOverID;
                            }
                            set
                            {
                                if (_currentAdjustmentOverID != value)
                                {
                                    _currentAdjustmentOverID = value;
                                    if (!string.IsNullOrEmpty(_currentAdjustmentOverID)) BeginSendMessage(MessageToken.CurrentAdjustmentOverIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAdjustmentOverIDChanged, _currentAdjustmentOverID));
                                    NotifyPropertyChanged(x => this.CurrentAdjustmentOverID);  
                                }
                            }
                        }
                        internal async void OnCurrentAdjustmentOversAllocationIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AdjustmentOversAllocationRepository ctx = new AdjustmentOversAllocationRepository())
                            {
                                CurrentAdjustmentOversAllocation = await ctx.GetAdjustmentOversAllocation(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAdjustmentOversAllocation);
                        }

                        private  string _currentAdjustmentOversAllocationID = "";
                        public string CurrentAdjustmentOversAllocationID
                        {
                            get
                            {
                                return _currentAdjustmentOversAllocationID;
                            }
                            set
                            {
                                if (_currentAdjustmentOversAllocationID != value)
                                {
                                    _currentAdjustmentOversAllocationID = value;
                                    if (!string.IsNullOrEmpty(_currentAdjustmentOversAllocationID)) BeginSendMessage(MessageToken.CurrentAdjustmentOversAllocationIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAdjustmentOversAllocationIDChanged, _currentAdjustmentOversAllocationID));
                                    NotifyPropertyChanged(x => this.CurrentAdjustmentOversAllocationID);  
                                }
                            }
                        }
                        internal async void OnCurrentAdjustmentShortIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AdjustmentShortRepository ctx = new AdjustmentShortRepository())
                            {
                                CurrentAdjustmentShort = await ctx.GetAdjustmentShort(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAdjustmentShort);
                        }

                        private  string _currentAdjustmentShortID = "";
                        public string CurrentAdjustmentShortID
                        {
                            get
                            {
                                return _currentAdjustmentShortID;
                            }
                            set
                            {
                                if (_currentAdjustmentShortID != value)
                                {
                                    _currentAdjustmentShortID = value;
                                    if (!string.IsNullOrEmpty(_currentAdjustmentShortID)) BeginSendMessage(MessageToken.CurrentAdjustmentShortIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAdjustmentShortIDChanged, _currentAdjustmentShortID));
                                    NotifyPropertyChanged(x => this.CurrentAdjustmentShortID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentEntryDataIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentEntryDataRepository ctx = new AsycudaDocumentEntryDataRepository())
                            {
                                CurrentAsycudaDocumentEntryData = await ctx.GetAsycudaDocumentEntryData(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentEntryData);
                        }

                        private  string _currentAsycudaDocumentEntryDataID = "";
                        public string CurrentAsycudaDocumentEntryDataID
                        {
                            get
                            {
                                return _currentAsycudaDocumentEntryDataID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentEntryDataID != value)
                                {
                                    _currentAsycudaDocumentEntryDataID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentEntryDataID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentEntryDataIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentEntryDataIDChanged, _currentAsycudaDocumentEntryDataID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentEntryDataID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentItemEntryDataDetailIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentItemEntryDataDetailRepository ctx = new AsycudaDocumentItemEntryDataDetailRepository())
                            {
                                CurrentAsycudaDocumentItemEntryDataDetail = await ctx.GetAsycudaDocumentItemEntryDataDetail(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentItemEntryDataDetail);
                        }

                        private  string _currentAsycudaDocumentItemEntryDataDetailID = "";
                        public string CurrentAsycudaDocumentItemEntryDataDetailID
                        {
                            get
                            {
                                return _currentAsycudaDocumentItemEntryDataDetailID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentItemEntryDataDetailID != value)
                                {
                                    _currentAsycudaDocumentItemEntryDataDetailID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentItemEntryDataDetailID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailIDChanged, _currentAsycudaDocumentItemEntryDataDetailID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemEntryDataDetailID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentItemLastItemCostIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentItemLastItemCostRepository ctx = new AsycudaDocumentItemLastItemCostRepository())
                            {
                                CurrentAsycudaDocumentItemLastItemCost = await ctx.GetAsycudaDocumentItemLastItemCost(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentItemLastItemCost);
                        }

                        private  string _currentAsycudaDocumentItemLastItemCostID = "";
                        public string CurrentAsycudaDocumentItemLastItemCostID
                        {
                            get
                            {
                                return _currentAsycudaDocumentItemLastItemCostID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentItemLastItemCostID != value)
                                {
                                    _currentAsycudaDocumentItemLastItemCostID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentItemLastItemCostID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemLastItemCostIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentItemLastItemCostIDChanged, _currentAsycudaDocumentItemLastItemCostID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemLastItemCostID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentSetEntryDataIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentSetEntryDataRepository ctx = new AsycudaDocumentSetEntryDataRepository())
                            {
                                CurrentAsycudaDocumentSetEntryData = await ctx.GetAsycudaDocumentSetEntryData(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentSetEntryData);
                        }

                        private  string _currentAsycudaDocumentSetEntryDataID = "";
                        public string CurrentAsycudaDocumentSetEntryDataID
                        {
                            get
                            {
                                return _currentAsycudaDocumentSetEntryDataID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentSetEntryDataID != value)
                                {
                                    _currentAsycudaDocumentSetEntryDataID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentSetEntryDataID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetEntryDataIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentSetEntryDataIDChanged, _currentAsycudaDocumentSetEntryDataID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryDataID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaSalesAllocationIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaSalesAllocationRepository ctx = new AsycudaSalesAllocationRepository())
                            {
                                CurrentAsycudaSalesAllocation = await ctx.GetAsycudaSalesAllocation(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaSalesAllocation);
                        }

                        private  string _currentAsycudaSalesAllocationID = "";
                        public string CurrentAsycudaSalesAllocationID
                        {
                            get
                            {
                                return _currentAsycudaSalesAllocationID;
                            }
                            set
                            {
                                if (_currentAsycudaSalesAllocationID != value)
                                {
                                    _currentAsycudaSalesAllocationID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaSalesAllocationID)) BeginSendMessage(MessageToken.CurrentAsycudaSalesAllocationIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaSalesAllocationIDChanged, _currentAsycudaSalesAllocationID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaSalesAllocationID);  
                                }
                            }
                        }
                        internal async void OnCurrentEntryDataDetailIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EntryDataDetailRepository ctx = new EntryDataDetailRepository())
                            {
                                CurrentEntryDataDetail = await ctx.GetEntryDataDetail(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEntryDataDetail);
                        }

                        private  string _currentEntryDataDetailID = "";
                        public string CurrentEntryDataDetailID
                        {
                            get
                            {
                                return _currentEntryDataDetailID;
                            }
                            set
                            {
                                if (_currentEntryDataDetailID != value)
                                {
                                    _currentEntryDataDetailID = value;
                                    if (!string.IsNullOrEmpty(_currentEntryDataDetailID)) BeginSendMessage(MessageToken.CurrentEntryDataDetailIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEntryDataDetailIDChanged, _currentEntryDataDetailID));
                                    NotifyPropertyChanged(x => this.CurrentEntryDataDetailID);  
                                }
                            }
                        }
                        internal async void OnCurrentInventoryItemAliasExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InventoryItemAliasExRepository ctx = new InventoryItemAliasExRepository())
                            {
                                CurrentInventoryItemAliasEx = await ctx.GetInventoryItemAliasEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInventoryItemAliasEx);
                        }

                        private  string _currentInventoryItemAliasExID = "";
                        public string CurrentInventoryItemAliasExID
                        {
                            get
                            {
                                return _currentInventoryItemAliasExID;
                            }
                            set
                            {
                                if (_currentInventoryItemAliasExID != value)
                                {
                                    _currentInventoryItemAliasExID = value;
                                    if (!string.IsNullOrEmpty(_currentInventoryItemAliasExID)) BeginSendMessage(MessageToken.CurrentInventoryItemAliasExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInventoryItemAliasExIDChanged, _currentInventoryItemAliasExID));
                                    NotifyPropertyChanged(x => this.CurrentInventoryItemAliasExID);  
                                }
                            }
                        }
                        internal async void OnCurrentInventoryItemsExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InventoryItemsExRepository ctx = new InventoryItemsExRepository())
                            {
                                CurrentInventoryItemsEx = await ctx.GetInventoryItemsEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInventoryItemsEx);
                        }

                        private  string _currentInventoryItemsExID = "";
                        public string CurrentInventoryItemsExID
                        {
                            get
                            {
                                return _currentInventoryItemsExID;
                            }
                            set
                            {
                                if (_currentInventoryItemsExID != value)
                                {
                                    _currentInventoryItemsExID = value;
                                    if (!string.IsNullOrEmpty(_currentInventoryItemsExID)) BeginSendMessage(MessageToken.CurrentInventoryItemsExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInventoryItemsExIDChanged, _currentInventoryItemsExID));
                                    NotifyPropertyChanged(x => this.CurrentInventoryItemsExID);  
                                }
                            }
                        }
                        internal async void OnCurrentShortAllocationIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ShortAllocationRepository ctx = new ShortAllocationRepository())
                            {
                                CurrentShortAllocation = await ctx.GetShortAllocation(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentShortAllocation);
                        }

                        private  string _currentShortAllocationID = "";
                        public string CurrentShortAllocationID
                        {
                            get
                            {
                                return _currentShortAllocationID;
                            }
                            set
                            {
                                if (_currentShortAllocationID != value)
                                {
                                    _currentShortAllocationID = value;
                                    if (!string.IsNullOrEmpty(_currentShortAllocationID)) BeginSendMessage(MessageToken.CurrentShortAllocationIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentShortAllocationIDChanged, _currentShortAllocationID));
                                    NotifyPropertyChanged(x => this.CurrentShortAllocationID);  
                                }
                            }
                        }
                        internal async void OnCurrentxcuda_ItemIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (xcuda_ItemRepository ctx = new xcuda_ItemRepository())
                            {
                                Currentxcuda_Item = await ctx.Getxcuda_Item(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => Currentxcuda_Item);
                        }

                        private  string _currentxcuda_ItemID = "";
                        public string Currentxcuda_ItemID
                        {
                            get
                            {
                                return _currentxcuda_ItemID;
                            }
                            set
                            {
                                if (_currentxcuda_ItemID != value)
                                {
                                    _currentxcuda_ItemID = value;
                                    if (!string.IsNullOrEmpty(_currentxcuda_ItemID)) BeginSendMessage(MessageToken.Currentxcuda_ItemIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.Currentxcuda_ItemIDChanged, _currentxcuda_ItemID));
                                    NotifyPropertyChanged(x => this.Currentxcuda_ItemID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentAdjustmentDetailChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AdjustmentDetail> e)
        {
            //CurrentAdjustmentDetail = e.Data;
            NotifyPropertyChanged(m => this.CurrentAdjustmentDetail);
        }

        private  AdjustmentDetail _currentAdjustmentDetail;
        public AdjustmentDetail CurrentAdjustmentDetail
        {
            get
            {
                return _currentAdjustmentDetail;
            }
            set
            {
                if (_currentAdjustmentDetail != value)
                {
                    _currentAdjustmentDetail = value;
                    BeginSendMessage(MessageToken.CurrentAdjustmentDetailChanged,
                                                     new NotificationEventArgs<AdjustmentDetail>(MessageToken.CurrentAdjustmentDetailChanged, _currentAdjustmentDetail)); 
                    NotifyPropertyChanged(x => this.CurrentAdjustmentDetail);    
                    // all current navigation properties = null
                 CurrentAdjustmentShort = null;
                 CurrentAdjustmentOver = null;
                 CurrentAsycudaDocumentItemEntryDataDetail = null;
                 CurrentShortAllocation = null;
   
                }
            }
        }

		VirtualListItem<AdjustmentDetail> _vcurrentAdjustmentDetail;
        public VirtualListItem<AdjustmentDetail> VCurrentAdjustmentDetail
        {
            get
            {
                return _vcurrentAdjustmentDetail;
            }
            set
            {
                if (_vcurrentAdjustmentDetail != value)
                {
                    _vcurrentAdjustmentDetail = value;
					if(_vcurrentAdjustmentDetail != null) CurrentAdjustmentDetail = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAdjustmentDetail);                    
                }
            }
        }



                     
       

        internal void OnCurrentAdjustmentExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AdjustmentEx> e)
        {
            //CurrentAdjustmentEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentAdjustmentEx);
        }

        private  AdjustmentEx _currentAdjustmentEx;
        public AdjustmentEx CurrentAdjustmentEx
        {
            get
            {
                return _currentAdjustmentEx;
            }
            set
            {
                if (_currentAdjustmentEx != value)
                {
                    _currentAdjustmentEx = value;
                    BeginSendMessage(MessageToken.CurrentAdjustmentExChanged,
                                                     new NotificationEventArgs<AdjustmentEx>(MessageToken.CurrentAdjustmentExChanged, _currentAdjustmentEx)); 
                    NotifyPropertyChanged(x => this.CurrentAdjustmentEx);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentSetEntryData = null;
                 CurrentAsycudaDocumentEntryData = null;
                 CurrentAdjustmentOver = null;
                 CurrentAdjustmentShort = null;
                 CurrentAdjustmentDetail = null;
   
                }
            }
        }

		VirtualListItem<AdjustmentEx> _vcurrentAdjustmentEx;
        public VirtualListItem<AdjustmentEx> VCurrentAdjustmentEx
        {
            get
            {
                return _vcurrentAdjustmentEx;
            }
            set
            {
                if (_vcurrentAdjustmentEx != value)
                {
                    _vcurrentAdjustmentEx = value;
					if(_vcurrentAdjustmentEx != null) CurrentAdjustmentEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAdjustmentEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentAdjustmentOverChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AdjustmentOver> e)
        {
            //CurrentAdjustmentOver = e.Data;
            NotifyPropertyChanged(m => this.CurrentAdjustmentOver);
        }

        private  AdjustmentOver _currentAdjustmentOver;
        public AdjustmentOver CurrentAdjustmentOver
        {
            get
            {
                return _currentAdjustmentOver;
            }
            set
            {
                if (_currentAdjustmentOver != value)
                {
                    _currentAdjustmentOver = value;
                    BeginSendMessage(MessageToken.CurrentAdjustmentOverChanged,
                                                     new NotificationEventArgs<AdjustmentOver>(MessageToken.CurrentAdjustmentOverChanged, _currentAdjustmentOver)); 
                    NotifyPropertyChanged(x => this.CurrentAdjustmentOver);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentItemEntryDataDetail = null;
                 CurrentAdjustmentDetail = null;
   
                }
            }
        }

		VirtualListItem<AdjustmentOver> _vcurrentAdjustmentOver;
        public VirtualListItem<AdjustmentOver> VCurrentAdjustmentOver
        {
            get
            {
                return _vcurrentAdjustmentOver;
            }
            set
            {
                if (_vcurrentAdjustmentOver != value)
                {
                    _vcurrentAdjustmentOver = value;
					if(_vcurrentAdjustmentOver != null) CurrentAdjustmentOver = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAdjustmentOver);                    
                }
            }
        }



                     
       

        internal void OnCurrentAdjustmentOversAllocationChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AdjustmentOversAllocation> e)
        {
            //CurrentAdjustmentOversAllocation = e.Data;
            NotifyPropertyChanged(m => this.CurrentAdjustmentOversAllocation);
        }

        private  AdjustmentOversAllocation _currentAdjustmentOversAllocation;
        public AdjustmentOversAllocation CurrentAdjustmentOversAllocation
        {
            get
            {
                return _currentAdjustmentOversAllocation;
            }
            set
            {
                if (_currentAdjustmentOversAllocation != value)
                {
                    _currentAdjustmentOversAllocation = value;
                    BeginSendMessage(MessageToken.CurrentAdjustmentOversAllocationChanged,
                                                     new NotificationEventArgs<AdjustmentOversAllocation>(MessageToken.CurrentAdjustmentOversAllocationChanged, _currentAdjustmentOversAllocation)); 
                    NotifyPropertyChanged(x => this.CurrentAdjustmentOversAllocation);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AdjustmentOversAllocation> _vcurrentAdjustmentOversAllocation;
        public VirtualListItem<AdjustmentOversAllocation> VCurrentAdjustmentOversAllocation
        {
            get
            {
                return _vcurrentAdjustmentOversAllocation;
            }
            set
            {
                if (_vcurrentAdjustmentOversAllocation != value)
                {
                    _vcurrentAdjustmentOversAllocation = value;
					if(_vcurrentAdjustmentOversAllocation != null) CurrentAdjustmentOversAllocation = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAdjustmentOversAllocation);                    
                }
            }
        }



                     
       

        internal void OnCurrentAdjustmentShortChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AdjustmentShort> e)
        {
            //CurrentAdjustmentShort = e.Data;
            NotifyPropertyChanged(m => this.CurrentAdjustmentShort);
        }

        private  AdjustmentShort _currentAdjustmentShort;
        public AdjustmentShort CurrentAdjustmentShort
        {
            get
            {
                return _currentAdjustmentShort;
            }
            set
            {
                if (_currentAdjustmentShort != value)
                {
                    _currentAdjustmentShort = value;
                    BeginSendMessage(MessageToken.CurrentAdjustmentShortChanged,
                                                     new NotificationEventArgs<AdjustmentShort>(MessageToken.CurrentAdjustmentShortChanged, _currentAdjustmentShort)); 
                    NotifyPropertyChanged(x => this.CurrentAdjustmentShort);    
                    // all current navigation properties = null
                 CurrentShortAllocation = null;
                 CurrentAdjustmentDetail = null;
                 CurrentAsycudaDocumentItemEntryDataDetail = null;
   
                }
            }
        }

		VirtualListItem<AdjustmentShort> _vcurrentAdjustmentShort;
        public VirtualListItem<AdjustmentShort> VCurrentAdjustmentShort
        {
            get
            {
                return _vcurrentAdjustmentShort;
            }
            set
            {
                if (_vcurrentAdjustmentShort != value)
                {
                    _vcurrentAdjustmentShort = value;
					if(_vcurrentAdjustmentShort != null) CurrentAdjustmentShort = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAdjustmentShort);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentEntryDataChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentEntryData> e)
        {
            //CurrentAsycudaDocumentEntryData = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentEntryData);
        }

        private  AsycudaDocumentEntryData _currentAsycudaDocumentEntryData;
        public AsycudaDocumentEntryData CurrentAsycudaDocumentEntryData
        {
            get
            {
                return _currentAsycudaDocumentEntryData;
            }
            set
            {
                if (_currentAsycudaDocumentEntryData != value)
                {
                    _currentAsycudaDocumentEntryData = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentEntryDataChanged,
                                                     new NotificationEventArgs<AsycudaDocumentEntryData>(MessageToken.CurrentAsycudaDocumentEntryDataChanged, _currentAsycudaDocumentEntryData)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentEntryData);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentEntryData> _vcurrentAsycudaDocumentEntryData;
        public VirtualListItem<AsycudaDocumentEntryData> VCurrentAsycudaDocumentEntryData
        {
            get
            {
                return _vcurrentAsycudaDocumentEntryData;
            }
            set
            {
                if (_vcurrentAsycudaDocumentEntryData != value)
                {
                    _vcurrentAsycudaDocumentEntryData = value;
					if(_vcurrentAsycudaDocumentEntryData != null) CurrentAsycudaDocumentEntryData = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentEntryData);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentItemEntryDataDetailChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItemEntryDataDetail> e)
        {
            //CurrentAsycudaDocumentItemEntryDataDetail = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentItemEntryDataDetail);
        }

        private  AsycudaDocumentItemEntryDataDetail _currentAsycudaDocumentItemEntryDataDetail;
        public AsycudaDocumentItemEntryDataDetail CurrentAsycudaDocumentItemEntryDataDetail
        {
            get
            {
                return _currentAsycudaDocumentItemEntryDataDetail;
            }
            set
            {
                if (_currentAsycudaDocumentItemEntryDataDetail != value)
                {
                    _currentAsycudaDocumentItemEntryDataDetail = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailChanged,
                                                     new NotificationEventArgs<AsycudaDocumentItemEntryDataDetail>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailChanged, _currentAsycudaDocumentItemEntryDataDetail)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemEntryDataDetail);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentItemEntryDataDetail> _vcurrentAsycudaDocumentItemEntryDataDetail;
        public VirtualListItem<AsycudaDocumentItemEntryDataDetail> VCurrentAsycudaDocumentItemEntryDataDetail
        {
            get
            {
                return _vcurrentAsycudaDocumentItemEntryDataDetail;
            }
            set
            {
                if (_vcurrentAsycudaDocumentItemEntryDataDetail != value)
                {
                    _vcurrentAsycudaDocumentItemEntryDataDetail = value;
					if(_vcurrentAsycudaDocumentItemEntryDataDetail != null) CurrentAsycudaDocumentItemEntryDataDetail = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentItemEntryDataDetail);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentItemLastItemCostChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItemLastItemCost> e)
        {
            //CurrentAsycudaDocumentItemLastItemCost = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentItemLastItemCost);
        }

        private  AsycudaDocumentItemLastItemCost _currentAsycudaDocumentItemLastItemCost;
        public AsycudaDocumentItemLastItemCost CurrentAsycudaDocumentItemLastItemCost
        {
            get
            {
                return _currentAsycudaDocumentItemLastItemCost;
            }
            set
            {
                if (_currentAsycudaDocumentItemLastItemCost != value)
                {
                    _currentAsycudaDocumentItemLastItemCost = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemLastItemCostChanged,
                                                     new NotificationEventArgs<AsycudaDocumentItemLastItemCost>(MessageToken.CurrentAsycudaDocumentItemLastItemCostChanged, _currentAsycudaDocumentItemLastItemCost)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemLastItemCost);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentItemLastItemCost> _vcurrentAsycudaDocumentItemLastItemCost;
        public VirtualListItem<AsycudaDocumentItemLastItemCost> VCurrentAsycudaDocumentItemLastItemCost
        {
            get
            {
                return _vcurrentAsycudaDocumentItemLastItemCost;
            }
            set
            {
                if (_vcurrentAsycudaDocumentItemLastItemCost != value)
                {
                    _vcurrentAsycudaDocumentItemLastItemCost = value;
					if(_vcurrentAsycudaDocumentItemLastItemCost != null) CurrentAsycudaDocumentItemLastItemCost = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentItemLastItemCost);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentSetEntryDataChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEntryData> e)
        {
            //CurrentAsycudaDocumentSetEntryData = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentSetEntryData);
        }

        private  AsycudaDocumentSetEntryData _currentAsycudaDocumentSetEntryData;
        public AsycudaDocumentSetEntryData CurrentAsycudaDocumentSetEntryData
        {
            get
            {
                return _currentAsycudaDocumentSetEntryData;
            }
            set
            {
                if (_currentAsycudaDocumentSetEntryData != value)
                {
                    _currentAsycudaDocumentSetEntryData = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetEntryDataChanged,
                                                     new NotificationEventArgs<AsycudaDocumentSetEntryData>(MessageToken.CurrentAsycudaDocumentSetEntryDataChanged, _currentAsycudaDocumentSetEntryData)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryData);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentSetEntryData> _vcurrentAsycudaDocumentSetEntryData;
        public VirtualListItem<AsycudaDocumentSetEntryData> VCurrentAsycudaDocumentSetEntryData
        {
            get
            {
                return _vcurrentAsycudaDocumentSetEntryData;
            }
            set
            {
                if (_vcurrentAsycudaDocumentSetEntryData != value)
                {
                    _vcurrentAsycudaDocumentSetEntryData = value;
					if(_vcurrentAsycudaDocumentSetEntryData != null) CurrentAsycudaDocumentSetEntryData = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentSetEntryData);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaSalesAllocationChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaSalesAllocation> e)
        {
            //CurrentAsycudaSalesAllocation = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaSalesAllocation);
        }

        private  AsycudaSalesAllocation _currentAsycudaSalesAllocation;
        public AsycudaSalesAllocation CurrentAsycudaSalesAllocation
        {
            get
            {
                return _currentAsycudaSalesAllocation;
            }
            set
            {
                if (_currentAsycudaSalesAllocation != value)
                {
                    _currentAsycudaSalesAllocation = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaSalesAllocationChanged,
                                                     new NotificationEventArgs<AsycudaSalesAllocation>(MessageToken.CurrentAsycudaSalesAllocationChanged, _currentAsycudaSalesAllocation)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaSalesAllocation);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaSalesAllocation> _vcurrentAsycudaSalesAllocation;
        public VirtualListItem<AsycudaSalesAllocation> VCurrentAsycudaSalesAllocation
        {
            get
            {
                return _vcurrentAsycudaSalesAllocation;
            }
            set
            {
                if (_vcurrentAsycudaSalesAllocation != value)
                {
                    _vcurrentAsycudaSalesAllocation = value;
					if(_vcurrentAsycudaSalesAllocation != null) CurrentAsycudaSalesAllocation = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaSalesAllocation);                    
                }
            }
        }



                     
       

        internal void OnCurrentEntryDataDetailChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EntryDataDetail> e)
        {
            //CurrentEntryDataDetail = e.Data;
            NotifyPropertyChanged(m => this.CurrentEntryDataDetail);
        }

        private  EntryDataDetail _currentEntryDataDetail;
        public EntryDataDetail CurrentEntryDataDetail
        {
            get
            {
                return _currentEntryDataDetail;
            }
            set
            {
                if (_currentEntryDataDetail != value)
                {
                    _currentEntryDataDetail = value;
                    BeginSendMessage(MessageToken.CurrentEntryDataDetailChanged,
                                                     new NotificationEventArgs<EntryDataDetail>(MessageToken.CurrentEntryDataDetailChanged, _currentEntryDataDetail)); 
                    NotifyPropertyChanged(x => this.CurrentEntryDataDetail);    
                    // all current navigation properties = null
                 CurrentAsycudaSalesAllocation = null;
                 CurrentAdjustmentOversAllocation = null;
   
                }
            }
        }

		VirtualListItem<EntryDataDetail> _vcurrentEntryDataDetail;
        public VirtualListItem<EntryDataDetail> VCurrentEntryDataDetail
        {
            get
            {
                return _vcurrentEntryDataDetail;
            }
            set
            {
                if (_vcurrentEntryDataDetail != value)
                {
                    _vcurrentEntryDataDetail = value;
					if(_vcurrentEntryDataDetail != null) CurrentEntryDataDetail = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEntryDataDetail);                    
                }
            }
        }



                     
       

        internal void OnCurrentInventoryItemAliasExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItemAliasEx> e)
        {
            //CurrentInventoryItemAliasEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentInventoryItemAliasEx);
        }

        private  InventoryItemAliasEx _currentInventoryItemAliasEx;
        public InventoryItemAliasEx CurrentInventoryItemAliasEx
        {
            get
            {
                return _currentInventoryItemAliasEx;
            }
            set
            {
                if (_currentInventoryItemAliasEx != value)
                {
                    _currentInventoryItemAliasEx = value;
                    BeginSendMessage(MessageToken.CurrentInventoryItemAliasExChanged,
                                                     new NotificationEventArgs<InventoryItemAliasEx>(MessageToken.CurrentInventoryItemAliasExChanged, _currentInventoryItemAliasEx)); 
                    NotifyPropertyChanged(x => this.CurrentInventoryItemAliasEx);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<InventoryItemAliasEx> _vcurrentInventoryItemAliasEx;
        public VirtualListItem<InventoryItemAliasEx> VCurrentInventoryItemAliasEx
        {
            get
            {
                return _vcurrentInventoryItemAliasEx;
            }
            set
            {
                if (_vcurrentInventoryItemAliasEx != value)
                {
                    _vcurrentInventoryItemAliasEx = value;
					if(_vcurrentInventoryItemAliasEx != null) CurrentInventoryItemAliasEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInventoryItemAliasEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentInventoryItemsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItemsEx> e)
        {
            //CurrentInventoryItemsEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentInventoryItemsEx);
        }

        private  InventoryItemsEx _currentInventoryItemsEx;
        public InventoryItemsEx CurrentInventoryItemsEx
        {
            get
            {
                return _currentInventoryItemsEx;
            }
            set
            {
                if (_currentInventoryItemsEx != value)
                {
                    _currentInventoryItemsEx = value;
                    BeginSendMessage(MessageToken.CurrentInventoryItemsExChanged,
                                                     new NotificationEventArgs<InventoryItemsEx>(MessageToken.CurrentInventoryItemsExChanged, _currentInventoryItemsEx)); 
                    NotifyPropertyChanged(x => this.CurrentInventoryItemsEx);    
                    // all current navigation properties = null
                 CurrentInventoryItemAliasEx = null;
                 CurrentEntryDataDetail = null;
                 CurrentAdjustmentOver = null;
   
                }
            }
        }

		VirtualListItem<InventoryItemsEx> _vcurrentInventoryItemsEx;
        public VirtualListItem<InventoryItemsEx> VCurrentInventoryItemsEx
        {
            get
            {
                return _vcurrentInventoryItemsEx;
            }
            set
            {
                if (_vcurrentInventoryItemsEx != value)
                {
                    _vcurrentInventoryItemsEx = value;
					if(_vcurrentInventoryItemsEx != null) CurrentInventoryItemsEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInventoryItemsEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentShortAllocationChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ShortAllocation> e)
        {
            //CurrentShortAllocation = e.Data;
            NotifyPropertyChanged(m => this.CurrentShortAllocation);
        }

        private  ShortAllocation _currentShortAllocation;
        public ShortAllocation CurrentShortAllocation
        {
            get
            {
                return _currentShortAllocation;
            }
            set
            {
                if (_currentShortAllocation != value)
                {
                    _currentShortAllocation = value;
                    BeginSendMessage(MessageToken.CurrentShortAllocationChanged,
                                                     new NotificationEventArgs<ShortAllocation>(MessageToken.CurrentShortAllocationChanged, _currentShortAllocation)); 
                    NotifyPropertyChanged(x => this.CurrentShortAllocation);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<ShortAllocation> _vcurrentShortAllocation;
        public VirtualListItem<ShortAllocation> VCurrentShortAllocation
        {
            get
            {
                return _vcurrentShortAllocation;
            }
            set
            {
                if (_vcurrentShortAllocation != value)
                {
                    _vcurrentShortAllocation = value;
					if(_vcurrentShortAllocation != null) CurrentShortAllocation = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentShortAllocation);                    
                }
            }
        }



                     
       

        internal void OnCurrentxcuda_ItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<xcuda_Item> e)
        {
            //Currentxcuda_Item = e.Data;
            NotifyPropertyChanged(m => this.Currentxcuda_Item);
        }

        private  xcuda_Item _currentxcuda_Item;
        public xcuda_Item Currentxcuda_Item
        {
            get
            {
                return _currentxcuda_Item;
            }
            set
            {
                if (_currentxcuda_Item != value)
                {
                    _currentxcuda_Item = value;
                    BeginSendMessage(MessageToken.Currentxcuda_ItemChanged,
                                                     new NotificationEventArgs<xcuda_Item>(MessageToken.Currentxcuda_ItemChanged, _currentxcuda_Item)); 
                    NotifyPropertyChanged(x => this.Currentxcuda_Item);    
                    // all current navigation properties = null
                 CurrentAsycudaSalesAllocation = null;
                 CurrentAdjustmentOversAllocation = null;
   
                }
            }
        }

		VirtualListItem<xcuda_Item> _vcurrentxcuda_Item;
        public VirtualListItem<xcuda_Item> VCurrentxcuda_Item
        {
            get
            {
                return _vcurrentxcuda_Item;
            }
            set
            {
                if (_vcurrentxcuda_Item != value)
                {
                    _vcurrentxcuda_Item = value;
					if(_vcurrentxcuda_Item != null) Currentxcuda_Item = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentxcuda_Item);                    
                }
            }
        }






        static AdjustmentQSOnCreated newAdjustmentQSOnCreated = new AdjustmentQSOnCreated();
    }		
}

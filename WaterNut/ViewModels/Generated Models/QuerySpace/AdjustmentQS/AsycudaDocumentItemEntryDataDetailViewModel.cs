// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using AdjustmentQS.Client.Entities;
using AdjustmentQS.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.AdjustmentQS.ViewModels
{
    
	public partial class AsycudaDocumentItemEntryDataDetailViewModel_AutoGen : ViewModelBase<AsycudaDocumentItemEntryDataDetailViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentItemEntryDataDetailViewModel_AutoGen instance;
       static AsycudaDocumentItemEntryDataDetailViewModel_AutoGen()
        {
            instance = new AsycudaDocumentItemEntryDataDetailViewModel_AutoGen();
        }

       public static AsycudaDocumentItemEntryDataDetailViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentItemEntryDataDetailViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentItemEntryDataDetail>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailChanged, OnCurrentAsycudaDocumentItemEntryDataDetailChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentItemEntryDataDetailsChanged, OnAsycudaDocumentItemEntryDataDetailsChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentItemEntryDataDetailsFilterExpressionChanged, OnAsycudaDocumentItemEntryDataDetailsFilterExpressionChanged);

 
			RegisterToReceiveMessages<AdjustmentOver>(MessageToken.CurrentAdjustmentOverChanged, OnCurrentAdjustmentOverChanged);
 
			RegisterToReceiveMessages<AdjustmentShort>(MessageToken.CurrentAdjustmentShortChanged, OnCurrentAdjustmentShortChanged);
 
			RegisterToReceiveMessages<AdjustmentDetail>(MessageToken.CurrentAdjustmentDetailChanged, OnCurrentAdjustmentDetailChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentItemEntryDataDetails = new VirtualList<AsycudaDocumentItemEntryDataDetail>(vloader);
			AsycudaDocumentItemEntryDataDetails.LoadingStateChanged += AsycudaDocumentItemEntryDataDetails_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentItemEntryDataDetails, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentItemEntryDataDetail> _AsycudaDocumentItemEntryDataDetails = null;
        public VirtualList<AsycudaDocumentItemEntryDataDetail> AsycudaDocumentItemEntryDataDetails
        {
            get
            {
                return _AsycudaDocumentItemEntryDataDetails;
            }
            set
            {
                _AsycudaDocumentItemEntryDataDetails = value;
            }
        }

		 private void OnAsycudaDocumentItemEntryDataDetailsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			AsycudaDocumentItemEntryDataDetails.Refresh();
            SelectedAsycudaDocumentItemEntryDataDetails.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentItemEntryDataDetails);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentItemEntryDataDetailsChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentItemEntryDataDetailsChanged));
        }

		void AsycudaDocumentItemEntryDataDetails_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentItemEntryDataDetails.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentItemEntryDataDetails);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentItemEntryDataDetails | Error occured..." + AsycudaDocumentItemEntryDataDetails.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentItemEntryDataDetails);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentItemEntryDataDetailVirturalListLoader vloader = new AsycudaDocumentItemEntryDataDetailVirturalListLoader();

		private ObservableCollection<AsycudaDocumentItemEntryDataDetail> _selectedAsycudaDocumentItemEntryDataDetails = new ObservableCollection<AsycudaDocumentItemEntryDataDetail>();
        public ObservableCollection<AsycudaDocumentItemEntryDataDetail> SelectedAsycudaDocumentItemEntryDataDetails
        {
            get
            {
                return _selectedAsycudaDocumentItemEntryDataDetails;
            }
            set
            {
                _selectedAsycudaDocumentItemEntryDataDetails = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentItemEntryDataDetailsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentItemEntryDataDetailsChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentItemEntryDataDetails);
            }
        }

        internal void OnCurrentAsycudaDocumentItemEntryDataDetailChanged(object sender, NotificationEventArgs<AsycudaDocumentItemEntryDataDetail> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentItemEntryDataDetail != null) BaseViewModel.Instance.CurrentAsycudaDocumentItemEntryDataDetail.PropertyChanged += CurrentAsycudaDocumentItemEntryDataDetail__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemEntryDataDetail);
        }   

            void CurrentAsycudaDocumentItemEntryDataDetail__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddAdjustmentOver")
                   // {
                   //    if(AdjustmentOvers.Contains(CurrentAsycudaDocumentItemEntryDataDetail.AdjustmentOver) == false) AdjustmentOvers.Add(CurrentAsycudaDocumentItemEntryDataDetail.AdjustmentOver);
                    //}
                    //if (e.PropertyName == "AddAdjustmentShort")
                   // {
                   //    if(AdjustmentShorts.Contains(CurrentAsycudaDocumentItemEntryDataDetail.AdjustmentShort) == false) AdjustmentShorts.Add(CurrentAsycudaDocumentItemEntryDataDetail.AdjustmentShort);
                    //}
                    //if (e.PropertyName == "AddAdjustmentDetail")
                   // {
                   //    if(AdjustmentDetails.Contains(CurrentAsycudaDocumentItemEntryDataDetail.AdjustmentDetail) == false) AdjustmentDetails.Add(CurrentAsycudaDocumentItemEntryDataDetail.AdjustmentDetail);
                    //}
                 } 
        internal void OnAsycudaDocumentItemEntryDataDetailsChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentItemEntryDataDetails.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentItemEntryDataDetails);
        }   


 	
		 internal void OnCurrentAdjustmentOverChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AdjustmentOver> e)
			{
			if(ViewCurrentAdjustmentOver == false) return;
			if (e.Data == null || e.Data.EntryDataDetailsId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("EntryDataDetailsId == {0}", e.Data.EntryDataDetailsId.ToString());
                 }

				AsycudaDocumentItemEntryDataDetails.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentItemEntryDataDetails);
                // SendMessage(MessageToken.AsycudaDocumentItemEntryDataDetailsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentItemEntryDataDetailsChanged));
                			}
	
		 internal void OnCurrentAdjustmentShortChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AdjustmentShort> e)
			{
			if(ViewCurrentAdjustmentShort == false) return;
			if (e.Data == null || e.Data.EntryDataDetailsId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("EntryDataDetailsId == {0}", e.Data.EntryDataDetailsId.ToString());
                 }

				AsycudaDocumentItemEntryDataDetails.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentItemEntryDataDetails);
                // SendMessage(MessageToken.AsycudaDocumentItemEntryDataDetailsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentItemEntryDataDetailsChanged));
                			}
	
		 internal void OnCurrentAdjustmentDetailChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AdjustmentDetail> e)
			{
			if(ViewCurrentAdjustmentDetail == false) return;
			if (e.Data == null || e.Data.EntryDataDetailsId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("EntryDataDetailsId == {0}", e.Data.EntryDataDetailsId.ToString());
                 }

				AsycudaDocumentItemEntryDataDetails.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentItemEntryDataDetails);
                // SendMessage(MessageToken.AsycudaDocumentItemEntryDataDetailsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentItemEntryDataDetailsChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentAdjustmentOver = false;
         public bool ViewCurrentAdjustmentOver
         {
             get
             {
                 return _viewCurrentAdjustmentOver;
             }
             set
             {
                 _viewCurrentAdjustmentOver = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAdjustmentOver);
                FilterData();
             }
         }
 	
		 bool _viewCurrentAdjustmentShort = false;
         public bool ViewCurrentAdjustmentShort
         {
             get
             {
                 return _viewCurrentAdjustmentShort;
             }
             set
             {
                 _viewCurrentAdjustmentShort = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAdjustmentShort);
                FilterData();
             }
         }
 	
		 bool _viewCurrentAdjustmentDetail = false;
         public bool ViewCurrentAdjustmentDetail
         {
             get
             {
                 return _viewCurrentAdjustmentDetail;
             }
             set
             {
                 _viewCurrentAdjustmentDetail = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAdjustmentDetail);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_AsycudaDocumentItemEntryDataDetails.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentItemEntryDataDetails);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentItemEntryDataDetail> lst = null;
            using (var ctx = new AsycudaDocumentItemEntryDataDetailRepository())
            {
                lst = await ctx.GetAsycudaDocumentItemEntryDataDetailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentItemEntryDataDetails = new ObservableCollection<AsycudaDocumentItemEntryDataDetail>(lst);
        }

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _keyFilter;
        public string keyFilter
        {
            get
            {
                return _keyFilter;
            }
            set
            {
                _keyFilter = value;
				NotifyPropertyChanged(x => keyFilter);
                FilterData();
                
            }
        }	

 

		private string _documentTypeFilter;
        public string DocumentTypeFilter
        {
            get
            {
                return _documentTypeFilter;
            }
            set
            {
                _documentTypeFilter = value;
				NotifyPropertyChanged(x => DocumentTypeFilter);
                FilterData();
                
            }
        }	

 

		private Double? _quantityFilter;
        public Double? QuantityFilter
        {
            get
            {
                return _quantityFilter;
            }
            set
            {
                _quantityFilter = value;
				NotifyPropertyChanged(x => QuantityFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentItemEntryDataDetails.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentItemEntryDataDetails);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(keyFilter) == false)
						res.Append(" && " + string.Format("key.Contains(\"{0}\")",  keyFilter));						
 

									if(string.IsNullOrEmpty(DocumentTypeFilter) == false)
						res.Append(" && " + string.Format("DocumentType.Contains(\"{0}\")",  DocumentTypeFilter));						
 

					if(QuantityFilter.HasValue)
						res.Append(" && " + string.Format("Quantity == {0}",  QuantityFilter.ToString()));							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentItemEntryDataDetail> lst = null;
            using (var ctx = new AsycudaDocumentItemEntryDataDetailRepository())
            {
                lst = await ctx.GetAsycudaDocumentItemEntryDataDetailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentItemEntryDataDetailExcelLine, List<AsycudaDocumentItemEntryDataDetailExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentItemEntryDataDetailExcelLine
                {
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    key = x.key ,
                    
 
                    DocumentType = x.DocumentType ,
                    
 
                    Quantity = x.Quantity 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class AsycudaDocumentItemEntryDataDetailExcelLine
        {
		 
                    public string ItemNumber { get; set; } 
                    
 
                    public string key { get; set; } 
                    
 
                    public string DocumentType { get; set; } 
                    
 
                    public Nullable<double> Quantity { get; set; } 
                    
        }

		
    }
}
		

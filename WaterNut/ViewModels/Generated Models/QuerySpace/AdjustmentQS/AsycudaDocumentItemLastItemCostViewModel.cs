// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using AdjustmentQS.Client.Entities;
using AdjustmentQS.Client.Repositories;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;
using SimpleMvvmToolkit;


namespace WaterNut.QuerySpace.AdjustmentQS.ViewModels
{
    
	public partial class AsycudaDocumentItemLastItemCostViewModel_AutoGen : ViewModelBase<AsycudaDocumentItemLastItemCostViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentItemLastItemCostViewModel_AutoGen instance;
       static AsycudaDocumentItemLastItemCostViewModel_AutoGen()
        {
            instance = new AsycudaDocumentItemLastItemCostViewModel_AutoGen();
        }

       public static AsycudaDocumentItemLastItemCostViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentItemLastItemCostViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentItemLastItemCost>(MessageToken.CurrentAsycudaDocumentItemLastItemCostChanged, OnCurrentAsycudaDocumentItemLastItemCostChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentItemLastItemCostsChanged, OnAsycudaDocumentItemLastItemCostsChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentItemLastItemCostsFilterExpressionChanged, OnAsycudaDocumentItemLastItemCostsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentItemLastItemCosts = new VirtualList<AsycudaDocumentItemLastItemCost>(vloader);
			AsycudaDocumentItemLastItemCosts.LoadingStateChanged += AsycudaDocumentItemLastItemCosts_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentItemLastItemCosts, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentItemLastItemCost> _AsycudaDocumentItemLastItemCosts = null;
        public VirtualList<AsycudaDocumentItemLastItemCost> AsycudaDocumentItemLastItemCosts
        {
            get
            {
                return _AsycudaDocumentItemLastItemCosts;
            }
            set
            {
                _AsycudaDocumentItemLastItemCosts = value;
                NotifyPropertyChanged( x => x.AsycudaDocumentItemLastItemCosts);
            }
        }

		 private void OnAsycudaDocumentItemLastItemCostsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => AsycudaDocumentItemLastItemCosts.Refresh()).ConfigureAwait(false);
            SelectedAsycudaDocumentItemLastItemCosts.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentItemLastItemCosts);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentItemLastItemCostsChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentItemLastItemCostsChanged));
        }

		void AsycudaDocumentItemLastItemCosts_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentItemLastItemCosts.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentItemLastItemCosts);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentItemLastItemCosts | Error occured..." + AsycudaDocumentItemLastItemCosts.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentItemLastItemCosts);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentItemLastItemCostVirturalListLoader vloader = new AsycudaDocumentItemLastItemCostVirturalListLoader();

		private ObservableCollection<AsycudaDocumentItemLastItemCost> _selectedAsycudaDocumentItemLastItemCosts = new ObservableCollection<AsycudaDocumentItemLastItemCost>();
        public ObservableCollection<AsycudaDocumentItemLastItemCost> SelectedAsycudaDocumentItemLastItemCosts
        {
            get
            {
                return _selectedAsycudaDocumentItemLastItemCosts;
            }
            set
            {
                _selectedAsycudaDocumentItemLastItemCosts = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentItemLastItemCostsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentItemLastItemCostsChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentItemLastItemCosts);
            }
        }

        internal virtual void OnCurrentAsycudaDocumentItemLastItemCostChanged(object sender, NotificationEventArgs<AsycudaDocumentItemLastItemCost> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentItemLastItemCost != null) BaseViewModel.Instance.CurrentAsycudaDocumentItemLastItemCost.PropertyChanged += CurrentAsycudaDocumentItemLastItemCost__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemLastItemCost);
        }   

            void CurrentAsycudaDocumentItemLastItemCost__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnAsycudaDocumentItemLastItemCostsChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentItemLastItemCosts.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentItemLastItemCosts);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_AsycudaDocumentItemLastItemCosts.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentItemLastItemCosts);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentItemLastItemCost> lst = null;
            using (var ctx = new AsycudaDocumentItemLastItemCostRepository())
            {
                lst = await ctx.GetAsycudaDocumentItemLastItemCostsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentItemLastItemCosts = new ObservableCollection<AsycudaDocumentItemLastItemCost>(lst);
        }

 

		private Int32? _applicationsettingsidFilter;
        public Int32? applicationsettingsidFilter
        {
            get
            {
                return _applicationsettingsidFilter;
            }
            set
            {
                _applicationsettingsidFilter = value;
				NotifyPropertyChanged(x => applicationsettingsidFilter);
                FilterData();
                
            }
        }	

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private Double? _localItemCostFilter;
        public Double? LocalItemCostFilter
        {
            get
            {
                return _localItemCostFilter;
            }
            set
            {
                _localItemCostFilter = value;
				NotifyPropertyChanged(x => LocalItemCostFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startassessmentdateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartassessmentdateFilter
        {
            get
            {
                return _startassessmentdateFilter;
            }
            set
            {
                _startassessmentdateFilter = value;
				NotifyPropertyChanged(x => StartassessmentdateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endassessmentdateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndassessmentdateFilter
        {
            get
            {
                return _endassessmentdateFilter;
            }
            set
            {
                _endassessmentdateFilter = value;
				NotifyPropertyChanged(x => EndassessmentdateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _assessmentdateFilter;
        public DateTime? assessmentdateFilter
        {
            get
            {
                return _assessmentdateFilter;
            }
            set
            {
                _assessmentdateFilter = value;
				NotifyPropertyChanged(x => assessmentdateFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentItemLastItemCosts.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentItemLastItemCosts);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

					if(applicationsettingsidFilter.HasValue)
						res.Append(" && " + string.Format("applicationsettingsid == {0}",  applicationsettingsidFilter.ToString()));				 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

					if(LocalItemCostFilter.HasValue)
						res.Append(" && " + string.Format("LocalItemCost == {0}",  LocalItemCostFilter.ToString()));				 

 

				if (Convert.ToDateTime(StartassessmentdateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndassessmentdateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartassessmentdateFilter).Date != DateTime.MinValue)
						{
							if(StartassessmentdateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndassessmentdateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("assessmentdate >= \"{0}\"",  Convert.ToDateTime(StartassessmentdateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndassessmentdateFilter).Date != DateTime.MinValue)
						{
							if(EndassessmentdateFilter.HasValue)
								res.Append(" && " + string.Format("assessmentdate <= \"{0}\"",  Convert.ToDateTime(EndassessmentdateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartassessmentdateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndassessmentdateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_assessmentdateFilter).Date != DateTime.MinValue)
						{
							if(assessmentdateFilter.HasValue)
								res.Append(" && " + string.Format("assessmentdate == \"{0}\"",  Convert.ToDateTime(assessmentdateFilter).Date.ToString("MM/dd/yyyy")));
						}
							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentItemLastItemCost> lst = null;
            using (var ctx = new AsycudaDocumentItemLastItemCostRepository())
            {
                lst = await ctx.GetAsycudaDocumentItemLastItemCostsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentItemLastItemCostExcelLine, List<AsycudaDocumentItemLastItemCostExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentItemLastItemCostExcelLine
                {
 
                    applicationsettingsid = x.applicationsettingsid ,
                    
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    LocalItemCost = x.LocalItemCost ,
                    
 
                    assessmentdate = x.assessmentdate 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class AsycudaDocumentItemLastItemCostExcelLine
        {
		 
                    public int applicationsettingsid { get; set; } 
                    
 
                    public string ItemNumber { get; set; } 
                    
 
                    public Nullable<double> LocalItemCost { get; set; } 
                    
 
                    public System.DateTime assessmentdate { get; set; } 
                    
        }

		
    }
}
		

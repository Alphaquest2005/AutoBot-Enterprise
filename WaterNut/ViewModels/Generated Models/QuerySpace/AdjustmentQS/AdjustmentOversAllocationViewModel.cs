// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using AdjustmentQS.Client.Entities;
using AdjustmentQS.Client.Repositories;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;
using SimpleMvvmToolkit;


namespace WaterNut.QuerySpace.AdjustmentQS.ViewModels
{
    
	public partial class AdjustmentOversAllocationViewModel_AutoGen : ViewModelBase<AdjustmentOversAllocationViewModel_AutoGen>
	{

       private static readonly AdjustmentOversAllocationViewModel_AutoGen instance;
       static AdjustmentOversAllocationViewModel_AutoGen()
        {
            instance = new AdjustmentOversAllocationViewModel_AutoGen();
        }

       public static AdjustmentOversAllocationViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AdjustmentOversAllocationViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AdjustmentOversAllocation>(MessageToken.CurrentAdjustmentOversAllocationChanged, OnCurrentAdjustmentOversAllocationChanged);
            RegisterToReceiveMessages(MessageToken.AdjustmentOversAllocationsChanged, OnAdjustmentOversAllocationsChanged);
			RegisterToReceiveMessages(MessageToken.AdjustmentOversAllocationsFilterExpressionChanged, OnAdjustmentOversAllocationsFilterExpressionChanged);

 
			RegisterToReceiveMessages<EntryDataDetail>(MessageToken.CurrentEntryDataDetailChanged, OnCurrentEntryDataDetailChanged);
 
			RegisterToReceiveMessages<xcuda_Item>(MessageToken.Currentxcuda_ItemChanged, OnCurrentxcuda_ItemChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AdjustmentOversAllocations = new VirtualList<AdjustmentOversAllocation>(vloader);
			AdjustmentOversAllocations.LoadingStateChanged += AdjustmentOversAllocations_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AdjustmentOversAllocations, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AdjustmentOversAllocation> _AdjustmentOversAllocations = null;
        public VirtualList<AdjustmentOversAllocation> AdjustmentOversAllocations
        {
            get
            {
                return _AdjustmentOversAllocations;
            }
            set
            {
                _AdjustmentOversAllocations = value;
                NotifyPropertyChanged( x => x.AdjustmentOversAllocations);
            }
        }

		 private void OnAdjustmentOversAllocationsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => AdjustmentOversAllocations.Refresh()).ConfigureAwait(false);
            SelectedAdjustmentOversAllocations.Clear();
            NotifyPropertyChanged(x => SelectedAdjustmentOversAllocations);
            BeginSendMessage(MessageToken.SelectedAdjustmentOversAllocationsChanged, new NotificationEventArgs(MessageToken.SelectedAdjustmentOversAllocationsChanged));
        }

		void AdjustmentOversAllocations_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AdjustmentOversAllocations.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AdjustmentOversAllocations);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AdjustmentOversAllocations | Error occured..." + AdjustmentOversAllocations.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AdjustmentOversAllocations);
                    break;
            }
           
        }

		
		public readonly AdjustmentOversAllocationVirturalListLoader vloader = new AdjustmentOversAllocationVirturalListLoader();

		private ObservableCollection<AdjustmentOversAllocation> _selectedAdjustmentOversAllocations = new ObservableCollection<AdjustmentOversAllocation>();
        public ObservableCollection<AdjustmentOversAllocation> SelectedAdjustmentOversAllocations
        {
            get
            {
                return _selectedAdjustmentOversAllocations;
            }
            set
            {
                _selectedAdjustmentOversAllocations = value;
				BeginSendMessage(MessageToken.SelectedAdjustmentOversAllocationsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAdjustmentOversAllocationsChanged));
				 NotifyPropertyChanged(x => SelectedAdjustmentOversAllocations);
            }
        }

        internal virtual void OnCurrentAdjustmentOversAllocationChanged(object sender, NotificationEventArgs<AdjustmentOversAllocation> e)
        {
            if(BaseViewModel.Instance.CurrentAdjustmentOversAllocation != null) BaseViewModel.Instance.CurrentAdjustmentOversAllocation.PropertyChanged += CurrentAdjustmentOversAllocation__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAdjustmentOversAllocation);
        }   

            void CurrentAdjustmentOversAllocation__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddEntryDataDetail")
                   // {
                   //    if(EntryDataDetails.Contains(CurrentAdjustmentOversAllocation.EntryDataDetail) == false) EntryDataDetails.Add(CurrentAdjustmentOversAllocation.EntryDataDetail);
                    //}
                    //if (e.PropertyName == "Addxcuda_Item")
                   // {
                   //    if(xcuda_Item.Contains(CurrentAdjustmentOversAllocation.xcuda_Item) == false) xcuda_Item.Add(CurrentAdjustmentOversAllocation.xcuda_Item);
                    //}
                 } 
        internal virtual void OnAdjustmentOversAllocationsChanged(object sender, NotificationEventArgs e)
        {
            _AdjustmentOversAllocations.Refresh();
			NotifyPropertyChanged(x => this.AdjustmentOversAllocations);
        }   


 	
		 internal virtual void OnCurrentEntryDataDetailChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EntryDataDetail> e)
			{
			if(ViewCurrentEntryDataDetail == false) return;
			if (e.Data == null || e.Data.EntryDataDetailsId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("EntryDataDetailsId == {0}", e.Data.EntryDataDetailsId.ToString());
                 }

				AdjustmentOversAllocations.Refresh();
				NotifyPropertyChanged(x => this.AdjustmentOversAllocations);
                // SendMessage(MessageToken.AdjustmentOversAllocationsChanged, new NotificationEventArgs(MessageToken.AdjustmentOversAllocationsChanged));
                			}
	
		 internal virtual void OnCurrentxcuda_ItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<xcuda_Item> e)
			{
			if(ViewCurrentxcuda_Item == false) return;
			if (e.Data == null || e.Data.Item_Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("PreviousItem_Id == {0}", e.Data.Item_Id.ToString());
                 }

				AdjustmentOversAllocations.Refresh();
				NotifyPropertyChanged(x => this.AdjustmentOversAllocations);
                // SendMessage(MessageToken.AdjustmentOversAllocationsChanged, new NotificationEventArgs(MessageToken.AdjustmentOversAllocationsChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentEntryDataDetail = false;
         public bool ViewCurrentEntryDataDetail
         {
             get
             {
                 return _viewCurrentEntryDataDetail;
             }
             set
             {
                 _viewCurrentEntryDataDetail = value;
                 NotifyPropertyChanged(x => x.ViewCurrentEntryDataDetail);
                FilterData();
             }
         }
 	
		 bool _viewCurrentxcuda_Item = false;
         public bool ViewCurrentxcuda_Item
         {
             get
             {
                 return _viewCurrentxcuda_Item;
             }
             set
             {
                 _viewCurrentxcuda_Item = value;
                 NotifyPropertyChanged(x => x.ViewCurrentxcuda_Item);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_AdjustmentOversAllocations.Refresh();
			NotifyPropertyChanged(x => this.AdjustmentOversAllocations);
		}

		public async Task SelectAll()
        {
            IEnumerable<AdjustmentOversAllocation> lst = null;
            using (var ctx = new AdjustmentOversAllocationRepository())
            {
                lst = await ctx.GetAdjustmentOversAllocationsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAdjustmentOversAllocations = new ObservableCollection<AdjustmentOversAllocation>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AdjustmentOversAllocations.Refresh();
			NotifyPropertyChanged(x => this.AdjustmentOversAllocations);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AdjustmentOversAllocation> lst = null;
            using (var ctx = new AdjustmentOversAllocationRepository())
            {
                lst = await ctx.GetAdjustmentOversAllocationsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AdjustmentOversAllocationExcelLine, List<AdjustmentOversAllocationExcelLine>>
            {
                dataToPrint = lst.Select(x => new AdjustmentOversAllocationExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class AdjustmentOversAllocationExcelLine
        {
		        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllQuerySpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;
using SalesDataQS.Client.Entities;
using SalesDataQS.Client.Repositories;
using SimpleMvvmToolkit;


namespace WaterNut.QuerySpace.SalesDataQS.ViewModels
{
    
	public partial class AsycudaDocumentSetEntryDataViewModel_AutoGen : ViewModelBase<AsycudaDocumentSetEntryDataViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentSetEntryDataViewModel_AutoGen instance;
       static AsycudaDocumentSetEntryDataViewModel_AutoGen()
        {
            instance = new AsycudaDocumentSetEntryDataViewModel_AutoGen();
        }

       public static AsycudaDocumentSetEntryDataViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentSetEntryDataViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentSetEntryData>(MessageToken.CurrentAsycudaDocumentSetEntryDataChanged, OnCurrentAsycudaDocumentSetEntryDataChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetEntryDataChanged, OnAsycudaDocumentSetEntryDataChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetEntryDataFilterExpressionChanged, OnAsycudaDocumentSetEntryDataFilterExpressionChanged);

 
			RegisterToReceiveMessages<SalesData>(MessageToken.CurrentSalesDataChanged, OnCurrentSalesDataChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentSetEntryData = new VirtualList<AsycudaDocumentSetEntryData>(vloader);
			AsycudaDocumentSetEntryData.LoadingStateChanged += AsycudaDocumentSetEntryData_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentSetEntryData, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentSetEntryData> _AsycudaDocumentSetEntryData = null;
        public VirtualList<AsycudaDocumentSetEntryData> AsycudaDocumentSetEntryData
        {
            get
            {
                return _AsycudaDocumentSetEntryData;
            }
            set
            {
                _AsycudaDocumentSetEntryData = value;
            }
        }

		 private void OnAsycudaDocumentSetEntryDataFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			AsycudaDocumentSetEntryData.Refresh();
            SelectedAsycudaDocumentSetEntryData.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentSetEntryData);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetEntryDataChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetEntryDataChanged));
        }

		void AsycudaDocumentSetEntryData_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentSetEntryData.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentSetEntryData);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentSetEntryData | Error occured..." + AsycudaDocumentSetEntryData.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentSetEntryData);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentSetEntryDataVirturalListLoader vloader = new AsycudaDocumentSetEntryDataVirturalListLoader();

		private ObservableCollection<AsycudaDocumentSetEntryData> _selectedAsycudaDocumentSetEntryData = new ObservableCollection<AsycudaDocumentSetEntryData>();
        public ObservableCollection<AsycudaDocumentSetEntryData> SelectedAsycudaDocumentSetEntryData
        {
            get
            {
                return _selectedAsycudaDocumentSetEntryData;
            }
            set
            {
                _selectedAsycudaDocumentSetEntryData = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetEntryDataChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetEntryDataChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentSetEntryData);
            }
        }

        internal void OnCurrentAsycudaDocumentSetEntryDataChanged(object sender, NotificationEventArgs<AsycudaDocumentSetEntryData> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentSetEntryData != null) BaseViewModel.Instance.CurrentAsycudaDocumentSetEntryData.PropertyChanged += CurrentAsycudaDocumentSetEntryData__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryData);
        }   

            void CurrentAsycudaDocumentSetEntryData__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddSalesData")
                   // {
                   //    if(SalesDatas.Contains(CurrentAsycudaDocumentSetEntryData.SalesData) == false) SalesDatas.Add(CurrentAsycudaDocumentSetEntryData.SalesData);
                    //}
                 } 
        internal void OnAsycudaDocumentSetEntryDataChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentSetEntryData.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryData);
        }   


 	
		 internal void OnCurrentSalesDataChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<SalesData> e)
			{
			if(ViewCurrentSalesData == false) return;
			if (e.Data == null || e.Data.EntryDataId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				
				vloader.FilterExpression = $"EntryDataId == \"{e.Data.EntryDataId.ToString()}\"";
                }

				AsycudaDocumentSetEntryData.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryData);
                // SendMessage(MessageToken.AsycudaDocumentSetEntryDataChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentSetEntryDataChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentSalesData = true;
         public bool ViewCurrentSalesData
         {
             get
             {
                 return _viewCurrentSalesData;
             }
             set
             {
                 _viewCurrentSalesData = value;
                 NotifyPropertyChanged(x => x.ViewCurrentSalesData);
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";
			vloader.ClearNavigationExpression();
			_AsycudaDocumentSetEntryData.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryData);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentSetEntryData> lst = null;
            using (var ctx = new AsycudaDocumentSetEntryDataRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetEntryDataByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentSetEntryData = new ObservableCollection<AsycudaDocumentSetEntryData>(lst);
        }

 

		private string _entryDataIdFilter;
        public string EntryDataIdFilter
        {
            get
            {
                return _entryDataIdFilter;
            }
            set
            {
                _entryDataIdFilter = value;
				NotifyPropertyChanged(x => EntryDataIdFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentSetEntryData.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryData);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(EntryDataIdFilter) == false)
						res.Append(" && " + $"EntryDataId.Contains(\"{EntryDataIdFilter}\")");						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentSetEntryData> lst = null;
            using (var ctx = new AsycudaDocumentSetEntryDataRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetEntryDataByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentSetEntryDataExcelLine, List<AsycudaDocumentSetEntryDataExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentSetEntryDataExcelLine
                {
 
                    EntryData_Id = x.EntryData_Id 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
                await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class AsycudaDocumentSetEntryDataExcelLine
        {
		 
                    public int EntryData_Id { get; set; } 
                    
        }

		
    }
}
		

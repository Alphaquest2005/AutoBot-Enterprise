// <autogenerated>
//   This file was generated by T4 code generator AllQuerySpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;
using SalesDataQS.Client.Entities;
using SalesDataQS.Client.Repositories;
using SimpleMvvmToolkit;


namespace WaterNut.QuerySpace.SalesDataQS.ViewModels
{
    
	public partial class AsycudaDocumentSetEntryDataDetailsViewModel_AutoGen : ViewModelBase<AsycudaDocumentSetEntryDataDetailsViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentSetEntryDataDetailsViewModel_AutoGen instance;
       static AsycudaDocumentSetEntryDataDetailsViewModel_AutoGen()
        {
            instance = new AsycudaDocumentSetEntryDataDetailsViewModel_AutoGen();
        }

       public static AsycudaDocumentSetEntryDataDetailsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentSetEntryDataDetailsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentSetEntryDataDetails>(MessageToken.CurrentAsycudaDocumentSetEntryDataDetailsChanged, OnCurrentAsycudaDocumentSetEntryDataDetailsChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetEntryDataDetailsChanged, OnAsycudaDocumentSetEntryDataDetailsChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetEntryDataDetailsFilterExpressionChanged, OnAsycudaDocumentSetEntryDataDetailsFilterExpressionChanged);

 
			RegisterToReceiveMessages<SalesDataDetail>(MessageToken.CurrentSalesDataDetailChanged, OnCurrentSalesDataDetailChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentSetEntryDataDetails = new VirtualList<AsycudaDocumentSetEntryDataDetails>(vloader);
			AsycudaDocumentSetEntryDataDetails.LoadingStateChanged += AsycudaDocumentSetEntryDataDetails_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentSetEntryDataDetails, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentSetEntryDataDetails> _AsycudaDocumentSetEntryDataDetails = null;
        public VirtualList<AsycudaDocumentSetEntryDataDetails> AsycudaDocumentSetEntryDataDetails
        {
            get
            {
                return _AsycudaDocumentSetEntryDataDetails;
            }
            set
            {
                _AsycudaDocumentSetEntryDataDetails = value;
            }
        }

		 private void OnAsycudaDocumentSetEntryDataDetailsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			AsycudaDocumentSetEntryDataDetails.Refresh();
            SelectedAsycudaDocumentSetEntryDataDetails.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentSetEntryDataDetails);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetEntryDataDetailsChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetEntryDataDetailsChanged));
        }

		void AsycudaDocumentSetEntryDataDetails_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentSetEntryDataDetails.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentSetEntryDataDetails);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentSetEntryDataDetails | Error occured..." + AsycudaDocumentSetEntryDataDetails.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentSetEntryDataDetails);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentSetEntryDataDetailsVirturalListLoader vloader = new AsycudaDocumentSetEntryDataDetailsVirturalListLoader();

		private ObservableCollection<AsycudaDocumentSetEntryDataDetails> _selectedAsycudaDocumentSetEntryDataDetails = new ObservableCollection<AsycudaDocumentSetEntryDataDetails>();
        public ObservableCollection<AsycudaDocumentSetEntryDataDetails> SelectedAsycudaDocumentSetEntryDataDetails
        {
            get
            {
                return _selectedAsycudaDocumentSetEntryDataDetails;
            }
            set
            {
                _selectedAsycudaDocumentSetEntryDataDetails = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetEntryDataDetailsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetEntryDataDetailsChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentSetEntryDataDetails);
            }
        }

        internal void OnCurrentAsycudaDocumentSetEntryDataDetailsChanged(object sender, NotificationEventArgs<AsycudaDocumentSetEntryDataDetails> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentSetEntryDataDetails != null) BaseViewModel.Instance.CurrentAsycudaDocumentSetEntryDataDetails.PropertyChanged += CurrentAsycudaDocumentSetEntryDataDetails__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryDataDetails);
        }   

            void CurrentAsycudaDocumentSetEntryDataDetails__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddSalesDataDetail")
                   // {
                   //    if(SalesDataDetails.Contains(CurrentAsycudaDocumentSetEntryDataDetails.SalesDataDetail) == false) SalesDataDetails.Add(CurrentAsycudaDocumentSetEntryDataDetails.SalesDataDetail);
                    //}
                 } 
        internal void OnAsycudaDocumentSetEntryDataDetailsChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentSetEntryDataDetails.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryDataDetails);
        }   


 	
		 internal void OnCurrentSalesDataDetailChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<SalesDataDetail> e)
			{
			if(ViewCurrentSalesDataDetail == false) return;
			if (e.Data == null || e.Data.EntryDataDetailsId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = $"EntryDataDetailsId == {e.Data.EntryDataDetailsId.ToString()}";
                 }

				AsycudaDocumentSetEntryDataDetails.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryDataDetails);
                // SendMessage(MessageToken.AsycudaDocumentSetEntryDataDetailsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentSetEntryDataDetailsChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentSalesDataDetail = true;
         public bool ViewCurrentSalesDataDetail
         {
             get
             {
                 return _viewCurrentSalesDataDetail;
             }
             set
             {
                 _viewCurrentSalesDataDetail = value;
                 NotifyPropertyChanged(x => x.ViewCurrentSalesDataDetail);
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";
			vloader.ClearNavigationExpression();
			_AsycudaDocumentSetEntryDataDetails.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryDataDetails);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentSetEntryDataDetails> lst = null;
            using (var ctx = new AsycudaDocumentSetEntryDataDetailsRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetEntryDataDetailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentSetEntryDataDetails = new ObservableCollection<AsycudaDocumentSetEntryDataDetails>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentSetEntryDataDetails.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetEntryDataDetails);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentSetEntryDataDetails> lst = null;
            using (var ctx = new AsycudaDocumentSetEntryDataDetailsRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetEntryDataDetailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentSetEntryDataDetailsExcelLine, List<AsycudaDocumentSetEntryDataDetailsExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentSetEntryDataDetailsExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
                await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class AsycudaDocumentSetEntryDataDetailsExcelLine
        {
		        }

		
    }
}
		

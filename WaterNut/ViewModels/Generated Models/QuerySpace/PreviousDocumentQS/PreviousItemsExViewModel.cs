// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using PreviousDocumentQS.Client.Entities;
using PreviousDocumentQS.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.PreviousDocumentQS.ViewModels
{
    
	public partial class PreviousItemsExViewModel_AutoGen : ViewModelBase<PreviousItemsExViewModel_AutoGen>
	{

       private static readonly PreviousItemsExViewModel_AutoGen instance;
       static PreviousItemsExViewModel_AutoGen()
        {
            instance = new PreviousItemsExViewModel_AutoGen();
        }

       public static PreviousItemsExViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public PreviousItemsExViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<PreviousItemsEx>(MessageToken.CurrentPreviousItemsExChanged, OnCurrentPreviousItemsExChanged);
            RegisterToReceiveMessages(MessageToken.PreviousItemsExesChanged, OnPreviousItemsExesChanged);
			RegisterToReceiveMessages(MessageToken.PreviousItemsExesFilterExpressionChanged, OnPreviousItemsExesFilterExpressionChanged);

 
			RegisterToReceiveMessages<PreviousDocumentItem>(MessageToken.CurrentPreviousDocumentItemChanged, OnCurrentPreviousDocumentItemChanged);
 
			RegisterToReceiveMessages<PreviousDocumentItem>(MessageToken.CurrentPreviousDocumentItemChanged, OnCurrentAsycudaDocumentItemChanged);

 			// Recieve messages for Core Current Entities Changed
                        RegisterToReceiveMessages<ApplicationSettings>(CoreEntities.MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
                        RegisterToReceiveMessages<Customs_Procedure>(CoreEntities.MessageToken.CurrentCustoms_ProcedureChanged, OnCurrentCustoms_ProcedureChanged);
 

			PreviousItemsExes = new VirtualList<PreviousItemsEx>(vloader);
			PreviousItemsExes.LoadingStateChanged += PreviousItemsExes_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(PreviousItemsExes, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<PreviousItemsEx> _PreviousItemsExes = null;
        public VirtualList<PreviousItemsEx> PreviousItemsExes
        {
            get
            {
                return _PreviousItemsExes;
            }
            set
            {
                _PreviousItemsExes = value;
                NotifyPropertyChanged( x => x.PreviousItemsExes);
            }
        }

		 private void OnPreviousItemsExesFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => PreviousItemsExes.Refresh()).ConfigureAwait(false);
            SelectedPreviousItemsExes.Clear();
            NotifyPropertyChanged(x => SelectedPreviousItemsExes);
            BeginSendMessage(MessageToken.SelectedPreviousItemsExesChanged, new NotificationEventArgs(MessageToken.SelectedPreviousItemsExesChanged));
        }

		void PreviousItemsExes_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (PreviousItemsExes.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => PreviousItemsExes);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("PreviousItemsExes | Error occured..." + PreviousItemsExes.LastLoadingError.Message);
                    NotifyPropertyChanged(x => PreviousItemsExes);
                    break;
            }
           
        }

		
		public readonly PreviousItemsExVirturalListLoader vloader = new PreviousItemsExVirturalListLoader();

		private ObservableCollection<PreviousItemsEx> _selectedPreviousItemsExes = new ObservableCollection<PreviousItemsEx>();
        public ObservableCollection<PreviousItemsEx> SelectedPreviousItemsExes
        {
            get
            {
                return _selectedPreviousItemsExes;
            }
            set
            {
                _selectedPreviousItemsExes = value;
				BeginSendMessage(MessageToken.SelectedPreviousItemsExesChanged,
                                    new NotificationEventArgs(MessageToken.SelectedPreviousItemsExesChanged));
				 NotifyPropertyChanged(x => SelectedPreviousItemsExes);
            }
        }

        internal virtual void OnCurrentPreviousItemsExChanged(object sender, NotificationEventArgs<PreviousItemsEx> e)
        {
            if(BaseViewModel.Instance.CurrentPreviousItemsEx != null) BaseViewModel.Instance.CurrentPreviousItemsEx.PropertyChanged += CurrentPreviousItemsEx__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentPreviousItemsEx);
        }   

            void CurrentPreviousItemsEx__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddPreviousDocumentItem")
                   // {
                   //    if(PreviousDocumentItems.Contains(CurrentPreviousItemsEx.PreviousDocumentItem) == false) PreviousDocumentItems.Add(CurrentPreviousItemsEx.PreviousDocumentItem);
                    //}
                    //if (e.PropertyName == "AddAsycudaDocumentItem")
                   // {
                   //    if(PreviousDocumentItems.Contains(CurrentPreviousItemsEx.AsycudaDocumentItem) == false) PreviousDocumentItems.Add(CurrentPreviousItemsEx.AsycudaDocumentItem);
                    //}
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentPreviousItemsEx.ApplicationSettings) == false) ApplicationSettings.Add(CurrentPreviousItemsEx.ApplicationSettings);
                    //}
                    //if (e.PropertyName == "AddCustoms_Procedure")
                   // {
                   //    if(Customs_Procedure.Contains(CurrentPreviousItemsEx.Customs_Procedure) == false) Customs_Procedure.Add(CurrentPreviousItemsEx.Customs_Procedure);
                    //}
                 } 
        internal virtual void OnPreviousItemsExesChanged(object sender, NotificationEventArgs e)
        {
            _PreviousItemsExes.Refresh();
			NotifyPropertyChanged(x => this.PreviousItemsExes);
        }   


 	
		 internal virtual void OnCurrentPreviousDocumentItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<PreviousDocumentItem> e)
			{
			if(ViewCurrentPreviousDocumentItem == false) return;
			if (e.Data == null || e.Data.Item_Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("PreviousDocumentItemId == {0}", e.Data.Item_Id.ToString());
                 }

				PreviousItemsExes.Refresh();
				NotifyPropertyChanged(x => this.PreviousItemsExes);
                // SendMessage(MessageToken.PreviousItemsExesChanged, new NotificationEventArgs(MessageToken.PreviousItemsExesChanged));
                			}
	
		 internal virtual void OnCurrentAsycudaDocumentItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<PreviousDocumentItem> e)
			{
			if(ViewCurrentAsycudaDocumentItem == false) return;
			if (e.Data == null || e.Data.Item_Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("AsycudaDocumentItemId == {0}", e.Data.Item_Id.ToString());
                 }

				PreviousItemsExes.Refresh();
				NotifyPropertyChanged(x => this.PreviousItemsExes);
                // SendMessage(MessageToken.PreviousItemsExesChanged, new NotificationEventArgs(MessageToken.PreviousItemsExesChanged));
                			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    PreviousItemsExes.Refresh();
					NotifyPropertyChanged(x => this.PreviousItemsExes);
				}
                internal virtual void OnCurrentCustoms_ProcedureChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Customs_Procedure> e)
				{
				if (e.Data == null || e.Data.Customs_ProcedureId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("Customs_ProcedureId == {0}", e.Data.Customs_ProcedureId.ToString());
                }
					
                    PreviousItemsExes.Refresh();
					NotifyPropertyChanged(x => this.PreviousItemsExes);
				}
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentPreviousDocumentItem = false;
         public bool ViewCurrentPreviousDocumentItem
         {
             get
             {
                 return _viewCurrentPreviousDocumentItem;
             }
             set
             {
                 _viewCurrentPreviousDocumentItem = value;
                 NotifyPropertyChanged(x => x.ViewCurrentPreviousDocumentItem);
                FilterData();
             }
         }
 	
		 bool _viewCurrentAsycudaDocumentItem = false;
         public bool ViewCurrentAsycudaDocumentItem
         {
             get
             {
                 return _viewCurrentAsycudaDocumentItem;
             }
             set
             {
                 _viewCurrentAsycudaDocumentItem = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocumentItem);
                FilterData();
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_PreviousItemsExes.Refresh();
			NotifyPropertyChanged(x => this.PreviousItemsExes);
		}

		public async Task SelectAll()
        {
            IEnumerable<PreviousItemsEx> lst = null;
            using (var ctx = new PreviousItemsExRepository())
            {
                lst = await ctx.GetPreviousItemsExesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedPreviousItemsExes = new ObservableCollection<PreviousItemsEx>(lst);
        }

 

		private string _packages_numberFilter;
        public string Packages_numberFilter
        {
            get
            {
                return _packages_numberFilter;
            }
            set
            {
                _packages_numberFilter = value;
				NotifyPropertyChanged(x => Packages_numberFilter);
                FilterData();
                
            }
        }	

 

		private string _previous_Packages_numberFilter;
        public string Previous_Packages_numberFilter
        {
            get
            {
                return _previous_Packages_numberFilter;
            }
            set
            {
                _previous_Packages_numberFilter = value;
				NotifyPropertyChanged(x => Previous_Packages_numberFilter);
                FilterData();
                
            }
        }	

 

		private string _hs_codeFilter;
        public string Hs_codeFilter
        {
            get
            {
                return _hs_codeFilter;
            }
            set
            {
                _hs_codeFilter = value;
				NotifyPropertyChanged(x => Hs_codeFilter);
                FilterData();
                
            }
        }	

 

		private string _commodity_codeFilter;
        public string Commodity_codeFilter
        {
            get
            {
                return _commodity_codeFilter;
            }
            set
            {
                _commodity_codeFilter = value;
				NotifyPropertyChanged(x => Commodity_codeFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _previous_item_numberFilter;
        public Int32? Previous_item_numberFilter
        {
            get
            {
                return _previous_item_numberFilter;
            }
            set
            {
                _previous_item_numberFilter = value;
				NotifyPropertyChanged(x => Previous_item_numberFilter);
                FilterData();
                
            }
        }	

 

		private string _goods_originFilter;
        public string Goods_originFilter
        {
            get
            {
                return _goods_originFilter;
            }
            set
            {
                _goods_originFilter = value;
				NotifyPropertyChanged(x => Goods_originFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _net_weightFilter;
        public Decimal? Net_weightFilter
        {
            get
            {
                return _net_weightFilter;
            }
            set
            {
                _net_weightFilter = value;
				NotifyPropertyChanged(x => Net_weightFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _prev_net_weightFilter;
        public Decimal? Prev_net_weightFilter
        {
            get
            {
                return _prev_net_weightFilter;
            }
            set
            {
                _prev_net_weightFilter = value;
				NotifyPropertyChanged(x => Prev_net_weightFilter);
                FilterData();
                
            }
        }	

 

		private string _prev_reg_serFilter;
        public string Prev_reg_serFilter
        {
            get
            {
                return _prev_reg_serFilter;
            }
            set
            {
                _prev_reg_serFilter = value;
				NotifyPropertyChanged(x => Prev_reg_serFilter);
                FilterData();
                
            }
        }	

 

		private string _prev_reg_nbrFilter;
        public string Prev_reg_nbrFilter
        {
            get
            {
                return _prev_reg_nbrFilter;
            }
            set
            {
                _prev_reg_nbrFilter = value;
				NotifyPropertyChanged(x => Prev_reg_nbrFilter);
                FilterData();
                
            }
        }	

 

		private string _prev_reg_cuoFilter;
        public string Prev_reg_cuoFilter
        {
            get
            {
                return _prev_reg_cuoFilter;
            }
            set
            {
                _prev_reg_cuoFilter = value;
				NotifyPropertyChanged(x => Prev_reg_cuoFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _suplementary_QuantityFilter;
        public Decimal? Suplementary_QuantityFilter
        {
            get
            {
                return _suplementary_QuantityFilter;
            }
            set
            {
                _suplementary_QuantityFilter = value;
				NotifyPropertyChanged(x => Suplementary_QuantityFilter);
                FilterData();
                
            }
        }	

 

		private Double? _preveious_suplementary_quantityFilter;
        public Double? Preveious_suplementary_quantityFilter
        {
            get
            {
                return _preveious_suplementary_quantityFilter;
            }
            set
            {
                _preveious_suplementary_quantityFilter = value;
				NotifyPropertyChanged(x => Preveious_suplementary_quantityFilter);
                FilterData();
                
            }
        }	

 

		private Double? _current_valueFilter;
        public Double? Current_valueFilter
        {
            get
            {
                return _current_valueFilter;
            }
            set
            {
                _current_valueFilter = value;
				NotifyPropertyChanged(x => Current_valueFilter);
                FilterData();
                
            }
        }	

 

		private Double? _previous_valueFilter;
        public Double? Previous_valueFilter
        {
            get
            {
                return _previous_valueFilter;
            }
            set
            {
                _previous_valueFilter = value;
				NotifyPropertyChanged(x => Previous_valueFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _current_item_numberFilter;
        public Int32? Current_item_numberFilter
        {
            get
            {
                return _current_item_numberFilter;
            }
            set
            {
                _current_item_numberFilter = value;
				NotifyPropertyChanged(x => Current_item_numberFilter);
                FilterData();
                
            }
        }	

 

		private Double? _qtyAllocatedFilter;
        public Double? QtyAllocatedFilter
        {
            get
            {
                return _qtyAllocatedFilter;
            }
            set
            {
                _qtyAllocatedFilter = value;
				NotifyPropertyChanged(x => QtyAllocatedFilter);
                FilterData();
                
            }
        }	

 

		private Double? _rndCurrent_ValueFilter;
        public Double? RndCurrent_ValueFilter
        {
            get
            {
                return _rndCurrent_ValueFilter;
            }
            set
            {
                _rndCurrent_ValueFilter = value;
				NotifyPropertyChanged(x => RndCurrent_ValueFilter);
                FilterData();
                
            }
        }	

 

		private string _referenceNumberFilter;
        public string ReferenceNumberFilter
        {
            get
            {
                return _referenceNumberFilter;
            }
            set
            {
                _referenceNumberFilter = value;
				NotifyPropertyChanged(x => ReferenceNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _cNumberFilter;
        public string CNumberFilter
        {
            get
            {
                return _cNumberFilter;
            }
            set
            {
                _cNumberFilter = value;
				NotifyPropertyChanged(x => CNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartRegistrationDateFilter
        {
            get
            {
                return _startRegistrationDateFilter;
            }
            set
            {
                _startRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndRegistrationDateFilter
        {
            get
            {
                return _endRegistrationDateFilter;
            }
            set
            {
                _endRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _registrationDateFilter;
        public DateTime? RegistrationDateFilter
        {
            get
            {
                return _registrationDateFilter;
            }
            set
            {
                _registrationDateFilter = value;
				NotifyPropertyChanged(x => RegistrationDateFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startAssessmentDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartAssessmentDateFilter
        {
            get
            {
                return _startAssessmentDateFilter;
            }
            set
            {
                _startAssessmentDateFilter = value;
				NotifyPropertyChanged(x => StartAssessmentDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endAssessmentDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndAssessmentDateFilter
        {
            get
            {
                return _endAssessmentDateFilter;
            }
            set
            {
                _endAssessmentDateFilter = value;
				NotifyPropertyChanged(x => EndAssessmentDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _assessmentDateFilter;
        public DateTime? AssessmentDateFilter
        {
            get
            {
                return _assessmentDateFilter;
            }
            set
            {
                _assessmentDateFilter = value;
				NotifyPropertyChanged(x => AssessmentDateFilter);
                FilterData();
                
            }
        }	

 

		private string _prev_decl_HS_specFilter;
        public string Prev_decl_HS_specFilter
        {
            get
            {
                return _prev_decl_HS_specFilter;
            }
            set
            {
                _prev_decl_HS_specFilter = value;
				NotifyPropertyChanged(x => Prev_decl_HS_specFilter);
                FilterData();
                
            }
        }	

 

		private Double? _salesFactorFilter;
        public Double? SalesFactorFilter
        {
            get
            {
                return _salesFactorFilter;
            }
            set
            {
                _salesFactorFilter = value;
				NotifyPropertyChanged(x => SalesFactorFilter);
                FilterData();
                
            }
        }	

 

		private string _documentTypeFilter;
        public string DocumentTypeFilter
        {
            get
            {
                return _documentTypeFilter;
            }
            set
            {
                _documentTypeFilter = value;
				NotifyPropertyChanged(x => DocumentTypeFilter);
                FilterData();
                
            }
        }	

 

		private string _dutyFreePaidFilter;
        public string DutyFreePaidFilter
        {
            get
            {
                return _dutyFreePaidFilter;
            }
            set
            {
                _dutyFreePaidFilter = value;
				NotifyPropertyChanged(x => DutyFreePaidFilter);
                FilterData();
                
            }
        }	

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _pLineNumberFilter;
        public Int32? pLineNumberFilter
        {
            get
            {
                return _pLineNumberFilter;
            }
            set
            {
                _pLineNumberFilter = value;
				NotifyPropertyChanged(x => pLineNumberFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalDutyLiablityFilter;
        public Double? TotalDutyLiablityFilter
        {
            get
            {
                return _totalDutyLiablityFilter;
            }
            set
            {
                _totalDutyLiablityFilter = value;
				NotifyPropertyChanged(x => TotalDutyLiablityFilter);
                FilterData();
                
            }
        }	

 

		private Double? _dutyLiablityFilter;
        public Double? DutyLiablityFilter
        {
            get
            {
                return _dutyLiablityFilter;
            }
            set
            {
                _dutyLiablityFilter = value;
				NotifyPropertyChanged(x => DutyLiablityFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _prev_reg_yearFilter;
        public Int32? Prev_reg_yearFilter
        {
            get
            {
                return _prev_reg_yearFilter;
            }
            set
            {
                _prev_reg_yearFilter = value;
				NotifyPropertyChanged(x => Prev_reg_yearFilter);
                FilterData();
                
            }
        }	

 

		private string _customsProcedureFilter;
        public string CustomsProcedureFilter
        {
            get
            {
                return _customsProcedureFilter;
            }
            set
            {
                _customsProcedureFilter = value;
				NotifyPropertyChanged(x => CustomsProcedureFilter);
                FilterData();
                
            }
        }	

 

		private string _entryDataTypeFilter;
        public string EntryDataTypeFilter
        {
            get
            {
                return _entryDataTypeFilter;
            }
            set
            {
                _entryDataTypeFilter = value;
				NotifyPropertyChanged(x => EntryDataTypeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			PreviousItemsExes.Refresh();
			NotifyPropertyChanged(x => this.PreviousItemsExes);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(Packages_numberFilter) == false)
						res.Append(" && " + string.Format("Packages_number.Contains(\"{0}\")",  Packages_numberFilter));						
 

									if(string.IsNullOrEmpty(Previous_Packages_numberFilter) == false)
						res.Append(" && " + string.Format("Previous_Packages_number.Contains(\"{0}\")",  Previous_Packages_numberFilter));						
 

									if(string.IsNullOrEmpty(Hs_codeFilter) == false)
						res.Append(" && " + string.Format("Hs_code.Contains(\"{0}\")",  Hs_codeFilter));						
 

									if(string.IsNullOrEmpty(Commodity_codeFilter) == false)
						res.Append(" && " + string.Format("Commodity_code.Contains(\"{0}\")",  Commodity_codeFilter));						
 

					if(Previous_item_numberFilter.HasValue)
						res.Append(" && " + string.Format("Previous_item_number == {0}",  Previous_item_numberFilter.ToString()));				 

									if(string.IsNullOrEmpty(Goods_originFilter) == false)
						res.Append(" && " + string.Format("Goods_origin.Contains(\"{0}\")",  Goods_originFilter));						
 

					if(Net_weightFilter.HasValue)
						res.Append(" && " + string.Format("Net_weight == {0}",  Net_weightFilter.ToString()));				 

					if(Prev_net_weightFilter.HasValue)
						res.Append(" && " + string.Format("Prev_net_weight == {0}",  Prev_net_weightFilter.ToString()));				 

									if(string.IsNullOrEmpty(Prev_reg_serFilter) == false)
						res.Append(" && " + string.Format("Prev_reg_ser.Contains(\"{0}\")",  Prev_reg_serFilter));						
 

									if(string.IsNullOrEmpty(Prev_reg_nbrFilter) == false)
						res.Append(" && " + string.Format("Prev_reg_nbr.Contains(\"{0}\")",  Prev_reg_nbrFilter));						
 

									if(string.IsNullOrEmpty(Prev_reg_cuoFilter) == false)
						res.Append(" && " + string.Format("Prev_reg_cuo.Contains(\"{0}\")",  Prev_reg_cuoFilter));						
 

					if(Suplementary_QuantityFilter.HasValue)
						res.Append(" && " + string.Format("Suplementary_Quantity == {0}",  Suplementary_QuantityFilter.ToString()));				 

					if(Preveious_suplementary_quantityFilter.HasValue)
						res.Append(" && " + string.Format("Preveious_suplementary_quantity == {0}",  Preveious_suplementary_quantityFilter.ToString()));				 

					if(Current_valueFilter.HasValue)
						res.Append(" && " + string.Format("Current_value == {0}",  Current_valueFilter.ToString()));				 

					if(Previous_valueFilter.HasValue)
						res.Append(" && " + string.Format("Previous_value == {0}",  Previous_valueFilter.ToString()));				 

					if(Current_item_numberFilter.HasValue)
						res.Append(" && " + string.Format("Current_item_number == {0}",  Current_item_numberFilter.ToString()));				 

					if(QtyAllocatedFilter.HasValue)
						res.Append(" && " + string.Format("QtyAllocated == {0}",  QtyAllocatedFilter.ToString()));				 

					if(RndCurrent_ValueFilter.HasValue)
						res.Append(" && " + string.Format("RndCurrent_Value == {0}",  RndCurrent_ValueFilter.ToString()));				 

									if(string.IsNullOrEmpty(ReferenceNumberFilter) == false)
						res.Append(" && " + string.Format("ReferenceNumber.Contains(\"{0}\")",  ReferenceNumberFilter));						
 

									if(string.IsNullOrEmpty(CNumberFilter) == false)
						res.Append(" && " + string.Format("CNumber.Contains(\"{0}\")",  CNumberFilter));						
 

 

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("RegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_registrationDateFilter).Date != DateTime.MinValue)
						{
							if(RegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate == \"{0}\"",  Convert.ToDateTime(RegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

 

				if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue)
						{
							if(StartAssessmentDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("AssessmentDate >= \"{0}\"",  Convert.ToDateTime(StartAssessmentDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue)
						{
							if(EndAssessmentDateFilter.HasValue)
								res.Append(" && " + string.Format("AssessmentDate <= \"{0}\"",  Convert.ToDateTime(EndAssessmentDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_assessmentDateFilter).Date != DateTime.MinValue)
						{
							if(AssessmentDateFilter.HasValue)
								res.Append(" && " + string.Format("AssessmentDate == \"{0}\"",  Convert.ToDateTime(AssessmentDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(Prev_decl_HS_specFilter) == false)
						res.Append(" && " + string.Format("Prev_decl_HS_spec.Contains(\"{0}\")",  Prev_decl_HS_specFilter));						
 

					if(SalesFactorFilter.HasValue)
						res.Append(" && " + string.Format("SalesFactor == {0}",  SalesFactorFilter.ToString()));				 

									if(string.IsNullOrEmpty(DocumentTypeFilter) == false)
						res.Append(" && " + string.Format("DocumentType.Contains(\"{0}\")",  DocumentTypeFilter));						
 

									if(string.IsNullOrEmpty(DutyFreePaidFilter) == false)
						res.Append(" && " + string.Format("DutyFreePaid.Contains(\"{0}\")",  DutyFreePaidFilter));						
 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

					if(pLineNumberFilter.HasValue)
						res.Append(" && " + string.Format("pLineNumber == {0}",  pLineNumberFilter.ToString()));				 

					if(TotalDutyLiablityFilter.HasValue)
						res.Append(" && " + string.Format("TotalDutyLiablity == {0}",  TotalDutyLiablityFilter.ToString()));				 

					if(DutyLiablityFilter.HasValue)
						res.Append(" && " + string.Format("DutyLiablity == {0}",  DutyLiablityFilter.ToString()));				 

					if(Prev_reg_yearFilter.HasValue)
						res.Append(" && " + string.Format("Prev_reg_year == {0}",  Prev_reg_yearFilter.ToString()));				 

									if(string.IsNullOrEmpty(CustomsProcedureFilter) == false)
						res.Append(" && " + string.Format("CustomsProcedure.Contains(\"{0}\")",  CustomsProcedureFilter));						
 

									if(string.IsNullOrEmpty(EntryDataTypeFilter) == false)
						res.Append(" && " + string.Format("EntryDataType.Contains(\"{0}\")",  EntryDataTypeFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<PreviousItemsEx> lst = null;
            using (var ctx = new PreviousItemsExRepository())
            {
                lst = await ctx.GetPreviousItemsExesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<PreviousItemsExExcelLine, List<PreviousItemsExExcelLine>>
            {
                dataToPrint = lst.Select(x => new PreviousItemsExExcelLine
                {
 
                    Packages_number = x.Packages_number ,
                    
 
                    Previous_Packages_number = x.Previous_Packages_number ,
                    
 
                    Hs_code = x.Hs_code ,
                    
 
                    Commodity_code = x.Commodity_code ,
                    
 
                    Previous_item_number = x.Previous_item_number ,
                    
 
                    Goods_origin = x.Goods_origin ,
                    
 
                    Net_weight = x.Net_weight ,
                    
 
                    Prev_net_weight = x.Prev_net_weight ,
                    
 
                    Prev_reg_ser = x.Prev_reg_ser ,
                    
 
                    Prev_reg_nbr = x.Prev_reg_nbr ,
                    
 
                    Prev_reg_cuo = x.Prev_reg_cuo ,
                    
 
                    Suplementary_Quantity = x.Suplementary_Quantity ,
                    
 
                    Preveious_suplementary_quantity = x.Preveious_suplementary_quantity ,
                    
 
                    Current_value = x.Current_value ,
                    
 
                    Previous_value = x.Previous_value ,
                    
 
                    Current_item_number = x.Current_item_number ,
                    
 
                    QtyAllocated = x.QtyAllocated ,
                    
 
                    RndCurrent_Value = x.RndCurrent_Value ,
                    
 
                    ReferenceNumber = x.ReferenceNumber ,
                    
 
                    CNumber = x.CNumber ,
                    
 
                    RegistrationDate = x.RegistrationDate ,
                    
 
                    AssessmentDate = x.AssessmentDate ,
                    
 
                    Prev_decl_HS_spec = x.Prev_decl_HS_spec ,
                    
 
                    SalesFactor = x.SalesFactor ,
                    
 
                    DocumentType = x.DocumentType ,
                    
 
                    DutyFreePaid = x.DutyFreePaid ,
                    
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    pLineNumber = x.pLineNumber ,
                    
 
                    TotalDutyLiablity = x.TotalDutyLiablity ,
                    
 
                    DutyLiablity = x.DutyLiablity ,
                    
 
                    Prev_reg_year = x.Prev_reg_year ,
                    
 
                    CustomsProcedure = x.CustomsProcedure ,
                    
 
                    EntryDataType = x.EntryDataType 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class PreviousItemsExExcelLine
        {
		 
                    public string Packages_number { get; set; } 
                    
 
                    public string Previous_Packages_number { get; set; } 
                    
 
                    public string Hs_code { get; set; } 
                    
 
                    public string Commodity_code { get; set; } 
                    
 
                    public Nullable<int> Previous_item_number { get; set; } 
                    
 
                    public string Goods_origin { get; set; } 
                    
 
                    public decimal Net_weight { get; set; } 
                    
 
                    public decimal Prev_net_weight { get; set; } 
                    
 
                    public string Prev_reg_ser { get; set; } 
                    
 
                    public string Prev_reg_nbr { get; set; } 
                    
 
                    public string Prev_reg_cuo { get; set; } 
                    
 
                    public decimal Suplementary_Quantity { get; set; } 
                    
 
                    public double Preveious_suplementary_quantity { get; set; } 
                    
 
                    public double Current_value { get; set; } 
                    
 
                    public double Previous_value { get; set; } 
                    
 
                    public Nullable<int> Current_item_number { get; set; } 
                    
 
                    public double QtyAllocated { get; set; } 
                    
 
                    public double RndCurrent_Value { get; set; } 
                    
 
                    public string ReferenceNumber { get; set; } 
                    
 
                    public string CNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> RegistrationDate { get; set; } 
                    
 
                    public Nullable<System.DateTime> AssessmentDate { get; set; } 
                    
 
                    public string Prev_decl_HS_spec { get; set; } 
                    
 
                    public double SalesFactor { get; set; } 
                    
 
                    public string DocumentType { get; set; } 
                    
 
                    public string DutyFreePaid { get; set; } 
                    
 
                    public string ItemNumber { get; set; } 
                    
 
                    public Nullable<int> pLineNumber { get; set; } 
                    
 
                    public double TotalDutyLiablity { get; set; } 
                    
 
                    public double DutyLiablity { get; set; } 
                    
 
                    public Nullable<int> Prev_reg_year { get; set; } 
                    
 
                    public string CustomsProcedure { get; set; } 
                    
 
                    public string EntryDataType { get; set; } 
                    
        }

		
    }
}
		

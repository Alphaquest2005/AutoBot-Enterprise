// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using PreviousDocumentQS.Client.Entities;
using PreviousDocumentQS.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.PreviousDocumentQS.ViewModels
{
    
	public partial class PreviousDocumentViewModel_AutoGen : ViewModelBase<PreviousDocumentViewModel_AutoGen>
	{

       private static readonly PreviousDocumentViewModel_AutoGen instance;
       static PreviousDocumentViewModel_AutoGen()
        {
            instance = new PreviousDocumentViewModel_AutoGen();
        }

       public static PreviousDocumentViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public PreviousDocumentViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<PreviousDocument>(MessageToken.CurrentPreviousDocumentChanged, OnCurrentPreviousDocumentChanged);
            RegisterToReceiveMessages(MessageToken.PreviousDocumentsChanged, OnPreviousDocumentsChanged);
			RegisterToReceiveMessages(MessageToken.PreviousDocumentsFilterExpressionChanged, OnPreviousDocumentsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
                        RegisterToReceiveMessages<ApplicationSettings>(CoreEntities.MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
 

			PreviousDocuments = new VirtualList<PreviousDocument>(vloader);
			PreviousDocuments.LoadingStateChanged += PreviousDocuments_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(PreviousDocuments, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<PreviousDocument> _PreviousDocuments = null;
        public VirtualList<PreviousDocument> PreviousDocuments
        {
            get
            {
                return _PreviousDocuments;
            }
            set
            {
                _PreviousDocuments = value;
                NotifyPropertyChanged( x => x.PreviousDocuments);
            }
        }

		 private void OnPreviousDocumentsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => PreviousDocuments.Refresh()).ConfigureAwait(false);
            SelectedPreviousDocuments.Clear();
            NotifyPropertyChanged(x => SelectedPreviousDocuments);
            BeginSendMessage(MessageToken.SelectedPreviousDocumentsChanged, new NotificationEventArgs(MessageToken.SelectedPreviousDocumentsChanged));
        }

		void PreviousDocuments_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (PreviousDocuments.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => PreviousDocuments);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("PreviousDocuments | Error occured..." + PreviousDocuments.LastLoadingError.Message);
                    NotifyPropertyChanged(x => PreviousDocuments);
                    break;
            }
           
        }

		
		public readonly PreviousDocumentVirturalListLoader vloader = new PreviousDocumentVirturalListLoader();

		private ObservableCollection<PreviousDocument> _selectedPreviousDocuments = new ObservableCollection<PreviousDocument>();
        public ObservableCollection<PreviousDocument> SelectedPreviousDocuments
        {
            get
            {
                return _selectedPreviousDocuments;
            }
            set
            {
                _selectedPreviousDocuments = value;
				BeginSendMessage(MessageToken.SelectedPreviousDocumentsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedPreviousDocumentsChanged));
				 NotifyPropertyChanged(x => SelectedPreviousDocuments);
            }
        }

        internal virtual void OnCurrentPreviousDocumentChanged(object sender, NotificationEventArgs<PreviousDocument> e)
        {
            if(BaseViewModel.Instance.CurrentPreviousDocument != null) BaseViewModel.Instance.CurrentPreviousDocument.PropertyChanged += CurrentPreviousDocument__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentPreviousDocument);
        }   

            void CurrentPreviousDocument__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentPreviousDocument.ApplicationSettings) == false) ApplicationSettings.Add(CurrentPreviousDocument.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnPreviousDocumentsChanged(object sender, NotificationEventArgs e)
        {
            _PreviousDocuments.Refresh();
			NotifyPropertyChanged(x => this.PreviousDocuments);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    PreviousDocuments.Refresh();
					NotifyPropertyChanged(x => this.PreviousDocuments);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_PreviousDocuments.Refresh();
			NotifyPropertyChanged(x => this.PreviousDocuments);
		}

		public async Task SelectAll()
        {
            IEnumerable<PreviousDocument> lst = null;
            using (var ctx = new PreviousDocumentRepository())
            {
                lst = await ctx.GetPreviousDocumentsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedPreviousDocuments = new ObservableCollection<PreviousDocument>(lst);
        }

 

		private string _idFilter;
        public string idFilter
        {
            get
            {
                return _idFilter;
            }
            set
            {
                _idFilter = value;
				NotifyPropertyChanged(x => idFilter);
                FilterData();
                
            }
        }	

 

		private string _cNumberFilter;
        public string CNumberFilter
        {
            get
            {
                return _cNumberFilter;
            }
            set
            {
                _cNumberFilter = value;
				NotifyPropertyChanged(x => CNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartRegistrationDateFilter
        {
            get
            {
                return _startRegistrationDateFilter;
            }
            set
            {
                _startRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndRegistrationDateFilter
        {
            get
            {
                return _endRegistrationDateFilter;
            }
            set
            {
                _endRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _registrationDateFilter;
        public DateTime? RegistrationDateFilter
        {
            get
            {
                return _registrationDateFilter;
            }
            set
            {
                _registrationDateFilter = value;
				NotifyPropertyChanged(x => RegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isManuallyAssessedFilter;
        public Boolean? IsManuallyAssessedFilter
        {
            get
            {
                return _isManuallyAssessedFilter;
            }
            set
            {
                _isManuallyAssessedFilter = value;
				NotifyPropertyChanged(x => IsManuallyAssessedFilter);
                FilterData();
                
            }
        }	

 

		private string _referenceNumberFilter;
        public string ReferenceNumberFilter
        {
            get
            {
                return _referenceNumberFilter;
            }
            set
            {
                _referenceNumberFilter = value;
				NotifyPropertyChanged(x => ReferenceNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startEffectiveRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartEffectiveRegistrationDateFilter
        {
            get
            {
                return _startEffectiveRegistrationDateFilter;
            }
            set
            {
                _startEffectiveRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartEffectiveRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endEffectiveRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndEffectiveRegistrationDateFilter
        {
            get
            {
                return _endEffectiveRegistrationDateFilter;
            }
            set
            {
                _endEffectiveRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndEffectiveRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _effectiveRegistrationDateFilter;
        public DateTime? EffectiveRegistrationDateFilter
        {
            get
            {
                return _effectiveRegistrationDateFilter;
            }
            set
            {
                _effectiveRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EffectiveRegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalValueFilter;
        public Double? TotalValueFilter
        {
            get
            {
                return _totalValueFilter;
            }
            set
            {
                _totalValueFilter = value;
				NotifyPropertyChanged(x => TotalValueFilter);
                FilterData();
                
            }
        }	

 

		private Double? _allocatedValueFilter;
        public Double? AllocatedValueFilter
        {
            get
            {
                return _allocatedValueFilter;
            }
            set
            {
                _allocatedValueFilter = value;
				NotifyPropertyChanged(x => AllocatedValueFilter);
                FilterData();
                
            }
        }	

 

		private Double? _piValueFilter;
        public Double? PiValueFilter
        {
            get
            {
                return _piValueFilter;
            }
            set
            {
                _piValueFilter = value;
				NotifyPropertyChanged(x => PiValueFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _doNotAllocateFilter;
        public Boolean? DoNotAllocateFilter
        {
            get
            {
                return _doNotAllocateFilter;
            }
            set
            {
                _doNotAllocateFilter = value;
				NotifyPropertyChanged(x => DoNotAllocateFilter);
                FilterData();
                
            }
        }	

 

		private string _descriptionFilter;
        public string DescriptionFilter
        {
            get
            {
                return _descriptionFilter;
            }
            set
            {
                _descriptionFilter = value;
				NotifyPropertyChanged(x => DescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _bLNumberFilter;
        public string BLNumberFilter
        {
            get
            {
                return _bLNumberFilter;
            }
            set
            {
                _bLNumberFilter = value;
				NotifyPropertyChanged(x => BLNumberFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _linesFilter;
        public Int32? LinesFilter
        {
            get
            {
                return _linesFilter;
            }
            set
            {
                _linesFilter = value;
				NotifyPropertyChanged(x => LinesFilter);
                FilterData();
                
            }
        }	

 

		private string _documentTypeFilter;
        public string DocumentTypeFilter
        {
            get
            {
                return _documentTypeFilter;
            }
            set
            {
                _documentTypeFilter = value;
				NotifyPropertyChanged(x => DocumentTypeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			PreviousDocuments.Refresh();
			NotifyPropertyChanged(x => this.PreviousDocuments);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(idFilter) == false)
						res.Append(" && " + string.Format("id.Contains(\"{0}\")",  idFilter));						
 

									if(string.IsNullOrEmpty(CNumberFilter) == false)
						res.Append(" && " + string.Format("CNumber.Contains(\"{0}\")",  CNumberFilter));						
 

 

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("RegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_registrationDateFilter).Date != DateTime.MinValue)
						{
							if(RegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate == \"{0}\"",  Convert.ToDateTime(RegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(IsManuallyAssessedFilter.HasValue)
						res.Append(" && " + string.Format("IsManuallyAssessed == {0}",  IsManuallyAssessedFilter));						
 

									if(string.IsNullOrEmpty(ReferenceNumberFilter) == false)
						res.Append(" && " + string.Format("ReferenceNumber.Contains(\"{0}\")",  ReferenceNumberFilter));						
 

 

				if (Convert.ToDateTime(StartEffectiveRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEffectiveRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartEffectiveRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartEffectiveRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndEffectiveRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("EffectiveRegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartEffectiveRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndEffectiveRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndEffectiveRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("EffectiveRegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndEffectiveRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartEffectiveRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEffectiveRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_effectiveRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EffectiveRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("EffectiveRegistrationDate == \"{0}\"",  Convert.ToDateTime(EffectiveRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(TotalValueFilter.HasValue)
						res.Append(" && " + string.Format("TotalValue == {0}",  TotalValueFilter.ToString()));				 

					if(AllocatedValueFilter.HasValue)
						res.Append(" && " + string.Format("AllocatedValue == {0}",  AllocatedValueFilter.ToString()));				 

					if(PiValueFilter.HasValue)
						res.Append(" && " + string.Format("PiValue == {0}",  PiValueFilter.ToString()));				 

									if(DoNotAllocateFilter.HasValue)
						res.Append(" && " + string.Format("DoNotAllocate == {0}",  DoNotAllocateFilter));						
 

									if(string.IsNullOrEmpty(DescriptionFilter) == false)
						res.Append(" && " + string.Format("Description.Contains(\"{0}\")",  DescriptionFilter));						
 

									if(string.IsNullOrEmpty(BLNumberFilter) == false)
						res.Append(" && " + string.Format("BLNumber.Contains(\"{0}\")",  BLNumberFilter));						
 

					if(LinesFilter.HasValue)
						res.Append(" && " + string.Format("Lines == {0}",  LinesFilter.ToString()));				 

									if(string.IsNullOrEmpty(DocumentTypeFilter) == false)
						res.Append(" && " + string.Format("DocumentType.Contains(\"{0}\")",  DocumentTypeFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<PreviousDocument> lst = null;
            using (var ctx = new PreviousDocumentRepository())
            {
                lst = await ctx.GetPreviousDocumentsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<PreviousDocumentExcelLine, List<PreviousDocumentExcelLine>>
            {
                dataToPrint = lst.Select(x => new PreviousDocumentExcelLine
                {
 
                    id = x.id ,
                    
 
                    CNumber = x.CNumber ,
                    
 
                    RegistrationDate = x.RegistrationDate ,
                    
 
                    IsManuallyAssessed = x.IsManuallyAssessed ,
                    
 
                    ReferenceNumber = x.ReferenceNumber ,
                    
 
                    EffectiveRegistrationDate = x.EffectiveRegistrationDate ,
                    
 
                    TotalValue = x.TotalValue ,
                    
 
                    AllocatedValue = x.AllocatedValue ,
                    
 
                    PiValue = x.PiValue ,
                    
 
                    DoNotAllocate = x.DoNotAllocate ,
                    
 
                    Description = x.Description ,
                    
 
                    BLNumber = x.BLNumber ,
                    
 
                    Lines = x.Lines ,
                    
 
                    DocumentType = x.DocumentType 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class PreviousDocumentExcelLine
        {
		 
                    public string id { get; set; } 
                    
 
                    public string CNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> RegistrationDate { get; set; } 
                    
 
                    public Nullable<bool> IsManuallyAssessed { get; set; } 
                    
 
                    public string ReferenceNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> EffectiveRegistrationDate { get; set; } 
                    
 
                    public Nullable<double> TotalValue { get; set; } 
                    
 
                    public Nullable<double> AllocatedValue { get; set; } 
                    
 
                    public Nullable<double> PiValue { get; set; } 
                    
 
                    public Nullable<bool> DoNotAllocate { get; set; } 
                    
 
                    public string Description { get; set; } 
                    
 
                    public string BLNumber { get; set; } 
                    
 
                    public Nullable<int> Lines { get; set; } 
                    
 
                    public string DocumentType { get; set; } 
                    
        }

		
    }
}
		

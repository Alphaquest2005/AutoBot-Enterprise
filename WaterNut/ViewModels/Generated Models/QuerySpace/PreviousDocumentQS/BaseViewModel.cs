// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using PreviousDocumentQS.Client.Entities;
using PreviousDocumentQS.Client.Repositories;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;



namespace WaterNut.QuerySpace.PreviousDocumentQS.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // CoreEntities.ViewModels.BaseViewModel
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class PreviousDocumentQSOnCreated: BaseViewModel
        {
           // Load Repository
                public PreviousDocumentQSOnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentPreviousDocumentIDChanged, OnCurrentPreviousDocumentIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentPreviousDocumentItemIDChanged, OnCurrentPreviousDocumentItemIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentPreviousItemsExIDChanged, OnCurrentPreviousItemsExIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<PreviousDocument>(MessageToken.CurrentPreviousDocumentChanged, OnCurrentPreviousDocumentChanged);
                        RegisterToReceiveMessages<PreviousDocumentItem>(MessageToken.CurrentPreviousDocumentItemChanged, OnCurrentPreviousDocumentItemChanged);
                        RegisterToReceiveMessages<PreviousItemsEx>(MessageToken.CurrentPreviousItemsExChanged, OnCurrentPreviousItemsExChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentPreviousDocumentIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (PreviousDocumentRepository ctx = new PreviousDocumentRepository())
                            {
                                CurrentPreviousDocument = await ctx.GetPreviousDocument(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentPreviousDocument);
                        }

                        private  string _currentPreviousDocumentID = "";
                        public string CurrentPreviousDocumentID
                        {
                            get
                            {
                                return _currentPreviousDocumentID;
                            }
                            set
                            {
                                if (_currentPreviousDocumentID != value)
                                {
                                    _currentPreviousDocumentID = value;
                                    if (!string.IsNullOrEmpty(_currentPreviousDocumentID)) BeginSendMessage(MessageToken.CurrentPreviousDocumentIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentPreviousDocumentIDChanged, _currentPreviousDocumentID));
                                    NotifyPropertyChanged(x => this.CurrentPreviousDocumentID);  
                                }
                            }
                        }
                        internal async void OnCurrentPreviousDocumentItemIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (PreviousDocumentItemRepository ctx = new PreviousDocumentItemRepository())
                            {
                                CurrentPreviousDocumentItem = await ctx.GetPreviousDocumentItem(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentPreviousDocumentItem);
                        }

                        private  string _currentPreviousDocumentItemID = "";
                        public string CurrentPreviousDocumentItemID
                        {
                            get
                            {
                                return _currentPreviousDocumentItemID;
                            }
                            set
                            {
                                if (_currentPreviousDocumentItemID != value)
                                {
                                    _currentPreviousDocumentItemID = value;
                                    if (!string.IsNullOrEmpty(_currentPreviousDocumentItemID)) BeginSendMessage(MessageToken.CurrentPreviousDocumentItemIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentPreviousDocumentItemIDChanged, _currentPreviousDocumentItemID));
                                    NotifyPropertyChanged(x => this.CurrentPreviousDocumentItemID);  
                                }
                            }
                        }
                        internal async void OnCurrentPreviousItemsExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (PreviousItemsExRepository ctx = new PreviousItemsExRepository())
                            {
                                CurrentPreviousItemsEx = await ctx.GetPreviousItemsEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentPreviousItemsEx);
                        }

                        private  string _currentPreviousItemsExID = "";
                        public string CurrentPreviousItemsExID
                        {
                            get
                            {
                                return _currentPreviousItemsExID;
                            }
                            set
                            {
                                if (_currentPreviousItemsExID != value)
                                {
                                    _currentPreviousItemsExID = value;
                                    if (!string.IsNullOrEmpty(_currentPreviousItemsExID)) BeginSendMessage(MessageToken.CurrentPreviousItemsExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentPreviousItemsExIDChanged, _currentPreviousItemsExID));
                                    NotifyPropertyChanged(x => this.CurrentPreviousItemsExID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentPreviousDocumentChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<PreviousDocument> e)
        {
            //CurrentPreviousDocument = e.Data;
            NotifyPropertyChanged(m => this.CurrentPreviousDocument);
        }

        private  PreviousDocument _currentPreviousDocument;
        public PreviousDocument CurrentPreviousDocument
        {
            get
            {
                return _currentPreviousDocument;
            }
            set
            {
                if (_currentPreviousDocument != value)
                {
                    _currentPreviousDocument = value;
                    BeginSendMessage(MessageToken.CurrentPreviousDocumentChanged,
                                                     new NotificationEventArgs<PreviousDocument>(MessageToken.CurrentPreviousDocumentChanged, _currentPreviousDocument)); 
                    NotifyPropertyChanged(x => this.CurrentPreviousDocument);    
                    // all current navigation properties = null
                 CurrentPreviousDocumentItem = null;
   
                }
            }
        }

		VirtualListItem<PreviousDocument> _vcurrentPreviousDocument;
        public VirtualListItem<PreviousDocument> VCurrentPreviousDocument
        {
            get
            {
                return _vcurrentPreviousDocument;
            }
            set
            {
                if (_vcurrentPreviousDocument != value)
                {
                    _vcurrentPreviousDocument = value;
					if(_vcurrentPreviousDocument != null) CurrentPreviousDocument = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentPreviousDocument);                    
                }
            }
        }



                     
       

        internal void OnCurrentPreviousDocumentItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<PreviousDocumentItem> e)
        {
            //CurrentPreviousDocumentItem = e.Data;
            NotifyPropertyChanged(m => this.CurrentPreviousDocumentItem);
        }

        private  PreviousDocumentItem _currentPreviousDocumentItem;
        public PreviousDocumentItem CurrentPreviousDocumentItem
        {
            get
            {
                return _currentPreviousDocumentItem;
            }
            set
            {
                if (_currentPreviousDocumentItem != value)
                {
                    _currentPreviousDocumentItem = value;
                    BeginSendMessage(MessageToken.CurrentPreviousDocumentItemChanged,
                                                     new NotificationEventArgs<PreviousDocumentItem>(MessageToken.CurrentPreviousDocumentItemChanged, _currentPreviousDocumentItem)); 
                    NotifyPropertyChanged(x => this.CurrentPreviousDocumentItem);    
                    // all current navigation properties = null
                 CurrentPreviousItemsEx = null;
   
                }
            }
        }

		VirtualListItem<PreviousDocumentItem> _vcurrentPreviousDocumentItem;
        public VirtualListItem<PreviousDocumentItem> VCurrentPreviousDocumentItem
        {
            get
            {
                return _vcurrentPreviousDocumentItem;
            }
            set
            {
                if (_vcurrentPreviousDocumentItem != value)
                {
                    _vcurrentPreviousDocumentItem = value;
					if(_vcurrentPreviousDocumentItem != null) CurrentPreviousDocumentItem = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentPreviousDocumentItem);                    
                }
            }
        }



                     
       

        internal void OnCurrentPreviousItemsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<PreviousItemsEx> e)
        {
            //CurrentPreviousItemsEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentPreviousItemsEx);
        }

        private  PreviousItemsEx _currentPreviousItemsEx;
        public PreviousItemsEx CurrentPreviousItemsEx
        {
            get
            {
                return _currentPreviousItemsEx;
            }
            set
            {
                if (_currentPreviousItemsEx != value)
                {
                    _currentPreviousItemsEx = value;
                    BeginSendMessage(MessageToken.CurrentPreviousItemsExChanged,
                                                     new NotificationEventArgs<PreviousItemsEx>(MessageToken.CurrentPreviousItemsExChanged, _currentPreviousItemsEx)); 
                    NotifyPropertyChanged(x => this.CurrentPreviousItemsEx);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<PreviousItemsEx> _vcurrentPreviousItemsEx;
        public VirtualListItem<PreviousItemsEx> VCurrentPreviousItemsEx
        {
            get
            {
                return _vcurrentPreviousItemsEx;
            }
            set
            {
                if (_vcurrentPreviousItemsEx != value)
                {
                    _vcurrentPreviousItemsEx = value;
					if(_vcurrentPreviousItemsEx != null) CurrentPreviousItemsEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentPreviousItemsEx);                    
                }
            }
        }






        static PreviousDocumentQSOnCreated newPreviousDocumentQSOnCreated = new PreviousDocumentQSOnCreated();
    }		
}

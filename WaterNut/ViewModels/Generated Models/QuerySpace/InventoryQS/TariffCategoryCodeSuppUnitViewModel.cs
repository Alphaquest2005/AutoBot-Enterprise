// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;
using InventoryQS.Client.Entities;
using InventoryQS.Client.Repositories;
using SimpleMvvmToolkit;


namespace WaterNut.QuerySpace.InventoryQS.ViewModels
{
    
	public partial class TariffCategoryCodeSuppUnitViewModel_AutoGen : ViewModelBase<TariffCategoryCodeSuppUnitViewModel_AutoGen>
	{

       private static readonly TariffCategoryCodeSuppUnitViewModel_AutoGen instance;
       static TariffCategoryCodeSuppUnitViewModel_AutoGen()
        {
            instance = new TariffCategoryCodeSuppUnitViewModel_AutoGen();
        }

       public static TariffCategoryCodeSuppUnitViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TariffCategoryCodeSuppUnitViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TariffCategoryCodeSuppUnit>(MessageToken.CurrentTariffCategoryCodeSuppUnitChanged, OnCurrentTariffCategoryCodeSuppUnitChanged);
            RegisterToReceiveMessages(MessageToken.TariffCategoryCodeSuppUnitChanged, OnTariffCategoryCodeSuppUnitChanged);
			RegisterToReceiveMessages(MessageToken.TariffCategoryCodeSuppUnitFilterExpressionChanged, OnTariffCategoryCodeSuppUnitFilterExpressionChanged);

 
			RegisterToReceiveMessages<TariffCategory>(MessageToken.CurrentTariffCategoryChanged, OnCurrentTariffCategoryChanged);
 
			RegisterToReceiveMessages<TariffSupUnitLkps>(MessageToken.CurrentTariffSupUnitLkpsChanged, OnCurrentTariffSupUnitLkpsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			TariffCategoryCodeSuppUnit = new VirtualList<TariffCategoryCodeSuppUnit>(vloader);
			TariffCategoryCodeSuppUnit.LoadingStateChanged += TariffCategoryCodeSuppUnit_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TariffCategoryCodeSuppUnit, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TariffCategoryCodeSuppUnit> _TariffCategoryCodeSuppUnit = null;
        public VirtualList<TariffCategoryCodeSuppUnit> TariffCategoryCodeSuppUnit
        {
            get
            {
                return _TariffCategoryCodeSuppUnit;
            }
            set
            {
                _TariffCategoryCodeSuppUnit = value;
                NotifyPropertyChanged( x => x.TariffCategoryCodeSuppUnit);
            }
        }

		 private void OnTariffCategoryCodeSuppUnitFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => TariffCategoryCodeSuppUnit.Refresh()).ConfigureAwait(false);
            SelectedTariffCategoryCodeSuppUnit.Clear();
            NotifyPropertyChanged(x => SelectedTariffCategoryCodeSuppUnit);
            BeginSendMessage(MessageToken.SelectedTariffCategoryCodeSuppUnitChanged, new NotificationEventArgs(MessageToken.SelectedTariffCategoryCodeSuppUnitChanged));
        }

		void TariffCategoryCodeSuppUnit_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TariffCategoryCodeSuppUnit.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TariffCategoryCodeSuppUnit);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TariffCategoryCodeSuppUnit | Error occured..." + TariffCategoryCodeSuppUnit.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TariffCategoryCodeSuppUnit);
                    break;
            }
           
        }

		
		public readonly TariffCategoryCodeSuppUnitVirturalListLoader vloader = new TariffCategoryCodeSuppUnitVirturalListLoader();

		private ObservableCollection<TariffCategoryCodeSuppUnit> _selectedTariffCategoryCodeSuppUnit = new ObservableCollection<TariffCategoryCodeSuppUnit>();
        public ObservableCollection<TariffCategoryCodeSuppUnit> SelectedTariffCategoryCodeSuppUnit
        {
            get
            {
                return _selectedTariffCategoryCodeSuppUnit;
            }
            set
            {
                _selectedTariffCategoryCodeSuppUnit = value;
				BeginSendMessage(MessageToken.SelectedTariffCategoryCodeSuppUnitChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTariffCategoryCodeSuppUnitChanged));
				 NotifyPropertyChanged(x => SelectedTariffCategoryCodeSuppUnit);
            }
        }

        internal virtual void OnCurrentTariffCategoryCodeSuppUnitChanged(object sender, NotificationEventArgs<TariffCategoryCodeSuppUnit> e)
        {
            if(BaseViewModel.Instance.CurrentTariffCategoryCodeSuppUnit != null) BaseViewModel.Instance.CurrentTariffCategoryCodeSuppUnit.PropertyChanged += CurrentTariffCategoryCodeSuppUnit__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTariffCategoryCodeSuppUnit);
        }   

            void CurrentTariffCategoryCodeSuppUnit__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddTariffCategory")
                   // {
                   //    if(TariffCategory.Contains(CurrentTariffCategoryCodeSuppUnit.TariffCategory) == false) TariffCategory.Add(CurrentTariffCategoryCodeSuppUnit.TariffCategory);
                    //}
                    //if (e.PropertyName == "AddTariffSupUnitLkps")
                   // {
                   //    if(TariffSupUnitLkps.Contains(CurrentTariffCategoryCodeSuppUnit.TariffSupUnitLkps) == false) TariffSupUnitLkps.Add(CurrentTariffCategoryCodeSuppUnit.TariffSupUnitLkps);
                    //}
                 } 
        internal virtual void OnTariffCategoryCodeSuppUnitChanged(object sender, NotificationEventArgs e)
        {
            _TariffCategoryCodeSuppUnit.Refresh();
			NotifyPropertyChanged(x => this.TariffCategoryCodeSuppUnit);
        }   


 	
		 internal virtual void OnCurrentTariffCategoryChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TariffCategory> e)
			{
			if(ViewCurrentTariffCategory == false) return;
			if (e.Data == null || e.Data.TariffCategoryCode == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				
				vloader.FilterExpression = string.Format("TariffCategoryCode == \"{0}\"", e.Data.TariffCategoryCode.ToString());
                }

				TariffCategoryCodeSuppUnit.Refresh();
				NotifyPropertyChanged(x => this.TariffCategoryCodeSuppUnit);
                // SendMessage(MessageToken.TariffCategoryCodeSuppUnitChanged, new NotificationEventArgs(MessageToken.TariffCategoryCodeSuppUnitChanged));
                                          
                BaseViewModel.Instance.CurrentTariffCategoryCodeSuppUnit = null;
			}
	
		 internal virtual void OnCurrentTariffSupUnitLkpsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TariffSupUnitLkps> e)
			{
			if(ViewCurrentTariffSupUnitLkps == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("TariffSupUnitId == {0}", e.Data.Id.ToString());
                 }

				TariffCategoryCodeSuppUnit.Refresh();
				NotifyPropertyChanged(x => this.TariffCategoryCodeSuppUnit);
                // SendMessage(MessageToken.TariffCategoryCodeSuppUnitChanged, new NotificationEventArgs(MessageToken.TariffCategoryCodeSuppUnitChanged));
                                          
                BaseViewModel.Instance.CurrentTariffCategoryCodeSuppUnit = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentTariffCategory = false;
         public bool ViewCurrentTariffCategory
         {
             get
             {
                 return _viewCurrentTariffCategory;
             }
             set
             {
                 _viewCurrentTariffCategory = value;
                 NotifyPropertyChanged(x => x.ViewCurrentTariffCategory);
                FilterData();
             }
         }
 	
		 bool _viewCurrentTariffSupUnitLkps = false;
         public bool ViewCurrentTariffSupUnitLkps
         {
             get
             {
                 return _viewCurrentTariffSupUnitLkps;
             }
             set
             {
                 _viewCurrentTariffSupUnitLkps = value;
                 NotifyPropertyChanged(x => x.ViewCurrentTariffSupUnitLkps);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_TariffCategoryCodeSuppUnit.Refresh();
			NotifyPropertyChanged(x => this.TariffCategoryCodeSuppUnit);
		}

		public async Task SelectAll()
        {
            IEnumerable<TariffCategoryCodeSuppUnit> lst = null;
            using (var ctx = new TariffCategoryCodeSuppUnitRepository())
            {
                lst = await ctx.GetTariffCategoryCodeSuppUnitByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTariffCategoryCodeSuppUnit = new ObservableCollection<TariffCategoryCodeSuppUnit>(lst);
        }

 

		private string _tariffCategoryCodeFilter;
        public string TariffCategoryCodeFilter
        {
            get
            {
                return _tariffCategoryCodeFilter;
            }
            set
            {
                _tariffCategoryCodeFilter = value;
				NotifyPropertyChanged(x => TariffCategoryCodeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TariffCategoryCodeSuppUnit.Refresh();
			NotifyPropertyChanged(x => this.TariffCategoryCodeSuppUnit);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(TariffCategoryCodeFilter) == false)
						res.Append(" && " + string.Format("TariffCategoryCode.Contains(\"{0}\")",  TariffCategoryCodeFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TariffCategoryCodeSuppUnit> lst = null;
            using (var ctx = new TariffCategoryCodeSuppUnitRepository())
            {
                lst = await ctx.GetTariffCategoryCodeSuppUnitByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TariffCategoryCodeSuppUnitExcelLine, List<TariffCategoryCodeSuppUnitExcelLine>>
            {
                dataToPrint = lst.Select(x => new TariffCategoryCodeSuppUnitExcelLine
                {
 
                    TariffCategoryCode = x.TariffCategoryCode 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class TariffCategoryCodeSuppUnitExcelLine
        {
		 
                    public string TariffCategoryCode { get; set; } 
                    
        }

		
    }
}
		

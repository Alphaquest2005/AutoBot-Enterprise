// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using InventoryQS.Client.Entities;
using InventoryQS.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.InventoryQS.ViewModels
{
    
	public partial class TariffCodesViewModel_AutoGen : ViewModelBase<TariffCodesViewModel_AutoGen>
	{

       private static readonly TariffCodesViewModel_AutoGen instance;
       static TariffCodesViewModel_AutoGen()
        {
            instance = new TariffCodesViewModel_AutoGen();
        }

       public static TariffCodesViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TariffCodesViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TariffCodes>(MessageToken.CurrentTariffCodesChanged, OnCurrentTariffCodesChanged);
            RegisterToReceiveMessages(MessageToken.TariffCodesChanged, OnTariffCodesChanged);
			RegisterToReceiveMessages(MessageToken.TariffCodesFilterExpressionChanged, OnTariffCodesFilterExpressionChanged);

 
			RegisterToReceiveMessages<TariffCategory>(MessageToken.CurrentTariffCategoryChanged, OnCurrentTariffCategoryChanged);

 			// Recieve messages for Core Current Entities Changed
 

			TariffCodes = new VirtualList<TariffCodes>(vloader);
			TariffCodes.LoadingStateChanged += TariffCodes_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TariffCodes, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TariffCodes> _TariffCodes = null;
        public VirtualList<TariffCodes> TariffCodes
        {
            get
            {
                return _TariffCodes;
            }
            set
            {
                _TariffCodes = value;
            }
        }

		 private void OnTariffCodesFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			TariffCodes.Refresh();
            SelectedTariffCodes.Clear();
            NotifyPropertyChanged(x => SelectedTariffCodes);
            BeginSendMessage(MessageToken.SelectedTariffCodesChanged, new NotificationEventArgs(MessageToken.SelectedTariffCodesChanged));
        }

		void TariffCodes_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TariffCodes.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TariffCodes);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TariffCodes | Error occured..." + TariffCodes.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TariffCodes);
                    break;
            }
           
        }

		
		public readonly TariffCodesVirturalListLoader vloader = new TariffCodesVirturalListLoader();

		private ObservableCollection<TariffCodes> _selectedTariffCodes = new ObservableCollection<TariffCodes>();
        public ObservableCollection<TariffCodes> SelectedTariffCodes
        {
            get
            {
                return _selectedTariffCodes;
            }
            set
            {
                _selectedTariffCodes = value;
				BeginSendMessage(MessageToken.SelectedTariffCodesChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTariffCodesChanged));
				 NotifyPropertyChanged(x => SelectedTariffCodes);
            }
        }

        internal virtual void OnCurrentTariffCodesChanged(object sender, NotificationEventArgs<TariffCodes> e)
        {
            if(BaseViewModel.Instance.CurrentTariffCodes != null) BaseViewModel.Instance.CurrentTariffCodes.PropertyChanged += CurrentTariffCodes__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTariffCodes);
        }   

            void CurrentTariffCodes__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddTariffCategory")
                   // {
                   //    if(TariffCategory.Contains(CurrentTariffCodes.TariffCategory) == false) TariffCategory.Add(CurrentTariffCodes.TariffCategory);
                    //}
                 } 
        internal virtual void OnTariffCodesChanged(object sender, NotificationEventArgs e)
        {
            _TariffCodes.Refresh();
			NotifyPropertyChanged(x => this.TariffCodes);
        }   


 	
		 internal virtual void OnCurrentTariffCategoryChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TariffCategory> e)
			{
			if(ViewCurrentTariffCategory == false) return;
			if (e.Data == null || e.Data.TariffCategoryCode == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				
				vloader.FilterExpression = string.Format("TariffCategoryCode == \"{0}\"", e.Data.TariffCategoryCode.ToString());
                }

				TariffCodes.Refresh();
				NotifyPropertyChanged(x => this.TariffCodes);
                // SendMessage(MessageToken.TariffCodesChanged, new NotificationEventArgs(MessageToken.TariffCodesChanged));
                                          
                BaseViewModel.Instance.CurrentTariffCodes = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentTariffCategory = false;
         public bool ViewCurrentTariffCategory
         {
             get
             {
                 return _viewCurrentTariffCategory;
             }
             set
             {
                 _viewCurrentTariffCategory = value;
                 NotifyPropertyChanged(x => x.ViewCurrentTariffCategory);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_TariffCodes.Refresh();
			NotifyPropertyChanged(x => this.TariffCodes);
		}

		public async Task SelectAll()
        {
            IEnumerable<TariffCodes> lst = null;
            using (var ctx = new TariffCodesRepository())
            {
                lst = await ctx.GetTariffCodesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTariffCodes = new ObservableCollection<TariffCodes>(lst);
        }

 

		private string _tariffCodeFilter;
        public string TariffCodeFilter
        {
            get
            {
                return _tariffCodeFilter;
            }
            set
            {
                _tariffCodeFilter = value;
				NotifyPropertyChanged(x => TariffCodeFilter);
                FilterData();
                
            }
        }	

 

		private string _descriptionFilter;
        public string DescriptionFilter
        {
            get
            {
                return _descriptionFilter;
            }
            set
            {
                _descriptionFilter = value;
				NotifyPropertyChanged(x => DescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _rateofDutyFilter;
        public string RateofDutyFilter
        {
            get
            {
                return _rateofDutyFilter;
            }
            set
            {
                _rateofDutyFilter = value;
				NotifyPropertyChanged(x => RateofDutyFilter);
                FilterData();
                
            }
        }	

 

		private string _environmentalLevyFilter;
        public string EnvironmentalLevyFilter
        {
            get
            {
                return _environmentalLevyFilter;
            }
            set
            {
                _environmentalLevyFilter = value;
				NotifyPropertyChanged(x => EnvironmentalLevyFilter);
                FilterData();
                
            }
        }	

 

		private string _customsServiceChargeFilter;
        public string CustomsServiceChargeFilter
        {
            get
            {
                return _customsServiceChargeFilter;
            }
            set
            {
                _customsServiceChargeFilter = value;
				NotifyPropertyChanged(x => CustomsServiceChargeFilter);
                FilterData();
                
            }
        }	

 

		private string _exciseTaxFilter;
        public string ExciseTaxFilter
        {
            get
            {
                return _exciseTaxFilter;
            }
            set
            {
                _exciseTaxFilter = value;
				NotifyPropertyChanged(x => ExciseTaxFilter);
                FilterData();
                
            }
        }	

 

		private string _vatRateFilter;
        public string VatRateFilter
        {
            get
            {
                return _vatRateFilter;
            }
            set
            {
                _vatRateFilter = value;
				NotifyPropertyChanged(x => VatRateFilter);
                FilterData();
                
            }
        }	

 

		private string _petrolTaxFilter;
        public string PetrolTaxFilter
        {
            get
            {
                return _petrolTaxFilter;
            }
            set
            {
                _petrolTaxFilter = value;
				NotifyPropertyChanged(x => PetrolTaxFilter);
                FilterData();
                
            }
        }	

 

		private string _unitsFilter;
        public string UnitsFilter
        {
            get
            {
                return _unitsFilter;
            }
            set
            {
                _unitsFilter = value;
				NotifyPropertyChanged(x => UnitsFilter);
                FilterData();
                
            }
        }	

 

		private string _siteRev3Filter;
        public string SiteRev3Filter
        {
            get
            {
                return _siteRev3Filter;
            }
            set
            {
                _siteRev3Filter = value;
				NotifyPropertyChanged(x => SiteRev3Filter);
                FilterData();
                
            }
        }	

 

		private string _tariffCategoryCodeFilter;
        public string TariffCategoryCodeFilter
        {
            get
            {
                return _tariffCategoryCodeFilter;
            }
            set
            {
                _tariffCategoryCodeFilter = value;
				NotifyPropertyChanged(x => TariffCategoryCodeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _licenseRequiredFilter;
        public Boolean? LicenseRequiredFilter
        {
            get
            {
                return _licenseRequiredFilter;
            }
            set
            {
                _licenseRequiredFilter = value;
				NotifyPropertyChanged(x => LicenseRequiredFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _invalidFilter;
        public Boolean? InvalidFilter
        {
            get
            {
                return _invalidFilter;
            }
            set
            {
                _invalidFilter = value;
				NotifyPropertyChanged(x => InvalidFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TariffCodes.Refresh();
			NotifyPropertyChanged(x => this.TariffCodes);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(TariffCodeFilter) == false)
						res.Append(" && " + string.Format("TariffCode.Contains(\"{0}\")",  TariffCodeFilter));						
 

									if(string.IsNullOrEmpty(DescriptionFilter) == false)
						res.Append(" && " + string.Format("Description.Contains(\"{0}\")",  DescriptionFilter));						
 

									if(string.IsNullOrEmpty(RateofDutyFilter) == false)
						res.Append(" && " + string.Format("RateofDuty.Contains(\"{0}\")",  RateofDutyFilter));						
 

									if(string.IsNullOrEmpty(EnvironmentalLevyFilter) == false)
						res.Append(" && " + string.Format("EnvironmentalLevy.Contains(\"{0}\")",  EnvironmentalLevyFilter));						
 

									if(string.IsNullOrEmpty(CustomsServiceChargeFilter) == false)
						res.Append(" && " + string.Format("CustomsServiceCharge.Contains(\"{0}\")",  CustomsServiceChargeFilter));						
 

									if(string.IsNullOrEmpty(ExciseTaxFilter) == false)
						res.Append(" && " + string.Format("ExciseTax.Contains(\"{0}\")",  ExciseTaxFilter));						
 

									if(string.IsNullOrEmpty(VatRateFilter) == false)
						res.Append(" && " + string.Format("VatRate.Contains(\"{0}\")",  VatRateFilter));						
 

									if(string.IsNullOrEmpty(PetrolTaxFilter) == false)
						res.Append(" && " + string.Format("PetrolTax.Contains(\"{0}\")",  PetrolTaxFilter));						
 

									if(string.IsNullOrEmpty(UnitsFilter) == false)
						res.Append(" && " + string.Format("Units.Contains(\"{0}\")",  UnitsFilter));						
 

									if(string.IsNullOrEmpty(SiteRev3Filter) == false)
						res.Append(" && " + string.Format("SiteRev3.Contains(\"{0}\")",  SiteRev3Filter));						
 

									if(string.IsNullOrEmpty(TariffCategoryCodeFilter) == false)
						res.Append(" && " + string.Format("TariffCategoryCode.Contains(\"{0}\")",  TariffCategoryCodeFilter));						
 

									if(LicenseRequiredFilter.HasValue)
						res.Append(" && " + string.Format("LicenseRequired == {0}",  LicenseRequiredFilter));						
 

									if(InvalidFilter.HasValue)
						res.Append(" && " + string.Format("Invalid == {0}",  InvalidFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TariffCodes> lst = null;
            using (var ctx = new TariffCodesRepository())
            {
                lst = await ctx.GetTariffCodesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TariffCodesExcelLine, List<TariffCodesExcelLine>>
            {
                dataToPrint = lst.Select(x => new TariffCodesExcelLine
                {
 
                    TariffCode = x.TariffCode ,
                    
 
                    Description = x.Description ,
                    
 
                    RateofDuty = x.RateofDuty ,
                    
 
                    EnvironmentalLevy = x.EnvironmentalLevy ,
                    
 
                    CustomsServiceCharge = x.CustomsServiceCharge ,
                    
 
                    ExciseTax = x.ExciseTax ,
                    
 
                    VatRate = x.VatRate ,
                    
 
                    PetrolTax = x.PetrolTax ,
                    
 
                    Units = x.Units ,
                    
 
                    SiteRev3 = x.SiteRev3 ,
                    
 
                    TariffCategoryCode = x.TariffCategoryCode ,
                    
 
                    LicenseRequired = x.LicenseRequired ,
                    
 
                    Invalid = x.Invalid 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TariffCodesExcelLine
        {
		 
                    public string TariffCode { get; set; } 
                    
 
                    public string Description { get; set; } 
                    
 
                    public string RateofDuty { get; set; } 
                    
 
                    public string EnvironmentalLevy { get; set; } 
                    
 
                    public string CustomsServiceCharge { get; set; } 
                    
 
                    public string ExciseTax { get; set; } 
                    
 
                    public string VatRate { get; set; } 
                    
 
                    public string PetrolTax { get; set; } 
                    
 
                    public string Units { get; set; } 
                    
 
                    public string SiteRev3 { get; set; } 
                    
 
                    public string TariffCategoryCode { get; set; } 
                    
 
                    public Nullable<bool> LicenseRequired { get; set; } 
                    
 
                    public Nullable<bool> Invalid { get; set; } 
                    
        }

		
    }
}
		

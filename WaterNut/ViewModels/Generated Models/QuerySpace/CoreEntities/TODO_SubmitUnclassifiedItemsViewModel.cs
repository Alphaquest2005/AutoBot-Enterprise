// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_SubmitUnclassifiedItemsViewModel_AutoGen : ViewModelBase<TODO_SubmitUnclassifiedItemsViewModel_AutoGen>
	{

       private static readonly TODO_SubmitUnclassifiedItemsViewModel_AutoGen instance;
       static TODO_SubmitUnclassifiedItemsViewModel_AutoGen()
        {
            instance = new TODO_SubmitUnclassifiedItemsViewModel_AutoGen();
        }

       public static TODO_SubmitUnclassifiedItemsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_SubmitUnclassifiedItemsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_SubmitUnclassifiedItems>(MessageToken.CurrentTODO_SubmitUnclassifiedItemsChanged, OnCurrentTODO_SubmitUnclassifiedItemsChanged);
            RegisterToReceiveMessages(MessageToken.TODO_SubmitUnclassifiedItemsChanged, OnTODO_SubmitUnclassifiedItemsChanged);
			RegisterToReceiveMessages(MessageToken.TODO_SubmitUnclassifiedItemsFilterExpressionChanged, OnTODO_SubmitUnclassifiedItemsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_SubmitUnclassifiedItems = new VirtualList<TODO_SubmitUnclassifiedItems>(vloader);
			TODO_SubmitUnclassifiedItems.LoadingStateChanged += TODO_SubmitUnclassifiedItems_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_SubmitUnclassifiedItems, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_SubmitUnclassifiedItems> _TODO_SubmitUnclassifiedItems = null;
        public VirtualList<TODO_SubmitUnclassifiedItems> TODO_SubmitUnclassifiedItems
        {
            get
            {
                return _TODO_SubmitUnclassifiedItems;
            }
            set
            {
                _TODO_SubmitUnclassifiedItems = value;
                NotifyPropertyChanged( x => x.TODO_SubmitUnclassifiedItems);
            }
        }

		 private void OnTODO_SubmitUnclassifiedItemsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => TODO_SubmitUnclassifiedItems.Refresh()).ConfigureAwait(false);
            SelectedTODO_SubmitUnclassifiedItems.Clear();
            NotifyPropertyChanged(x => SelectedTODO_SubmitUnclassifiedItems);
            BeginSendMessage(MessageToken.SelectedTODO_SubmitUnclassifiedItemsChanged, new NotificationEventArgs(MessageToken.SelectedTODO_SubmitUnclassifiedItemsChanged));
        }

		void TODO_SubmitUnclassifiedItems_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_SubmitUnclassifiedItems.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_SubmitUnclassifiedItems);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_SubmitUnclassifiedItems | Error occured..." + TODO_SubmitUnclassifiedItems.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_SubmitUnclassifiedItems);
                    break;
            }
           
        }

		
		public readonly TODO_SubmitUnclassifiedItemsVirturalListLoader vloader = new TODO_SubmitUnclassifiedItemsVirturalListLoader();

		private ObservableCollection<TODO_SubmitUnclassifiedItems> _selectedTODO_SubmitUnclassifiedItems = new ObservableCollection<TODO_SubmitUnclassifiedItems>();
        public ObservableCollection<TODO_SubmitUnclassifiedItems> SelectedTODO_SubmitUnclassifiedItems
        {
            get
            {
                return _selectedTODO_SubmitUnclassifiedItems;
            }
            set
            {
                _selectedTODO_SubmitUnclassifiedItems = value;
				BeginSendMessage(MessageToken.SelectedTODO_SubmitUnclassifiedItemsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_SubmitUnclassifiedItemsChanged));
				 NotifyPropertyChanged(x => SelectedTODO_SubmitUnclassifiedItems);
            }
        }

        internal virtual void OnCurrentTODO_SubmitUnclassifiedItemsChanged(object sender, NotificationEventArgs<TODO_SubmitUnclassifiedItems> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_SubmitUnclassifiedItems != null) BaseViewModel.Instance.CurrentTODO_SubmitUnclassifiedItems.PropertyChanged += CurrentTODO_SubmitUnclassifiedItems__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_SubmitUnclassifiedItems);
        }   

            void CurrentTODO_SubmitUnclassifiedItems__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnTODO_SubmitUnclassifiedItemsChanged(object sender, NotificationEventArgs e)
        {
            _TODO_SubmitUnclassifiedItems.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitUnclassifiedItems);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_SubmitUnclassifiedItems.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitUnclassifiedItems);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_SubmitUnclassifiedItems> lst = null;
            using (var ctx = new TODO_SubmitUnclassifiedItemsRepository())
            {
                lst = await ctx.GetTODO_SubmitUnclassifiedItemsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_SubmitUnclassifiedItems = new ObservableCollection<TODO_SubmitUnclassifiedItems>(lst);
        }

 

		private string _invoiceNoFilter;
        public string InvoiceNoFilter
        {
            get
            {
                return _invoiceNoFilter;
            }
            set
            {
                _invoiceNoFilter = value;
				NotifyPropertyChanged(x => InvoiceNoFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _lineNumberFilter;
        public Int32? LineNumberFilter
        {
            get
            {
                return _lineNumberFilter;
            }
            set
            {
                _lineNumberFilter = value;
				NotifyPropertyChanged(x => LineNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _itemDescriptionFilter;
        public string ItemDescriptionFilter
        {
            get
            {
                return _itemDescriptionFilter;
            }
            set
            {
                _itemDescriptionFilter = value;
				NotifyPropertyChanged(x => ItemDescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _tariffCodeFilter;
        public string TariffCodeFilter
        {
            get
            {
                return _tariffCodeFilter;
            }
            set
            {
                _tariffCodeFilter = value;
				NotifyPropertyChanged(x => TariffCodeFilter);
                FilterData();
                
            }
        }	

 

		private string _emailIdFilter;
        public string EmailIdFilter
        {
            get
            {
                return _emailIdFilter;
            }
            set
            {
                _emailIdFilter = value;
				NotifyPropertyChanged(x => EmailIdFilter);
                FilterData();
                
            }
        }	

 

		private string _typeFilter;
        public string TypeFilter
        {
            get
            {
                return _typeFilter;
            }
            set
            {
                _typeFilter = value;
				NotifyPropertyChanged(x => TypeFilter);
                FilterData();
                
            }
        }	

 

		private string _declarant_Reference_NumberFilter;
        public string Declarant_Reference_NumberFilter
        {
            get
            {
                return _declarant_Reference_NumberFilter;
            }
            set
            {
                _declarant_Reference_NumberFilter = value;
				NotifyPropertyChanged(x => Declarant_Reference_NumberFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_SubmitUnclassifiedItems.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitUnclassifiedItems);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(InvoiceNoFilter) == false)
						res.Append(" && " + string.Format("InvoiceNo.Contains(\"{0}\")",  InvoiceNoFilter));						
 

					if(LineNumberFilter.HasValue)
						res.Append(" && " + string.Format("LineNumber == {0}",  LineNumberFilter.ToString()));				 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(ItemDescriptionFilter) == false)
						res.Append(" && " + string.Format("ItemDescription.Contains(\"{0}\")",  ItemDescriptionFilter));						
 

									if(string.IsNullOrEmpty(TariffCodeFilter) == false)
						res.Append(" && " + string.Format("TariffCode.Contains(\"{0}\")",  TariffCodeFilter));						
 

									if(string.IsNullOrEmpty(EmailIdFilter) == false)
						res.Append(" && " + string.Format("EmailId.Contains(\"{0}\")",  EmailIdFilter));						
 

									if(string.IsNullOrEmpty(TypeFilter) == false)
						res.Append(" && " + string.Format("Type.Contains(\"{0}\")",  TypeFilter));						
 

									if(string.IsNullOrEmpty(Declarant_Reference_NumberFilter) == false)
						res.Append(" && " + string.Format("Declarant_Reference_Number.Contains(\"{0}\")",  Declarant_Reference_NumberFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_SubmitUnclassifiedItems> lst = null;
            using (var ctx = new TODO_SubmitUnclassifiedItemsRepository())
            {
                lst = await ctx.GetTODO_SubmitUnclassifiedItemsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_SubmitUnclassifiedItemsExcelLine, List<TODO_SubmitUnclassifiedItemsExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_SubmitUnclassifiedItemsExcelLine
                {
 
                    InvoiceNo = x.InvoiceNo ,
                    
 
                    LineNumber = x.LineNumber ,
                    
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    ItemDescription = x.ItemDescription ,
                    
 
                    TariffCode = x.TariffCode ,
                    
 
                    EmailId = x.EmailId ,
                    
 
                    Type = x.Type ,
                    
 
                    Declarant_Reference_Number = x.Declarant_Reference_Number 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class TODO_SubmitUnclassifiedItemsExcelLine
        {
		 
                    public string InvoiceNo { get; set; } 
                    
 
                    public Nullable<int> LineNumber { get; set; } 
                    
 
                    public string ItemNumber { get; set; } 
                    
 
                    public string ItemDescription { get; set; } 
                    
 
                    public string TariffCode { get; set; } 
                    
 
                    public string EmailId { get; set; } 
                    
 
                    public string Type { get; set; } 
                    
 
                    public string Declarant_Reference_Number { get; set; } 
                    
        }

		
    }
}
		

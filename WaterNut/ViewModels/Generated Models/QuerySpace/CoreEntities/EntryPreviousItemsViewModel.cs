// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class EntryPreviousItemsViewModel_AutoGen : ViewModelBase<EntryPreviousItemsViewModel_AutoGen>
	{

       private static readonly EntryPreviousItemsViewModel_AutoGen instance;
       static EntryPreviousItemsViewModel_AutoGen()
        {
            instance = new EntryPreviousItemsViewModel_AutoGen();
        }

       public static EntryPreviousItemsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public EntryPreviousItemsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<EntryPreviousItems>(MessageToken.CurrentEntryPreviousItemsChanged, OnCurrentEntryPreviousItemsChanged);
            RegisterToReceiveMessages(MessageToken.EntryPreviousItemsChanged, OnEntryPreviousItemsChanged);
			RegisterToReceiveMessages(MessageToken.EntryPreviousItemsFilterExpressionChanged, OnEntryPreviousItemsFilterExpressionChanged);

 
			RegisterToReceiveMessages<AsycudaDocumentItem>(MessageToken.CurrentAsycudaDocumentItemChanged, OnCurrentAsycudaDocumentItemChanged);

 			// Recieve messages for Core Current Entities Changed
 

			EntryPreviousItems = new VirtualList<EntryPreviousItems>(vloader);
			EntryPreviousItems.LoadingStateChanged += EntryPreviousItems_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(EntryPreviousItems, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<EntryPreviousItems> _EntryPreviousItems = null;
        public VirtualList<EntryPreviousItems> EntryPreviousItems
        {
            get
            {
                return _EntryPreviousItems;
            }
            set
            {
                _EntryPreviousItems = value;
            }
        }

		 private void OnEntryPreviousItemsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			EntryPreviousItems.Refresh();
            SelectedEntryPreviousItems.Clear();
            NotifyPropertyChanged(x => SelectedEntryPreviousItems);
            BeginSendMessage(MessageToken.SelectedEntryPreviousItemsChanged, new NotificationEventArgs(MessageToken.SelectedEntryPreviousItemsChanged));
        }

		void EntryPreviousItems_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (EntryPreviousItems.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => EntryPreviousItems);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("EntryPreviousItems | Error occured..." + EntryPreviousItems.LastLoadingError.Message);
                    NotifyPropertyChanged(x => EntryPreviousItems);
                    break;
            }
           
        }

		
		public readonly EntryPreviousItemsVirturalListLoader vloader = new EntryPreviousItemsVirturalListLoader();

		private ObservableCollection<EntryPreviousItems> _selectedEntryPreviousItems = new ObservableCollection<EntryPreviousItems>();
        public ObservableCollection<EntryPreviousItems> SelectedEntryPreviousItems
        {
            get
            {
                return _selectedEntryPreviousItems;
            }
            set
            {
                _selectedEntryPreviousItems = value;
				BeginSendMessage(MessageToken.SelectedEntryPreviousItemsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedEntryPreviousItemsChanged));
				 NotifyPropertyChanged(x => SelectedEntryPreviousItems);
            }
        }

        internal void OnCurrentEntryPreviousItemsChanged(object sender, NotificationEventArgs<EntryPreviousItems> e)
        {
            if(BaseViewModel.Instance.CurrentEntryPreviousItems != null) BaseViewModel.Instance.CurrentEntryPreviousItems.PropertyChanged += CurrentEntryPreviousItems__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentEntryPreviousItems);
        }   

            void CurrentEntryPreviousItems__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddAsycudaDocumentItem")
                   // {
                   //    if(AsycudaDocumentItems.Contains(CurrentEntryPreviousItems.AsycudaDocumentItem) == false) AsycudaDocumentItems.Add(CurrentEntryPreviousItems.AsycudaDocumentItem);
                    //}
                 } 
        internal void OnEntryPreviousItemsChanged(object sender, NotificationEventArgs e)
        {
            _EntryPreviousItems.Refresh();
			NotifyPropertyChanged(x => this.EntryPreviousItems);
        }   


 	
		 internal void OnCurrentAsycudaDocumentItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItem> e)
			{
			if(ViewCurrentAsycudaDocumentItem == false) return;
			if (e.Data == null || e.Data.Item_Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("Item_Id == {0}", e.Data.Item_Id.ToString());
                 }

				EntryPreviousItems.Refresh();
				NotifyPropertyChanged(x => this.EntryPreviousItems);
                // SendMessage(MessageToken.EntryPreviousItemsChanged, new NotificationEventArgs(MessageToken.EntryPreviousItemsChanged));
                                          
                BaseViewModel.Instance.CurrentEntryPreviousItems = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentAsycudaDocumentItem = false;
         public bool ViewCurrentAsycudaDocumentItem
         {
             get
             {
                 return _viewCurrentAsycudaDocumentItem;
             }
             set
             {
                 _viewCurrentAsycudaDocumentItem = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocumentItem);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_EntryPreviousItems.Refresh();
			NotifyPropertyChanged(x => this.EntryPreviousItems);
		}

		public async Task SelectAll()
        {
            IEnumerable<EntryPreviousItems> lst = null;
            using (var ctx = new EntryPreviousItemsRepository())
            {
                lst = await ctx.GetEntryPreviousItemsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedEntryPreviousItems = new ObservableCollection<EntryPreviousItems>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			EntryPreviousItems.Refresh();
			NotifyPropertyChanged(x => this.EntryPreviousItems);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<EntryPreviousItems> lst = null;
            using (var ctx = new EntryPreviousItemsRepository())
            {
                lst = await ctx.GetEntryPreviousItemsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<EntryPreviousItemsExcelLine, List<EntryPreviousItemsExcelLine>>
            {
                dataToPrint = lst.Select(x => new EntryPreviousItemsExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class EntryPreviousItemsExcelLine
        {
		        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class EmailMappingRexExsViewModel_AutoGen : ViewModelBase<EmailMappingRexExsViewModel_AutoGen>
	{

       private static readonly EmailMappingRexExsViewModel_AutoGen instance;
       static EmailMappingRexExsViewModel_AutoGen()
        {
            instance = new EmailMappingRexExsViewModel_AutoGen();
        }

       public static EmailMappingRexExsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public EmailMappingRexExsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<EmailMappingRexExs>(MessageToken.CurrentEmailMappingRexExsChanged, OnCurrentEmailMappingRexExsChanged);
            RegisterToReceiveMessages(MessageToken.EmailMappingRexExsChanged, OnEmailMappingRexExsChanged);
			RegisterToReceiveMessages(MessageToken.EmailMappingRexExsFilterExpressionChanged, OnEmailMappingRexExsFilterExpressionChanged);

 
			RegisterToReceiveMessages<EmailMapping>(MessageToken.CurrentEmailMappingChanged, OnCurrentEmailMappingChanged);

 			// Recieve messages for Core Current Entities Changed
 

			EmailMappingRexExs = new VirtualList<EmailMappingRexExs>(vloader);
			EmailMappingRexExs.LoadingStateChanged += EmailMappingRexExs_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(EmailMappingRexExs, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<EmailMappingRexExs> _EmailMappingRexExs = null;
        public VirtualList<EmailMappingRexExs> EmailMappingRexExs
        {
            get
            {
                return _EmailMappingRexExs;
            }
            set
            {
                _EmailMappingRexExs = value;
                NotifyPropertyChanged( x => x.EmailMappingRexExs);
            }
        }

		 private void OnEmailMappingRexExsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => EmailMappingRexExs.Refresh()).ConfigureAwait(false);
            SelectedEmailMappingRexExs.Clear();
            NotifyPropertyChanged(x => SelectedEmailMappingRexExs);
            BeginSendMessage(MessageToken.SelectedEmailMappingRexExsChanged, new NotificationEventArgs(MessageToken.SelectedEmailMappingRexExsChanged));
        }

		void EmailMappingRexExs_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (EmailMappingRexExs.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => EmailMappingRexExs);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("EmailMappingRexExs | Error occured..." + EmailMappingRexExs.LastLoadingError.Message);
                    NotifyPropertyChanged(x => EmailMappingRexExs);
                    break;
            }
           
        }

		
		public readonly EmailMappingRexExsVirturalListLoader vloader = new EmailMappingRexExsVirturalListLoader();

		private ObservableCollection<EmailMappingRexExs> _selectedEmailMappingRexExs = new ObservableCollection<EmailMappingRexExs>();
        public ObservableCollection<EmailMappingRexExs> SelectedEmailMappingRexExs
        {
            get
            {
                return _selectedEmailMappingRexExs;
            }
            set
            {
                _selectedEmailMappingRexExs = value;
				BeginSendMessage(MessageToken.SelectedEmailMappingRexExsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedEmailMappingRexExsChanged));
				 NotifyPropertyChanged(x => SelectedEmailMappingRexExs);
            }
        }

        internal virtual void OnCurrentEmailMappingRexExsChanged(object sender, NotificationEventArgs<EmailMappingRexExs> e)
        {
            if(BaseViewModel.Instance.CurrentEmailMappingRexExs != null) BaseViewModel.Instance.CurrentEmailMappingRexExs.PropertyChanged += CurrentEmailMappingRexExs__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentEmailMappingRexExs);
        }   

            void CurrentEmailMappingRexExs__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddEmailMapping")
                   // {
                   //    if(EmailMapping.Contains(CurrentEmailMappingRexExs.EmailMapping) == false) EmailMapping.Add(CurrentEmailMappingRexExs.EmailMapping);
                    //}
                 } 
        internal virtual void OnEmailMappingRexExsChanged(object sender, NotificationEventArgs e)
        {
            _EmailMappingRexExs.Refresh();
			NotifyPropertyChanged(x => this.EmailMappingRexExs);
        }   


 	
		 internal virtual void OnCurrentEmailMappingChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EmailMapping> e)
			{
			if(ViewCurrentEmailMapping == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("EmailMappingId == {0}", e.Data.Id.ToString());
                 }

				EmailMappingRexExs.Refresh();
				NotifyPropertyChanged(x => this.EmailMappingRexExs);
                // SendMessage(MessageToken.EmailMappingRexExsChanged, new NotificationEventArgs(MessageToken.EmailMappingRexExsChanged));
                                          
                BaseViewModel.Instance.CurrentEmailMappingRexExs = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentEmailMapping = false;
         public bool ViewCurrentEmailMapping
         {
             get
             {
                 return _viewCurrentEmailMapping;
             }
             set
             {
                 _viewCurrentEmailMapping = value;
                 NotifyPropertyChanged(x => x.ViewCurrentEmailMapping);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_EmailMappingRexExs.Refresh();
			NotifyPropertyChanged(x => this.EmailMappingRexExs);
		}

		public async Task SelectAll()
        {
            IEnumerable<EmailMappingRexExs> lst = null;
            using (var ctx = new EmailMappingRexExsRepository())
            {
                lst = await ctx.GetEmailMappingRexExsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedEmailMappingRexExs = new ObservableCollection<EmailMappingRexExs>(lst);
        }

 

		private string _replacementRegexFilter;
        public string ReplacementRegexFilter
        {
            get
            {
                return _replacementRegexFilter;
            }
            set
            {
                _replacementRegexFilter = value;
				NotifyPropertyChanged(x => ReplacementRegexFilter);
                FilterData();
                
            }
        }	

 

		private string _replacementValueFilter;
        public string ReplacementValueFilter
        {
            get
            {
                return _replacementValueFilter;
            }
            set
            {
                _replacementValueFilter = value;
				NotifyPropertyChanged(x => ReplacementValueFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			EmailMappingRexExs.Refresh();
			NotifyPropertyChanged(x => this.EmailMappingRexExs);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(ReplacementRegexFilter) == false)
						res.Append(" && " + string.Format("ReplacementRegex.Contains(\"{0}\")",  ReplacementRegexFilter));						
 

									if(string.IsNullOrEmpty(ReplacementValueFilter) == false)
						res.Append(" && " + string.Format("ReplacementValue.Contains(\"{0}\")",  ReplacementValueFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<EmailMappingRexExs> lst = null;
            using (var ctx = new EmailMappingRexExsRepository())
            {
                lst = await ctx.GetEmailMappingRexExsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<EmailMappingRexExsExcelLine, List<EmailMappingRexExsExcelLine>>
            {
                dataToPrint = lst.Select(x => new EmailMappingRexExsExcelLine
                {
 
                    ReplacementRegex = x.ReplacementRegex ,
                    
 
                    ReplacementValue = x.ReplacementValue 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class EmailMappingRexExsExcelLine
        {
		 
                    public string ReplacementRegex { get; set; } 
                    
 
                    public string ReplacementValue { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_C71ToCreateViewModel_AutoGen : ViewModelBase<TODO_C71ToCreateViewModel_AutoGen>
	{

       private static readonly TODO_C71ToCreateViewModel_AutoGen instance;
       static TODO_C71ToCreateViewModel_AutoGen()
        {
            instance = new TODO_C71ToCreateViewModel_AutoGen();
        }

       public static TODO_C71ToCreateViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_C71ToCreateViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_C71ToCreate>(MessageToken.CurrentTODO_C71ToCreateChanged, OnCurrentTODO_C71ToCreateChanged);
            RegisterToReceiveMessages(MessageToken.TODO_C71ToCreateChanged, OnTODO_C71ToCreateChanged);
			RegisterToReceiveMessages(MessageToken.TODO_C71ToCreateFilterExpressionChanged, OnTODO_C71ToCreateFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_C71ToCreate = new VirtualList<TODO_C71ToCreate>(vloader);
			TODO_C71ToCreate.LoadingStateChanged += TODO_C71ToCreate_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_C71ToCreate, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_C71ToCreate> _TODO_C71ToCreate = null;
        public VirtualList<TODO_C71ToCreate> TODO_C71ToCreate
        {
            get
            {
                return _TODO_C71ToCreate;
            }
            set
            {
                _TODO_C71ToCreate = value;
                NotifyPropertyChanged( x => x.TODO_C71ToCreate);
            }
        }

		 private void OnTODO_C71ToCreateFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => TODO_C71ToCreate.Refresh()).ConfigureAwait(false);
            SelectedTODO_C71ToCreate.Clear();
            NotifyPropertyChanged(x => SelectedTODO_C71ToCreate);
            BeginSendMessage(MessageToken.SelectedTODO_C71ToCreateChanged, new NotificationEventArgs(MessageToken.SelectedTODO_C71ToCreateChanged));
        }

		void TODO_C71ToCreate_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_C71ToCreate.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_C71ToCreate);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_C71ToCreate | Error occured..." + TODO_C71ToCreate.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_C71ToCreate);
                    break;
            }
           
        }

		
		public readonly TODO_C71ToCreateVirturalListLoader vloader = new TODO_C71ToCreateVirturalListLoader();

		private ObservableCollection<TODO_C71ToCreate> _selectedTODO_C71ToCreate = new ObservableCollection<TODO_C71ToCreate>();
        public ObservableCollection<TODO_C71ToCreate> SelectedTODO_C71ToCreate
        {
            get
            {
                return _selectedTODO_C71ToCreate;
            }
            set
            {
                _selectedTODO_C71ToCreate = value;
				BeginSendMessage(MessageToken.SelectedTODO_C71ToCreateChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_C71ToCreateChanged));
				 NotifyPropertyChanged(x => SelectedTODO_C71ToCreate);
            }
        }

        internal virtual void OnCurrentTODO_C71ToCreateChanged(object sender, NotificationEventArgs<TODO_C71ToCreate> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_C71ToCreate != null) BaseViewModel.Instance.CurrentTODO_C71ToCreate.PropertyChanged += CurrentTODO_C71ToCreate__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_C71ToCreate);
        }   

            void CurrentTODO_C71ToCreate__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentTODO_C71ToCreate.ApplicationSettings) == false) ApplicationSettings.Add(CurrentTODO_C71ToCreate.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnTODO_C71ToCreateChanged(object sender, NotificationEventArgs e)
        {
            _TODO_C71ToCreate.Refresh();
			NotifyPropertyChanged(x => this.TODO_C71ToCreate);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    TODO_C71ToCreate.Refresh();
					NotifyPropertyChanged(x => this.TODO_C71ToCreate);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_C71ToCreate.Refresh();
			NotifyPropertyChanged(x => this.TODO_C71ToCreate);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_C71ToCreate> lst = null;
            using (var ctx = new TODO_C71ToCreateRepository())
            {
                lst = await ctx.GetTODO_C71ToCreateByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_C71ToCreate = new ObservableCollection<TODO_C71ToCreate>(lst);
        }

 

		private string _country_of_origin_codeFilter;
        public string Country_of_origin_codeFilter
        {
            get
            {
                return _country_of_origin_codeFilter;
            }
            set
            {
                _country_of_origin_codeFilter = value;
				NotifyPropertyChanged(x => Country_of_origin_codeFilter);
                FilterData();
                
            }
        }	

 

		private string _currency_CodeFilter;
        public string Currency_CodeFilter
        {
            get
            {
                return _currency_CodeFilter;
            }
            set
            {
                _currency_CodeFilter = value;
				NotifyPropertyChanged(x => Currency_CodeFilter);
                FilterData();
                
            }
        }	

 

		private string _manifest_NumberFilter;
        public string Manifest_NumberFilter
        {
            get
            {
                return _manifest_NumberFilter;
            }
            set
            {
                _manifest_NumberFilter = value;
				NotifyPropertyChanged(x => Manifest_NumberFilter);
                FilterData();
                
            }
        }	

 

		private string _bLNumberFilter;
        public string BLNumberFilter
        {
            get
            {
                return _bLNumberFilter;
            }
            set
            {
                _bLNumberFilter = value;
				NotifyPropertyChanged(x => BLNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _type_of_declarationFilter;
        public string Type_of_declarationFilter
        {
            get
            {
                return _type_of_declarationFilter;
            }
            set
            {
                _type_of_declarationFilter = value;
				NotifyPropertyChanged(x => Type_of_declarationFilter);
                FilterData();
                
            }
        }	

 

		private string _declaration_gen_procedure_codeFilter;
        public string Declaration_gen_procedure_codeFilter
        {
            get
            {
                return _declaration_gen_procedure_codeFilter;
            }
            set
            {
                _declaration_gen_procedure_codeFilter = value;
				NotifyPropertyChanged(x => Declaration_gen_procedure_codeFilter);
                FilterData();
                
            }
        }	

 

		private string _declarant_Reference_NumberFilter;
        public string Declarant_Reference_NumberFilter
        {
            get
            {
                return _declarant_Reference_NumberFilter;
            }
            set
            {
                _declarant_Reference_NumberFilter = value;
				NotifyPropertyChanged(x => Declarant_Reference_NumberFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _totalInvoicesFilter;
        public Int32? TotalInvoicesFilter
        {
            get
            {
                return _totalInvoicesFilter;
            }
            set
            {
                _totalInvoicesFilter = value;
				NotifyPropertyChanged(x => TotalInvoicesFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _documentsCountFilter;
        public Int32? DocumentsCountFilter
        {
            get
            {
                return _documentsCountFilter;
            }
            set
            {
                _documentsCountFilter = value;
				NotifyPropertyChanged(x => DocumentsCountFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _expectedEntriesFilter;
        public Int32? ExpectedEntriesFilter
        {
            get
            {
                return _expectedEntriesFilter;
            }
            set
            {
                _expectedEntriesFilter = value;
				NotifyPropertyChanged(x => ExpectedEntriesFilter);
                FilterData();
                
            }
        }	

 

		private Double? _invoiceTotalFilter;
        public Double? InvoiceTotalFilter
        {
            get
            {
                return _invoiceTotalFilter;
            }
            set
            {
                _invoiceTotalFilter = value;
				NotifyPropertyChanged(x => InvoiceTotalFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _licenseLinesFilter;
        public Int32? LicenseLinesFilter
        {
            get
            {
                return _licenseLinesFilter;
            }
            set
            {
                _licenseLinesFilter = value;
				NotifyPropertyChanged(x => LicenseLinesFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalCIFFilter;
        public Double? TotalCIFFilter
        {
            get
            {
                return _totalCIFFilter;
            }
            set
            {
                _totalCIFFilter = value;
				NotifyPropertyChanged(x => TotalCIFFilter);
                FilterData();
                
            }
        }	

 

		private Double? _c71TotalFilter;
        public Double? C71TotalFilter
        {
            get
            {
                return _c71TotalFilter;
            }
            set
            {
                _c71TotalFilter = value;
				NotifyPropertyChanged(x => C71TotalFilter);
                FilterData();
                
            }
        }	

 

		private Double? _rateFilter;
        public Double? RateFilter
        {
            get
            {
                return _rateFilter;
            }
            set
            {
                _rateFilter = value;
				NotifyPropertyChanged(x => RateFilter);
                FilterData();
                
            }
        }	

 

		private Double? _generatedC71TotalFilter;
        public Double? GeneratedC71TotalFilter
        {
            get
            {
                return _generatedC71TotalFilter;
            }
            set
            {
                _generatedC71TotalFilter = value;
				NotifyPropertyChanged(x => GeneratedC71TotalFilter);
                FilterData();
                
            }
        }	

 

		private string _addressFilter;
        public string AddressFilter
        {
            get
            {
                return _addressFilter;
            }
            set
            {
                _addressFilter = value;
				NotifyPropertyChanged(x => AddressFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _registeredIDFilter;
        public Int32? RegisteredIDFilter
        {
            get
            {
                return _registeredIDFilter;
            }
            set
            {
                _registeredIDFilter = value;
				NotifyPropertyChanged(x => RegisteredIDFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_C71ToCreate.Refresh();
			NotifyPropertyChanged(x => this.TODO_C71ToCreate);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(Country_of_origin_codeFilter) == false)
						res.Append(" && " + string.Format("Country_of_origin_code.Contains(\"{0}\")",  Country_of_origin_codeFilter));						
 

									if(string.IsNullOrEmpty(Currency_CodeFilter) == false)
						res.Append(" && " + string.Format("Currency_Code.Contains(\"{0}\")",  Currency_CodeFilter));						
 

									if(string.IsNullOrEmpty(Manifest_NumberFilter) == false)
						res.Append(" && " + string.Format("Manifest_Number.Contains(\"{0}\")",  Manifest_NumberFilter));						
 

									if(string.IsNullOrEmpty(BLNumberFilter) == false)
						res.Append(" && " + string.Format("BLNumber.Contains(\"{0}\")",  BLNumberFilter));						
 

									if(string.IsNullOrEmpty(Type_of_declarationFilter) == false)
						res.Append(" && " + string.Format("Type_of_declaration.Contains(\"{0}\")",  Type_of_declarationFilter));						
 

									if(string.IsNullOrEmpty(Declaration_gen_procedure_codeFilter) == false)
						res.Append(" && " + string.Format("Declaration_gen_procedure_code.Contains(\"{0}\")",  Declaration_gen_procedure_codeFilter));						
 

									if(string.IsNullOrEmpty(Declarant_Reference_NumberFilter) == false)
						res.Append(" && " + string.Format("Declarant_Reference_Number.Contains(\"{0}\")",  Declarant_Reference_NumberFilter));						
 

					if(TotalInvoicesFilter.HasValue)
						res.Append(" && " + string.Format("TotalInvoices == {0}",  TotalInvoicesFilter.ToString()));				 

					if(DocumentsCountFilter.HasValue)
						res.Append(" && " + string.Format("DocumentsCount == {0}",  DocumentsCountFilter.ToString()));				 

					if(ExpectedEntriesFilter.HasValue)
						res.Append(" && " + string.Format("ExpectedEntries == {0}",  ExpectedEntriesFilter.ToString()));				 

					if(InvoiceTotalFilter.HasValue)
						res.Append(" && " + string.Format("InvoiceTotal == {0}",  InvoiceTotalFilter.ToString()));				 

					if(LicenseLinesFilter.HasValue)
						res.Append(" && " + string.Format("LicenseLines == {0}",  LicenseLinesFilter.ToString()));				 

					if(TotalCIFFilter.HasValue)
						res.Append(" && " + string.Format("TotalCIF == {0}",  TotalCIFFilter.ToString()));				 

					if(C71TotalFilter.HasValue)
						res.Append(" && " + string.Format("C71Total == {0}",  C71TotalFilter.ToString()));				 

					if(RateFilter.HasValue)
						res.Append(" && " + string.Format("Rate == {0}",  RateFilter.ToString()));				 

					if(GeneratedC71TotalFilter.HasValue)
						res.Append(" && " + string.Format("GeneratedC71Total == {0}",  GeneratedC71TotalFilter.ToString()));				 

									if(string.IsNullOrEmpty(AddressFilter) == false)
						res.Append(" && " + string.Format("Address.Contains(\"{0}\")",  AddressFilter));						
 

					if(RegisteredIDFilter.HasValue)
						res.Append(" && " + string.Format("RegisteredID == {0}",  RegisteredIDFilter.ToString()));							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_C71ToCreate> lst = null;
            using (var ctx = new TODO_C71ToCreateRepository())
            {
                lst = await ctx.GetTODO_C71ToCreateByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_C71ToCreateExcelLine, List<TODO_C71ToCreateExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_C71ToCreateExcelLine
                {
 
                    Country_of_origin_code = x.Country_of_origin_code ,
                    
 
                    Currency_Code = x.Currency_Code ,
                    
 
                    Manifest_Number = x.Manifest_Number ,
                    
 
                    BLNumber = x.BLNumber ,
                    
 
                    Type_of_declaration = x.Type_of_declaration ,
                    
 
                    Declaration_gen_procedure_code = x.Declaration_gen_procedure_code ,
                    
 
                    Declarant_Reference_Number = x.Declarant_Reference_Number ,
                    
 
                    TotalInvoices = x.TotalInvoices ,
                    
 
                    DocumentsCount = x.DocumentsCount ,
                    
 
                    ExpectedEntries = x.ExpectedEntries ,
                    
 
                    InvoiceTotal = x.InvoiceTotal ,
                    
 
                    LicenseLines = x.LicenseLines ,
                    
 
                    TotalCIF = x.TotalCIF ,
                    
 
                    C71Total = x.C71Total ,
                    
 
                    Rate = x.Rate ,
                    
 
                    GeneratedC71Total = x.GeneratedC71Total ,
                    
 
                    Address = x.Address ,
                    
 
                    RegisteredID = x.RegisteredID 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class TODO_C71ToCreateExcelLine
        {
		 
                    public string Country_of_origin_code { get; set; } 
                    
 
                    public string Currency_Code { get; set; } 
                    
 
                    public string Manifest_Number { get; set; } 
                    
 
                    public string BLNumber { get; set; } 
                    
 
                    public string Type_of_declaration { get; set; } 
                    
 
                    public string Declaration_gen_procedure_code { get; set; } 
                    
 
                    public string Declarant_Reference_Number { get; set; } 
                    
 
                    public Nullable<int> TotalInvoices { get; set; } 
                    
 
                    public Nullable<int> DocumentsCount { get; set; } 
                    
 
                    public Nullable<int> ExpectedEntries { get; set; } 
                    
 
                    public Nullable<double> InvoiceTotal { get; set; } 
                    
 
                    public Nullable<int> LicenseLines { get; set; } 
                    
 
                    public Nullable<double> TotalCIF { get; set; } 
                    
 
                    public double C71Total { get; set; } 
                    
 
                    public double Rate { get; set; } 
                    
 
                    public Nullable<double> GeneratedC71Total { get; set; } 
                    
 
                    public string Address { get; set; } 
                    
 
                    public Nullable<int> RegisteredID { get; set; } 
                    
        }

		
    }
}
		

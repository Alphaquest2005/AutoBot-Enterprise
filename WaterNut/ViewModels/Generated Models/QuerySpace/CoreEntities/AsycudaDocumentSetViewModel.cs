// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class AsycudaDocumentSetViewModel_AutoGen : ViewModelBase<AsycudaDocumentSetViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentSetViewModel_AutoGen instance;
       static AsycudaDocumentSetViewModel_AutoGen()
        {
            instance = new AsycudaDocumentSetViewModel_AutoGen();
        }

       public static AsycudaDocumentSetViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentSetViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentSet>(MessageToken.CurrentAsycudaDocumentSetChanged, OnCurrentAsycudaDocumentSetChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetChanged, OnAsycudaDocumentSetChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetFilterExpressionChanged, OnAsycudaDocumentSetFilterExpressionChanged);

 
			RegisterToReceiveMessages<ApplicationSettings>(MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
 
			RegisterToReceiveMessages<Customs_Procedure>(MessageToken.CurrentCustoms_ProcedureChanged, OnCurrentCustoms_ProcedureChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentSet = new VirtualList<AsycudaDocumentSet>(vloader);
			AsycudaDocumentSet.LoadingStateChanged += AsycudaDocumentSet_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentSet, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentSet> _AsycudaDocumentSet = null;
        public VirtualList<AsycudaDocumentSet> AsycudaDocumentSet
        {
            get
            {
                return _AsycudaDocumentSet;
            }
            set
            {
                _AsycudaDocumentSet = value;
                NotifyPropertyChanged( x => x.AsycudaDocumentSet);
            }
        }

		 private void OnAsycudaDocumentSetFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => AsycudaDocumentSet.Refresh()).ConfigureAwait(false);
            SelectedAsycudaDocumentSet.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentSet);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetChanged));
        }

		void AsycudaDocumentSet_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentSet.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentSet);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentSet | Error occured..." + AsycudaDocumentSet.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentSet);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentSetVirturalListLoader vloader = new AsycudaDocumentSetVirturalListLoader();

		private ObservableCollection<AsycudaDocumentSet> _selectedAsycudaDocumentSet = new ObservableCollection<AsycudaDocumentSet>();
        public ObservableCollection<AsycudaDocumentSet> SelectedAsycudaDocumentSet
        {
            get
            {
                return _selectedAsycudaDocumentSet;
            }
            set
            {
                _selectedAsycudaDocumentSet = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentSet);
            }
        }

        internal virtual void OnCurrentAsycudaDocumentSetChanged(object sender, NotificationEventArgs<AsycudaDocumentSet> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentSet != null) BaseViewModel.Instance.CurrentAsycudaDocumentSet.PropertyChanged += CurrentAsycudaDocumentSet__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSet);
        }   

            void CurrentAsycudaDocumentSet__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentAsycudaDocumentSet.ApplicationSettings) == false) ApplicationSettings.Add(CurrentAsycudaDocumentSet.ApplicationSettings);
                    //}
                    //if (e.PropertyName == "AddCustoms_Procedure")
                   // {
                   //    if(Customs_Procedure.Contains(CurrentAsycudaDocumentSet.Customs_Procedure) == false) Customs_Procedure.Add(CurrentAsycudaDocumentSet.Customs_Procedure);
                    //}
                 } 
        internal virtual void OnAsycudaDocumentSetChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentSet.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSet);
        }   


 	
		 internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
			{
			if(ViewCurrentApplicationSettings == false) return;
			if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                 }

				AsycudaDocumentSet.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentSet);
                // SendMessage(MessageToken.AsycudaDocumentSetChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentSetChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocumentSet = null;
			}
	
		 internal virtual void OnCurrentCustoms_ProcedureChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Customs_Procedure> e)
			{
			if(ViewCurrentCustoms_Procedure == false) return;
			if (e.Data == null || e.Data.Customs_ProcedureId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("Customs_ProcedureId == {0}", e.Data.Customs_ProcedureId.ToString());
                 }

				AsycudaDocumentSet.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentSet);
                // SendMessage(MessageToken.AsycudaDocumentSetChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentSetChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocumentSet = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentApplicationSettings = false;
         public bool ViewCurrentApplicationSettings
         {
             get
             {
                 return _viewCurrentApplicationSettings;
             }
             set
             {
                 _viewCurrentApplicationSettings = value;
                 NotifyPropertyChanged(x => x.ViewCurrentApplicationSettings);
                FilterData();
             }
         }
 	
		 bool _viewCurrentCustoms_Procedure = false;
         public bool ViewCurrentCustoms_Procedure
         {
             get
             {
                 return _viewCurrentCustoms_Procedure;
             }
             set
             {
                 _viewCurrentCustoms_Procedure = value;
                 NotifyPropertyChanged(x => x.ViewCurrentCustoms_Procedure);
                FilterData();
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_AsycudaDocumentSet.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSet);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentSet> lst = null;
            using (var ctx = new AsycudaDocumentSetRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentSet = new ObservableCollection<AsycudaDocumentSet>(lst);
        }

 

		private string _declarant_Reference_NumberFilter;
        public string Declarant_Reference_NumberFilter
        {
            get
            {
                return _declarant_Reference_NumberFilter;
            }
            set
            {
                _declarant_Reference_NumberFilter = value;
				NotifyPropertyChanged(x => Declarant_Reference_NumberFilter);
                FilterData();
                
            }
        }	

 

		private Double? _exchange_RateFilter;
        public Double? Exchange_RateFilter
        {
            get
            {
                return _exchange_RateFilter;
            }
            set
            {
                _exchange_RateFilter = value;
				NotifyPropertyChanged(x => Exchange_RateFilter);
                FilterData();
                
            }
        }	

 

		private string _country_of_origin_codeFilter;
        public string Country_of_origin_codeFilter
        {
            get
            {
                return _country_of_origin_codeFilter;
            }
            set
            {
                _country_of_origin_codeFilter = value;
				NotifyPropertyChanged(x => Country_of_origin_codeFilter);
                FilterData();
                
            }
        }	

 

		private string _currency_CodeFilter;
        public string Currency_CodeFilter
        {
            get
            {
                return _currency_CodeFilter;
            }
            set
            {
                _currency_CodeFilter = value;
				NotifyPropertyChanged(x => Currency_CodeFilter);
                FilterData();
                
            }
        }	

 

		private string _descriptionFilter;
        public string DescriptionFilter
        {
            get
            {
                return _descriptionFilter;
            }
            set
            {
                _descriptionFilter = value;
				NotifyPropertyChanged(x => DescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _manifest_NumberFilter;
        public string Manifest_NumberFilter
        {
            get
            {
                return _manifest_NumberFilter;
            }
            set
            {
                _manifest_NumberFilter = value;
				NotifyPropertyChanged(x => Manifest_NumberFilter);
                FilterData();
                
            }
        }	

 

		private string _bLNumberFilter;
        public string BLNumberFilter
        {
            get
            {
                return _bLNumberFilter;
            }
            set
            {
                _bLNumberFilter = value;
				NotifyPropertyChanged(x => BLNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startEntryTimeStampFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartEntryTimeStampFilter
        {
            get
            {
                return _startEntryTimeStampFilter;
            }
            set
            {
                _startEntryTimeStampFilter = value;
				NotifyPropertyChanged(x => StartEntryTimeStampFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endEntryTimeStampFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndEntryTimeStampFilter
        {
            get
            {
                return _endEntryTimeStampFilter;
            }
            set
            {
                _endEntryTimeStampFilter = value;
				NotifyPropertyChanged(x => EndEntryTimeStampFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _entryTimeStampFilter;
        public DateTime? EntryTimeStampFilter
        {
            get
            {
                return _entryTimeStampFilter;
            }
            set
            {
                _entryTimeStampFilter = value;
				NotifyPropertyChanged(x => EntryTimeStampFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _startingFileCountFilter;
        public Int32? StartingFileCountFilter
        {
            get
            {
                return _startingFileCountFilter;
            }
            set
            {
                _startingFileCountFilter = value;
				NotifyPropertyChanged(x => StartingFileCountFilter);
                FilterData();
                
            }
        }	

 

		private string _apportionMethodFilter;
        public string ApportionMethodFilter
        {
            get
            {
                return _apportionMethodFilter;
            }
            set
            {
                _apportionMethodFilter = value;
				NotifyPropertyChanged(x => ApportionMethodFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalWeightFilter;
        public Double? TotalWeightFilter
        {
            get
            {
                return _totalWeightFilter;
            }
            set
            {
                _totalWeightFilter = value;
				NotifyPropertyChanged(x => TotalWeightFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalFreightFilter;
        public Double? TotalFreightFilter
        {
            get
            {
                return _totalFreightFilter;
            }
            set
            {
                _totalFreightFilter = value;
				NotifyPropertyChanged(x => TotalFreightFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _totalPackagesFilter;
        public Int32? TotalPackagesFilter
        {
            get
            {
                return _totalPackagesFilter;
            }
            set
            {
                _totalPackagesFilter = value;
				NotifyPropertyChanged(x => TotalPackagesFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _lastFileNumberFilter;
        public Int32? LastFileNumberFilter
        {
            get
            {
                return _lastFileNumberFilter;
            }
            set
            {
                _lastFileNumberFilter = value;
				NotifyPropertyChanged(x => LastFileNumberFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _totalInvoicesFilter;
        public Int32? TotalInvoicesFilter
        {
            get
            {
                return _totalInvoicesFilter;
            }
            set
            {
                _totalInvoicesFilter = value;
				NotifyPropertyChanged(x => TotalInvoicesFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _maxLinesFilter;
        public Int32? MaxLinesFilter
        {
            get
            {
                return _maxLinesFilter;
            }
            set
            {
                _maxLinesFilter = value;
				NotifyPropertyChanged(x => MaxLinesFilter);
                FilterData();
                
            }
        }	

 

		private string _locationOfGoodsFilter;
        public string LocationOfGoodsFilter
        {
            get
            {
                return _locationOfGoodsFilter;
            }
            set
            {
                _locationOfGoodsFilter = value;
				NotifyPropertyChanged(x => LocationOfGoodsFilter);
                FilterData();
                
            }
        }	

 

		private string _freightCurrencyCodeFilter;
        public string FreightCurrencyCodeFilter
        {
            get
            {
                return _freightCurrencyCodeFilter;
            }
            set
            {
                _freightCurrencyCodeFilter = value;
				NotifyPropertyChanged(x => FreightCurrencyCodeFilter);
                FilterData();
                
            }
        }	

 

		private string _officeFilter;
        public string OfficeFilter
        {
            get
            {
                return _officeFilter;
            }
            set
            {
                _officeFilter = value;
				NotifyPropertyChanged(x => OfficeFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _upgradeKeyFilter;
        public Int32? UpgradeKeyFilter
        {
            get
            {
                return _upgradeKeyFilter;
            }
            set
            {
                _upgradeKeyFilter = value;
				NotifyPropertyChanged(x => UpgradeKeyFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _expectedEntriesFilter;
        public Int32? ExpectedEntriesFilter
        {
            get
            {
                return _expectedEntriesFilter;
            }
            set
            {
                _expectedEntriesFilter = value;
				NotifyPropertyChanged(x => ExpectedEntriesFilter);
                FilterData();
                
            }
        }	

 

		private string _packageTypeFilter;
        public string PackageTypeFilter
        {
            get
            {
                return _packageTypeFilter;
            }
            set
            {
                _packageTypeFilter = value;
				NotifyPropertyChanged(x => PackageTypeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentSet.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSet);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(Declarant_Reference_NumberFilter) == false)
						res.Append(" && " + string.Format("Declarant_Reference_Number.Contains(\"{0}\")",  Declarant_Reference_NumberFilter));						
 

					if(Exchange_RateFilter.HasValue)
						res.Append(" && " + string.Format("Exchange_Rate == {0}",  Exchange_RateFilter.ToString()));				 

									if(string.IsNullOrEmpty(Country_of_origin_codeFilter) == false)
						res.Append(" && " + string.Format("Country_of_origin_code.Contains(\"{0}\")",  Country_of_origin_codeFilter));						
 

									if(string.IsNullOrEmpty(Currency_CodeFilter) == false)
						res.Append(" && " + string.Format("Currency_Code.Contains(\"{0}\")",  Currency_CodeFilter));						
 

									if(string.IsNullOrEmpty(DescriptionFilter) == false)
						res.Append(" && " + string.Format("Description.Contains(\"{0}\")",  DescriptionFilter));						
 

									if(string.IsNullOrEmpty(Manifest_NumberFilter) == false)
						res.Append(" && " + string.Format("Manifest_Number.Contains(\"{0}\")",  Manifest_NumberFilter));						
 

									if(string.IsNullOrEmpty(BLNumberFilter) == false)
						res.Append(" && " + string.Format("BLNumber.Contains(\"{0}\")",  BLNumberFilter));						
 

 

				if (Convert.ToDateTime(StartEntryTimeStampFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEntryTimeStampFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartEntryTimeStampFilter).Date != DateTime.MinValue)
						{
							if(StartEntryTimeStampFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndEntryTimeStampFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("EntryTimeStamp >= \"{0}\"",  Convert.ToDateTime(StartEntryTimeStampFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndEntryTimeStampFilter).Date != DateTime.MinValue)
						{
							if(EndEntryTimeStampFilter.HasValue)
								res.Append(" && " + string.Format("EntryTimeStamp <= \"{0}\"",  Convert.ToDateTime(EndEntryTimeStampFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartEntryTimeStampFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEntryTimeStampFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_entryTimeStampFilter).Date != DateTime.MinValue)
						{
							if(EntryTimeStampFilter.HasValue)
								res.Append(" && " + string.Format("EntryTimeStamp == \"{0}\"",  Convert.ToDateTime(EntryTimeStampFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(StartingFileCountFilter.HasValue)
						res.Append(" && " + string.Format("StartingFileCount == {0}",  StartingFileCountFilter.ToString()));				 

									if(string.IsNullOrEmpty(ApportionMethodFilter) == false)
						res.Append(" && " + string.Format("ApportionMethod.Contains(\"{0}\")",  ApportionMethodFilter));						
 

					if(TotalWeightFilter.HasValue)
						res.Append(" && " + string.Format("TotalWeight == {0}",  TotalWeightFilter.ToString()));				 

					if(TotalFreightFilter.HasValue)
						res.Append(" && " + string.Format("TotalFreight == {0}",  TotalFreightFilter.ToString()));				 

					if(TotalPackagesFilter.HasValue)
						res.Append(" && " + string.Format("TotalPackages == {0}",  TotalPackagesFilter.ToString()));				 

					if(LastFileNumberFilter.HasValue)
						res.Append(" && " + string.Format("LastFileNumber == {0}",  LastFileNumberFilter.ToString()));				 

					if(TotalInvoicesFilter.HasValue)
						res.Append(" && " + string.Format("TotalInvoices == {0}",  TotalInvoicesFilter.ToString()));				 

					if(MaxLinesFilter.HasValue)
						res.Append(" && " + string.Format("MaxLines == {0}",  MaxLinesFilter.ToString()));				 

									if(string.IsNullOrEmpty(LocationOfGoodsFilter) == false)
						res.Append(" && " + string.Format("LocationOfGoods.Contains(\"{0}\")",  LocationOfGoodsFilter));						
 

									if(string.IsNullOrEmpty(FreightCurrencyCodeFilter) == false)
						res.Append(" && " + string.Format("FreightCurrencyCode.Contains(\"{0}\")",  FreightCurrencyCodeFilter));						
 

									if(string.IsNullOrEmpty(OfficeFilter) == false)
						res.Append(" && " + string.Format("Office.Contains(\"{0}\")",  OfficeFilter));						
 

					if(UpgradeKeyFilter.HasValue)
						res.Append(" && " + string.Format("UpgradeKey == {0}",  UpgradeKeyFilter.ToString()));				 

					if(ExpectedEntriesFilter.HasValue)
						res.Append(" && " + string.Format("ExpectedEntries == {0}",  ExpectedEntriesFilter.ToString()));				 

									if(string.IsNullOrEmpty(PackageTypeFilter) == false)
						res.Append(" && " + string.Format("PackageType.Contains(\"{0}\")",  PackageTypeFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentSet> lst = null;
            using (var ctx = new AsycudaDocumentSetRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentSetExcelLine, List<AsycudaDocumentSetExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentSetExcelLine
                {
 
                    Declarant_Reference_Number = x.Declarant_Reference_Number ,
                    
 
                    Exchange_Rate = x.Exchange_Rate ,
                    
 
                    Country_of_origin_code = x.Country_of_origin_code ,
                    
 
                    Currency_Code = x.Currency_Code ,
                    
 
                    Description = x.Description ,
                    
 
                    Manifest_Number = x.Manifest_Number ,
                    
 
                    BLNumber = x.BLNumber ,
                    
 
                    EntryTimeStamp = x.EntryTimeStamp ,
                    
 
                    StartingFileCount = x.StartingFileCount ,
                    
 
                    ApportionMethod = x.ApportionMethod ,
                    
 
                    TotalWeight = x.TotalWeight ,
                    
 
                    TotalFreight = x.TotalFreight ,
                    
 
                    TotalPackages = x.TotalPackages ,
                    
 
                    LastFileNumber = x.LastFileNumber ,
                    
 
                    TotalInvoices = x.TotalInvoices ,
                    
 
                    MaxLines = x.MaxLines ,
                    
 
                    LocationOfGoods = x.LocationOfGoods ,
                    
 
                    FreightCurrencyCode = x.FreightCurrencyCode ,
                    
 
                    Office = x.Office ,
                    
 
                    UpgradeKey = x.UpgradeKey ,
                    
 
                    ExpectedEntries = x.ExpectedEntries ,
                    
 
                    PackageType = x.PackageType 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class AsycudaDocumentSetExcelLine
        {
		 
                    public string Declarant_Reference_Number { get; set; } 
                    
 
                    public double Exchange_Rate { get; set; } 
                    
 
                    public string Country_of_origin_code { get; set; } 
                    
 
                    public string Currency_Code { get; set; } 
                    
 
                    public string Description { get; set; } 
                    
 
                    public string Manifest_Number { get; set; } 
                    
 
                    public string BLNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> EntryTimeStamp { get; set; } 
                    
 
                    public Nullable<int> StartingFileCount { get; set; } 
                    
 
                    public string ApportionMethod { get; set; } 
                    
 
                    public Nullable<double> TotalWeight { get; set; } 
                    
 
                    public Nullable<double> TotalFreight { get; set; } 
                    
 
                    public Nullable<int> TotalPackages { get; set; } 
                    
 
                    public Nullable<int> LastFileNumber { get; set; } 
                    
 
                    public Nullable<int> TotalInvoices { get; set; } 
                    
 
                    public Nullable<int> MaxLines { get; set; } 
                    
 
                    public string LocationOfGoods { get; set; } 
                    
 
                    public string FreightCurrencyCode { get; set; } 
                    
 
                    public string Office { get; set; } 
                    
 
                    public Nullable<int> UpgradeKey { get; set; } 
                    
 
                    public Nullable<int> ExpectedEntries { get; set; } 
                    
 
                    public string PackageType { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class CustomsOperationsViewModel_AutoGen : ViewModelBase<CustomsOperationsViewModel_AutoGen>
	{

       private static readonly CustomsOperationsViewModel_AutoGen instance;
       static CustomsOperationsViewModel_AutoGen()
        {
            instance = new CustomsOperationsViewModel_AutoGen();
        }

       public static CustomsOperationsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public CustomsOperationsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<CustomsOperations>(MessageToken.CurrentCustomsOperationsChanged, OnCurrentCustomsOperationsChanged);
            RegisterToReceiveMessages(MessageToken.CustomsOperationsChanged, OnCustomsOperationsChanged);
			RegisterToReceiveMessages(MessageToken.CustomsOperationsFilterExpressionChanged, OnCustomsOperationsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			CustomsOperations = new VirtualList<CustomsOperations>(vloader);
			CustomsOperations.LoadingStateChanged += CustomsOperations_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(CustomsOperations, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<CustomsOperations> _CustomsOperations = null;
        public VirtualList<CustomsOperations> CustomsOperations
        {
            get
            {
                return _CustomsOperations;
            }
            set
            {
                _CustomsOperations = value;
                NotifyPropertyChanged( x => x.CustomsOperations);
            }
        }

		 private void OnCustomsOperationsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => CustomsOperations.Refresh()).ConfigureAwait(false);
            SelectedCustomsOperations.Clear();
            NotifyPropertyChanged(x => SelectedCustomsOperations);
            BeginSendMessage(MessageToken.SelectedCustomsOperationsChanged, new NotificationEventArgs(MessageToken.SelectedCustomsOperationsChanged));
        }

		void CustomsOperations_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (CustomsOperations.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => CustomsOperations);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("CustomsOperations | Error occured..." + CustomsOperations.LastLoadingError.Message);
                    NotifyPropertyChanged(x => CustomsOperations);
                    break;
            }
           
        }

		
		public readonly CustomsOperationsVirturalListLoader vloader = new CustomsOperationsVirturalListLoader();

		private ObservableCollection<CustomsOperations> _selectedCustomsOperations = new ObservableCollection<CustomsOperations>();
        public ObservableCollection<CustomsOperations> SelectedCustomsOperations
        {
            get
            {
                return _selectedCustomsOperations;
            }
            set
            {
                _selectedCustomsOperations = value;
				BeginSendMessage(MessageToken.SelectedCustomsOperationsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedCustomsOperationsChanged));
				 NotifyPropertyChanged(x => SelectedCustomsOperations);
            }
        }

        internal virtual void OnCurrentCustomsOperationsChanged(object sender, NotificationEventArgs<CustomsOperations> e)
        {
            if(BaseViewModel.Instance.CurrentCustomsOperations != null) BaseViewModel.Instance.CurrentCustomsOperations.PropertyChanged += CurrentCustomsOperations__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentCustomsOperations);
        }   

            void CurrentCustomsOperations__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnCustomsOperationsChanged(object sender, NotificationEventArgs e)
        {
            _CustomsOperations.Refresh();
			NotifyPropertyChanged(x => this.CustomsOperations);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_CustomsOperations.Refresh();
			NotifyPropertyChanged(x => this.CustomsOperations);
		}

		public async Task SelectAll()
        {
            IEnumerable<CustomsOperations> lst = null;
            using (var ctx = new CustomsOperationsRepository())
            {
                lst = await ctx.GetCustomsOperationsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedCustomsOperations = new ObservableCollection<CustomsOperations>(lst);
        }

 

		private string _nameFilter;
        public string NameFilter
        {
            get
            {
                return _nameFilter;
            }
            set
            {
                _nameFilter = value;
				NotifyPropertyChanged(x => NameFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			CustomsOperations.Refresh();
			NotifyPropertyChanged(x => this.CustomsOperations);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(NameFilter) == false)
						res.Append(" && " + string.Format("Name.Contains(\"{0}\")",  NameFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<CustomsOperations> lst = null;
            using (var ctx = new CustomsOperationsRepository())
            {
                lst = await ctx.GetCustomsOperationsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<CustomsOperationsExcelLine, List<CustomsOperationsExcelLine>>
            {
                dataToPrint = lst.Select(x => new CustomsOperationsExcelLine
                {
 
                    Name = x.Name 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class CustomsOperationsExcelLine
        {
		 
                    public string Name { get; set; } 
                    
        }

		
    }
}
		

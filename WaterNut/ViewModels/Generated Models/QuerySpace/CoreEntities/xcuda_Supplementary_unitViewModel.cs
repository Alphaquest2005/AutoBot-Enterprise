// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class xcuda_Supplementary_unitViewModel_AutoGen : ViewModelBase<xcuda_Supplementary_unitViewModel_AutoGen>
	{

       private static readonly xcuda_Supplementary_unitViewModel_AutoGen instance;
       static xcuda_Supplementary_unitViewModel_AutoGen()
        {
            instance = new xcuda_Supplementary_unitViewModel_AutoGen();
        }

       public static xcuda_Supplementary_unitViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public xcuda_Supplementary_unitViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<xcuda_Supplementary_unit>(MessageToken.Currentxcuda_Supplementary_unitChanged, OnCurrentxcuda_Supplementary_unitChanged);
            RegisterToReceiveMessages(MessageToken.xcuda_Supplementary_unitChanged, Onxcuda_Supplementary_unitChanged);
			RegisterToReceiveMessages(MessageToken.xcuda_Supplementary_unitFilterExpressionChanged, Onxcuda_Supplementary_unitFilterExpressionChanged);

 
			RegisterToReceiveMessages<AsycudaDocumentItem>(MessageToken.CurrentAsycudaDocumentItemChanged, OnCurrentAsycudaDocumentItemChanged);

 			// Recieve messages for Core Current Entities Changed
 

			xcuda_Supplementary_unit = new VirtualList<xcuda_Supplementary_unit>(vloader);
			xcuda_Supplementary_unit.LoadingStateChanged += xcuda_Supplementary_unit_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(xcuda_Supplementary_unit, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<xcuda_Supplementary_unit> _xcuda_Supplementary_unit = null;
        public VirtualList<xcuda_Supplementary_unit> xcuda_Supplementary_unit
        {
            get
            {
                return _xcuda_Supplementary_unit;
            }
            set
            {
                _xcuda_Supplementary_unit = value;
                NotifyPropertyChanged( x => x.xcuda_Supplementary_unit);
            }
        }

		 private void Onxcuda_Supplementary_unitFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => xcuda_Supplementary_unit.Refresh()).ConfigureAwait(false);
            Selectedxcuda_Supplementary_unit.Clear();
            NotifyPropertyChanged(x => Selectedxcuda_Supplementary_unit);
            BeginSendMessage(MessageToken.Selectedxcuda_Supplementary_unitChanged, new NotificationEventArgs(MessageToken.Selectedxcuda_Supplementary_unitChanged));
        }

		void xcuda_Supplementary_unit_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (xcuda_Supplementary_unit.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => xcuda_Supplementary_unit);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("xcuda_Supplementary_unit | Error occured..." + xcuda_Supplementary_unit.LastLoadingError.Message);
                    NotifyPropertyChanged(x => xcuda_Supplementary_unit);
                    break;
            }
           
        }

		
		public readonly xcuda_Supplementary_unitVirturalListLoader vloader = new xcuda_Supplementary_unitVirturalListLoader();

		private ObservableCollection<xcuda_Supplementary_unit> _selectedxcuda_Supplementary_unit = new ObservableCollection<xcuda_Supplementary_unit>();
        public ObservableCollection<xcuda_Supplementary_unit> Selectedxcuda_Supplementary_unit
        {
            get
            {
                return _selectedxcuda_Supplementary_unit;
            }
            set
            {
                _selectedxcuda_Supplementary_unit = value;
				BeginSendMessage(MessageToken.Selectedxcuda_Supplementary_unitChanged,
                                    new NotificationEventArgs(MessageToken.Selectedxcuda_Supplementary_unitChanged));
				 NotifyPropertyChanged(x => Selectedxcuda_Supplementary_unit);
            }
        }

        internal virtual void OnCurrentxcuda_Supplementary_unitChanged(object sender, NotificationEventArgs<xcuda_Supplementary_unit> e)
        {
            if(BaseViewModel.Instance.Currentxcuda_Supplementary_unit != null) BaseViewModel.Instance.Currentxcuda_Supplementary_unit.PropertyChanged += Currentxcuda_Supplementary_unit__propertyChanged;
           // NotifyPropertyChanged(x => this.Currentxcuda_Supplementary_unit);
        }   

            void Currentxcuda_Supplementary_unit__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddAsycudaDocumentItem")
                   // {
                   //    if(AsycudaDocumentItems.Contains(Currentxcuda_Supplementary_unit.AsycudaDocumentItem) == false) AsycudaDocumentItems.Add(Currentxcuda_Supplementary_unit.AsycudaDocumentItem);
                    //}
                 } 
        internal virtual void Onxcuda_Supplementary_unitChanged(object sender, NotificationEventArgs e)
        {
            _xcuda_Supplementary_unit.Refresh();
			NotifyPropertyChanged(x => this.xcuda_Supplementary_unit);
        }   


 	
		 internal virtual void OnCurrentAsycudaDocumentItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItem> e)
			{
			if(ViewCurrentAsycudaDocumentItem == false) return;
			if (e.Data == null || e.Data.Item_Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("Tarification_Id == {0}", e.Data.Item_Id.ToString());
                 }

				xcuda_Supplementary_unit.Refresh();
				NotifyPropertyChanged(x => this.xcuda_Supplementary_unit);
                // SendMessage(MessageToken.xcuda_Supplementary_unitChanged, new NotificationEventArgs(MessageToken.xcuda_Supplementary_unitChanged));
                                          
                BaseViewModel.Instance.Currentxcuda_Supplementary_unit = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentAsycudaDocumentItem = false;
         public bool ViewCurrentAsycudaDocumentItem
         {
             get
             {
                 return _viewCurrentAsycudaDocumentItem;
             }
             set
             {
                 _viewCurrentAsycudaDocumentItem = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocumentItem);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_xcuda_Supplementary_unit.Refresh();
			NotifyPropertyChanged(x => this.xcuda_Supplementary_unit);
		}

		public async Task SelectAll()
        {
            IEnumerable<xcuda_Supplementary_unit> lst = null;
            using (var ctx = new xcuda_Supplementary_unitRepository())
            {
                lst = await ctx.Getxcuda_Supplementary_unitByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            Selectedxcuda_Supplementary_unit = new ObservableCollection<xcuda_Supplementary_unit>(lst);
        }

 

		private Double? _suppplementary_unit_quantityFilter;
        public Double? Suppplementary_unit_quantityFilter
        {
            get
            {
                return _suppplementary_unit_quantityFilter;
            }
            set
            {
                _suppplementary_unit_quantityFilter = value;
				NotifyPropertyChanged(x => Suppplementary_unit_quantityFilter);
                FilterData();
                
            }
        }	

 

		private string _suppplementary_unit_codeFilter;
        public string Suppplementary_unit_codeFilter
        {
            get
            {
                return _suppplementary_unit_codeFilter;
            }
            set
            {
                _suppplementary_unit_codeFilter = value;
				NotifyPropertyChanged(x => Suppplementary_unit_codeFilter);
                FilterData();
                
            }
        }	

 

		private string _suppplementary_unit_nameFilter;
        public string Suppplementary_unit_nameFilter
        {
            get
            {
                return _suppplementary_unit_nameFilter;
            }
            set
            {
                _suppplementary_unit_nameFilter = value;
				NotifyPropertyChanged(x => Suppplementary_unit_nameFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isFirstRowFilter;
        public Boolean? IsFirstRowFilter
        {
            get
            {
                return _isFirstRowFilter;
            }
            set
            {
                _isFirstRowFilter = value;
				NotifyPropertyChanged(x => IsFirstRowFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			xcuda_Supplementary_unit.Refresh();
			NotifyPropertyChanged(x => this.xcuda_Supplementary_unit);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

					if(Suppplementary_unit_quantityFilter.HasValue)
						res.Append(" && " + string.Format("Suppplementary_unit_quantity == {0}",  Suppplementary_unit_quantityFilter.ToString()));				 

									if(string.IsNullOrEmpty(Suppplementary_unit_codeFilter) == false)
						res.Append(" && " + string.Format("Suppplementary_unit_code.Contains(\"{0}\")",  Suppplementary_unit_codeFilter));						
 

									if(string.IsNullOrEmpty(Suppplementary_unit_nameFilter) == false)
						res.Append(" && " + string.Format("Suppplementary_unit_name.Contains(\"{0}\")",  Suppplementary_unit_nameFilter));						
 

									if(IsFirstRowFilter.HasValue)
						res.Append(" && " + string.Format("IsFirstRow == {0}",  IsFirstRowFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<xcuda_Supplementary_unit> lst = null;
            using (var ctx = new xcuda_Supplementary_unitRepository())
            {
                lst = await ctx.Getxcuda_Supplementary_unitByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<xcuda_Supplementary_unitExcelLine, List<xcuda_Supplementary_unitExcelLine>>
            {
                dataToPrint = lst.Select(x => new xcuda_Supplementary_unitExcelLine
                {
 
                    Suppplementary_unit_quantity = x.Suppplementary_unit_quantity ,
                    
 
                    Suppplementary_unit_code = x.Suppplementary_unit_code ,
                    
 
                    Suppplementary_unit_name = x.Suppplementary_unit_name ,
                    
 
                    IsFirstRow = x.IsFirstRow 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class xcuda_Supplementary_unitExcelLine
        {
		 
                    public Nullable<double> Suppplementary_unit_quantity { get; set; } 
                    
 
                    public string Suppplementary_unit_code { get; set; } 
                    
 
                    public string Suppplementary_unit_name { get; set; } 
                    
 
                    public Nullable<bool> IsFirstRow { get; set; } 
                    
        }

		
    }
}
		

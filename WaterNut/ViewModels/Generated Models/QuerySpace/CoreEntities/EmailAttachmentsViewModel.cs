// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class EmailAttachmentsViewModel_AutoGen : ViewModelBase<EmailAttachmentsViewModel_AutoGen>
	{

       private static readonly EmailAttachmentsViewModel_AutoGen instance;
       static EmailAttachmentsViewModel_AutoGen()
        {
            instance = new EmailAttachmentsViewModel_AutoGen();
        }

       public static EmailAttachmentsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public EmailAttachmentsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<EmailAttachments>(MessageToken.CurrentEmailAttachmentsChanged, OnCurrentEmailAttachmentsChanged);
            RegisterToReceiveMessages(MessageToken.EmailAttachmentsChanged, OnEmailAttachmentsChanged);
			RegisterToReceiveMessages(MessageToken.EmailAttachmentsFilterExpressionChanged, OnEmailAttachmentsFilterExpressionChanged);

 
			RegisterToReceiveMessages<Attachments>(MessageToken.CurrentAttachmentsChanged, OnCurrentAttachmentsChanged);
 
			RegisterToReceiveMessages<Emails>(MessageToken.CurrentEmailsChanged, OnCurrentEmailsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			EmailAttachments = new VirtualList<EmailAttachments>(vloader);
			EmailAttachments.LoadingStateChanged += EmailAttachments_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(EmailAttachments, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<EmailAttachments> _EmailAttachments = null;
        public VirtualList<EmailAttachments> EmailAttachments
        {
            get
            {
                return _EmailAttachments;
            }
            set
            {
                _EmailAttachments = value;
                NotifyPropertyChanged( x => x.EmailAttachments);
            }
        }

		 private void OnEmailAttachmentsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => EmailAttachments.Refresh()).ConfigureAwait(false);
            SelectedEmailAttachments.Clear();
            NotifyPropertyChanged(x => SelectedEmailAttachments);
            BeginSendMessage(MessageToken.SelectedEmailAttachmentsChanged, new NotificationEventArgs(MessageToken.SelectedEmailAttachmentsChanged));
        }

		void EmailAttachments_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (EmailAttachments.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => EmailAttachments);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("EmailAttachments | Error occured..." + EmailAttachments.LastLoadingError.Message);
                    NotifyPropertyChanged(x => EmailAttachments);
                    break;
            }
           
        }

		
		public readonly EmailAttachmentsVirturalListLoader vloader = new EmailAttachmentsVirturalListLoader();

		private ObservableCollection<EmailAttachments> _selectedEmailAttachments = new ObservableCollection<EmailAttachments>();
        public ObservableCollection<EmailAttachments> SelectedEmailAttachments
        {
            get
            {
                return _selectedEmailAttachments;
            }
            set
            {
                _selectedEmailAttachments = value;
				BeginSendMessage(MessageToken.SelectedEmailAttachmentsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedEmailAttachmentsChanged));
				 NotifyPropertyChanged(x => SelectedEmailAttachments);
            }
        }

        internal virtual void OnCurrentEmailAttachmentsChanged(object sender, NotificationEventArgs<EmailAttachments> e)
        {
            if(BaseViewModel.Instance.CurrentEmailAttachments != null) BaseViewModel.Instance.CurrentEmailAttachments.PropertyChanged += CurrentEmailAttachments__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentEmailAttachments);
        }   

            void CurrentEmailAttachments__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddAttachments")
                   // {
                   //    if(Attachments.Contains(CurrentEmailAttachments.Attachments) == false) Attachments.Add(CurrentEmailAttachments.Attachments);
                    //}
                    //if (e.PropertyName == "AddEmails")
                   // {
                   //    if(Emails.Contains(CurrentEmailAttachments.Emails) == false) Emails.Add(CurrentEmailAttachments.Emails);
                    //}
                 } 
        internal virtual void OnEmailAttachmentsChanged(object sender, NotificationEventArgs e)
        {
            _EmailAttachments.Refresh();
			NotifyPropertyChanged(x => this.EmailAttachments);
        }   


 	
		 internal virtual void OnCurrentAttachmentsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Attachments> e)
			{
			if(ViewCurrentAttachments == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("AttachmentId == {0}", e.Data.Id.ToString());
                 }

				EmailAttachments.Refresh();
				NotifyPropertyChanged(x => this.EmailAttachments);
                // SendMessage(MessageToken.EmailAttachmentsChanged, new NotificationEventArgs(MessageToken.EmailAttachmentsChanged));
                                          
                BaseViewModel.Instance.CurrentEmailAttachments = null;
			}
	
		 internal virtual void OnCurrentEmailsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Emails> e)
			{
			if(ViewCurrentEmails == false) return;
			if (e.Data == null || e.Data.EmailId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				
				vloader.FilterExpression = string.Format("EmailId == \"{0}\"", e.Data.EmailId.ToString());
                }

				EmailAttachments.Refresh();
				NotifyPropertyChanged(x => this.EmailAttachments);
                // SendMessage(MessageToken.EmailAttachmentsChanged, new NotificationEventArgs(MessageToken.EmailAttachmentsChanged));
                                          
                BaseViewModel.Instance.CurrentEmailAttachments = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentAttachments = false;
         public bool ViewCurrentAttachments
         {
             get
             {
                 return _viewCurrentAttachments;
             }
             set
             {
                 _viewCurrentAttachments = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAttachments);
                FilterData();
             }
         }
 	
		 bool _viewCurrentEmails = false;
         public bool ViewCurrentEmails
         {
             get
             {
                 return _viewCurrentEmails;
             }
             set
             {
                 _viewCurrentEmails = value;
                 NotifyPropertyChanged(x => x.ViewCurrentEmails);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_EmailAttachments.Refresh();
			NotifyPropertyChanged(x => this.EmailAttachments);
		}

		public async Task SelectAll()
        {
            IEnumerable<EmailAttachments> lst = null;
            using (var ctx = new EmailAttachmentsRepository())
            {
                lst = await ctx.GetEmailAttachmentsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedEmailAttachments = new ObservableCollection<EmailAttachments>(lst);
        }

 

		private string _emailIdFilter;
        public string EmailIdFilter
        {
            get
            {
                return _emailIdFilter;
            }
            set
            {
                _emailIdFilter = value;
				NotifyPropertyChanged(x => EmailIdFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _documentSpecificFilter;
        public Boolean? DocumentSpecificFilter
        {
            get
            {
                return _documentSpecificFilter;
            }
            set
            {
                _documentSpecificFilter = value;
				NotifyPropertyChanged(x => DocumentSpecificFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			EmailAttachments.Refresh();
			NotifyPropertyChanged(x => this.EmailAttachments);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(EmailIdFilter) == false)
						res.Append(" && " + string.Format("EmailId.Contains(\"{0}\")",  EmailIdFilter));						
 

									if(DocumentSpecificFilter.HasValue)
						res.Append(" && " + string.Format("DocumentSpecific == {0}",  DocumentSpecificFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<EmailAttachments> lst = null;
            using (var ctx = new EmailAttachmentsRepository())
            {
                lst = await ctx.GetEmailAttachmentsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<EmailAttachmentsExcelLine, List<EmailAttachmentsExcelLine>>
            {
                dataToPrint = lst.Select(x => new EmailAttachmentsExcelLine
                {
 
                    EmailId = x.EmailId ,
                    
 
                    DocumentSpecific = x.DocumentSpecific 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class EmailAttachmentsExcelLine
        {
		 
                    public string EmailId { get; set; } 
                    
 
                    public bool DocumentSpecific { get; set; } 
                    
        }

		
    }
}
		

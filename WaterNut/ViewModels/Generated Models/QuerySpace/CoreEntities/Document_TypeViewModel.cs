// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class Document_TypeViewModel_AutoGen : ViewModelBase<Document_TypeViewModel_AutoGen>
	{

       private static readonly Document_TypeViewModel_AutoGen instance;
       static Document_TypeViewModel_AutoGen()
        {
            instance = new Document_TypeViewModel_AutoGen();
        }

       public static Document_TypeViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public Document_TypeViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<Document_Type>(MessageToken.CurrentDocument_TypeChanged, OnCurrentDocument_TypeChanged);
            RegisterToReceiveMessages(MessageToken.Document_TypeChanged, OnDocument_TypeChanged);
			RegisterToReceiveMessages(MessageToken.Document_TypeFilterExpressionChanged, OnDocument_TypeFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			Document_Type = new VirtualList<Document_Type>(vloader);
			Document_Type.LoadingStateChanged += Document_Type_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(Document_Type, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<Document_Type> _Document_Type = null;
        public VirtualList<Document_Type> Document_Type
        {
            get
            {
                return _Document_Type;
            }
            set
            {
                _Document_Type = value;
                NotifyPropertyChanged( x => x.Document_Type);
            }
        }

		 private void OnDocument_TypeFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => Document_Type.Refresh()).ConfigureAwait(false);
            SelectedDocument_Type.Clear();
            NotifyPropertyChanged(x => SelectedDocument_Type);
            BeginSendMessage(MessageToken.SelectedDocument_TypeChanged, new NotificationEventArgs(MessageToken.SelectedDocument_TypeChanged));
        }

		void Document_Type_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (Document_Type.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => Document_Type);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("Document_Type | Error occured..." + Document_Type.LastLoadingError.Message);
                    NotifyPropertyChanged(x => Document_Type);
                    break;
            }
           
        }

		
		public readonly Document_TypeVirturalListLoader vloader = new Document_TypeVirturalListLoader();

		private ObservableCollection<Document_Type> _selectedDocument_Type = new ObservableCollection<Document_Type>();
        public ObservableCollection<Document_Type> SelectedDocument_Type
        {
            get
            {
                return _selectedDocument_Type;
            }
            set
            {
                _selectedDocument_Type = value;
				BeginSendMessage(MessageToken.SelectedDocument_TypeChanged,
                                    new NotificationEventArgs(MessageToken.SelectedDocument_TypeChanged));
				 NotifyPropertyChanged(x => SelectedDocument_Type);
            }
        }

        internal virtual void OnCurrentDocument_TypeChanged(object sender, NotificationEventArgs<Document_Type> e)
        {
            if(BaseViewModel.Instance.CurrentDocument_Type != null) BaseViewModel.Instance.CurrentDocument_Type.PropertyChanged += CurrentDocument_Type__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentDocument_Type);
        }   

            void CurrentDocument_Type__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnDocument_TypeChanged(object sender, NotificationEventArgs e)
        {
            _Document_Type.Refresh();
			NotifyPropertyChanged(x => this.Document_Type);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_Document_Type.Refresh();
			NotifyPropertyChanged(x => this.Document_Type);
		}

		public async Task SelectAll()
        {
            IEnumerable<Document_Type> lst = null;
            using (var ctx = new Document_TypeRepository())
            {
                lst = await ctx.GetDocument_TypeByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedDocument_Type = new ObservableCollection<Document_Type>(lst);
        }

 

		private string _type_of_declarationFilter;
        public string Type_of_declarationFilter
        {
            get
            {
                return _type_of_declarationFilter;
            }
            set
            {
                _type_of_declarationFilter = value;
				NotifyPropertyChanged(x => Type_of_declarationFilter);
                FilterData();
                
            }
        }	

 

		private string _declaration_gen_procedure_codeFilter;
        public string Declaration_gen_procedure_codeFilter
        {
            get
            {
                return _declaration_gen_procedure_codeFilter;
            }
            set
            {
                _declaration_gen_procedure_codeFilter = value;
				NotifyPropertyChanged(x => Declaration_gen_procedure_codeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			Document_Type.Refresh();
			NotifyPropertyChanged(x => this.Document_Type);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(Type_of_declarationFilter) == false)
						res.Append(" && " + string.Format("Type_of_declaration.Contains(\"{0}\")",  Type_of_declarationFilter));						
 

									if(string.IsNullOrEmpty(Declaration_gen_procedure_codeFilter) == false)
						res.Append(" && " + string.Format("Declaration_gen_procedure_code.Contains(\"{0}\")",  Declaration_gen_procedure_codeFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<Document_Type> lst = null;
            using (var ctx = new Document_TypeRepository())
            {
                lst = await ctx.GetDocument_TypeByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<Document_TypeExcelLine, List<Document_TypeExcelLine>>
            {
                dataToPrint = lst.Select(x => new Document_TypeExcelLine
                {
 
                    Type_of_declaration = x.Type_of_declaration ,
                    
 
                    Declaration_gen_procedure_code = x.Declaration_gen_procedure_code 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class Document_TypeExcelLine
        {
		 
                    public string Type_of_declaration { get; set; } 
                    
 
                    public string Declaration_gen_procedure_code { get; set; } 
                    
        }

		
    }
}
		

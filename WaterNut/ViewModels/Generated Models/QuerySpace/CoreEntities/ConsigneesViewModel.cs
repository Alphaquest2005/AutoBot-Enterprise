// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class ConsigneesViewModel_AutoGen : ViewModelBase<ConsigneesViewModel_AutoGen>
	{

       private static readonly ConsigneesViewModel_AutoGen instance;
       static ConsigneesViewModel_AutoGen()
        {
            instance = new ConsigneesViewModel_AutoGen();
        }

       public static ConsigneesViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public ConsigneesViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<Consignees>(MessageToken.CurrentConsigneesChanged, OnCurrentConsigneesChanged);
            RegisterToReceiveMessages(MessageToken.ConsigneesChanged, OnConsigneesChanged);
			RegisterToReceiveMessages(MessageToken.ConsigneesFilterExpressionChanged, OnConsigneesFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			Consignees = new VirtualList<Consignees>(vloader);
			Consignees.LoadingStateChanged += Consignees_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(Consignees, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<Consignees> _Consignees = null;
        public VirtualList<Consignees> Consignees
        {
            get
            {
                return _Consignees;
            }
            set
            {
                _Consignees = value;
                NotifyPropertyChanged( x => x.Consignees);
            }
        }

		 private void OnConsigneesFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => Consignees.Refresh()).ConfigureAwait(false);
            SelectedConsignees.Clear();
            NotifyPropertyChanged(x => SelectedConsignees);
            BeginSendMessage(MessageToken.SelectedConsigneesChanged, new NotificationEventArgs(MessageToken.SelectedConsigneesChanged));
        }

		void Consignees_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (Consignees.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => Consignees);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("Consignees | Error occured..." + Consignees.LastLoadingError.Message);
                    NotifyPropertyChanged(x => Consignees);
                    break;
            }
           
        }

		
		public readonly ConsigneesVirturalListLoader vloader = new ConsigneesVirturalListLoader();

		private ObservableCollection<Consignees> _selectedConsignees = new ObservableCollection<Consignees>();
        public ObservableCollection<Consignees> SelectedConsignees
        {
            get
            {
                return _selectedConsignees;
            }
            set
            {
                _selectedConsignees = value;
				BeginSendMessage(MessageToken.SelectedConsigneesChanged,
                                    new NotificationEventArgs(MessageToken.SelectedConsigneesChanged));
				 NotifyPropertyChanged(x => SelectedConsignees);
            }
        }

        internal virtual void OnCurrentConsigneesChanged(object sender, NotificationEventArgs<Consignees> e)
        {
            if(BaseViewModel.Instance.CurrentConsignees != null) BaseViewModel.Instance.CurrentConsignees.PropertyChanged += CurrentConsignees__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentConsignees);
        }   

            void CurrentConsignees__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentConsignees.ApplicationSettings) == false) ApplicationSettings.Add(CurrentConsignees.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnConsigneesChanged(object sender, NotificationEventArgs e)
        {
            _Consignees.Refresh();
			NotifyPropertyChanged(x => this.Consignees);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    Consignees.Refresh();
					NotifyPropertyChanged(x => this.Consignees);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_Consignees.Refresh();
			NotifyPropertyChanged(x => this.Consignees);
		}

		public async Task SelectAll()
        {
            IEnumerable<Consignees> lst = null;
            using (var ctx = new ConsigneesRepository())
            {
                lst = await ctx.GetConsigneesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedConsignees = new ObservableCollection<Consignees>(lst);
        }

 

		private string _consigneeNameFilter;
        public string ConsigneeNameFilter
        {
            get
            {
                return _consigneeNameFilter;
            }
            set
            {
                _consigneeNameFilter = value;
				NotifyPropertyChanged(x => ConsigneeNameFilter);
                FilterData();
                
            }
        }	

 

		private string _consigneeCodeFilter;
        public string ConsigneeCodeFilter
        {
            get
            {
                return _consigneeCodeFilter;
            }
            set
            {
                _consigneeCodeFilter = value;
				NotifyPropertyChanged(x => ConsigneeCodeFilter);
                FilterData();
                
            }
        }	

 

		private string _addressFilter;
        public string AddressFilter
        {
            get
            {
                return _addressFilter;
            }
            set
            {
                _addressFilter = value;
				NotifyPropertyChanged(x => AddressFilter);
                FilterData();
                
            }
        }	

 

		private string _countryCodeFilter;
        public string CountryCodeFilter
        {
            get
            {
                return _countryCodeFilter;
            }
            set
            {
                _countryCodeFilter = value;
				NotifyPropertyChanged(x => CountryCodeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			Consignees.Refresh();
			NotifyPropertyChanged(x => this.Consignees);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(ConsigneeNameFilter) == false)
						res.Append(" && " + string.Format("ConsigneeName.Contains(\"{0}\")",  ConsigneeNameFilter));						
 

									if(string.IsNullOrEmpty(ConsigneeCodeFilter) == false)
						res.Append(" && " + string.Format("ConsigneeCode.Contains(\"{0}\")",  ConsigneeCodeFilter));						
 

									if(string.IsNullOrEmpty(AddressFilter) == false)
						res.Append(" && " + string.Format("Address.Contains(\"{0}\")",  AddressFilter));						
 

									if(string.IsNullOrEmpty(CountryCodeFilter) == false)
						res.Append(" && " + string.Format("CountryCode.Contains(\"{0}\")",  CountryCodeFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<Consignees> lst = null;
            using (var ctx = new ConsigneesRepository())
            {
                lst = await ctx.GetConsigneesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<ConsigneesExcelLine, List<ConsigneesExcelLine>>
            {
                dataToPrint = lst.Select(x => new ConsigneesExcelLine
                {
 
                    ConsigneeName = x.ConsigneeName ,
                    
 
                    ConsigneeCode = x.ConsigneeCode ,
                    
 
                    Address = x.Address ,
                    
 
                    CountryCode = x.CountryCode 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class ConsigneesExcelLine
        {
		 
                    public string ConsigneeName { get; set; } 
                    
 
                    public string ConsigneeCode { get; set; } 
                    
 
                    public string Address { get; set; } 
                    
 
                    public string CountryCode { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class AsycudaItemBasicInfoViewModel_AutoGen : ViewModelBase<AsycudaItemBasicInfoViewModel_AutoGen>
	{

       private static readonly AsycudaItemBasicInfoViewModel_AutoGen instance;
       static AsycudaItemBasicInfoViewModel_AutoGen()
        {
            instance = new AsycudaItemBasicInfoViewModel_AutoGen();
        }

       public static AsycudaItemBasicInfoViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaItemBasicInfoViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaItemBasicInfo>(MessageToken.CurrentAsycudaItemBasicInfoChanged, OnCurrentAsycudaItemBasicInfoChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaItemBasicInfoChanged, OnAsycudaItemBasicInfoChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaItemBasicInfoFilterExpressionChanged, OnAsycudaItemBasicInfoFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			AsycudaItemBasicInfo = new VirtualList<AsycudaItemBasicInfo>(vloader);
			AsycudaItemBasicInfo.LoadingStateChanged += AsycudaItemBasicInfo_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaItemBasicInfo, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaItemBasicInfo> _AsycudaItemBasicInfo = null;
        public VirtualList<AsycudaItemBasicInfo> AsycudaItemBasicInfo
        {
            get
            {
                return _AsycudaItemBasicInfo;
            }
            set
            {
                _AsycudaItemBasicInfo = value;
                NotifyPropertyChanged( x => x.AsycudaItemBasicInfo);
            }
        }

		 private void OnAsycudaItemBasicInfoFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => AsycudaItemBasicInfo.Refresh()).ConfigureAwait(false);
            SelectedAsycudaItemBasicInfo.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaItemBasicInfo);
            BeginSendMessage(MessageToken.SelectedAsycudaItemBasicInfoChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaItemBasicInfoChanged));
        }

		void AsycudaItemBasicInfo_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaItemBasicInfo.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaItemBasicInfo);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaItemBasicInfo | Error occured..." + AsycudaItemBasicInfo.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaItemBasicInfo);
                    break;
            }
           
        }

		
		public readonly AsycudaItemBasicInfoVirturalListLoader vloader = new AsycudaItemBasicInfoVirturalListLoader();

		private ObservableCollection<AsycudaItemBasicInfo> _selectedAsycudaItemBasicInfo = new ObservableCollection<AsycudaItemBasicInfo>();
        public ObservableCollection<AsycudaItemBasicInfo> SelectedAsycudaItemBasicInfo
        {
            get
            {
                return _selectedAsycudaItemBasicInfo;
            }
            set
            {
                _selectedAsycudaItemBasicInfo = value;
				BeginSendMessage(MessageToken.SelectedAsycudaItemBasicInfoChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaItemBasicInfoChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaItemBasicInfo);
            }
        }

        internal virtual void OnCurrentAsycudaItemBasicInfoChanged(object sender, NotificationEventArgs<AsycudaItemBasicInfo> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaItemBasicInfo != null) BaseViewModel.Instance.CurrentAsycudaItemBasicInfo.PropertyChanged += CurrentAsycudaItemBasicInfo__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaItemBasicInfo);
        }   

            void CurrentAsycudaItemBasicInfo__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnAsycudaItemBasicInfoChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaItemBasicInfo.Refresh();
			NotifyPropertyChanged(x => this.AsycudaItemBasicInfo);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_AsycudaItemBasicInfo.Refresh();
			NotifyPropertyChanged(x => this.AsycudaItemBasicInfo);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaItemBasicInfo> lst = null;
            using (var ctx = new AsycudaItemBasicInfoRepository())
            {
                lst = await ctx.GetAsycudaItemBasicInfoByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaItemBasicInfo = new ObservableCollection<AsycudaItemBasicInfo>(lst);
        }

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private Double? _itemQuantityFilter;
        public Double? ItemQuantityFilter
        {
            get
            {
                return _itemQuantityFilter;
            }
            set
            {
                _itemQuantityFilter = value;
				NotifyPropertyChanged(x => ItemQuantityFilter);
                FilterData();
                
            }
        }	

 

		private Double? _dPQtyAllocatedFilter;
        public Double? DPQtyAllocatedFilter
        {
            get
            {
                return _dPQtyAllocatedFilter;
            }
            set
            {
                _dPQtyAllocatedFilter = value;
				NotifyPropertyChanged(x => DPQtyAllocatedFilter);
                FilterData();
                
            }
        }	

 

		private Double? _dFQtyAllocatedFilter;
        public Double? DFQtyAllocatedFilter
        {
            get
            {
                return _dFQtyAllocatedFilter;
            }
            set
            {
                _dFQtyAllocatedFilter = value;
				NotifyPropertyChanged(x => DFQtyAllocatedFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isAssessedFilter;
        public Boolean? IsAssessedFilter
        {
            get
            {
                return _isAssessedFilter;
            }
            set
            {
                _isAssessedFilter = value;
				NotifyPropertyChanged(x => IsAssessedFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _lineNumberFilter;
        public Int32? LineNumberFilter
        {
            get
            {
                return _lineNumberFilter;
            }
            set
            {
                _lineNumberFilter = value;
				NotifyPropertyChanged(x => LineNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _cNumberFilter;
        public string CNumberFilter
        {
            get
            {
                return _cNumberFilter;
            }
            set
            {
                _cNumberFilter = value;
				NotifyPropertyChanged(x => CNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartRegistrationDateFilter
        {
            get
            {
                return _startRegistrationDateFilter;
            }
            set
            {
                _startRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndRegistrationDateFilter
        {
            get
            {
                return _endRegistrationDateFilter;
            }
            set
            {
                _endRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _registrationDateFilter;
        public DateTime? RegistrationDateFilter
        {
            get
            {
                return _registrationDateFilter;
            }
            set
            {
                _registrationDateFilter = value;
				NotifyPropertyChanged(x => RegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private string _commercial_DescriptionFilter;
        public string Commercial_DescriptionFilter
        {
            get
            {
                return _commercial_DescriptionFilter;
            }
            set
            {
                _commercial_DescriptionFilter = value;
				NotifyPropertyChanged(x => Commercial_DescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _tariffCodeFilter;
        public string TariffCodeFilter
        {
            get
            {
                return _tariffCodeFilter;
            }
            set
            {
                _tariffCodeFilter = value;
				NotifyPropertyChanged(x => TariffCodeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaItemBasicInfo.Refresh();
			NotifyPropertyChanged(x => this.AsycudaItemBasicInfo);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

					if(ItemQuantityFilter.HasValue)
						res.Append(" && " + string.Format("ItemQuantity == {0}",  ItemQuantityFilter.ToString()));				 

					if(DPQtyAllocatedFilter.HasValue)
						res.Append(" && " + string.Format("DPQtyAllocated == {0}",  DPQtyAllocatedFilter.ToString()));				 

					if(DFQtyAllocatedFilter.HasValue)
						res.Append(" && " + string.Format("DFQtyAllocated == {0}",  DFQtyAllocatedFilter.ToString()));				 

									if(IsAssessedFilter.HasValue)
						res.Append(" && " + string.Format("IsAssessed == {0}",  IsAssessedFilter));						
 

					if(LineNumberFilter.HasValue)
						res.Append(" && " + string.Format("LineNumber == {0}",  LineNumberFilter.ToString()));				 

									if(string.IsNullOrEmpty(CNumberFilter) == false)
						res.Append(" && " + string.Format("CNumber.Contains(\"{0}\")",  CNumberFilter));						
 

 

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("RegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_registrationDateFilter).Date != DateTime.MinValue)
						{
							if(RegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate == \"{0}\"",  Convert.ToDateTime(RegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(Commercial_DescriptionFilter) == false)
						res.Append(" && " + string.Format("Commercial_Description.Contains(\"{0}\")",  Commercial_DescriptionFilter));						
 

									if(string.IsNullOrEmpty(TariffCodeFilter) == false)
						res.Append(" && " + string.Format("TariffCode.Contains(\"{0}\")",  TariffCodeFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaItemBasicInfo> lst = null;
            using (var ctx = new AsycudaItemBasicInfoRepository())
            {
                lst = await ctx.GetAsycudaItemBasicInfoByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaItemBasicInfoExcelLine, List<AsycudaItemBasicInfoExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaItemBasicInfoExcelLine
                {
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    ItemQuantity = x.ItemQuantity ,
                    
 
                    DPQtyAllocated = x.DPQtyAllocated ,
                    
 
                    DFQtyAllocated = x.DFQtyAllocated ,
                    
 
                    IsAssessed = x.IsAssessed ,
                    
 
                    LineNumber = x.LineNumber ,
                    
 
                    CNumber = x.CNumber ,
                    
 
                    RegistrationDate = x.RegistrationDate ,
                    
 
                    Commercial_Description = x.Commercial_Description ,
                    
 
                    TariffCode = x.TariffCode 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class AsycudaItemBasicInfoExcelLine
        {
		 
                    public string ItemNumber { get; set; } 
                    
 
                    public Nullable<double> ItemQuantity { get; set; } 
                    
 
                    public double DPQtyAllocated { get; set; } 
                    
 
                    public double DFQtyAllocated { get; set; } 
                    
 
                    public Nullable<bool> IsAssessed { get; set; } 
                    
 
                    public int LineNumber { get; set; } 
                    
 
                    public string CNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> RegistrationDate { get; set; } 
                    
 
                    public string Commercial_Description { get; set; } 
                    
 
                    public string TariffCode { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class FileTypesViewModel_AutoGen : ViewModelBase<FileTypesViewModel_AutoGen>
	{

       private static readonly FileTypesViewModel_AutoGen instance;
       static FileTypesViewModel_AutoGen()
        {
            instance = new FileTypesViewModel_AutoGen();
        }

       public static FileTypesViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public FileTypesViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<FileTypes>(MessageToken.CurrentFileTypesChanged, OnCurrentFileTypesChanged);
            RegisterToReceiveMessages(MessageToken.FileTypesChanged, OnFileTypesChanged);
			RegisterToReceiveMessages(MessageToken.FileTypesFilterExpressionChanged, OnFileTypesFilterExpressionChanged);

 
			RegisterToReceiveMessages<ApplicationSettings>(MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
 
			RegisterToReceiveMessages<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, OnCurrentAsycudaDocumentSetExChanged);
 
			RegisterToReceiveMessages<FileGroups>(MessageToken.CurrentFileGroupsChanged, OnCurrentFileGroupsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			FileTypes = new VirtualList<FileTypes>(vloader);
			FileTypes.LoadingStateChanged += FileTypes_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(FileTypes, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<FileTypes> _FileTypes = null;
        public VirtualList<FileTypes> FileTypes
        {
            get
            {
                return _FileTypes;
            }
            set
            {
                _FileTypes = value;
            }
        }

		 private void OnFileTypesFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			FileTypes.Refresh();
            SelectedFileTypes.Clear();
            NotifyPropertyChanged(x => SelectedFileTypes);
            BeginSendMessage(MessageToken.SelectedFileTypesChanged, new NotificationEventArgs(MessageToken.SelectedFileTypesChanged));
        }

		void FileTypes_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (FileTypes.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => FileTypes);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("FileTypes | Error occured..." + FileTypes.LastLoadingError.Message);
                    NotifyPropertyChanged(x => FileTypes);
                    break;
            }
           
        }

		
		public readonly FileTypesVirturalListLoader vloader = new FileTypesVirturalListLoader();

		private ObservableCollection<FileTypes> _selectedFileTypes = new ObservableCollection<FileTypes>();
        public ObservableCollection<FileTypes> SelectedFileTypes
        {
            get
            {
                return _selectedFileTypes;
            }
            set
            {
                _selectedFileTypes = value;
				BeginSendMessage(MessageToken.SelectedFileTypesChanged,
                                    new NotificationEventArgs(MessageToken.SelectedFileTypesChanged));
				 NotifyPropertyChanged(x => SelectedFileTypes);
            }
        }

        internal virtual void OnCurrentFileTypesChanged(object sender, NotificationEventArgs<FileTypes> e)
        {
            if(BaseViewModel.Instance.CurrentFileTypes != null) BaseViewModel.Instance.CurrentFileTypes.PropertyChanged += CurrentFileTypes__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentFileTypes);
        }   

            void CurrentFileTypes__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentFileTypes.ApplicationSettings) == false) ApplicationSettings.Add(CurrentFileTypes.ApplicationSettings);
                    //}
                    //if (e.PropertyName == "AddAsycudaDocumentSetEx")
                   // {
                   //    if(AsycudaDocumentSetExs.Contains(CurrentFileTypes.AsycudaDocumentSetEx) == false) AsycudaDocumentSetExs.Add(CurrentFileTypes.AsycudaDocumentSetEx);
                    //}
                    //if (e.PropertyName == "AddFileGroups")
                   // {
                   //    if(FileGroups.Contains(CurrentFileTypes.FileGroups) == false) FileGroups.Add(CurrentFileTypes.FileGroups);
                    //}
                    //if (e.PropertyName == "AddParentFileTypes")
                   // {
                   //    if(FileTypes.Contains(CurrentFileTypes.ParentFileTypes) == false) FileTypes.Add(CurrentFileTypes.ParentFileTypes);
                    //}
                 } 
        internal virtual void OnFileTypesChanged(object sender, NotificationEventArgs e)
        {
            _FileTypes.Refresh();
			NotifyPropertyChanged(x => this.FileTypes);
        }   


 	
		 internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
			{
			if(ViewCurrentApplicationSettings == false) return;
			if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                 }

				FileTypes.Refresh();
				NotifyPropertyChanged(x => this.FileTypes);
                // SendMessage(MessageToken.FileTypesChanged, new NotificationEventArgs(MessageToken.FileTypesChanged));
                                          
                BaseViewModel.Instance.CurrentFileTypes = null;
			}
	
		 internal virtual void OnCurrentAsycudaDocumentSetExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEx> e)
			{
			if(ViewCurrentAsycudaDocumentSetEx == false) return;
			if (e.Data == null || e.Data.AsycudaDocumentSetId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("AsycudaDocumentSetId == {0}", e.Data.AsycudaDocumentSetId.ToString());
                 }

				FileTypes.Refresh();
				NotifyPropertyChanged(x => this.FileTypes);
                // SendMessage(MessageToken.FileTypesChanged, new NotificationEventArgs(MessageToken.FileTypesChanged));
                                          
                BaseViewModel.Instance.CurrentFileTypes = null;
			}
	
		 internal virtual void OnCurrentFileGroupsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileGroups> e)
			{
			if(ViewCurrentFileGroups == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("FileGroupId == {0}", e.Data.Id.ToString());
                 }

				FileTypes.Refresh();
				NotifyPropertyChanged(x => this.FileTypes);
                // SendMessage(MessageToken.FileTypesChanged, new NotificationEventArgs(MessageToken.FileTypesChanged));
                                          
                BaseViewModel.Instance.CurrentFileTypes = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentApplicationSettings = false;
         public bool ViewCurrentApplicationSettings
         {
             get
             {
                 return _viewCurrentApplicationSettings;
             }
             set
             {
                 _viewCurrentApplicationSettings = value;
                 NotifyPropertyChanged(x => x.ViewCurrentApplicationSettings);
                FilterData();
             }
         }
 	
		 bool _viewCurrentAsycudaDocumentSetEx = false;
         public bool ViewCurrentAsycudaDocumentSetEx
         {
             get
             {
                 return _viewCurrentAsycudaDocumentSetEx;
             }
             set
             {
                 _viewCurrentAsycudaDocumentSetEx = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocumentSetEx);
                FilterData();
             }
         }
 	
		 bool _viewCurrentFileGroups = false;
         public bool ViewCurrentFileGroups
         {
             get
             {
                 return _viewCurrentFileGroups;
             }
             set
             {
                 _viewCurrentFileGroups = value;
                 NotifyPropertyChanged(x => x.ViewCurrentFileGroups);
                FilterData();
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_FileTypes.Refresh();
			NotifyPropertyChanged(x => this.FileTypes);
		}

		public async Task SelectAll()
        {
            IEnumerable<FileTypes> lst = null;
            using (var ctx = new FileTypesRepository())
            {
                lst = await ctx.GetFileTypesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedFileTypes = new ObservableCollection<FileTypes>(lst);
        }

 

		private string _filePatternFilter;
        public string FilePatternFilter
        {
            get
            {
                return _filePatternFilter;
            }
            set
            {
                _filePatternFilter = value;
				NotifyPropertyChanged(x => FilePatternFilter);
                FilterData();
                
            }
        }	

 

		private string _typeFilter;
        public string TypeFilter
        {
            get
            {
                return _typeFilter;
            }
            set
            {
                _typeFilter = value;
				NotifyPropertyChanged(x => TypeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _createDocumentSetFilter;
        public Boolean? CreateDocumentSetFilter
        {
            get
            {
                return _createDocumentSetFilter;
            }
            set
            {
                _createDocumentSetFilter = value;
				NotifyPropertyChanged(x => CreateDocumentSetFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _documentSpecificFilter;
        public Boolean? DocumentSpecificFilter
        {
            get
            {
                return _documentSpecificFilter;
            }
            set
            {
                _documentSpecificFilter = value;
				NotifyPropertyChanged(x => DocumentSpecificFilter);
                FilterData();
                
            }
        }	

 

		private string _documentCodeFilter;
        public string DocumentCodeFilter
        {
            get
            {
                return _documentCodeFilter;
            }
            set
            {
                _documentCodeFilter = value;
				NotifyPropertyChanged(x => DocumentCodeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _replyToMailFilter;
        public Boolean? ReplyToMailFilter
        {
            get
            {
                return _replyToMailFilter;
            }
            set
            {
                _replyToMailFilter = value;
				NotifyPropertyChanged(x => ReplyToMailFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _mergeEmailsFilter;
        public Boolean? MergeEmailsFilter
        {
            get
            {
                return _mergeEmailsFilter;
            }
            set
            {
                _mergeEmailsFilter = value;
				NotifyPropertyChanged(x => MergeEmailsFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _copyEntryDataFilter;
        public Boolean? CopyEntryDataFilter
        {
            get
            {
                return _copyEntryDataFilter;
            }
            set
            {
                _copyEntryDataFilter = value;
				NotifyPropertyChanged(x => CopyEntryDataFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _overwriteFilesFilter;
        public Boolean? OverwriteFilesFilter
        {
            get
            {
                return _overwriteFilesFilter;
            }
            set
            {
                _overwriteFilesFilter = value;
				NotifyPropertyChanged(x => OverwriteFilesFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _hasFilesFilter;
        public Boolean? HasFilesFilter
        {
            get
            {
                return _hasFilesFilter;
            }
            set
            {
                _hasFilesFilter = value;
				NotifyPropertyChanged(x => HasFilesFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _replicateHeaderRowFilter;
        public Boolean? ReplicateHeaderRowFilter
        {
            get
            {
                return _replicateHeaderRowFilter;
            }
            set
            {
                _replicateHeaderRowFilter = value;
				NotifyPropertyChanged(x => ReplicateHeaderRowFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			FileTypes.Refresh();
			NotifyPropertyChanged(x => this.FileTypes);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(FilePatternFilter) == false)
						res.Append(" && " + string.Format("FilePattern.Contains(\"{0}\")",  FilePatternFilter));						
 

									if(string.IsNullOrEmpty(TypeFilter) == false)
						res.Append(" && " + string.Format("Type.Contains(\"{0}\")",  TypeFilter));						
 

									if(CreateDocumentSetFilter.HasValue)
						res.Append(" && " + string.Format("CreateDocumentSet == {0}",  CreateDocumentSetFilter));						
 

									if(DocumentSpecificFilter.HasValue)
						res.Append(" && " + string.Format("DocumentSpecific == {0}",  DocumentSpecificFilter));						
 

									if(string.IsNullOrEmpty(DocumentCodeFilter) == false)
						res.Append(" && " + string.Format("DocumentCode.Contains(\"{0}\")",  DocumentCodeFilter));						
 

									if(ReplyToMailFilter.HasValue)
						res.Append(" && " + string.Format("ReplyToMail == {0}",  ReplyToMailFilter));						
 

									if(MergeEmailsFilter.HasValue)
						res.Append(" && " + string.Format("MergeEmails == {0}",  MergeEmailsFilter));						
 

									if(CopyEntryDataFilter.HasValue)
						res.Append(" && " + string.Format("CopyEntryData == {0}",  CopyEntryDataFilter));						
 

									if(OverwriteFilesFilter.HasValue)
						res.Append(" && " + string.Format("OverwriteFiles == {0}",  OverwriteFilesFilter));						
 

									if(HasFilesFilter.HasValue)
						res.Append(" && " + string.Format("HasFiles == {0}",  HasFilesFilter));						
 

									if(ReplicateHeaderRowFilter.HasValue)
						res.Append(" && " + string.Format("ReplicateHeaderRow == {0}",  ReplicateHeaderRowFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<FileTypes> lst = null;
            using (var ctx = new FileTypesRepository())
            {
                lst = await ctx.GetFileTypesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<FileTypesExcelLine, List<FileTypesExcelLine>>
            {
                dataToPrint = lst.Select(x => new FileTypesExcelLine
                {
 
                    FilePattern = x.FilePattern ,
                    
 
                    Type = x.Type ,
                    
 
                    CreateDocumentSet = x.CreateDocumentSet ,
                    
 
                    DocumentSpecific = x.DocumentSpecific ,
                    
 
                    DocumentCode = x.DocumentCode ,
                    
 
                    ReplyToMail = x.ReplyToMail ,
                    
 
                    MergeEmails = x.MergeEmails ,
                    
 
                    CopyEntryData = x.CopyEntryData ,
                    
 
                    OverwriteFiles = x.OverwriteFiles ,
                    
 
                    HasFiles = x.HasFiles ,
                    
 
                    ReplicateHeaderRow = x.ReplicateHeaderRow 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class FileTypesExcelLine
        {
		 
                    public string FilePattern { get; set; } 
                    
 
                    public string Type { get; set; } 
                    
 
                    public bool CreateDocumentSet { get; set; } 
                    
 
                    public bool DocumentSpecific { get; set; } 
                    
 
                    public string DocumentCode { get; set; } 
                    
 
                    public bool ReplyToMail { get; set; } 
                    
 
                    public bool MergeEmails { get; set; } 
                    
 
                    public bool CopyEntryData { get; set; } 
                    
 
                    public Nullable<bool> OverwriteFiles { get; set; } 
                    
 
                    public Nullable<bool> HasFiles { get; set; } 
                    
 
                    public Nullable<bool> ReplicateHeaderRow { get; set; } 
                    
        }

		
    }
}
		

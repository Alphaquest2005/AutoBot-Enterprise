// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_LicenceAvailableQtyViewModel_AutoGen : ViewModelBase<TODO_LicenceAvailableQtyViewModel_AutoGen>
	{

       private static readonly TODO_LicenceAvailableQtyViewModel_AutoGen instance;
       static TODO_LicenceAvailableQtyViewModel_AutoGen()
        {
            instance = new TODO_LicenceAvailableQtyViewModel_AutoGen();
        }

       public static TODO_LicenceAvailableQtyViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_LicenceAvailableQtyViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_LicenceAvailableQty>(MessageToken.CurrentTODO_LicenceAvailableQtyChanged, OnCurrentTODO_LicenceAvailableQtyChanged);
            RegisterToReceiveMessages(MessageToken.TODO_LicenceAvailableQtyChanged, OnTODO_LicenceAvailableQtyChanged);
			RegisterToReceiveMessages(MessageToken.TODO_LicenceAvailableQtyFilterExpressionChanged, OnTODO_LicenceAvailableQtyFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_LicenceAvailableQty = new VirtualList<TODO_LicenceAvailableQty>(vloader);
			TODO_LicenceAvailableQty.LoadingStateChanged += TODO_LicenceAvailableQty_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_LicenceAvailableQty, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_LicenceAvailableQty> _TODO_LicenceAvailableQty = null;
        public VirtualList<TODO_LicenceAvailableQty> TODO_LicenceAvailableQty
        {
            get
            {
                return _TODO_LicenceAvailableQty;
            }
            set
            {
                _TODO_LicenceAvailableQty = value;
                NotifyPropertyChanged( x => x.TODO_LicenceAvailableQty);
            }
        }

		 private void OnTODO_LicenceAvailableQtyFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => TODO_LicenceAvailableQty.Refresh()).ConfigureAwait(false);
            SelectedTODO_LicenceAvailableQty.Clear();
            NotifyPropertyChanged(x => SelectedTODO_LicenceAvailableQty);
            BeginSendMessage(MessageToken.SelectedTODO_LicenceAvailableQtyChanged, new NotificationEventArgs(MessageToken.SelectedTODO_LicenceAvailableQtyChanged));
        }

		void TODO_LicenceAvailableQty_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_LicenceAvailableQty.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_LicenceAvailableQty);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_LicenceAvailableQty | Error occured..." + TODO_LicenceAvailableQty.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_LicenceAvailableQty);
                    break;
            }
           
        }

		
		public readonly TODO_LicenceAvailableQtyVirturalListLoader vloader = new TODO_LicenceAvailableQtyVirturalListLoader();

		private ObservableCollection<TODO_LicenceAvailableQty> _selectedTODO_LicenceAvailableQty = new ObservableCollection<TODO_LicenceAvailableQty>();
        public ObservableCollection<TODO_LicenceAvailableQty> SelectedTODO_LicenceAvailableQty
        {
            get
            {
                return _selectedTODO_LicenceAvailableQty;
            }
            set
            {
                _selectedTODO_LicenceAvailableQty = value;
				BeginSendMessage(MessageToken.SelectedTODO_LicenceAvailableQtyChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_LicenceAvailableQtyChanged));
				 NotifyPropertyChanged(x => SelectedTODO_LicenceAvailableQty);
            }
        }

        internal virtual void OnCurrentTODO_LicenceAvailableQtyChanged(object sender, NotificationEventArgs<TODO_LicenceAvailableQty> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_LicenceAvailableQty != null) BaseViewModel.Instance.CurrentTODO_LicenceAvailableQty.PropertyChanged += CurrentTODO_LicenceAvailableQty__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_LicenceAvailableQty);
        }   

            void CurrentTODO_LicenceAvailableQty__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnTODO_LicenceAvailableQtyChanged(object sender, NotificationEventArgs e)
        {
            _TODO_LicenceAvailableQty.Refresh();
			NotifyPropertyChanged(x => this.TODO_LicenceAvailableQty);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_LicenceAvailableQty.Refresh();
			NotifyPropertyChanged(x => this.TODO_LicenceAvailableQty);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_LicenceAvailableQty> lst = null;
            using (var ctx = new TODO_LicenceAvailableQtyRepository())
            {
                lst = await ctx.GetTODO_LicenceAvailableQtyByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_LicenceAvailableQty = new ObservableCollection<TODO_LicenceAvailableQty>(lst);
        }

 

		private string _registrationNumberFilter;
        public string RegistrationNumberFilter
        {
            get
            {
                return _registrationNumberFilter;
            }
            set
            {
                _registrationNumberFilter = value;
				NotifyPropertyChanged(x => RegistrationNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _tariffCodeFilter;
        public string TariffCodeFilter
        {
            get
            {
                return _tariffCodeFilter;
            }
            set
            {
                _tariffCodeFilter = value;
				NotifyPropertyChanged(x => TariffCodeFilter);
                FilterData();
                
            }
        }	

 

		private string _originFilter;
        public string OriginFilter
        {
            get
            {
                return _originFilter;
            }
            set
            {
                _originFilter = value;
				NotifyPropertyChanged(x => OriginFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _quantity_to_approveFilter;
        public Int32? Quantity_to_approveFilter
        {
            get
            {
                return _quantity_to_approveFilter;
            }
            set
            {
                _quantity_to_approveFilter = value;
				NotifyPropertyChanged(x => Quantity_to_approveFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startApplication_dateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartApplication_dateFilter
        {
            get
            {
                return _startApplication_dateFilter;
            }
            set
            {
                _startApplication_dateFilter = value;
				NotifyPropertyChanged(x => StartApplication_dateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endApplication_dateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndApplication_dateFilter
        {
            get
            {
                return _endApplication_dateFilter;
            }
            set
            {
                _endApplication_dateFilter = value;
				NotifyPropertyChanged(x => EndApplication_dateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _application_dateFilter;
        public DateTime? Application_dateFilter
        {
            get
            {
                return _application_dateFilter;
            }
            set
            {
                _application_dateFilter = value;
				NotifyPropertyChanged(x => Application_dateFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startImportation_dateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartImportation_dateFilter
        {
            get
            {
                return _startImportation_dateFilter;
            }
            set
            {
                _startImportation_dateFilter = value;
				NotifyPropertyChanged(x => StartImportation_dateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endImportation_dateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndImportation_dateFilter
        {
            get
            {
                return _endImportation_dateFilter;
            }
            set
            {
                _endImportation_dateFilter = value;
				NotifyPropertyChanged(x => EndImportation_dateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _importation_dateFilter;
        public DateTime? Importation_dateFilter
        {
            get
            {
                return _importation_dateFilter;
            }
            set
            {
                _importation_dateFilter = value;
				NotifyPropertyChanged(x => Importation_dateFilter);
                FilterData();
                
            }
        }	

 

		private string _keyFilter;
        public string KeyFilter
        {
            get
            {
                return _keyFilter;
            }
            set
            {
                _keyFilter = value;
				NotifyPropertyChanged(x => KeyFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _balanceFilter;
        public Int32? BalanceFilter
        {
            get
            {
                return _balanceFilter;
            }
            set
            {
                _balanceFilter = value;
				NotifyPropertyChanged(x => BalanceFilter);
                FilterData();
                
            }
        }	

 

		private string _sourceFileFilter;
        public string SourceFileFilter
        {
            get
            {
                return _sourceFileFilter;
            }
            set
            {
                _sourceFileFilter = value;
				NotifyPropertyChanged(x => SourceFileFilter);
                FilterData();
                
            }
        }	

 

		private string _documentReferenceFilter;
        public string DocumentReferenceFilter
        {
            get
            {
                return _documentReferenceFilter;
            }
            set
            {
                _documentReferenceFilter = value;
				NotifyPropertyChanged(x => DocumentReferenceFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_LicenceAvailableQty.Refresh();
			NotifyPropertyChanged(x => this.TODO_LicenceAvailableQty);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(RegistrationNumberFilter) == false)
						res.Append(" && " + string.Format("RegistrationNumber.Contains(\"{0}\")",  RegistrationNumberFilter));						
 

									if(string.IsNullOrEmpty(TariffCodeFilter) == false)
						res.Append(" && " + string.Format("TariffCode.Contains(\"{0}\")",  TariffCodeFilter));						
 

									if(string.IsNullOrEmpty(OriginFilter) == false)
						res.Append(" && " + string.Format("Origin.Contains(\"{0}\")",  OriginFilter));						
 

					if(Quantity_to_approveFilter.HasValue)
						res.Append(" && " + string.Format("Quantity_to_approve == {0}",  Quantity_to_approveFilter.ToString()));				 

 

				if (Convert.ToDateTime(StartApplication_dateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndApplication_dateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartApplication_dateFilter).Date != DateTime.MinValue)
						{
							if(StartApplication_dateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndApplication_dateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("Application_date >= \"{0}\"",  Convert.ToDateTime(StartApplication_dateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndApplication_dateFilter).Date != DateTime.MinValue)
						{
							if(EndApplication_dateFilter.HasValue)
								res.Append(" && " + string.Format("Application_date <= \"{0}\"",  Convert.ToDateTime(EndApplication_dateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartApplication_dateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndApplication_dateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_application_dateFilter).Date != DateTime.MinValue)
						{
							if(Application_dateFilter.HasValue)
								res.Append(" && " + string.Format("Application_date == \"{0}\"",  Convert.ToDateTime(Application_dateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

 

				if (Convert.ToDateTime(StartImportation_dateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndImportation_dateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartImportation_dateFilter).Date != DateTime.MinValue)
						{
							if(StartImportation_dateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndImportation_dateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("Importation_date >= \"{0}\"",  Convert.ToDateTime(StartImportation_dateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndImportation_dateFilter).Date != DateTime.MinValue)
						{
							if(EndImportation_dateFilter.HasValue)
								res.Append(" && " + string.Format("Importation_date <= \"{0}\"",  Convert.ToDateTime(EndImportation_dateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartImportation_dateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndImportation_dateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_importation_dateFilter).Date != DateTime.MinValue)
						{
							if(Importation_dateFilter.HasValue)
								res.Append(" && " + string.Format("Importation_date == \"{0}\"",  Convert.ToDateTime(Importation_dateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(KeyFilter) == false)
						res.Append(" && " + string.Format("Key.Contains(\"{0}\")",  KeyFilter));						
 

					if(BalanceFilter.HasValue)
						res.Append(" && " + string.Format("Balance == {0}",  BalanceFilter.ToString()));				 

									if(string.IsNullOrEmpty(SourceFileFilter) == false)
						res.Append(" && " + string.Format("SourceFile.Contains(\"{0}\")",  SourceFileFilter));						
 

									if(string.IsNullOrEmpty(DocumentReferenceFilter) == false)
						res.Append(" && " + string.Format("DocumentReference.Contains(\"{0}\")",  DocumentReferenceFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_LicenceAvailableQty> lst = null;
            using (var ctx = new TODO_LicenceAvailableQtyRepository())
            {
                lst = await ctx.GetTODO_LicenceAvailableQtyByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_LicenceAvailableQtyExcelLine, List<TODO_LicenceAvailableQtyExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_LicenceAvailableQtyExcelLine
                {
 
                    RegistrationNumber = x.RegistrationNumber ,
                    
 
                    TariffCode = x.TariffCode ,
                    
 
                    Origin = x.Origin ,
                    
 
                    Quantity_to_approve = x.Quantity_to_approve ,
                    
 
                    Application_date = x.Application_date ,
                    
 
                    Importation_date = x.Importation_date ,
                    
 
                    Key = x.Key ,
                    
 
                    Balance = x.Balance ,
                    
 
                    SourceFile = x.SourceFile ,
                    
 
                    DocumentReference = x.DocumentReference 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TODO_LicenceAvailableQtyExcelLine
        {
		 
                    public string RegistrationNumber { get; set; } 
                    
 
                    public string TariffCode { get; set; } 
                    
 
                    public string Origin { get; set; } 
                    
 
                    public int Quantity_to_approve { get; set; } 
                    
 
                    public Nullable<System.DateTime> Application_date { get; set; } 
                    
 
                    public Nullable<System.DateTime> Importation_date { get; set; } 
                    
 
                    public string Key { get; set; } 
                    
 
                    public Nullable<int> Balance { get; set; } 
                    
 
                    public string SourceFile { get; set; } 
                    
 
                    public string DocumentReference { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class EmailFileTypesViewModel_AutoGen : ViewModelBase<EmailFileTypesViewModel_AutoGen>
	{

       private static readonly EmailFileTypesViewModel_AutoGen instance;
       static EmailFileTypesViewModel_AutoGen()
        {
            instance = new EmailFileTypesViewModel_AutoGen();
        }

       public static EmailFileTypesViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public EmailFileTypesViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<EmailFileTypes>(MessageToken.CurrentEmailFileTypesChanged, OnCurrentEmailFileTypesChanged);
            RegisterToReceiveMessages(MessageToken.EmailFileTypesChanged, OnEmailFileTypesChanged);
			RegisterToReceiveMessages(MessageToken.EmailFileTypesFilterExpressionChanged, OnEmailFileTypesFilterExpressionChanged);

 
			RegisterToReceiveMessages<EmailMapping>(MessageToken.CurrentEmailMappingChanged, OnCurrentEmailMappingChanged);
 
			RegisterToReceiveMessages<FileTypes>(MessageToken.CurrentFileTypesChanged, OnCurrentFileTypesChanged);

 			// Recieve messages for Core Current Entities Changed
 

			EmailFileTypes = new VirtualList<EmailFileTypes>(vloader);
			EmailFileTypes.LoadingStateChanged += EmailFileTypes_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(EmailFileTypes, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<EmailFileTypes> _EmailFileTypes = null;
        public VirtualList<EmailFileTypes> EmailFileTypes
        {
            get
            {
                return _EmailFileTypes;
            }
            set
            {
                _EmailFileTypes = value;
            }
        }

		 private void OnEmailFileTypesFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			EmailFileTypes.Refresh();
            SelectedEmailFileTypes.Clear();
            NotifyPropertyChanged(x => SelectedEmailFileTypes);
            BeginSendMessage(MessageToken.SelectedEmailFileTypesChanged, new NotificationEventArgs(MessageToken.SelectedEmailFileTypesChanged));
        }

		void EmailFileTypes_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (EmailFileTypes.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => EmailFileTypes);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("EmailFileTypes | Error occured..." + EmailFileTypes.LastLoadingError.Message);
                    NotifyPropertyChanged(x => EmailFileTypes);
                    break;
            }
           
        }

		
		public readonly EmailFileTypesVirturalListLoader vloader = new EmailFileTypesVirturalListLoader();

		private ObservableCollection<EmailFileTypes> _selectedEmailFileTypes = new ObservableCollection<EmailFileTypes>();
        public ObservableCollection<EmailFileTypes> SelectedEmailFileTypes
        {
            get
            {
                return _selectedEmailFileTypes;
            }
            set
            {
                _selectedEmailFileTypes = value;
				BeginSendMessage(MessageToken.SelectedEmailFileTypesChanged,
                                    new NotificationEventArgs(MessageToken.SelectedEmailFileTypesChanged));
				 NotifyPropertyChanged(x => SelectedEmailFileTypes);
            }
        }

        internal virtual void OnCurrentEmailFileTypesChanged(object sender, NotificationEventArgs<EmailFileTypes> e)
        {
            if(BaseViewModel.Instance.CurrentEmailFileTypes != null) BaseViewModel.Instance.CurrentEmailFileTypes.PropertyChanged += CurrentEmailFileTypes__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentEmailFileTypes);
        }   

            void CurrentEmailFileTypes__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddEmailMapping")
                   // {
                   //    if(EmailMapping.Contains(CurrentEmailFileTypes.EmailMapping) == false) EmailMapping.Add(CurrentEmailFileTypes.EmailMapping);
                    //}
                    //if (e.PropertyName == "AddFileTypes")
                   // {
                   //    if(FileTypes.Contains(CurrentEmailFileTypes.FileTypes) == false) FileTypes.Add(CurrentEmailFileTypes.FileTypes);
                    //}
                 } 
        internal virtual void OnEmailFileTypesChanged(object sender, NotificationEventArgs e)
        {
            _EmailFileTypes.Refresh();
			NotifyPropertyChanged(x => this.EmailFileTypes);
        }   


 	
		 internal virtual void OnCurrentEmailMappingChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EmailMapping> e)
			{
			if(ViewCurrentEmailMapping == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("EmailMappingId == {0}", e.Data.Id.ToString());
                 }

				EmailFileTypes.Refresh();
				NotifyPropertyChanged(x => this.EmailFileTypes);
                // SendMessage(MessageToken.EmailFileTypesChanged, new NotificationEventArgs(MessageToken.EmailFileTypesChanged));
                                          
                BaseViewModel.Instance.CurrentEmailFileTypes = null;
			}
	
		 internal virtual void OnCurrentFileTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypes> e)
			{
			if(ViewCurrentFileTypes == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("FileTypeId == {0}", e.Data.Id.ToString());
                 }

				EmailFileTypes.Refresh();
				NotifyPropertyChanged(x => this.EmailFileTypes);
                // SendMessage(MessageToken.EmailFileTypesChanged, new NotificationEventArgs(MessageToken.EmailFileTypesChanged));
                                          
                BaseViewModel.Instance.CurrentEmailFileTypes = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentEmailMapping = false;
         public bool ViewCurrentEmailMapping
         {
             get
             {
                 return _viewCurrentEmailMapping;
             }
             set
             {
                 _viewCurrentEmailMapping = value;
                 NotifyPropertyChanged(x => x.ViewCurrentEmailMapping);
                FilterData();
             }
         }
 	
		 bool _viewCurrentFileTypes = false;
         public bool ViewCurrentFileTypes
         {
             get
             {
                 return _viewCurrentFileTypes;
             }
             set
             {
                 _viewCurrentFileTypes = value;
                 NotifyPropertyChanged(x => x.ViewCurrentFileTypes);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_EmailFileTypes.Refresh();
			NotifyPropertyChanged(x => this.EmailFileTypes);
		}

		public async Task SelectAll()
        {
            IEnumerable<EmailFileTypes> lst = null;
            using (var ctx = new EmailFileTypesRepository())
            {
                lst = await ctx.GetEmailFileTypesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedEmailFileTypes = new ObservableCollection<EmailFileTypes>(lst);
        }

 

		private Boolean? _isRequiredFilter;
        public Boolean? IsRequiredFilter
        {
            get
            {
                return _isRequiredFilter;
            }
            set
            {
                _isRequiredFilter = value;
				NotifyPropertyChanged(x => IsRequiredFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			EmailFileTypes.Refresh();
			NotifyPropertyChanged(x => this.EmailFileTypes);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(IsRequiredFilter.HasValue)
						res.Append(" && " + string.Format("IsRequired == {0}",  IsRequiredFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<EmailFileTypes> lst = null;
            using (var ctx = new EmailFileTypesRepository())
            {
                lst = await ctx.GetEmailFileTypesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<EmailFileTypesExcelLine, List<EmailFileTypesExcelLine>>
            {
                dataToPrint = lst.Select(x => new EmailFileTypesExcelLine
                {
 
                    IsRequired = x.IsRequired 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class EmailFileTypesExcelLine
        {
		 
                    public Nullable<bool> IsRequired { get; set; } 
                    
        }

		
    }
}
		

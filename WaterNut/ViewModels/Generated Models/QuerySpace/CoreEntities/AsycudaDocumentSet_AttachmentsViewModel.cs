// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class AsycudaDocumentSet_AttachmentsViewModel_AutoGen : ViewModelBase<AsycudaDocumentSet_AttachmentsViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentSet_AttachmentsViewModel_AutoGen instance;
       static AsycudaDocumentSet_AttachmentsViewModel_AutoGen()
        {
            instance = new AsycudaDocumentSet_AttachmentsViewModel_AutoGen();
        }

       public static AsycudaDocumentSet_AttachmentsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentSet_AttachmentsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentSet_Attachments>(MessageToken.CurrentAsycudaDocumentSet_AttachmentsChanged, OnCurrentAsycudaDocumentSet_AttachmentsChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentSet_AttachmentsChanged, OnAsycudaDocumentSet_AttachmentsChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentSet_AttachmentsFilterExpressionChanged, OnAsycudaDocumentSet_AttachmentsFilterExpressionChanged);

 
			RegisterToReceiveMessages<Attachments>(MessageToken.CurrentAttachmentsChanged, OnCurrentAttachmentsChanged);
 
			RegisterToReceiveMessages<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, OnCurrentAsycudaDocumentSetExChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentSet_Attachments = new VirtualList<AsycudaDocumentSet_Attachments>(vloader);
			AsycudaDocumentSet_Attachments.LoadingStateChanged += AsycudaDocumentSet_Attachments_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentSet_Attachments, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentSet_Attachments> _AsycudaDocumentSet_Attachments = null;
        public VirtualList<AsycudaDocumentSet_Attachments> AsycudaDocumentSet_Attachments
        {
            get
            {
                return _AsycudaDocumentSet_Attachments;
            }
            set
            {
                _AsycudaDocumentSet_Attachments = value;
            }
        }

		 private void OnAsycudaDocumentSet_AttachmentsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			AsycudaDocumentSet_Attachments.Refresh();
            SelectedAsycudaDocumentSet_Attachments.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentSet_Attachments);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentSet_AttachmentsChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSet_AttachmentsChanged));
        }

		void AsycudaDocumentSet_Attachments_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentSet_Attachments.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentSet_Attachments);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentSet_Attachments | Error occured..." + AsycudaDocumentSet_Attachments.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentSet_Attachments);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentSet_AttachmentsVirturalListLoader vloader = new AsycudaDocumentSet_AttachmentsVirturalListLoader();

		private ObservableCollection<AsycudaDocumentSet_Attachments> _selectedAsycudaDocumentSet_Attachments = new ObservableCollection<AsycudaDocumentSet_Attachments>();
        public ObservableCollection<AsycudaDocumentSet_Attachments> SelectedAsycudaDocumentSet_Attachments
        {
            get
            {
                return _selectedAsycudaDocumentSet_Attachments;
            }
            set
            {
                _selectedAsycudaDocumentSet_Attachments = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentSet_AttachmentsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSet_AttachmentsChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentSet_Attachments);
            }
        }

        internal void OnCurrentAsycudaDocumentSet_AttachmentsChanged(object sender, NotificationEventArgs<AsycudaDocumentSet_Attachments> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentSet_Attachments != null) BaseViewModel.Instance.CurrentAsycudaDocumentSet_Attachments.PropertyChanged += CurrentAsycudaDocumentSet_Attachments__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSet_Attachments);
        }   

            void CurrentAsycudaDocumentSet_Attachments__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddAttachments")
                   // {
                   //    if(Attachments.Contains(CurrentAsycudaDocumentSet_Attachments.Attachments) == false) Attachments.Add(CurrentAsycudaDocumentSet_Attachments.Attachments);
                    //}
                    //if (e.PropertyName == "AddAsycudaDocumentSetEx")
                   // {
                   //    if(AsycudaDocumentSetExs.Contains(CurrentAsycudaDocumentSet_Attachments.AsycudaDocumentSetEx) == false) AsycudaDocumentSetExs.Add(CurrentAsycudaDocumentSet_Attachments.AsycudaDocumentSetEx);
                    //}
                 } 
        internal void OnAsycudaDocumentSet_AttachmentsChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentSet_Attachments.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSet_Attachments);
        }   


 	
		 internal void OnCurrentAttachmentsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Attachments> e)
			{
			if(ViewCurrentAttachments == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("AttachmentId == {0}", e.Data.Id.ToString());
                 }

				AsycudaDocumentSet_Attachments.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentSet_Attachments);
                // SendMessage(MessageToken.AsycudaDocumentSet_AttachmentsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentSet_AttachmentsChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocumentSet_Attachments = null;
			}
	
		 internal void OnCurrentAsycudaDocumentSetExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEx> e)
			{
			if(ViewCurrentAsycudaDocumentSetEx == false) return;
			if (e.Data == null || e.Data.AsycudaDocumentSetId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("AsycudaDocumentSetId == {0}", e.Data.AsycudaDocumentSetId.ToString());
                 }

				AsycudaDocumentSet_Attachments.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentSet_Attachments);
                // SendMessage(MessageToken.AsycudaDocumentSet_AttachmentsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentSet_AttachmentsChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocumentSet_Attachments = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentAttachments = false;
         public bool ViewCurrentAttachments
         {
             get
             {
                 return _viewCurrentAttachments;
             }
             set
             {
                 _viewCurrentAttachments = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAttachments);
                FilterData();
             }
         }
 	
		 bool _viewCurrentAsycudaDocumentSetEx = false;
         public bool ViewCurrentAsycudaDocumentSetEx
         {
             get
             {
                 return _viewCurrentAsycudaDocumentSetEx;
             }
             set
             {
                 _viewCurrentAsycudaDocumentSetEx = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocumentSetEx);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_AsycudaDocumentSet_Attachments.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSet_Attachments);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentSet_Attachments> lst = null;
            using (var ctx = new AsycudaDocumentSet_AttachmentsRepository())
            {
                lst = await ctx.GetAsycudaDocumentSet_AttachmentsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentSet_Attachments = new ObservableCollection<AsycudaDocumentSet_Attachments>(lst);
        }

 

		private Boolean? _documentSpecificFilter;
        public Boolean? DocumentSpecificFilter
        {
            get
            {
                return _documentSpecificFilter;
            }
            set
            {
                _documentSpecificFilter = value;
				NotifyPropertyChanged(x => DocumentSpecificFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentSet_Attachments.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSet_Attachments);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(DocumentSpecificFilter.HasValue)
						res.Append(" && " + string.Format("DocumentSpecific == {0}",  DocumentSpecificFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentSet_Attachments> lst = null;
            using (var ctx = new AsycudaDocumentSet_AttachmentsRepository())
            {
                lst = await ctx.GetAsycudaDocumentSet_AttachmentsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentSet_AttachmentsExcelLine, List<AsycudaDocumentSet_AttachmentsExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentSet_AttachmentsExcelLine
                {
 
                    DocumentSpecific = x.DocumentSpecific 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class AsycudaDocumentSet_AttachmentsExcelLine
        {
		 
                    public bool DocumentSpecific { get; set; } 
                    
        }

		
    }
}
		

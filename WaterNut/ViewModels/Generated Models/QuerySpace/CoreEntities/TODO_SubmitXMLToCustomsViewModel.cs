// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_SubmitXMLToCustomsViewModel_AutoGen : ViewModelBase<TODO_SubmitXMLToCustomsViewModel_AutoGen>
	{

       private static readonly TODO_SubmitXMLToCustomsViewModel_AutoGen instance;
       static TODO_SubmitXMLToCustomsViewModel_AutoGen()
        {
            instance = new TODO_SubmitXMLToCustomsViewModel_AutoGen();
        }

       public static TODO_SubmitXMLToCustomsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_SubmitXMLToCustomsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_SubmitXMLToCustoms>(MessageToken.CurrentTODO_SubmitXMLToCustomsChanged, OnCurrentTODO_SubmitXMLToCustomsChanged);
            RegisterToReceiveMessages(MessageToken.TODO_SubmitXMLToCustomsChanged, OnTODO_SubmitXMLToCustomsChanged);
			RegisterToReceiveMessages(MessageToken.TODO_SubmitXMLToCustomsFilterExpressionChanged, OnTODO_SubmitXMLToCustomsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_SubmitXMLToCustoms = new VirtualList<TODO_SubmitXMLToCustoms>(vloader);
			TODO_SubmitXMLToCustoms.LoadingStateChanged += TODO_SubmitXMLToCustoms_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_SubmitXMLToCustoms, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_SubmitXMLToCustoms> _TODO_SubmitXMLToCustoms = null;
        public VirtualList<TODO_SubmitXMLToCustoms> TODO_SubmitXMLToCustoms
        {
            get
            {
                return _TODO_SubmitXMLToCustoms;
            }
            set
            {
                _TODO_SubmitXMLToCustoms = value;
            }
        }

		 private void OnTODO_SubmitXMLToCustomsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			TODO_SubmitXMLToCustoms.Refresh();
            SelectedTODO_SubmitXMLToCustoms.Clear();
            NotifyPropertyChanged(x => SelectedTODO_SubmitXMLToCustoms);
            BeginSendMessage(MessageToken.SelectedTODO_SubmitXMLToCustomsChanged, new NotificationEventArgs(MessageToken.SelectedTODO_SubmitXMLToCustomsChanged));
        }

		void TODO_SubmitXMLToCustoms_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_SubmitXMLToCustoms.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_SubmitXMLToCustoms);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_SubmitXMLToCustoms | Error occured..." + TODO_SubmitXMLToCustoms.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_SubmitXMLToCustoms);
                    break;
            }
           
        }

		
		public readonly TODO_SubmitXMLToCustomsVirturalListLoader vloader = new TODO_SubmitXMLToCustomsVirturalListLoader();

		private ObservableCollection<TODO_SubmitXMLToCustoms> _selectedTODO_SubmitXMLToCustoms = new ObservableCollection<TODO_SubmitXMLToCustoms>();
        public ObservableCollection<TODO_SubmitXMLToCustoms> SelectedTODO_SubmitXMLToCustoms
        {
            get
            {
                return _selectedTODO_SubmitXMLToCustoms;
            }
            set
            {
                _selectedTODO_SubmitXMLToCustoms = value;
				BeginSendMessage(MessageToken.SelectedTODO_SubmitXMLToCustomsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_SubmitXMLToCustomsChanged));
				 NotifyPropertyChanged(x => SelectedTODO_SubmitXMLToCustoms);
            }
        }

        internal void OnCurrentTODO_SubmitXMLToCustomsChanged(object sender, NotificationEventArgs<TODO_SubmitXMLToCustoms> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_SubmitXMLToCustoms != null) BaseViewModel.Instance.CurrentTODO_SubmitXMLToCustoms.PropertyChanged += CurrentTODO_SubmitXMLToCustoms__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_SubmitXMLToCustoms);
        }   

            void CurrentTODO_SubmitXMLToCustoms__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentTODO_SubmitXMLToCustoms.ApplicationSettings) == false) ApplicationSettings.Add(CurrentTODO_SubmitXMLToCustoms.ApplicationSettings);
                    //}
                 } 
        internal void OnTODO_SubmitXMLToCustomsChanged(object sender, NotificationEventArgs e)
        {
            _TODO_SubmitXMLToCustoms.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitXMLToCustoms);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    TODO_SubmitXMLToCustoms.Refresh();
					NotifyPropertyChanged(x => this.TODO_SubmitXMLToCustoms);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_SubmitXMLToCustoms.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitXMLToCustoms);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_SubmitXMLToCustoms> lst = null;
            using (var ctx = new TODO_SubmitXMLToCustomsRepository())
            {
                lst = await ctx.GetTODO_SubmitXMLToCustomsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_SubmitXMLToCustoms = new ObservableCollection<TODO_SubmitXMLToCustoms>(lst);
        }

 

		private string _cNumberFilter;
        public string CNumberFilter
        {
            get
            {
                return _cNumberFilter;
            }
            set
            {
                _cNumberFilter = value;
				NotifyPropertyChanged(x => CNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartRegistrationDateFilter
        {
            get
            {
                return _startRegistrationDateFilter;
            }
            set
            {
                _startRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndRegistrationDateFilter
        {
            get
            {
                return _endRegistrationDateFilter;
            }
            set
            {
                _endRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _registrationDateFilter;
        public DateTime? RegistrationDateFilter
        {
            get
            {
                return _registrationDateFilter;
            }
            set
            {
                _registrationDateFilter = value;
				NotifyPropertyChanged(x => RegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private string _referenceNumberFilter;
        public string ReferenceNumberFilter
        {
            get
            {
                return _referenceNumberFilter;
            }
            set
            {
                _referenceNumberFilter = value;
				NotifyPropertyChanged(x => ReferenceNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _documentTypeFilter;
        public string DocumentTypeFilter
        {
            get
            {
                return _documentTypeFilter;
            }
            set
            {
                _documentTypeFilter = value;
				NotifyPropertyChanged(x => DocumentTypeFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startAssessmentDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartAssessmentDateFilter
        {
            get
            {
                return _startAssessmentDateFilter;
            }
            set
            {
                _startAssessmentDateFilter = value;
				NotifyPropertyChanged(x => StartAssessmentDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endAssessmentDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndAssessmentDateFilter
        {
            get
            {
                return _endAssessmentDateFilter;
            }
            set
            {
                _endAssessmentDateFilter = value;
				NotifyPropertyChanged(x => EndAssessmentDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _assessmentDateFilter;
        public DateTime? AssessmentDateFilter
        {
            get
            {
                return _assessmentDateFilter;
            }
            set
            {
                _assessmentDateFilter = value;
				NotifyPropertyChanged(x => AssessmentDateFilter);
                FilterData();
                
            }
        }	

 

		private string _extended_customs_procedureFilter;
        public string Extended_customs_procedureFilter
        {
            get
            {
                return _extended_customs_procedureFilter;
            }
            set
            {
                _extended_customs_procedureFilter = value;
				NotifyPropertyChanged(x => Extended_customs_procedureFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_SubmitXMLToCustoms.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitXMLToCustoms);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(CNumberFilter) == false)
						res.Append(" && " + string.Format("CNumber.Contains(\"{0}\")",  CNumberFilter));						
 

 

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("RegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_registrationDateFilter).Date != DateTime.MinValue)
						{
							if(RegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate == \"{0}\"",  Convert.ToDateTime(RegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(ReferenceNumberFilter) == false)
						res.Append(" && " + string.Format("ReferenceNumber.Contains(\"{0}\")",  ReferenceNumberFilter));						
 

									if(string.IsNullOrEmpty(DocumentTypeFilter) == false)
						res.Append(" && " + string.Format("DocumentType.Contains(\"{0}\")",  DocumentTypeFilter));						
 

 

				if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue)
						{
							if(StartAssessmentDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("AssessmentDate >= \"{0}\"",  Convert.ToDateTime(StartAssessmentDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue)
						{
							if(EndAssessmentDateFilter.HasValue)
								res.Append(" && " + string.Format("AssessmentDate <= \"{0}\"",  Convert.ToDateTime(EndAssessmentDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_assessmentDateFilter).Date != DateTime.MinValue)
						{
							if(AssessmentDateFilter.HasValue)
								res.Append(" && " + string.Format("AssessmentDate == \"{0}\"",  Convert.ToDateTime(AssessmentDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(Extended_customs_procedureFilter) == false)
						res.Append(" && " + string.Format("Extended_customs_procedure.Contains(\"{0}\")",  Extended_customs_procedureFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_SubmitXMLToCustoms> lst = null;
            using (var ctx = new TODO_SubmitXMLToCustomsRepository())
            {
                lst = await ctx.GetTODO_SubmitXMLToCustomsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_SubmitXMLToCustomsExcelLine, List<TODO_SubmitXMLToCustomsExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_SubmitXMLToCustomsExcelLine
                {
 
                    CNumber = x.CNumber ,
                    
 
                    RegistrationDate = x.RegistrationDate ,
                    
 
                    ReferenceNumber = x.ReferenceNumber ,
                    
 
                    DocumentType = x.DocumentType ,
                    
 
                    AssessmentDate = x.AssessmentDate ,
                    
 
                    Extended_customs_procedure = x.Extended_customs_procedure 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TODO_SubmitXMLToCustomsExcelLine
        {
		 
                    public string CNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> RegistrationDate { get; set; } 
                    
 
                    public string ReferenceNumber { get; set; } 
                    
 
                    public string DocumentType { get; set; } 
                    
 
                    public Nullable<System.DateTime> AssessmentDate { get; set; } 
                    
 
                    public string Extended_customs_procedure { get; set; } 
                    
        }

		
    }
}
		

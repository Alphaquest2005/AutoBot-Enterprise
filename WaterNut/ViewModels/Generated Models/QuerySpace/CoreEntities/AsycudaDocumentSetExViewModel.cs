// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class AsycudaDocumentSetExViewModel_AutoGen : ViewModelBase<AsycudaDocumentSetExViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentSetExViewModel_AutoGen instance;
       static AsycudaDocumentSetExViewModel_AutoGen()
        {
            instance = new AsycudaDocumentSetExViewModel_AutoGen();
        }

       public static AsycudaDocumentSetExViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentSetExViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, OnCurrentAsycudaDocumentSetExChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetExsChanged, OnAsycudaDocumentSetExsChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetExsFilterExpressionChanged, OnAsycudaDocumentSetExsFilterExpressionChanged);

 
			RegisterToReceiveMessages<ApplicationSettings>(MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentSetExs = new VirtualList<AsycudaDocumentSetEx>(vloader);
			AsycudaDocumentSetExs.LoadingStateChanged += AsycudaDocumentSetExs_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentSetExs, lockObject);
			
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";
             OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentSetEx> _AsycudaDocumentSetExs = null;
        public VirtualList<AsycudaDocumentSetEx> AsycudaDocumentSetExs
        {
            get
            {
                return _AsycudaDocumentSetExs;
            }
            set
            {
                _AsycudaDocumentSetExs = value;
            }
        }

		 private void OnAsycudaDocumentSetExsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			AsycudaDocumentSetExs.Refresh();
            SelectedAsycudaDocumentSetExs.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentSetExs);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetExsChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetExsChanged));
        }

		void AsycudaDocumentSetExs_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentSetExs.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentSetExs);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentSetExs | Error occured..." + AsycudaDocumentSetExs.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentSetExs);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentSetExVirturalListLoader vloader = new AsycudaDocumentSetExVirturalListLoader();

		private ObservableCollection<AsycudaDocumentSetEx> _selectedAsycudaDocumentSetExs = new ObservableCollection<AsycudaDocumentSetEx>();
        public ObservableCollection<AsycudaDocumentSetEx> SelectedAsycudaDocumentSetExs
        {
            get
            {
                return _selectedAsycudaDocumentSetExs;
            }
            set
            {
                _selectedAsycudaDocumentSetExs = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetExsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetExsChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentSetExs);
            }
        }

        internal void OnCurrentAsycudaDocumentSetExChanged(object sender, NotificationEventArgs<AsycudaDocumentSetEx> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentSetEx != null) BaseViewModel.Instance.CurrentAsycudaDocumentSetEx.PropertyChanged += CurrentAsycudaDocumentSetEx__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEx);
        }   

            void CurrentAsycudaDocumentSetEx__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentAsycudaDocumentSetEx.ApplicationSettings) == false) ApplicationSettings.Add(CurrentAsycudaDocumentSetEx.ApplicationSettings);
                    //}
                    //if (e.PropertyName == "AddCustoms_Procedure")
                   // {
                   //    if(Customs_Procedure.Contains(CurrentAsycudaDocumentSetEx.Customs_Procedure) == false) Customs_Procedure.Add(CurrentAsycudaDocumentSetEx.Customs_Procedure);
                    //}
                    //if (e.PropertyName == "AddDocument_Type")
                   // {
                   //    if(Document_Type.Contains(CurrentAsycudaDocumentSetEx.Document_Type) == false) Document_Type.Add(CurrentAsycudaDocumentSetEx.Document_Type);
                    //}
                 } 
        internal void OnAsycudaDocumentSetExsChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentSetExs.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetExs);
        }   


 	
		 internal void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
			{
			if(ViewCurrentApplicationSettings == false) return;
			if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                 }

				AsycudaDocumentSetExs.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentSetExs);
                // SendMessage(MessageToken.AsycudaDocumentSetExsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentSetExsChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocumentSetEx = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal void OnCurrentCustoms_ProcedureChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Customs_Procedure> e)
				{
				if (e.Data == null || e.Data.Customs_ProcedureId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("Customs_ProcedureId == {0}", e.Data.Customs_ProcedureId.ToString());
                }
					
                    AsycudaDocumentSetExs.Refresh();
					NotifyPropertyChanged(x => this.AsycudaDocumentSetExs);
				}
                internal void OnCurrentDocument_TypeChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Document_Type> e)
				{
				if (e.Data == null || e.Data.Document_TypeId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("Document_TypeId == {0}", e.Data.Document_TypeId.ToString());
                }
					
                    AsycudaDocumentSetExs.Refresh();
					NotifyPropertyChanged(x => this.AsycudaDocumentSetExs);
				}
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentApplicationSettings = false;
         public bool ViewCurrentApplicationSettings
         {
             get
             {
                 return _viewCurrentApplicationSettings;
             }
             set
             {
                 _viewCurrentApplicationSettings = value;
                 NotifyPropertyChanged(x => x.ViewCurrentApplicationSettings);
                FilterData();
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_AsycudaDocumentSetExs.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetExs);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentSetEx> lst = null;
            using (var ctx = new AsycudaDocumentSetExRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetExsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentSetExs = new ObservableCollection<AsycudaDocumentSetEx>(lst);
        }

 

		private string _declarant_Reference_NumberFilter;
        public string Declarant_Reference_NumberFilter
        {
            get
            {
                return _declarant_Reference_NumberFilter;
            }
            set
            {
                _declarant_Reference_NumberFilter = value;
				NotifyPropertyChanged(x => Declarant_Reference_NumberFilter);
                FilterData();
                
            }
        }	

 

		private Double? _exchange_RateFilter;
        public Double? Exchange_RateFilter
        {
            get
            {
                return _exchange_RateFilter;
            }
            set
            {
                _exchange_RateFilter = value;
				NotifyPropertyChanged(x => Exchange_RateFilter);
                FilterData();
                
            }
        }	

 

		private string _country_of_origin_codeFilter;
        public string Country_of_origin_codeFilter
        {
            get
            {
                return _country_of_origin_codeFilter;
            }
            set
            {
                _country_of_origin_codeFilter = value;
				NotifyPropertyChanged(x => Country_of_origin_codeFilter);
                FilterData();
                
            }
        }	

 

		private string _currency_CodeFilter;
        public string Currency_CodeFilter
        {
            get
            {
                return _currency_CodeFilter;
            }
            set
            {
                _currency_CodeFilter = value;
				NotifyPropertyChanged(x => Currency_CodeFilter);
                FilterData();
                
            }
        }	

 

		private string _descriptionFilter;
        public string DescriptionFilter
        {
            get
            {
                return _descriptionFilter;
            }
            set
            {
                _descriptionFilter = value;
				NotifyPropertyChanged(x => DescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _manifest_NumberFilter;
        public string Manifest_NumberFilter
        {
            get
            {
                return _manifest_NumberFilter;
            }
            set
            {
                _manifest_NumberFilter = value;
				NotifyPropertyChanged(x => Manifest_NumberFilter);
                FilterData();
                
            }
        }	

 

		private string _bLNumberFilter;
        public string BLNumberFilter
        {
            get
            {
                return _bLNumberFilter;
            }
            set
            {
                _bLNumberFilter = value;
				NotifyPropertyChanged(x => BLNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startEntryTimeStampFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartEntryTimeStampFilter
        {
            get
            {
                return _startEntryTimeStampFilter;
            }
            set
            {
                _startEntryTimeStampFilter = value;
				NotifyPropertyChanged(x => StartEntryTimeStampFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endEntryTimeStampFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndEntryTimeStampFilter
        {
            get
            {
                return _endEntryTimeStampFilter;
            }
            set
            {
                _endEntryTimeStampFilter = value;
				NotifyPropertyChanged(x => EndEntryTimeStampFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _entryTimeStampFilter;
        public DateTime? EntryTimeStampFilter
        {
            get
            {
                return _entryTimeStampFilter;
            }
            set
            {
                _entryTimeStampFilter = value;
				NotifyPropertyChanged(x => EntryTimeStampFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _startingFileCountFilter;
        public Int32? StartingFileCountFilter
        {
            get
            {
                return _startingFileCountFilter;
            }
            set
            {
                _startingFileCountFilter = value;
				NotifyPropertyChanged(x => StartingFileCountFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _documentsCountFilter;
        public Int32? DocumentsCountFilter
        {
            get
            {
                return _documentsCountFilter;
            }
            set
            {
                _documentsCountFilter = value;
				NotifyPropertyChanged(x => DocumentsCountFilter);
                FilterData();
                
            }
        }	

 

		private string _apportionMethodFilter;
        public string ApportionMethodFilter
        {
            get
            {
                return _apportionMethodFilter;
            }
            set
            {
                _apportionMethodFilter = value;
				NotifyPropertyChanged(x => ApportionMethodFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalCIFFilter;
        public Double? TotalCIFFilter
        {
            get
            {
                return _totalCIFFilter;
            }
            set
            {
                _totalCIFFilter = value;
				NotifyPropertyChanged(x => TotalCIFFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalFreightFilter;
        public Double? TotalFreightFilter
        {
            get
            {
                return _totalFreightFilter;
            }
            set
            {
                _totalFreightFilter = value;
				NotifyPropertyChanged(x => TotalFreightFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalWeightFilter;
        public Double? TotalWeightFilter
        {
            get
            {
                return _totalWeightFilter;
            }
            set
            {
                _totalWeightFilter = value;
				NotifyPropertyChanged(x => TotalWeightFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentSetExs.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetExs);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(Declarant_Reference_NumberFilter) == false)
						res.Append(" && " + string.Format("Declarant_Reference_Number.Contains(\"{0}\")",  Declarant_Reference_NumberFilter));						
 

					if(Exchange_RateFilter.HasValue)
						res.Append(" && " + string.Format("Exchange_Rate == {0}",  Exchange_RateFilter.ToString()));				 

									if(string.IsNullOrEmpty(Country_of_origin_codeFilter) == false)
						res.Append(" && " + string.Format("Country_of_origin_code.Contains(\"{0}\")",  Country_of_origin_codeFilter));						
 

									if(string.IsNullOrEmpty(Currency_CodeFilter) == false)
						res.Append(" && " + string.Format("Currency_Code.Contains(\"{0}\")",  Currency_CodeFilter));						
 

									if(string.IsNullOrEmpty(DescriptionFilter) == false)
						res.Append(" && " + string.Format("Description.Contains(\"{0}\")",  DescriptionFilter));						
 

									if(string.IsNullOrEmpty(Manifest_NumberFilter) == false)
						res.Append(" && " + string.Format("Manifest_Number.Contains(\"{0}\")",  Manifest_NumberFilter));						
 

									if(string.IsNullOrEmpty(BLNumberFilter) == false)
						res.Append(" && " + string.Format("BLNumber.Contains(\"{0}\")",  BLNumberFilter));						
 

 

				if (Convert.ToDateTime(StartEntryTimeStampFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEntryTimeStampFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartEntryTimeStampFilter).Date != DateTime.MinValue)
						{
							if(StartEntryTimeStampFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndEntryTimeStampFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("EntryTimeStamp >= \"{0}\"",  Convert.ToDateTime(StartEntryTimeStampFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndEntryTimeStampFilter).Date != DateTime.MinValue)
						{
							if(EndEntryTimeStampFilter.HasValue)
								res.Append(" && " + string.Format("EntryTimeStamp <= \"{0}\"",  Convert.ToDateTime(EndEntryTimeStampFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartEntryTimeStampFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEntryTimeStampFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_entryTimeStampFilter).Date != DateTime.MinValue)
						{
							if(EntryTimeStampFilter.HasValue)
								res.Append(" && " + string.Format("EntryTimeStamp == \"{0}\"",  Convert.ToDateTime(EntryTimeStampFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(StartingFileCountFilter.HasValue)
						res.Append(" && " + string.Format("StartingFileCount == {0}",  StartingFileCountFilter.ToString()));				 

					if(DocumentsCountFilter.HasValue)
						res.Append(" && " + string.Format("DocumentsCount == {0}",  DocumentsCountFilter.ToString()));				 

									if(string.IsNullOrEmpty(ApportionMethodFilter) == false)
						res.Append(" && " + string.Format("ApportionMethod.Contains(\"{0}\")",  ApportionMethodFilter));						
 

					if(TotalCIFFilter.HasValue)
						res.Append(" && " + string.Format("TotalCIF == {0}",  TotalCIFFilter.ToString()));				 

					if(TotalFreightFilter.HasValue)
						res.Append(" && " + string.Format("TotalFreight == {0}",  TotalFreightFilter.ToString()));				 

					if(TotalWeightFilter.HasValue)
						res.Append(" && " + string.Format("TotalWeight == {0}",  TotalWeightFilter.ToString()));							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentSetEx> lst = null;
            using (var ctx = new AsycudaDocumentSetExRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetExsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentSetExExcelLine, List<AsycudaDocumentSetExExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentSetExExcelLine
                {
 
                    Declarant_Reference_Number = x.Declarant_Reference_Number ,
                    
 
                    Exchange_Rate = x.Exchange_Rate ,
                    
 
                    Country_of_origin_code = x.Country_of_origin_code ,
                    
 
                    Currency_Code = x.Currency_Code ,
                    
 
                    Description = x.Description ,
                    
 
                    Manifest_Number = x.Manifest_Number ,
                    
 
                    BLNumber = x.BLNumber ,
                    
 
                    EntryTimeStamp = x.EntryTimeStamp ,
                    
 
                    StartingFileCount = x.StartingFileCount ,
                    
 
                    DocumentsCount = x.DocumentsCount ,
                    
 
                    ApportionMethod = x.ApportionMethod ,
                    
 
                    TotalCIF = x.TotalCIF ,
                    
 
                    TotalFreight = x.TotalFreight ,
                    
 
                    TotalWeight = x.TotalWeight 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class AsycudaDocumentSetExExcelLine
        {
		 
                    public string Declarant_Reference_Number { get; set; } 
                    
 
                    public Nullable<double> Exchange_Rate { get; set; } 
                    
 
                    public string Country_of_origin_code { get; set; } 
                    
 
                    public string Currency_Code { get; set; } 
                    
 
                    public string Description { get; set; } 
                    
 
                    public string Manifest_Number { get; set; } 
                    
 
                    public string BLNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> EntryTimeStamp { get; set; } 
                    
 
                    public Nullable<int> StartingFileCount { get; set; } 
                    
 
                    public Nullable<int> DocumentsCount { get; set; } 
                    
 
                    public string ApportionMethod { get; set; } 
                    
 
                    public Nullable<double> TotalCIF { get; set; } 
                    
 
                    public Nullable<double> TotalFreight { get; set; } 
                    
 
                    public Nullable<double> TotalWeight { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class InventoryItemAliasExViewModel_AutoGen : ViewModelBase<InventoryItemAliasExViewModel_AutoGen>
	{

       private static readonly InventoryItemAliasExViewModel_AutoGen instance;
       static InventoryItemAliasExViewModel_AutoGen()
        {
            instance = new InventoryItemAliasExViewModel_AutoGen();
        }

       public static InventoryItemAliasExViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public InventoryItemAliasExViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<InventoryItemAliasEx>(MessageToken.CurrentInventoryItemAliasExChanged, OnCurrentInventoryItemAliasExChanged);
            RegisterToReceiveMessages(MessageToken.InventoryItemAliasExChanged, OnInventoryItemAliasExChanged);
			RegisterToReceiveMessages(MessageToken.InventoryItemAliasExFilterExpressionChanged, OnInventoryItemAliasExFilterExpressionChanged);

 
			RegisterToReceiveMessages<InventoryItemX>(MessageToken.CurrentInventoryItemXChanged, OnCurrentInventoryItemsExChanged);

 			// Recieve messages for Core Current Entities Changed
 

			InventoryItemAliasEx = new VirtualList<InventoryItemAliasEx>(vloader);
			InventoryItemAliasEx.LoadingStateChanged += InventoryItemAliasEx_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(InventoryItemAliasEx, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<InventoryItemAliasEx> _InventoryItemAliasEx = null;
        public VirtualList<InventoryItemAliasEx> InventoryItemAliasEx
        {
            get
            {
                return _InventoryItemAliasEx;
            }
            set
            {
                _InventoryItemAliasEx = value;
            }
        }

		 private void OnInventoryItemAliasExFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			InventoryItemAliasEx.Refresh();
            SelectedInventoryItemAliasEx.Clear();
            NotifyPropertyChanged(x => SelectedInventoryItemAliasEx);
            BeginSendMessage(MessageToken.SelectedInventoryItemAliasExChanged, new NotificationEventArgs(MessageToken.SelectedInventoryItemAliasExChanged));
        }

		void InventoryItemAliasEx_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (InventoryItemAliasEx.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => InventoryItemAliasEx);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("InventoryItemAliasEx | Error occured..." + InventoryItemAliasEx.LastLoadingError.Message);
                    NotifyPropertyChanged(x => InventoryItemAliasEx);
                    break;
            }
           
        }

		
		public readonly InventoryItemAliasExVirturalListLoader vloader = new InventoryItemAliasExVirturalListLoader();

		private ObservableCollection<InventoryItemAliasEx> _selectedInventoryItemAliasEx = new ObservableCollection<InventoryItemAliasEx>();
        public ObservableCollection<InventoryItemAliasEx> SelectedInventoryItemAliasEx
        {
            get
            {
                return _selectedInventoryItemAliasEx;
            }
            set
            {
                _selectedInventoryItemAliasEx = value;
				BeginSendMessage(MessageToken.SelectedInventoryItemAliasExChanged,
                                    new NotificationEventArgs(MessageToken.SelectedInventoryItemAliasExChanged));
				 NotifyPropertyChanged(x => SelectedInventoryItemAliasEx);
            }
        }

        internal void OnCurrentInventoryItemAliasExChanged(object sender, NotificationEventArgs<InventoryItemAliasEx> e)
        {
            if(BaseViewModel.Instance.CurrentInventoryItemAliasEx != null) BaseViewModel.Instance.CurrentInventoryItemAliasEx.PropertyChanged += CurrentInventoryItemAliasEx__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentInventoryItemAliasEx);
        }   

            void CurrentInventoryItemAliasEx__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddInventoryItemsEx")
                   // {
                   //    if(InventoryItemX.Contains(CurrentInventoryItemAliasEx.InventoryItemsEx) == false) InventoryItemX.Add(CurrentInventoryItemAliasEx.InventoryItemsEx);
                    //}
                 } 
        internal void OnInventoryItemAliasExChanged(object sender, NotificationEventArgs e)
        {
            _InventoryItemAliasEx.Refresh();
			NotifyPropertyChanged(x => this.InventoryItemAliasEx);
        }   


 	
		 internal void OnCurrentInventoryItemsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItemX> e)
			{
			if(ViewCurrentInventoryItemsEx == false) return;
			if (e.Data == null || e.Data.ItemNumber == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				
				vloader.FilterExpression = string.Format("ItemNumber == \"{0}\"", e.Data.ItemNumber.ToString());
                }

				InventoryItemAliasEx.Refresh();
				NotifyPropertyChanged(x => this.InventoryItemAliasEx);
                // SendMessage(MessageToken.InventoryItemAliasExChanged, new NotificationEventArgs(MessageToken.InventoryItemAliasExChanged));
                                          
                BaseViewModel.Instance.CurrentInventoryItemAliasEx = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentInventoryItemsEx = false;
         public bool ViewCurrentInventoryItemsEx
         {
             get
             {
                 return _viewCurrentInventoryItemsEx;
             }
             set
             {
                 _viewCurrentInventoryItemsEx = value;
                 NotifyPropertyChanged(x => x.ViewCurrentInventoryItemsEx);
                FilterData();
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_InventoryItemAliasEx.Refresh();
			NotifyPropertyChanged(x => this.InventoryItemAliasEx);
		}

		public async Task SelectAll()
        {
            IEnumerable<InventoryItemAliasEx> lst = null;
            using (var ctx = new InventoryItemAliasExRepository())
            {
                lst = await ctx.GetInventoryItemAliasExByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedInventoryItemAliasEx = new ObservableCollection<InventoryItemAliasEx>(lst);
        }

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _aliasNameFilter;
        public string AliasNameFilter
        {
            get
            {
                return _aliasNameFilter;
            }
            set
            {
                _aliasNameFilter = value;
				NotifyPropertyChanged(x => AliasNameFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			InventoryItemAliasEx.Refresh();
			NotifyPropertyChanged(x => this.InventoryItemAliasEx);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(AliasNameFilter) == false)
						res.Append(" && " + string.Format("AliasName.Contains(\"{0}\")",  AliasNameFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<InventoryItemAliasEx> lst = null;
            using (var ctx = new InventoryItemAliasExRepository())
            {
                lst = await ctx.GetInventoryItemAliasExByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<InventoryItemAliasExExcelLine, List<InventoryItemAliasExExcelLine>>
            {
                dataToPrint = lst.Select(x => new InventoryItemAliasExExcelLine
                {
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    AliasName = x.AliasName 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class InventoryItemAliasExExcelLine
        {
		 
                    public string ItemNumber { get; set; } 
                    
 
                    public string AliasName { get; set; } 
                    
        }

		
    }
}
		

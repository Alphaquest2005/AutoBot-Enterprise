// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_PODocSetViewModel_AutoGen : ViewModelBase<TODO_PODocSetViewModel_AutoGen>
	{

       private static readonly TODO_PODocSetViewModel_AutoGen instance;
       static TODO_PODocSetViewModel_AutoGen()
        {
            instance = new TODO_PODocSetViewModel_AutoGen();
        }

       public static TODO_PODocSetViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_PODocSetViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_PODocSet>(MessageToken.CurrentTODO_PODocSetChanged, OnCurrentTODO_PODocSetChanged);
            RegisterToReceiveMessages(MessageToken.TODO_PODocSetChanged, OnTODO_PODocSetChanged);
			RegisterToReceiveMessages(MessageToken.TODO_PODocSetFilterExpressionChanged, OnTODO_PODocSetFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_PODocSet = new VirtualList<TODO_PODocSet>(vloader);
			TODO_PODocSet.LoadingStateChanged += TODO_PODocSet_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_PODocSet, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_PODocSet> _TODO_PODocSet = null;
        public VirtualList<TODO_PODocSet> TODO_PODocSet
        {
            get
            {
                return _TODO_PODocSet;
            }
            set
            {
                _TODO_PODocSet = value;
            }
        }

		 private void OnTODO_PODocSetFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			TODO_PODocSet.Refresh();
            SelectedTODO_PODocSet.Clear();
            NotifyPropertyChanged(x => SelectedTODO_PODocSet);
            BeginSendMessage(MessageToken.SelectedTODO_PODocSetChanged, new NotificationEventArgs(MessageToken.SelectedTODO_PODocSetChanged));
        }

		void TODO_PODocSet_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_PODocSet.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_PODocSet);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_PODocSet | Error occured..." + TODO_PODocSet.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_PODocSet);
                    break;
            }
           
        }

		
		public readonly TODO_PODocSetVirturalListLoader vloader = new TODO_PODocSetVirturalListLoader();

		private ObservableCollection<TODO_PODocSet> _selectedTODO_PODocSet = new ObservableCollection<TODO_PODocSet>();
        public ObservableCollection<TODO_PODocSet> SelectedTODO_PODocSet
        {
            get
            {
                return _selectedTODO_PODocSet;
            }
            set
            {
                _selectedTODO_PODocSet = value;
				BeginSendMessage(MessageToken.SelectedTODO_PODocSetChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_PODocSetChanged));
				 NotifyPropertyChanged(x => SelectedTODO_PODocSet);
            }
        }

        internal void OnCurrentTODO_PODocSetChanged(object sender, NotificationEventArgs<TODO_PODocSet> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_PODocSet != null) BaseViewModel.Instance.CurrentTODO_PODocSet.PropertyChanged += CurrentTODO_PODocSet__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_PODocSet);
        }   

            void CurrentTODO_PODocSet__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal void OnTODO_PODocSetChanged(object sender, NotificationEventArgs e)
        {
            _TODO_PODocSet.Refresh();
			NotifyPropertyChanged(x => this.TODO_PODocSet);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_PODocSet.Refresh();
			NotifyPropertyChanged(x => this.TODO_PODocSet);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_PODocSet> lst = null;
            using (var ctx = new TODO_PODocSetRepository())
            {
                lst = await ctx.GetTODO_PODocSetByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_PODocSet = new ObservableCollection<TODO_PODocSet>(lst);
        }

 

		private string _country_of_origin_codeFilter;
        public string Country_of_origin_codeFilter
        {
            get
            {
                return _country_of_origin_codeFilter;
            }
            set
            {
                _country_of_origin_codeFilter = value;
				NotifyPropertyChanged(x => Country_of_origin_codeFilter);
                FilterData();
                
            }
        }	

 

		private string _currency_CodeFilter;
        public string Currency_CodeFilter
        {
            get
            {
                return _currency_CodeFilter;
            }
            set
            {
                _currency_CodeFilter = value;
				NotifyPropertyChanged(x => Currency_CodeFilter);
                FilterData();
                
            }
        }	

 

		private string _manifest_NumberFilter;
        public string Manifest_NumberFilter
        {
            get
            {
                return _manifest_NumberFilter;
            }
            set
            {
                _manifest_NumberFilter = value;
				NotifyPropertyChanged(x => Manifest_NumberFilter);
                FilterData();
                
            }
        }	

 

		private string _bLNumberFilter;
        public string BLNumberFilter
        {
            get
            {
                return _bLNumberFilter;
            }
            set
            {
                _bLNumberFilter = value;
				NotifyPropertyChanged(x => BLNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _type_of_declarationFilter;
        public string Type_of_declarationFilter
        {
            get
            {
                return _type_of_declarationFilter;
            }
            set
            {
                _type_of_declarationFilter = value;
				NotifyPropertyChanged(x => Type_of_declarationFilter);
                FilterData();
                
            }
        }	

 

		private string _declaration_gen_procedure_codeFilter;
        public string Declaration_gen_procedure_codeFilter
        {
            get
            {
                return _declaration_gen_procedure_codeFilter;
            }
            set
            {
                _declaration_gen_procedure_codeFilter = value;
				NotifyPropertyChanged(x => Declaration_gen_procedure_codeFilter);
                FilterData();
                
            }
        }	

 

		private string _declarant_Reference_NumberFilter;
        public string Declarant_Reference_NumberFilter
        {
            get
            {
                return _declarant_Reference_NumberFilter;
            }
            set
            {
                _declarant_Reference_NumberFilter = value;
				NotifyPropertyChanged(x => Declarant_Reference_NumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startFileDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartFileDateFilter
        {
            get
            {
                return _startFileDateFilter;
            }
            set
            {
                _startFileDateFilter = value;
				NotifyPropertyChanged(x => StartFileDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endFileDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndFileDateFilter
        {
            get
            {
                return _endFileDateFilter;
            }
            set
            {
                _endFileDateFilter = value;
				NotifyPropertyChanged(x => EndFileDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _fileDateFilter;
        public DateTime? FileDateFilter
        {
            get
            {
                return _fileDateFilter;
            }
            set
            {
                _fileDateFilter = value;
				NotifyPropertyChanged(x => FileDateFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_PODocSet.Refresh();
			NotifyPropertyChanged(x => this.TODO_PODocSet);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(Country_of_origin_codeFilter) == false)
						res.Append(" && " + string.Format("Country_of_origin_code.Contains(\"{0}\")",  Country_of_origin_codeFilter));						
 

									if(string.IsNullOrEmpty(Currency_CodeFilter) == false)
						res.Append(" && " + string.Format("Currency_Code.Contains(\"{0}\")",  Currency_CodeFilter));						
 

									if(string.IsNullOrEmpty(Manifest_NumberFilter) == false)
						res.Append(" && " + string.Format("Manifest_Number.Contains(\"{0}\")",  Manifest_NumberFilter));						
 

									if(string.IsNullOrEmpty(BLNumberFilter) == false)
						res.Append(" && " + string.Format("BLNumber.Contains(\"{0}\")",  BLNumberFilter));						
 

									if(string.IsNullOrEmpty(Type_of_declarationFilter) == false)
						res.Append(" && " + string.Format("Type_of_declaration.Contains(\"{0}\")",  Type_of_declarationFilter));						
 

									if(string.IsNullOrEmpty(Declaration_gen_procedure_codeFilter) == false)
						res.Append(" && " + string.Format("Declaration_gen_procedure_code.Contains(\"{0}\")",  Declaration_gen_procedure_codeFilter));						
 

									if(string.IsNullOrEmpty(Declarant_Reference_NumberFilter) == false)
						res.Append(" && " + string.Format("Declarant_Reference_Number.Contains(\"{0}\")",  Declarant_Reference_NumberFilter));						
 

 

				if (Convert.ToDateTime(StartFileDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndFileDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartFileDateFilter).Date != DateTime.MinValue)
						{
							if(StartFileDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndFileDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("FileDate >= \"{0}\"",  Convert.ToDateTime(StartFileDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndFileDateFilter).Date != DateTime.MinValue)
						{
							if(EndFileDateFilter.HasValue)
								res.Append(" && " + string.Format("FileDate <= \"{0}\"",  Convert.ToDateTime(EndFileDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartFileDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndFileDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_fileDateFilter).Date != DateTime.MinValue)
						{
							if(FileDateFilter.HasValue)
								res.Append(" && " + string.Format("FileDate == \"{0}\"",  Convert.ToDateTime(FileDateFilter).Date.ToString("MM/dd/yyyy")));
						}
							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_PODocSet> lst = null;
            using (var ctx = new TODO_PODocSetRepository())
            {
                lst = await ctx.GetTODO_PODocSetByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_PODocSetExcelLine, List<TODO_PODocSetExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_PODocSetExcelLine
                {
 
                    Country_of_origin_code = x.Country_of_origin_code ,
                    
 
                    Currency_Code = x.Currency_Code ,
                    
 
                    Manifest_Number = x.Manifest_Number ,
                    
 
                    BLNumber = x.BLNumber ,
                    
 
                    Type_of_declaration = x.Type_of_declaration ,
                    
 
                    Declaration_gen_procedure_code = x.Declaration_gen_procedure_code ,
                    
 
                    Declarant_Reference_Number = x.Declarant_Reference_Number ,
                    
 
                    FileDate = x.FileDate 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TODO_PODocSetExcelLine
        {
		 
                    public string Country_of_origin_code { get; set; } 
                    
 
                    public string Currency_Code { get; set; } 
                    
 
                    public string Manifest_Number { get; set; } 
                    
 
                    public string BLNumber { get; set; } 
                    
 
                    public string Type_of_declaration { get; set; } 
                    
 
                    public string Declaration_gen_procedure_code { get; set; } 
                    
 
                    public string Declarant_Reference_Number { get; set; } 
                    
 
                    public Nullable<System.DateTime> FileDate { get; set; } 
                    
        }

		
    }
}
		

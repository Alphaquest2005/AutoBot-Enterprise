// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class ToDo_POToXML_RecreateViewModel_AutoGen : ViewModelBase<ToDo_POToXML_RecreateViewModel_AutoGen>
	{

       private static readonly ToDo_POToXML_RecreateViewModel_AutoGen instance;
       static ToDo_POToXML_RecreateViewModel_AutoGen()
        {
            instance = new ToDo_POToXML_RecreateViewModel_AutoGen();
        }

       public static ToDo_POToXML_RecreateViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public ToDo_POToXML_RecreateViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<ToDo_POToXML_Recreate>(MessageToken.CurrentToDo_POToXML_RecreateChanged, OnCurrentToDo_POToXML_RecreateChanged);
            RegisterToReceiveMessages(MessageToken.ToDo_POToXML_RecreateChanged, OnToDo_POToXML_RecreateChanged);
			RegisterToReceiveMessages(MessageToken.ToDo_POToXML_RecreateFilterExpressionChanged, OnToDo_POToXML_RecreateFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			ToDo_POToXML_Recreate = new VirtualList<ToDo_POToXML_Recreate>(vloader);
			ToDo_POToXML_Recreate.LoadingStateChanged += ToDo_POToXML_Recreate_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(ToDo_POToXML_Recreate, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<ToDo_POToXML_Recreate> _ToDo_POToXML_Recreate = null;
        public VirtualList<ToDo_POToXML_Recreate> ToDo_POToXML_Recreate
        {
            get
            {
                return _ToDo_POToXML_Recreate;
            }
            set
            {
                _ToDo_POToXML_Recreate = value;
                NotifyPropertyChanged( x => x.ToDo_POToXML_Recreate);
            }
        }

		 private void OnToDo_POToXML_RecreateFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => ToDo_POToXML_Recreate.Refresh()).ConfigureAwait(false);
            SelectedToDo_POToXML_Recreate.Clear();
            NotifyPropertyChanged(x => SelectedToDo_POToXML_Recreate);
            BeginSendMessage(MessageToken.SelectedToDo_POToXML_RecreateChanged, new NotificationEventArgs(MessageToken.SelectedToDo_POToXML_RecreateChanged));
        }

		void ToDo_POToXML_Recreate_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (ToDo_POToXML_Recreate.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => ToDo_POToXML_Recreate);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("ToDo_POToXML_Recreate | Error occured..." + ToDo_POToXML_Recreate.LastLoadingError.Message);
                    NotifyPropertyChanged(x => ToDo_POToXML_Recreate);
                    break;
            }
           
        }

		
		public readonly ToDo_POToXML_RecreateVirturalListLoader vloader = new ToDo_POToXML_RecreateVirturalListLoader();

		private ObservableCollection<ToDo_POToXML_Recreate> _selectedToDo_POToXML_Recreate = new ObservableCollection<ToDo_POToXML_Recreate>();
        public ObservableCollection<ToDo_POToXML_Recreate> SelectedToDo_POToXML_Recreate
        {
            get
            {
                return _selectedToDo_POToXML_Recreate;
            }
            set
            {
                _selectedToDo_POToXML_Recreate = value;
				BeginSendMessage(MessageToken.SelectedToDo_POToXML_RecreateChanged,
                                    new NotificationEventArgs(MessageToken.SelectedToDo_POToXML_RecreateChanged));
				 NotifyPropertyChanged(x => SelectedToDo_POToXML_Recreate);
            }
        }

        internal virtual void OnCurrentToDo_POToXML_RecreateChanged(object sender, NotificationEventArgs<ToDo_POToXML_Recreate> e)
        {
            if(BaseViewModel.Instance.CurrentToDo_POToXML_Recreate != null) BaseViewModel.Instance.CurrentToDo_POToXML_Recreate.PropertyChanged += CurrentToDo_POToXML_Recreate__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentToDo_POToXML_Recreate);
        }   

            void CurrentToDo_POToXML_Recreate__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnToDo_POToXML_RecreateChanged(object sender, NotificationEventArgs e)
        {
            _ToDo_POToXML_Recreate.Refresh();
			NotifyPropertyChanged(x => this.ToDo_POToXML_Recreate);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_ToDo_POToXML_Recreate.Refresh();
			NotifyPropertyChanged(x => this.ToDo_POToXML_Recreate);
		}

		public async Task SelectAll()
        {
            IEnumerable<ToDo_POToXML_Recreate> lst = null;
            using (var ctx = new ToDo_POToXML_RecreateRepository())
            {
                lst = await ctx.GetToDo_POToXML_RecreateByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedToDo_POToXML_Recreate = new ObservableCollection<ToDo_POToXML_Recreate>(lst);
        }

 

		private Boolean? _isClassifiedFilter;
        public Boolean? IsClassifiedFilter
        {
            get
            {
                return _isClassifiedFilter;
            }
            set
            {
                _isClassifiedFilter = value;
				NotifyPropertyChanged(x => IsClassifiedFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			ToDo_POToXML_Recreate.Refresh();
			NotifyPropertyChanged(x => this.ToDo_POToXML_Recreate);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(IsClassifiedFilter.HasValue)
						res.Append(" && " + string.Format("IsClassified == {0}",  IsClassifiedFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<ToDo_POToXML_Recreate> lst = null;
            using (var ctx = new ToDo_POToXML_RecreateRepository())
            {
                lst = await ctx.GetToDo_POToXML_RecreateByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<ToDo_POToXML_RecreateExcelLine, List<ToDo_POToXML_RecreateExcelLine>>
            {
                dataToPrint = lst.Select(x => new ToDo_POToXML_RecreateExcelLine
                {
 
                    IsClassified = x.IsClassified 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class ToDo_POToXML_RecreateExcelLine
        {
		 
                    public Nullable<bool> IsClassified { get; set; } 
                    
        }

		
    }
}
		

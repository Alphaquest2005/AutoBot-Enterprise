// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class InfoMappingViewModel_AutoGen : ViewModelBase<InfoMappingViewModel_AutoGen>
	{

       private static readonly InfoMappingViewModel_AutoGen instance;
       static InfoMappingViewModel_AutoGen()
        {
            instance = new InfoMappingViewModel_AutoGen();
        }

       public static InfoMappingViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public InfoMappingViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<InfoMapping>(MessageToken.CurrentInfoMappingChanged, OnCurrentInfoMappingChanged);
            RegisterToReceiveMessages(MessageToken.InfoMappingChanged, OnInfoMappingChanged);
			RegisterToReceiveMessages(MessageToken.InfoMappingFilterExpressionChanged, OnInfoMappingFilterExpressionChanged);

 
			RegisterToReceiveMessages<ApplicationSettings>(MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			InfoMapping = new VirtualList<InfoMapping>(vloader);
			InfoMapping.LoadingStateChanged += InfoMapping_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(InfoMapping, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<InfoMapping> _InfoMapping = null;
        public VirtualList<InfoMapping> InfoMapping
        {
            get
            {
                return _InfoMapping;
            }
            set
            {
                _InfoMapping = value;
            }
        }

		 private void OnInfoMappingFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			InfoMapping.Refresh();
            SelectedInfoMapping.Clear();
            NotifyPropertyChanged(x => SelectedInfoMapping);
            BeginSendMessage(MessageToken.SelectedInfoMappingChanged, new NotificationEventArgs(MessageToken.SelectedInfoMappingChanged));
        }

		void InfoMapping_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (InfoMapping.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => InfoMapping);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("InfoMapping | Error occured..." + InfoMapping.LastLoadingError.Message);
                    NotifyPropertyChanged(x => InfoMapping);
                    break;
            }
           
        }

		
		public readonly InfoMappingVirturalListLoader vloader = new InfoMappingVirturalListLoader();

		private ObservableCollection<InfoMapping> _selectedInfoMapping = new ObservableCollection<InfoMapping>();
        public ObservableCollection<InfoMapping> SelectedInfoMapping
        {
            get
            {
                return _selectedInfoMapping;
            }
            set
            {
                _selectedInfoMapping = value;
				BeginSendMessage(MessageToken.SelectedInfoMappingChanged,
                                    new NotificationEventArgs(MessageToken.SelectedInfoMappingChanged));
				 NotifyPropertyChanged(x => SelectedInfoMapping);
            }
        }

        internal virtual void OnCurrentInfoMappingChanged(object sender, NotificationEventArgs<InfoMapping> e)
        {
            if(BaseViewModel.Instance.CurrentInfoMapping != null) BaseViewModel.Instance.CurrentInfoMapping.PropertyChanged += CurrentInfoMapping__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentInfoMapping);
        }   

            void CurrentInfoMapping__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentInfoMapping.ApplicationSettings) == false) ApplicationSettings.Add(CurrentInfoMapping.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnInfoMappingChanged(object sender, NotificationEventArgs e)
        {
            _InfoMapping.Refresh();
			NotifyPropertyChanged(x => this.InfoMapping);
        }   


 	
		 internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
			{
			if(ViewCurrentApplicationSettings == false) return;
			if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                 }

				InfoMapping.Refresh();
				NotifyPropertyChanged(x => this.InfoMapping);
                // SendMessage(MessageToken.InfoMappingChanged, new NotificationEventArgs(MessageToken.InfoMappingChanged));
                                          
                BaseViewModel.Instance.CurrentInfoMapping = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentApplicationSettings = false;
         public bool ViewCurrentApplicationSettings
         {
             get
             {
                 return _viewCurrentApplicationSettings;
             }
             set
             {
                 _viewCurrentApplicationSettings = value;
                 NotifyPropertyChanged(x => x.ViewCurrentApplicationSettings);
                FilterData();
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_InfoMapping.Refresh();
			NotifyPropertyChanged(x => this.InfoMapping);
		}

		public async Task SelectAll()
        {
            IEnumerable<InfoMapping> lst = null;
            using (var ctx = new InfoMappingRepository())
            {
                lst = await ctx.GetInfoMappingByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedInfoMapping = new ObservableCollection<InfoMapping>(lst);
        }

 

		private string _keyFilter;
        public string KeyFilter
        {
            get
            {
                return _keyFilter;
            }
            set
            {
                _keyFilter = value;
				NotifyPropertyChanged(x => KeyFilter);
                FilterData();
                
            }
        }	

 

		private string _fieldFilter;
        public string FieldFilter
        {
            get
            {
                return _fieldFilter;
            }
            set
            {
                _fieldFilter = value;
				NotifyPropertyChanged(x => FieldFilter);
                FilterData();
                
            }
        }	

 

		private string _entityTypeFilter;
        public string EntityTypeFilter
        {
            get
            {
                return _entityTypeFilter;
            }
            set
            {
                _entityTypeFilter = value;
				NotifyPropertyChanged(x => EntityTypeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			InfoMapping.Refresh();
			NotifyPropertyChanged(x => this.InfoMapping);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(KeyFilter) == false)
						res.Append(" && " + string.Format("Key.Contains(\"{0}\")",  KeyFilter));						
 

									if(string.IsNullOrEmpty(FieldFilter) == false)
						res.Append(" && " + string.Format("Field.Contains(\"{0}\")",  FieldFilter));						
 

									if(string.IsNullOrEmpty(EntityTypeFilter) == false)
						res.Append(" && " + string.Format("EntityType.Contains(\"{0}\")",  EntityTypeFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<InfoMapping> lst = null;
            using (var ctx = new InfoMappingRepository())
            {
                lst = await ctx.GetInfoMappingByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<InfoMappingExcelLine, List<InfoMappingExcelLine>>
            {
                dataToPrint = lst.Select(x => new InfoMappingExcelLine
                {
 
                    Key = x.Key ,
                    
 
                    Field = x.Field ,
                    
 
                    EntityType = x.EntityType 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class InfoMappingExcelLine
        {
		 
                    public string Key { get; set; } 
                    
 
                    public string Field { get; set; } 
                    
 
                    public string EntityType { get; set; } 
                    
        }

		
    }
}
		

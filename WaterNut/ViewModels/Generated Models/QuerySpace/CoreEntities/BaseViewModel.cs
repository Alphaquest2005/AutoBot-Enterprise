// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;



namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // ViewModelBase<BaseViewModel>
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class CoreEntitiesOnCreated: BaseViewModel
        {
           // Load Repository
                public CoreEntitiesOnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentActionDocSetLogsIDChanged, OnCurrentActionDocSetLogsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentActionsIDChanged, OnCurrentActionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentApplicationSettingsIDChanged, OnCurrentApplicationSettingsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentIDChanged, OnCurrentAsycudaDocumentIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocument_AttachmentsIDChanged, OnCurrentAsycudaDocument_AttachmentsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentBasicInfoIDChanged, OnCurrentAsycudaDocumentBasicInfoIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentItemIDChanged, OnCurrentAsycudaDocumentItemIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsIDChanged, OnCurrentAsycudaDocumentItemEntryDataDetailsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentSet_AttachmentsIDChanged, OnCurrentAsycudaDocumentSet_AttachmentsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentSetC71IDChanged, OnCurrentAsycudaDocumentSetC71IDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentSetEntryDataExIDChanged, OnCurrentAsycudaDocumentSetEntryDataExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentSetExIDChanged, OnCurrentAsycudaDocumentSetExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaItemBasicInfoIDChanged, OnCurrentAsycudaItemBasicInfoIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAttachmentLogIDChanged, OnCurrentAttachmentLogIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAttachmentsIDChanged, OnCurrentAttachmentsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentCancelledEntriesLstIDChanged, OnCurrentCancelledEntriesLstIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentContactsIDChanged, OnCurrentContactsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentCustoms_ProcedureIDChanged, OnCurrentCustoms_ProcedureIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentCustomsOperationsIDChanged, OnCurrentCustomsOperationsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentDocument_TypeIDChanged, OnCurrentDocument_TypeIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEmailFileTypesIDChanged, OnCurrentEmailFileTypesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEmailInfoMappingsIDChanged, OnCurrentEmailInfoMappingsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEmailMappingIDChanged, OnCurrentEmailMappingIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEmailsIDChanged, OnCurrentEmailsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEntryPreviousItemsIDChanged, OnCurrentEntryPreviousItemsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentExpiredEntriesLstIDChanged, OnCurrentExpiredEntriesLstIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileGroupsIDChanged, OnCurrentFileGroupsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileTypeActionsIDChanged, OnCurrentFileTypeActionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileTypeContactsIDChanged, OnCurrentFileTypeContactsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileTypeMappingRegExsIDChanged, OnCurrentFileTypeMappingRegExsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileTypeMappingsIDChanged, OnCurrentFileTypeMappingsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileTypesIDChanged, OnCurrentFileTypesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentImportActionsIDChanged, OnCurrentImportActionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInfoMappingIDChanged, OnCurrentInfoMappingIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInfoMappingRegExIDChanged, OnCurrentInfoMappingRegExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInventoryItemAliasXIDChanged, OnCurrentInventoryItemAliasXIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInventoryItemXIDChanged, OnCurrentInventoryItemXIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentLicenceSummaryIDChanged, OnCurrentLicenceSummaryIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentSessionActionsIDChanged, OnCurrentSessionActionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentSessionsIDChanged, OnCurrentSessionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentSessionScheduleIDChanged, OnCurrentSessionScheduleIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentSubItemsIDChanged, OnCurrentSubItemsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_AdjustmentsAlreadyXMLedIDChanged, OnCurrentTODO_AdjustmentsAlreadyXMLedIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_AssessDiscrepancyEntriesIDChanged, OnCurrentTODO_AssessDiscrepancyEntriesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_C71ToCreateIDChanged, OnCurrentTODO_C71ToCreateIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_C71ToXMLIDChanged, OnCurrentTODO_C71ToXMLIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_CreateDiscrepancyEntriesIDChanged, OnCurrentTODO_CreateDiscrepancyEntriesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_CreateEx9IDChanged, OnCurrentTODO_CreateEx9IDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_DeleteDocumentSetIDChanged, OnCurrentTODO_DeleteDocumentSetIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_DiscrepanciesAlreadyXMLedIDChanged, OnCurrentTODO_DiscrepanciesAlreadyXMLedIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_DiscrepanciesErrorsIDChanged, OnCurrentTODO_DiscrepanciesErrorsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_DiscrepanciesExecutionReportIDChanged, OnCurrentTODO_DiscrepanciesExecutionReportIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_DiscrepanciesToAssessIDChanged, OnCurrentTODO_DiscrepanciesToAssessIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_DiscrepancyPreExecutionReportIDChanged, OnCurrentTODO_DiscrepancyPreExecutionReportIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_DocumentsToDeleteIDChanged, OnCurrentTODO_DocumentsToDeleteIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_EntriesExpiringNextMonthIDChanged, OnCurrentTODO_EntriesExpiringNextMonthIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_Error_DuplicateEntryIDChanged, OnCurrentTODO_Error_DuplicateEntryIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_Error_IncompleteImportIDChanged, OnCurrentTODO_Error_IncompleteImportIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_Error_IncompleteItemsIDChanged, OnCurrentTODO_Error_IncompleteItemsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_ERRReport_AllocationsIDChanged, OnCurrentTODO_ERRReport_AllocationsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_ERRReport_AsycudaEntriesIDChanged, OnCurrentTODO_ERRReport_AsycudaEntriesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_ERRReport_AsycudaLinesIDChanged, OnCurrentTODO_ERRReport_AsycudaLinesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_ERRReport_ByItemNumberIDChanged, OnCurrentTODO_ERRReport_ByItemNumberIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_ERRReport_EntryDataDetailsIDChanged, OnCurrentTODO_ERRReport_EntryDataDetailsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_ERRReport_SubmitWarehouseErrorsIDChanged, OnCurrentTODO_ERRReport_SubmitWarehouseErrorsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_ERRReport_UnmappedItemsIDChanged, OnCurrentTODO_ERRReport_UnmappedItemsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_ImportCompleteEntriesIDChanged, OnCurrentTODO_ImportCompleteEntriesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_LicenceAvailableQtyIDChanged, OnCurrentTODO_LicenceAvailableQtyIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_LicenseToXMLIDChanged, OnCurrentTODO_LicenseToXMLIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_LICToCreateIDChanged, OnCurrentTODO_LICToCreateIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_PODocSetIDChanged, OnCurrentTODO_PODocSetIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_PODocSetToAssessIDChanged, OnCurrentTODO_PODocSetToAssessIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_PODocSetToAssessErrorsIDChanged, OnCurrentTODO_PODocSetToAssessErrorsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_PODocSetToExportIDChanged, OnCurrentTODO_PODocSetToExportIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentToDo_POToXMLIDChanged, OnCurrentToDo_POToXMLIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitAllXMLToCustomsIDChanged, OnCurrentTODO_SubmitAllXMLToCustomsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitDiscrepanciesToCustomsIDChanged, OnCurrentTODO_SubmitDiscrepanciesToCustomsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitDocSetWithIncompleteInvoicesIDChanged, OnCurrentTODO_SubmitDocSetWithIncompleteInvoicesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitEntryCIFIDChanged, OnCurrentTODO_SubmitEntryCIFIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitInadequatePackagesIDChanged, OnCurrentTODO_SubmitInadequatePackagesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitIncompleteEntryDataIDChanged, OnCurrentTODO_SubmitIncompleteEntryDataIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitIncompleteSupplierInfoIDChanged, OnCurrentTODO_SubmitIncompleteSupplierInfoIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitMissingInvoicePDFsIDChanged, OnCurrentTODO_SubmitMissingInvoicePDFsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitPOInfoIDChanged, OnCurrentTODO_SubmitPOInfoIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitSalesToCustomsIDChanged, OnCurrentTODO_SubmitSalesToCustomsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitUnclassifiedItemsIDChanged, OnCurrentTODO_SubmitUnclassifiedItemsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_SubmitXMLToCustomsIDChanged, OnCurrentTODO_SubmitXMLToCustomsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_TotalAdjustmentsToProcessIDChanged, OnCurrentTODO_TotalAdjustmentsToProcessIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_UnallocatedSalesIDChanged, OnCurrentTODO_UnallocatedSalesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_UnallocatedShortsIDChanged, OnCurrentTODO_UnallocatedShortsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.Currentxcuda_Supplementary_unitIDChanged, OnCurrentxcuda_Supplementary_unitIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<ActionDocSetLogs>(MessageToken.CurrentActionDocSetLogsChanged, OnCurrentActionDocSetLogsChanged);
                        RegisterToReceiveMessages<Actions>(MessageToken.CurrentActionsChanged, OnCurrentActionsChanged);
                        RegisterToReceiveMessages<ApplicationSettings>(MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
                        RegisterToReceiveMessages<AsycudaDocument>(MessageToken.CurrentAsycudaDocumentChanged, OnCurrentAsycudaDocumentChanged);
                        RegisterToReceiveMessages<AsycudaDocument_Attachments>(MessageToken.CurrentAsycudaDocument_AttachmentsChanged, OnCurrentAsycudaDocument_AttachmentsChanged);
                        RegisterToReceiveMessages<AsycudaDocumentBasicInfo>(MessageToken.CurrentAsycudaDocumentBasicInfoChanged, OnCurrentAsycudaDocumentBasicInfoChanged);
                        RegisterToReceiveMessages<AsycudaDocumentItem>(MessageToken.CurrentAsycudaDocumentItemChanged, OnCurrentAsycudaDocumentItemChanged);
                        RegisterToReceiveMessages<AsycudaDocumentItemEntryDataDetails>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsChanged, OnCurrentAsycudaDocumentItemEntryDataDetailsChanged);
                        RegisterToReceiveMessages<AsycudaDocumentSet_Attachments>(MessageToken.CurrentAsycudaDocumentSet_AttachmentsChanged, OnCurrentAsycudaDocumentSet_AttachmentsChanged);
                        RegisterToReceiveMessages<AsycudaDocumentSetC71>(MessageToken.CurrentAsycudaDocumentSetC71Changed, OnCurrentAsycudaDocumentSetC71Changed);
                        RegisterToReceiveMessages<AsycudaDocumentSetEntryDataEx>(MessageToken.CurrentAsycudaDocumentSetEntryDataExChanged, OnCurrentAsycudaDocumentSetEntryDataExChanged);
                        RegisterToReceiveMessages<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, OnCurrentAsycudaDocumentSetExChanged);
                        RegisterToReceiveMessages<AsycudaItemBasicInfo>(MessageToken.CurrentAsycudaItemBasicInfoChanged, OnCurrentAsycudaItemBasicInfoChanged);
                        RegisterToReceiveMessages<AttachmentLog>(MessageToken.CurrentAttachmentLogChanged, OnCurrentAttachmentLogChanged);
                        RegisterToReceiveMessages<Attachments>(MessageToken.CurrentAttachmentsChanged, OnCurrentAttachmentsChanged);
                        RegisterToReceiveMessages<CancelledEntriesLst>(MessageToken.CurrentCancelledEntriesLstChanged, OnCurrentCancelledEntriesLstChanged);
                        RegisterToReceiveMessages<Contacts>(MessageToken.CurrentContactsChanged, OnCurrentContactsChanged);
                        RegisterToReceiveMessages<Customs_Procedure>(MessageToken.CurrentCustoms_ProcedureChanged, OnCurrentCustoms_ProcedureChanged);
                        RegisterToReceiveMessages<CustomsOperations>(MessageToken.CurrentCustomsOperationsChanged, OnCurrentCustomsOperationsChanged);
                        RegisterToReceiveMessages<Document_Type>(MessageToken.CurrentDocument_TypeChanged, OnCurrentDocument_TypeChanged);
                        RegisterToReceiveMessages<EmailFileTypes>(MessageToken.CurrentEmailFileTypesChanged, OnCurrentEmailFileTypesChanged);
                        RegisterToReceiveMessages<EmailInfoMappings>(MessageToken.CurrentEmailInfoMappingsChanged, OnCurrentEmailInfoMappingsChanged);
                        RegisterToReceiveMessages<EmailMapping>(MessageToken.CurrentEmailMappingChanged, OnCurrentEmailMappingChanged);
                        RegisterToReceiveMessages<Emails>(MessageToken.CurrentEmailsChanged, OnCurrentEmailsChanged);
                        RegisterToReceiveMessages<EntryPreviousItems>(MessageToken.CurrentEntryPreviousItemsChanged, OnCurrentEntryPreviousItemsChanged);
                        RegisterToReceiveMessages<ExpiredEntriesLst>(MessageToken.CurrentExpiredEntriesLstChanged, OnCurrentExpiredEntriesLstChanged);
                        RegisterToReceiveMessages<FileGroups>(MessageToken.CurrentFileGroupsChanged, OnCurrentFileGroupsChanged);
                        RegisterToReceiveMessages<FileTypeActions>(MessageToken.CurrentFileTypeActionsChanged, OnCurrentFileTypeActionsChanged);
                        RegisterToReceiveMessages<FileTypeContacts>(MessageToken.CurrentFileTypeContactsChanged, OnCurrentFileTypeContactsChanged);
                        RegisterToReceiveMessages<FileTypeMappingRegExs>(MessageToken.CurrentFileTypeMappingRegExsChanged, OnCurrentFileTypeMappingRegExsChanged);
                        RegisterToReceiveMessages<FileTypeMappings>(MessageToken.CurrentFileTypeMappingsChanged, OnCurrentFileTypeMappingsChanged);
                        RegisterToReceiveMessages<FileTypes>(MessageToken.CurrentFileTypesChanged, OnCurrentFileTypesChanged);
                        RegisterToReceiveMessages<ImportActions>(MessageToken.CurrentImportActionsChanged, OnCurrentImportActionsChanged);
                        RegisterToReceiveMessages<InfoMapping>(MessageToken.CurrentInfoMappingChanged, OnCurrentInfoMappingChanged);
                        RegisterToReceiveMessages<InfoMappingRegEx>(MessageToken.CurrentInfoMappingRegExChanged, OnCurrentInfoMappingRegExChanged);
                        RegisterToReceiveMessages<InventoryItemAliasX>(MessageToken.CurrentInventoryItemAliasXChanged, OnCurrentInventoryItemAliasXChanged);
                        RegisterToReceiveMessages<InventoryItemX>(MessageToken.CurrentInventoryItemXChanged, OnCurrentInventoryItemXChanged);
                        RegisterToReceiveMessages<LicenceSummary>(MessageToken.CurrentLicenceSummaryChanged, OnCurrentLicenceSummaryChanged);
                        RegisterToReceiveMessages<SessionActions>(MessageToken.CurrentSessionActionsChanged, OnCurrentSessionActionsChanged);
                        RegisterToReceiveMessages<Sessions>(MessageToken.CurrentSessionsChanged, OnCurrentSessionsChanged);
                        RegisterToReceiveMessages<SessionSchedule>(MessageToken.CurrentSessionScheduleChanged, OnCurrentSessionScheduleChanged);
                        RegisterToReceiveMessages<SubItems>(MessageToken.CurrentSubItemsChanged, OnCurrentSubItemsChanged);
                        RegisterToReceiveMessages<TODO_AdjustmentsAlreadyXMLed>(MessageToken.CurrentTODO_AdjustmentsAlreadyXMLedChanged, OnCurrentTODO_AdjustmentsAlreadyXMLedChanged);
                        RegisterToReceiveMessages<TODO_AssessDiscrepancyEntries>(MessageToken.CurrentTODO_AssessDiscrepancyEntriesChanged, OnCurrentTODO_AssessDiscrepancyEntriesChanged);
                        RegisterToReceiveMessages<TODO_C71ToCreate>(MessageToken.CurrentTODO_C71ToCreateChanged, OnCurrentTODO_C71ToCreateChanged);
                        RegisterToReceiveMessages<TODO_C71ToXML>(MessageToken.CurrentTODO_C71ToXMLChanged, OnCurrentTODO_C71ToXMLChanged);
                        RegisterToReceiveMessages<TODO_CreateDiscrepancyEntries>(MessageToken.CurrentTODO_CreateDiscrepancyEntriesChanged, OnCurrentTODO_CreateDiscrepancyEntriesChanged);
                        RegisterToReceiveMessages<TODO_CreateEx9>(MessageToken.CurrentTODO_CreateEx9Changed, OnCurrentTODO_CreateEx9Changed);
                        RegisterToReceiveMessages<TODO_DeleteDocumentSet>(MessageToken.CurrentTODO_DeleteDocumentSetChanged, OnCurrentTODO_DeleteDocumentSetChanged);
                        RegisterToReceiveMessages<TODO_DiscrepanciesAlreadyXMLed>(MessageToken.CurrentTODO_DiscrepanciesAlreadyXMLedChanged, OnCurrentTODO_DiscrepanciesAlreadyXMLedChanged);
                        RegisterToReceiveMessages<TODO_DiscrepanciesErrors>(MessageToken.CurrentTODO_DiscrepanciesErrorsChanged, OnCurrentTODO_DiscrepanciesErrorsChanged);
                        RegisterToReceiveMessages<TODO_DiscrepanciesExecutionReport>(MessageToken.CurrentTODO_DiscrepanciesExecutionReportChanged, OnCurrentTODO_DiscrepanciesExecutionReportChanged);
                        RegisterToReceiveMessages<TODO_DiscrepanciesToAssess>(MessageToken.CurrentTODO_DiscrepanciesToAssessChanged, OnCurrentTODO_DiscrepanciesToAssessChanged);
                        RegisterToReceiveMessages<TODO_DiscrepancyPreExecutionReport>(MessageToken.CurrentTODO_DiscrepancyPreExecutionReportChanged, OnCurrentTODO_DiscrepancyPreExecutionReportChanged);
                        RegisterToReceiveMessages<TODO_DocumentsToDelete>(MessageToken.CurrentTODO_DocumentsToDeleteChanged, OnCurrentTODO_DocumentsToDeleteChanged);
                        RegisterToReceiveMessages<TODO_EntriesExpiringNextMonth>(MessageToken.CurrentTODO_EntriesExpiringNextMonthChanged, OnCurrentTODO_EntriesExpiringNextMonthChanged);
                        RegisterToReceiveMessages<TODO_Error_DuplicateEntry>(MessageToken.CurrentTODO_Error_DuplicateEntryChanged, OnCurrentTODO_Error_DuplicateEntryChanged);
                        RegisterToReceiveMessages<TODO_Error_IncompleteImport>(MessageToken.CurrentTODO_Error_IncompleteImportChanged, OnCurrentTODO_Error_IncompleteImportChanged);
                        RegisterToReceiveMessages<TODO_Error_IncompleteItems>(MessageToken.CurrentTODO_Error_IncompleteItemsChanged, OnCurrentTODO_Error_IncompleteItemsChanged);
                        RegisterToReceiveMessages<TODO_ERRReport_Allocations>(MessageToken.CurrentTODO_ERRReport_AllocationsChanged, OnCurrentTODO_ERRReport_AllocationsChanged);
                        RegisterToReceiveMessages<TODO_ERRReport_AsycudaEntries>(MessageToken.CurrentTODO_ERRReport_AsycudaEntriesChanged, OnCurrentTODO_ERRReport_AsycudaEntriesChanged);
                        RegisterToReceiveMessages<TODO_ERRReport_AsycudaLines>(MessageToken.CurrentTODO_ERRReport_AsycudaLinesChanged, OnCurrentTODO_ERRReport_AsycudaLinesChanged);
                        RegisterToReceiveMessages<TODO_ERRReport_ByItemNumber>(MessageToken.CurrentTODO_ERRReport_ByItemNumberChanged, OnCurrentTODO_ERRReport_ByItemNumberChanged);
                        RegisterToReceiveMessages<TODO_ERRReport_EntryDataDetails>(MessageToken.CurrentTODO_ERRReport_EntryDataDetailsChanged, OnCurrentTODO_ERRReport_EntryDataDetailsChanged);
                        RegisterToReceiveMessages<TODO_ERRReport_SubmitWarehouseErrors>(MessageToken.CurrentTODO_ERRReport_SubmitWarehouseErrorsChanged, OnCurrentTODO_ERRReport_SubmitWarehouseErrorsChanged);
                        RegisterToReceiveMessages<TODO_ERRReport_UnmappedItems>(MessageToken.CurrentTODO_ERRReport_UnmappedItemsChanged, OnCurrentTODO_ERRReport_UnmappedItemsChanged);
                        RegisterToReceiveMessages<TODO_ImportCompleteEntries>(MessageToken.CurrentTODO_ImportCompleteEntriesChanged, OnCurrentTODO_ImportCompleteEntriesChanged);
                        RegisterToReceiveMessages<TODO_LicenceAvailableQty>(MessageToken.CurrentTODO_LicenceAvailableQtyChanged, OnCurrentTODO_LicenceAvailableQtyChanged);
                        RegisterToReceiveMessages<TODO_LicenseToXML>(MessageToken.CurrentTODO_LicenseToXMLChanged, OnCurrentTODO_LicenseToXMLChanged);
                        RegisterToReceiveMessages<TODO_LICToCreate>(MessageToken.CurrentTODO_LICToCreateChanged, OnCurrentTODO_LICToCreateChanged);
                        RegisterToReceiveMessages<TODO_PODocSet>(MessageToken.CurrentTODO_PODocSetChanged, OnCurrentTODO_PODocSetChanged);
                        RegisterToReceiveMessages<TODO_PODocSetToAssess>(MessageToken.CurrentTODO_PODocSetToAssessChanged, OnCurrentTODO_PODocSetToAssessChanged);
                        RegisterToReceiveMessages<TODO_PODocSetToAssessErrors>(MessageToken.CurrentTODO_PODocSetToAssessErrorsChanged, OnCurrentTODO_PODocSetToAssessErrorsChanged);
                        RegisterToReceiveMessages<TODO_PODocSetToExport>(MessageToken.CurrentTODO_PODocSetToExportChanged, OnCurrentTODO_PODocSetToExportChanged);
                        RegisterToReceiveMessages<ToDo_POToXML>(MessageToken.CurrentToDo_POToXMLChanged, OnCurrentToDo_POToXMLChanged);
                        RegisterToReceiveMessages<TODO_SubmitAllXMLToCustoms>(MessageToken.CurrentTODO_SubmitAllXMLToCustomsChanged, OnCurrentTODO_SubmitAllXMLToCustomsChanged);
                        RegisterToReceiveMessages<TODO_SubmitDiscrepanciesToCustoms>(MessageToken.CurrentTODO_SubmitDiscrepanciesToCustomsChanged, OnCurrentTODO_SubmitDiscrepanciesToCustomsChanged);
                        RegisterToReceiveMessages<TODO_SubmitDocSetWithIncompleteInvoices>(MessageToken.CurrentTODO_SubmitDocSetWithIncompleteInvoicesChanged, OnCurrentTODO_SubmitDocSetWithIncompleteInvoicesChanged);
                        RegisterToReceiveMessages<TODO_SubmitEntryCIF>(MessageToken.CurrentTODO_SubmitEntryCIFChanged, OnCurrentTODO_SubmitEntryCIFChanged);
                        RegisterToReceiveMessages<TODO_SubmitInadequatePackages>(MessageToken.CurrentTODO_SubmitInadequatePackagesChanged, OnCurrentTODO_SubmitInadequatePackagesChanged);
                        RegisterToReceiveMessages<TODO_SubmitIncompleteEntryData>(MessageToken.CurrentTODO_SubmitIncompleteEntryDataChanged, OnCurrentTODO_SubmitIncompleteEntryDataChanged);
                        RegisterToReceiveMessages<TODO_SubmitIncompleteSupplierInfo>(MessageToken.CurrentTODO_SubmitIncompleteSupplierInfoChanged, OnCurrentTODO_SubmitIncompleteSupplierInfoChanged);
                        RegisterToReceiveMessages<TODO_SubmitMissingInvoicePDFs>(MessageToken.CurrentTODO_SubmitMissingInvoicePDFsChanged, OnCurrentTODO_SubmitMissingInvoicePDFsChanged);
                        RegisterToReceiveMessages<TODO_SubmitPOInfo>(MessageToken.CurrentTODO_SubmitPOInfoChanged, OnCurrentTODO_SubmitPOInfoChanged);
                        RegisterToReceiveMessages<TODO_SubmitSalesToCustoms>(MessageToken.CurrentTODO_SubmitSalesToCustomsChanged, OnCurrentTODO_SubmitSalesToCustomsChanged);
                        RegisterToReceiveMessages<TODO_SubmitUnclassifiedItems>(MessageToken.CurrentTODO_SubmitUnclassifiedItemsChanged, OnCurrentTODO_SubmitUnclassifiedItemsChanged);
                        RegisterToReceiveMessages<TODO_SubmitXMLToCustoms>(MessageToken.CurrentTODO_SubmitXMLToCustomsChanged, OnCurrentTODO_SubmitXMLToCustomsChanged);
                        RegisterToReceiveMessages<TODO_TotalAdjustmentsToProcess>(MessageToken.CurrentTODO_TotalAdjustmentsToProcessChanged, OnCurrentTODO_TotalAdjustmentsToProcessChanged);
                        RegisterToReceiveMessages<TODO_UnallocatedSales>(MessageToken.CurrentTODO_UnallocatedSalesChanged, OnCurrentTODO_UnallocatedSalesChanged);
                        RegisterToReceiveMessages<TODO_UnallocatedShorts>(MessageToken.CurrentTODO_UnallocatedShortsChanged, OnCurrentTODO_UnallocatedShortsChanged);
                        RegisterToReceiveMessages<xcuda_Supplementary_unit>(MessageToken.Currentxcuda_Supplementary_unitChanged, OnCurrentxcuda_Supplementary_unitChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentActionDocSetLogsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ActionDocSetLogsRepository ctx = new ActionDocSetLogsRepository())
                            {
                                CurrentActionDocSetLogs = await ctx.GetActionDocSetLogs(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentActionDocSetLogs);
                        }

                        private  string _currentActionDocSetLogsID = "";
                        public string CurrentActionDocSetLogsID
                        {
                            get
                            {
                                return _currentActionDocSetLogsID;
                            }
                            set
                            {
                                if (_currentActionDocSetLogsID != value)
                                {
                                    _currentActionDocSetLogsID = value;
                                    if (!string.IsNullOrEmpty(_currentActionDocSetLogsID)) BeginSendMessage(MessageToken.CurrentActionDocSetLogsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentActionDocSetLogsIDChanged, _currentActionDocSetLogsID));
                                    NotifyPropertyChanged(x => this.CurrentActionDocSetLogsID);  
                                }
                            }
                        }
                        internal async void OnCurrentActionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ActionsRepository ctx = new ActionsRepository())
                            {
                                CurrentActions = await ctx.GetActions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentActions);
                        }

                        private  string _currentActionsID = "";
                        public string CurrentActionsID
                        {
                            get
                            {
                                return _currentActionsID;
                            }
                            set
                            {
                                if (_currentActionsID != value)
                                {
                                    _currentActionsID = value;
                                    if (!string.IsNullOrEmpty(_currentActionsID)) BeginSendMessage(MessageToken.CurrentActionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentActionsIDChanged, _currentActionsID));
                                    NotifyPropertyChanged(x => this.CurrentActionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentApplicationSettingsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ApplicationSettingsRepository ctx = new ApplicationSettingsRepository())
                            {
                                CurrentApplicationSettings = await ctx.GetApplicationSettings(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentApplicationSettings);
                        }

                        private  string _currentApplicationSettingsID = "";
                        public string CurrentApplicationSettingsID
                        {
                            get
                            {
                                return _currentApplicationSettingsID;
                            }
                            set
                            {
                                if (_currentApplicationSettingsID != value)
                                {
                                    _currentApplicationSettingsID = value;
                                    if (!string.IsNullOrEmpty(_currentApplicationSettingsID)) BeginSendMessage(MessageToken.CurrentApplicationSettingsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentApplicationSettingsIDChanged, _currentApplicationSettingsID));
                                    NotifyPropertyChanged(x => this.CurrentApplicationSettingsID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentRepository ctx = new AsycudaDocumentRepository())
                            {
                                CurrentAsycudaDocument = await ctx.GetAsycudaDocument(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocument);
                        }

                        private  string _currentAsycudaDocumentID = "";
                        public string CurrentAsycudaDocumentID
                        {
                            get
                            {
                                return _currentAsycudaDocumentID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentID != value)
                                {
                                    _currentAsycudaDocumentID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentIDChanged, _currentAsycudaDocumentID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocument_AttachmentsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocument_AttachmentsRepository ctx = new AsycudaDocument_AttachmentsRepository())
                            {
                                CurrentAsycudaDocument_Attachments = await ctx.GetAsycudaDocument_Attachments(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocument_Attachments);
                        }

                        private  string _currentAsycudaDocument_AttachmentsID = "";
                        public string CurrentAsycudaDocument_AttachmentsID
                        {
                            get
                            {
                                return _currentAsycudaDocument_AttachmentsID;
                            }
                            set
                            {
                                if (_currentAsycudaDocument_AttachmentsID != value)
                                {
                                    _currentAsycudaDocument_AttachmentsID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocument_AttachmentsID)) BeginSendMessage(MessageToken.CurrentAsycudaDocument_AttachmentsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocument_AttachmentsIDChanged, _currentAsycudaDocument_AttachmentsID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocument_AttachmentsID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentBasicInfoIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentBasicInfoRepository ctx = new AsycudaDocumentBasicInfoRepository())
                            {
                                CurrentAsycudaDocumentBasicInfo = await ctx.GetAsycudaDocumentBasicInfo(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentBasicInfo);
                        }

                        private  string _currentAsycudaDocumentBasicInfoID = "";
                        public string CurrentAsycudaDocumentBasicInfoID
                        {
                            get
                            {
                                return _currentAsycudaDocumentBasicInfoID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentBasicInfoID != value)
                                {
                                    _currentAsycudaDocumentBasicInfoID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentBasicInfoID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentBasicInfoIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentBasicInfoIDChanged, _currentAsycudaDocumentBasicInfoID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentBasicInfoID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentItemIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentItemRepository ctx = new AsycudaDocumentItemRepository())
                            {
                                CurrentAsycudaDocumentItem = await ctx.GetAsycudaDocumentItem(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentItem);
                        }

                        private  string _currentAsycudaDocumentItemID = "";
                        public string CurrentAsycudaDocumentItemID
                        {
                            get
                            {
                                return _currentAsycudaDocumentItemID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentItemID != value)
                                {
                                    _currentAsycudaDocumentItemID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentItemID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentItemIDChanged, _currentAsycudaDocumentItemID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentItemEntryDataDetailsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentItemEntryDataDetailsRepository ctx = new AsycudaDocumentItemEntryDataDetailsRepository())
                            {
                                CurrentAsycudaDocumentItemEntryDataDetails = await ctx.GetAsycudaDocumentItemEntryDataDetails(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentItemEntryDataDetails);
                        }

                        private  string _currentAsycudaDocumentItemEntryDataDetailsID = "";
                        public string CurrentAsycudaDocumentItemEntryDataDetailsID
                        {
                            get
                            {
                                return _currentAsycudaDocumentItemEntryDataDetailsID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentItemEntryDataDetailsID != value)
                                {
                                    _currentAsycudaDocumentItemEntryDataDetailsID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentItemEntryDataDetailsID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsIDChanged, _currentAsycudaDocumentItemEntryDataDetailsID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemEntryDataDetailsID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentSet_AttachmentsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentSet_AttachmentsRepository ctx = new AsycudaDocumentSet_AttachmentsRepository())
                            {
                                CurrentAsycudaDocumentSet_Attachments = await ctx.GetAsycudaDocumentSet_Attachments(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentSet_Attachments);
                        }

                        private  string _currentAsycudaDocumentSet_AttachmentsID = "";
                        public string CurrentAsycudaDocumentSet_AttachmentsID
                        {
                            get
                            {
                                return _currentAsycudaDocumentSet_AttachmentsID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentSet_AttachmentsID != value)
                                {
                                    _currentAsycudaDocumentSet_AttachmentsID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentSet_AttachmentsID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentSet_AttachmentsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentSet_AttachmentsIDChanged, _currentAsycudaDocumentSet_AttachmentsID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSet_AttachmentsID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentSetC71IDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentSetC71Repository ctx = new AsycudaDocumentSetC71Repository())
                            {
                                CurrentAsycudaDocumentSetC71 = await ctx.GetAsycudaDocumentSetC71(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentSetC71);
                        }

                        private  string _currentAsycudaDocumentSetC71ID = "";
                        public string CurrentAsycudaDocumentSetC71ID
                        {
                            get
                            {
                                return _currentAsycudaDocumentSetC71ID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentSetC71ID != value)
                                {
                                    _currentAsycudaDocumentSetC71ID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentSetC71ID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetC71IDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentSetC71IDChanged, _currentAsycudaDocumentSetC71ID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetC71ID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentSetEntryDataExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentSetEntryDataExRepository ctx = new AsycudaDocumentSetEntryDataExRepository())
                            {
                                CurrentAsycudaDocumentSetEntryDataEx = await ctx.GetAsycudaDocumentSetEntryDataEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentSetEntryDataEx);
                        }

                        private  string _currentAsycudaDocumentSetEntryDataExID = "";
                        public string CurrentAsycudaDocumentSetEntryDataExID
                        {
                            get
                            {
                                return _currentAsycudaDocumentSetEntryDataExID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentSetEntryDataExID != value)
                                {
                                    _currentAsycudaDocumentSetEntryDataExID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentSetEntryDataExID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetEntryDataExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentSetEntryDataExIDChanged, _currentAsycudaDocumentSetEntryDataExID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryDataExID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentSetExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentSetExRepository ctx = new AsycudaDocumentSetExRepository())
                            {
                                CurrentAsycudaDocumentSetEx = await ctx.GetAsycudaDocumentSetEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentSetEx);
                        }

                        private  string _currentAsycudaDocumentSetExID = "";
                        public string CurrentAsycudaDocumentSetExID
                        {
                            get
                            {
                                return _currentAsycudaDocumentSetExID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentSetExID != value)
                                {
                                    _currentAsycudaDocumentSetExID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentSetExID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentSetExIDChanged, _currentAsycudaDocumentSetExID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetExID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaItemBasicInfoIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaItemBasicInfoRepository ctx = new AsycudaItemBasicInfoRepository())
                            {
                                CurrentAsycudaItemBasicInfo = await ctx.GetAsycudaItemBasicInfo(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaItemBasicInfo);
                        }

                        private  string _currentAsycudaItemBasicInfoID = "";
                        public string CurrentAsycudaItemBasicInfoID
                        {
                            get
                            {
                                return _currentAsycudaItemBasicInfoID;
                            }
                            set
                            {
                                if (_currentAsycudaItemBasicInfoID != value)
                                {
                                    _currentAsycudaItemBasicInfoID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaItemBasicInfoID)) BeginSendMessage(MessageToken.CurrentAsycudaItemBasicInfoIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaItemBasicInfoIDChanged, _currentAsycudaItemBasicInfoID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaItemBasicInfoID);  
                                }
                            }
                        }
                        internal async void OnCurrentAttachmentLogIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AttachmentLogRepository ctx = new AttachmentLogRepository())
                            {
                                CurrentAttachmentLog = await ctx.GetAttachmentLog(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAttachmentLog);
                        }

                        private  string _currentAttachmentLogID = "";
                        public string CurrentAttachmentLogID
                        {
                            get
                            {
                                return _currentAttachmentLogID;
                            }
                            set
                            {
                                if (_currentAttachmentLogID != value)
                                {
                                    _currentAttachmentLogID = value;
                                    if (!string.IsNullOrEmpty(_currentAttachmentLogID)) BeginSendMessage(MessageToken.CurrentAttachmentLogIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAttachmentLogIDChanged, _currentAttachmentLogID));
                                    NotifyPropertyChanged(x => this.CurrentAttachmentLogID);  
                                }
                            }
                        }
                        internal async void OnCurrentAttachmentsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AttachmentsRepository ctx = new AttachmentsRepository())
                            {
                                CurrentAttachments = await ctx.GetAttachments(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAttachments);
                        }

                        private  string _currentAttachmentsID = "";
                        public string CurrentAttachmentsID
                        {
                            get
                            {
                                return _currentAttachmentsID;
                            }
                            set
                            {
                                if (_currentAttachmentsID != value)
                                {
                                    _currentAttachmentsID = value;
                                    if (!string.IsNullOrEmpty(_currentAttachmentsID)) BeginSendMessage(MessageToken.CurrentAttachmentsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAttachmentsIDChanged, _currentAttachmentsID));
                                    NotifyPropertyChanged(x => this.CurrentAttachmentsID);  
                                }
                            }
                        }
                        internal async void OnCurrentCancelledEntriesLstIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (CancelledEntriesLstRepository ctx = new CancelledEntriesLstRepository())
                            {
                                CurrentCancelledEntriesLst = await ctx.GetCancelledEntriesLst(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentCancelledEntriesLst);
                        }

                        private  string _currentCancelledEntriesLstID = "";
                        public string CurrentCancelledEntriesLstID
                        {
                            get
                            {
                                return _currentCancelledEntriesLstID;
                            }
                            set
                            {
                                if (_currentCancelledEntriesLstID != value)
                                {
                                    _currentCancelledEntriesLstID = value;
                                    if (!string.IsNullOrEmpty(_currentCancelledEntriesLstID)) BeginSendMessage(MessageToken.CurrentCancelledEntriesLstIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentCancelledEntriesLstIDChanged, _currentCancelledEntriesLstID));
                                    NotifyPropertyChanged(x => this.CurrentCancelledEntriesLstID);  
                                }
                            }
                        }
                        internal async void OnCurrentContactsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ContactsRepository ctx = new ContactsRepository())
                            {
                                CurrentContacts = await ctx.GetContacts(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentContacts);
                        }

                        private  string _currentContactsID = "";
                        public string CurrentContactsID
                        {
                            get
                            {
                                return _currentContactsID;
                            }
                            set
                            {
                                if (_currentContactsID != value)
                                {
                                    _currentContactsID = value;
                                    if (!string.IsNullOrEmpty(_currentContactsID)) BeginSendMessage(MessageToken.CurrentContactsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentContactsIDChanged, _currentContactsID));
                                    NotifyPropertyChanged(x => this.CurrentContactsID);  
                                }
                            }
                        }
                        internal async void OnCurrentCustoms_ProcedureIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (Customs_ProcedureRepository ctx = new Customs_ProcedureRepository())
                            {
                                CurrentCustoms_Procedure = await ctx.GetCustoms_Procedure(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentCustoms_Procedure);
                        }

                        private  string _currentCustoms_ProcedureID = "";
                        public string CurrentCustoms_ProcedureID
                        {
                            get
                            {
                                return _currentCustoms_ProcedureID;
                            }
                            set
                            {
                                if (_currentCustoms_ProcedureID != value)
                                {
                                    _currentCustoms_ProcedureID = value;
                                    if (!string.IsNullOrEmpty(_currentCustoms_ProcedureID)) BeginSendMessage(MessageToken.CurrentCustoms_ProcedureIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentCustoms_ProcedureIDChanged, _currentCustoms_ProcedureID));
                                    NotifyPropertyChanged(x => this.CurrentCustoms_ProcedureID);  
                                }
                            }
                        }
                        internal async void OnCurrentCustomsOperationsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (CustomsOperationsRepository ctx = new CustomsOperationsRepository())
                            {
                                CurrentCustomsOperations = await ctx.GetCustomsOperations(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentCustomsOperations);
                        }

                        private  string _currentCustomsOperationsID = "";
                        public string CurrentCustomsOperationsID
                        {
                            get
                            {
                                return _currentCustomsOperationsID;
                            }
                            set
                            {
                                if (_currentCustomsOperationsID != value)
                                {
                                    _currentCustomsOperationsID = value;
                                    if (!string.IsNullOrEmpty(_currentCustomsOperationsID)) BeginSendMessage(MessageToken.CurrentCustomsOperationsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentCustomsOperationsIDChanged, _currentCustomsOperationsID));
                                    NotifyPropertyChanged(x => this.CurrentCustomsOperationsID);  
                                }
                            }
                        }
                        internal async void OnCurrentDocument_TypeIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (Document_TypeRepository ctx = new Document_TypeRepository())
                            {
                                CurrentDocument_Type = await ctx.GetDocument_Type(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentDocument_Type);
                        }

                        private  string _currentDocument_TypeID = "";
                        public string CurrentDocument_TypeID
                        {
                            get
                            {
                                return _currentDocument_TypeID;
                            }
                            set
                            {
                                if (_currentDocument_TypeID != value)
                                {
                                    _currentDocument_TypeID = value;
                                    if (!string.IsNullOrEmpty(_currentDocument_TypeID)) BeginSendMessage(MessageToken.CurrentDocument_TypeIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentDocument_TypeIDChanged, _currentDocument_TypeID));
                                    NotifyPropertyChanged(x => this.CurrentDocument_TypeID);  
                                }
                            }
                        }
                        internal async void OnCurrentEmailFileTypesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EmailFileTypesRepository ctx = new EmailFileTypesRepository())
                            {
                                CurrentEmailFileTypes = await ctx.GetEmailFileTypes(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEmailFileTypes);
                        }

                        private  string _currentEmailFileTypesID = "";
                        public string CurrentEmailFileTypesID
                        {
                            get
                            {
                                return _currentEmailFileTypesID;
                            }
                            set
                            {
                                if (_currentEmailFileTypesID != value)
                                {
                                    _currentEmailFileTypesID = value;
                                    if (!string.IsNullOrEmpty(_currentEmailFileTypesID)) BeginSendMessage(MessageToken.CurrentEmailFileTypesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEmailFileTypesIDChanged, _currentEmailFileTypesID));
                                    NotifyPropertyChanged(x => this.CurrentEmailFileTypesID);  
                                }
                            }
                        }
                        internal async void OnCurrentEmailInfoMappingsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EmailInfoMappingsRepository ctx = new EmailInfoMappingsRepository())
                            {
                                CurrentEmailInfoMappings = await ctx.GetEmailInfoMappings(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEmailInfoMappings);
                        }

                        private  string _currentEmailInfoMappingsID = "";
                        public string CurrentEmailInfoMappingsID
                        {
                            get
                            {
                                return _currentEmailInfoMappingsID;
                            }
                            set
                            {
                                if (_currentEmailInfoMappingsID != value)
                                {
                                    _currentEmailInfoMappingsID = value;
                                    if (!string.IsNullOrEmpty(_currentEmailInfoMappingsID)) BeginSendMessage(MessageToken.CurrentEmailInfoMappingsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEmailInfoMappingsIDChanged, _currentEmailInfoMappingsID));
                                    NotifyPropertyChanged(x => this.CurrentEmailInfoMappingsID);  
                                }
                            }
                        }
                        internal async void OnCurrentEmailMappingIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EmailMappingRepository ctx = new EmailMappingRepository())
                            {
                                CurrentEmailMapping = await ctx.GetEmailMapping(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEmailMapping);
                        }

                        private  string _currentEmailMappingID = "";
                        public string CurrentEmailMappingID
                        {
                            get
                            {
                                return _currentEmailMappingID;
                            }
                            set
                            {
                                if (_currentEmailMappingID != value)
                                {
                                    _currentEmailMappingID = value;
                                    if (!string.IsNullOrEmpty(_currentEmailMappingID)) BeginSendMessage(MessageToken.CurrentEmailMappingIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEmailMappingIDChanged, _currentEmailMappingID));
                                    NotifyPropertyChanged(x => this.CurrentEmailMappingID);  
                                }
                            }
                        }
                        internal async void OnCurrentEmailsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EmailsRepository ctx = new EmailsRepository())
                            {
                                CurrentEmails = await ctx.GetEmails(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEmails);
                        }

                        private  string _currentEmailsID = "";
                        public string CurrentEmailsID
                        {
                            get
                            {
                                return _currentEmailsID;
                            }
                            set
                            {
                                if (_currentEmailsID != value)
                                {
                                    _currentEmailsID = value;
                                    if (!string.IsNullOrEmpty(_currentEmailsID)) BeginSendMessage(MessageToken.CurrentEmailsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEmailsIDChanged, _currentEmailsID));
                                    NotifyPropertyChanged(x => this.CurrentEmailsID);  
                                }
                            }
                        }
                        internal async void OnCurrentEntryPreviousItemsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EntryPreviousItemsRepository ctx = new EntryPreviousItemsRepository())
                            {
                                CurrentEntryPreviousItems = await ctx.GetEntryPreviousItems(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEntryPreviousItems);
                        }

                        private  string _currentEntryPreviousItemsID = "";
                        public string CurrentEntryPreviousItemsID
                        {
                            get
                            {
                                return _currentEntryPreviousItemsID;
                            }
                            set
                            {
                                if (_currentEntryPreviousItemsID != value)
                                {
                                    _currentEntryPreviousItemsID = value;
                                    if (!string.IsNullOrEmpty(_currentEntryPreviousItemsID)) BeginSendMessage(MessageToken.CurrentEntryPreviousItemsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEntryPreviousItemsIDChanged, _currentEntryPreviousItemsID));
                                    NotifyPropertyChanged(x => this.CurrentEntryPreviousItemsID);  
                                }
                            }
                        }
                        internal async void OnCurrentExpiredEntriesLstIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ExpiredEntriesLstRepository ctx = new ExpiredEntriesLstRepository())
                            {
                                CurrentExpiredEntriesLst = await ctx.GetExpiredEntriesLst(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentExpiredEntriesLst);
                        }

                        private  string _currentExpiredEntriesLstID = "";
                        public string CurrentExpiredEntriesLstID
                        {
                            get
                            {
                                return _currentExpiredEntriesLstID;
                            }
                            set
                            {
                                if (_currentExpiredEntriesLstID != value)
                                {
                                    _currentExpiredEntriesLstID = value;
                                    if (!string.IsNullOrEmpty(_currentExpiredEntriesLstID)) BeginSendMessage(MessageToken.CurrentExpiredEntriesLstIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentExpiredEntriesLstIDChanged, _currentExpiredEntriesLstID));
                                    NotifyPropertyChanged(x => this.CurrentExpiredEntriesLstID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileGroupsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileGroupsRepository ctx = new FileGroupsRepository())
                            {
                                CurrentFileGroups = await ctx.GetFileGroups(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileGroups);
                        }

                        private  string _currentFileGroupsID = "";
                        public string CurrentFileGroupsID
                        {
                            get
                            {
                                return _currentFileGroupsID;
                            }
                            set
                            {
                                if (_currentFileGroupsID != value)
                                {
                                    _currentFileGroupsID = value;
                                    if (!string.IsNullOrEmpty(_currentFileGroupsID)) BeginSendMessage(MessageToken.CurrentFileGroupsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileGroupsIDChanged, _currentFileGroupsID));
                                    NotifyPropertyChanged(x => this.CurrentFileGroupsID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileTypeActionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileTypeActionsRepository ctx = new FileTypeActionsRepository())
                            {
                                CurrentFileTypeActions = await ctx.GetFileTypeActions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileTypeActions);
                        }

                        private  string _currentFileTypeActionsID = "";
                        public string CurrentFileTypeActionsID
                        {
                            get
                            {
                                return _currentFileTypeActionsID;
                            }
                            set
                            {
                                if (_currentFileTypeActionsID != value)
                                {
                                    _currentFileTypeActionsID = value;
                                    if (!string.IsNullOrEmpty(_currentFileTypeActionsID)) BeginSendMessage(MessageToken.CurrentFileTypeActionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileTypeActionsIDChanged, _currentFileTypeActionsID));
                                    NotifyPropertyChanged(x => this.CurrentFileTypeActionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileTypeContactsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileTypeContactsRepository ctx = new FileTypeContactsRepository())
                            {
                                CurrentFileTypeContacts = await ctx.GetFileTypeContacts(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileTypeContacts);
                        }

                        private  string _currentFileTypeContactsID = "";
                        public string CurrentFileTypeContactsID
                        {
                            get
                            {
                                return _currentFileTypeContactsID;
                            }
                            set
                            {
                                if (_currentFileTypeContactsID != value)
                                {
                                    _currentFileTypeContactsID = value;
                                    if (!string.IsNullOrEmpty(_currentFileTypeContactsID)) BeginSendMessage(MessageToken.CurrentFileTypeContactsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileTypeContactsIDChanged, _currentFileTypeContactsID));
                                    NotifyPropertyChanged(x => this.CurrentFileTypeContactsID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileTypeMappingRegExsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileTypeMappingRegExsRepository ctx = new FileTypeMappingRegExsRepository())
                            {
                                CurrentFileTypeMappingRegExs = await ctx.GetFileTypeMappingRegExs(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileTypeMappingRegExs);
                        }

                        private  string _currentFileTypeMappingRegExsID = "";
                        public string CurrentFileTypeMappingRegExsID
                        {
                            get
                            {
                                return _currentFileTypeMappingRegExsID;
                            }
                            set
                            {
                                if (_currentFileTypeMappingRegExsID != value)
                                {
                                    _currentFileTypeMappingRegExsID = value;
                                    if (!string.IsNullOrEmpty(_currentFileTypeMappingRegExsID)) BeginSendMessage(MessageToken.CurrentFileTypeMappingRegExsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileTypeMappingRegExsIDChanged, _currentFileTypeMappingRegExsID));
                                    NotifyPropertyChanged(x => this.CurrentFileTypeMappingRegExsID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileTypeMappingsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileTypeMappingsRepository ctx = new FileTypeMappingsRepository())
                            {
                                CurrentFileTypeMappings = await ctx.GetFileTypeMappings(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileTypeMappings);
                        }

                        private  string _currentFileTypeMappingsID = "";
                        public string CurrentFileTypeMappingsID
                        {
                            get
                            {
                                return _currentFileTypeMappingsID;
                            }
                            set
                            {
                                if (_currentFileTypeMappingsID != value)
                                {
                                    _currentFileTypeMappingsID = value;
                                    if (!string.IsNullOrEmpty(_currentFileTypeMappingsID)) BeginSendMessage(MessageToken.CurrentFileTypeMappingsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileTypeMappingsIDChanged, _currentFileTypeMappingsID));
                                    NotifyPropertyChanged(x => this.CurrentFileTypeMappingsID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileTypesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileTypesRepository ctx = new FileTypesRepository())
                            {
                                CurrentFileTypes = await ctx.GetFileTypes(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileTypes);
                        }

                        private  string _currentFileTypesID = "";
                        public string CurrentFileTypesID
                        {
                            get
                            {
                                return _currentFileTypesID;
                            }
                            set
                            {
                                if (_currentFileTypesID != value)
                                {
                                    _currentFileTypesID = value;
                                    if (!string.IsNullOrEmpty(_currentFileTypesID)) BeginSendMessage(MessageToken.CurrentFileTypesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileTypesIDChanged, _currentFileTypesID));
                                    NotifyPropertyChanged(x => this.CurrentFileTypesID);  
                                }
                            }
                        }
                        internal async void OnCurrentImportActionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ImportActionsRepository ctx = new ImportActionsRepository())
                            {
                                CurrentImportActions = await ctx.GetImportActions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentImportActions);
                        }

                        private  string _currentImportActionsID = "";
                        public string CurrentImportActionsID
                        {
                            get
                            {
                                return _currentImportActionsID;
                            }
                            set
                            {
                                if (_currentImportActionsID != value)
                                {
                                    _currentImportActionsID = value;
                                    if (!string.IsNullOrEmpty(_currentImportActionsID)) BeginSendMessage(MessageToken.CurrentImportActionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentImportActionsIDChanged, _currentImportActionsID));
                                    NotifyPropertyChanged(x => this.CurrentImportActionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentInfoMappingIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InfoMappingRepository ctx = new InfoMappingRepository())
                            {
                                CurrentInfoMapping = await ctx.GetInfoMapping(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInfoMapping);
                        }

                        private  string _currentInfoMappingID = "";
                        public string CurrentInfoMappingID
                        {
                            get
                            {
                                return _currentInfoMappingID;
                            }
                            set
                            {
                                if (_currentInfoMappingID != value)
                                {
                                    _currentInfoMappingID = value;
                                    if (!string.IsNullOrEmpty(_currentInfoMappingID)) BeginSendMessage(MessageToken.CurrentInfoMappingIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInfoMappingIDChanged, _currentInfoMappingID));
                                    NotifyPropertyChanged(x => this.CurrentInfoMappingID);  
                                }
                            }
                        }
                        internal async void OnCurrentInfoMappingRegExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InfoMappingRegExRepository ctx = new InfoMappingRegExRepository())
                            {
                                CurrentInfoMappingRegEx = await ctx.GetInfoMappingRegEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInfoMappingRegEx);
                        }

                        private  string _currentInfoMappingRegExID = "";
                        public string CurrentInfoMappingRegExID
                        {
                            get
                            {
                                return _currentInfoMappingRegExID;
                            }
                            set
                            {
                                if (_currentInfoMappingRegExID != value)
                                {
                                    _currentInfoMappingRegExID = value;
                                    if (!string.IsNullOrEmpty(_currentInfoMappingRegExID)) BeginSendMessage(MessageToken.CurrentInfoMappingRegExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInfoMappingRegExIDChanged, _currentInfoMappingRegExID));
                                    NotifyPropertyChanged(x => this.CurrentInfoMappingRegExID);  
                                }
                            }
                        }
                        internal async void OnCurrentInventoryItemAliasXIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InventoryItemAliasXRepository ctx = new InventoryItemAliasXRepository())
                            {
                                CurrentInventoryItemAliasX = await ctx.GetInventoryItemAliasX(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInventoryItemAliasX);
                        }

                        private  string _currentInventoryItemAliasXID = "";
                        public string CurrentInventoryItemAliasXID
                        {
                            get
                            {
                                return _currentInventoryItemAliasXID;
                            }
                            set
                            {
                                if (_currentInventoryItemAliasXID != value)
                                {
                                    _currentInventoryItemAliasXID = value;
                                    if (!string.IsNullOrEmpty(_currentInventoryItemAliasXID)) BeginSendMessage(MessageToken.CurrentInventoryItemAliasXIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInventoryItemAliasXIDChanged, _currentInventoryItemAliasXID));
                                    NotifyPropertyChanged(x => this.CurrentInventoryItemAliasXID);  
                                }
                            }
                        }
                        internal async void OnCurrentInventoryItemXIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InventoryItemXRepository ctx = new InventoryItemXRepository())
                            {
                                CurrentInventoryItemX = await ctx.GetInventoryItemX(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInventoryItemX);
                        }

                        private  string _currentInventoryItemXID = "";
                        public string CurrentInventoryItemXID
                        {
                            get
                            {
                                return _currentInventoryItemXID;
                            }
                            set
                            {
                                if (_currentInventoryItemXID != value)
                                {
                                    _currentInventoryItemXID = value;
                                    if (!string.IsNullOrEmpty(_currentInventoryItemXID)) BeginSendMessage(MessageToken.CurrentInventoryItemXIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInventoryItemXIDChanged, _currentInventoryItemXID));
                                    NotifyPropertyChanged(x => this.CurrentInventoryItemXID);  
                                }
                            }
                        }
                        internal async void OnCurrentLicenceSummaryIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (LicenceSummaryRepository ctx = new LicenceSummaryRepository())
                            {
                                CurrentLicenceSummary = await ctx.GetLicenceSummary(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentLicenceSummary);
                        }

                        private  string _currentLicenceSummaryID = "";
                        public string CurrentLicenceSummaryID
                        {
                            get
                            {
                                return _currentLicenceSummaryID;
                            }
                            set
                            {
                                if (_currentLicenceSummaryID != value)
                                {
                                    _currentLicenceSummaryID = value;
                                    if (!string.IsNullOrEmpty(_currentLicenceSummaryID)) BeginSendMessage(MessageToken.CurrentLicenceSummaryIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentLicenceSummaryIDChanged, _currentLicenceSummaryID));
                                    NotifyPropertyChanged(x => this.CurrentLicenceSummaryID);  
                                }
                            }
                        }
                        internal async void OnCurrentSessionActionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (SessionActionsRepository ctx = new SessionActionsRepository())
                            {
                                CurrentSessionActions = await ctx.GetSessionActions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentSessionActions);
                        }

                        private  string _currentSessionActionsID = "";
                        public string CurrentSessionActionsID
                        {
                            get
                            {
                                return _currentSessionActionsID;
                            }
                            set
                            {
                                if (_currentSessionActionsID != value)
                                {
                                    _currentSessionActionsID = value;
                                    if (!string.IsNullOrEmpty(_currentSessionActionsID)) BeginSendMessage(MessageToken.CurrentSessionActionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentSessionActionsIDChanged, _currentSessionActionsID));
                                    NotifyPropertyChanged(x => this.CurrentSessionActionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentSessionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (SessionsRepository ctx = new SessionsRepository())
                            {
                                CurrentSessions = await ctx.GetSessions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentSessions);
                        }

                        private  string _currentSessionsID = "";
                        public string CurrentSessionsID
                        {
                            get
                            {
                                return _currentSessionsID;
                            }
                            set
                            {
                                if (_currentSessionsID != value)
                                {
                                    _currentSessionsID = value;
                                    if (!string.IsNullOrEmpty(_currentSessionsID)) BeginSendMessage(MessageToken.CurrentSessionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentSessionsIDChanged, _currentSessionsID));
                                    NotifyPropertyChanged(x => this.CurrentSessionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentSessionScheduleIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (SessionScheduleRepository ctx = new SessionScheduleRepository())
                            {
                                CurrentSessionSchedule = await ctx.GetSessionSchedule(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentSessionSchedule);
                        }

                        private  string _currentSessionScheduleID = "";
                        public string CurrentSessionScheduleID
                        {
                            get
                            {
                                return _currentSessionScheduleID;
                            }
                            set
                            {
                                if (_currentSessionScheduleID != value)
                                {
                                    _currentSessionScheduleID = value;
                                    if (!string.IsNullOrEmpty(_currentSessionScheduleID)) BeginSendMessage(MessageToken.CurrentSessionScheduleIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentSessionScheduleIDChanged, _currentSessionScheduleID));
                                    NotifyPropertyChanged(x => this.CurrentSessionScheduleID);  
                                }
                            }
                        }
                        internal async void OnCurrentSubItemsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (SubItemsRepository ctx = new SubItemsRepository())
                            {
                                CurrentSubItems = await ctx.GetSubItems(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentSubItems);
                        }

                        private  string _currentSubItemsID = "";
                        public string CurrentSubItemsID
                        {
                            get
                            {
                                return _currentSubItemsID;
                            }
                            set
                            {
                                if (_currentSubItemsID != value)
                                {
                                    _currentSubItemsID = value;
                                    if (!string.IsNullOrEmpty(_currentSubItemsID)) BeginSendMessage(MessageToken.CurrentSubItemsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentSubItemsIDChanged, _currentSubItemsID));
                                    NotifyPropertyChanged(x => this.CurrentSubItemsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_AdjustmentsAlreadyXMLedIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_AdjustmentsAlreadyXMLedRepository ctx = new TODO_AdjustmentsAlreadyXMLedRepository())
                            {
                                CurrentTODO_AdjustmentsAlreadyXMLed = await ctx.GetTODO_AdjustmentsAlreadyXMLed(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_AdjustmentsAlreadyXMLed);
                        }

                        private  string _currentTODO_AdjustmentsAlreadyXMLedID = "";
                        public string CurrentTODO_AdjustmentsAlreadyXMLedID
                        {
                            get
                            {
                                return _currentTODO_AdjustmentsAlreadyXMLedID;
                            }
                            set
                            {
                                if (_currentTODO_AdjustmentsAlreadyXMLedID != value)
                                {
                                    _currentTODO_AdjustmentsAlreadyXMLedID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_AdjustmentsAlreadyXMLedID)) BeginSendMessage(MessageToken.CurrentTODO_AdjustmentsAlreadyXMLedIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_AdjustmentsAlreadyXMLedIDChanged, _currentTODO_AdjustmentsAlreadyXMLedID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_AdjustmentsAlreadyXMLedID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_AssessDiscrepancyEntriesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_AssessDiscrepancyEntriesRepository ctx = new TODO_AssessDiscrepancyEntriesRepository())
                            {
                                CurrentTODO_AssessDiscrepancyEntries = await ctx.GetTODO_AssessDiscrepancyEntries(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_AssessDiscrepancyEntries);
                        }

                        private  string _currentTODO_AssessDiscrepancyEntriesID = "";
                        public string CurrentTODO_AssessDiscrepancyEntriesID
                        {
                            get
                            {
                                return _currentTODO_AssessDiscrepancyEntriesID;
                            }
                            set
                            {
                                if (_currentTODO_AssessDiscrepancyEntriesID != value)
                                {
                                    _currentTODO_AssessDiscrepancyEntriesID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_AssessDiscrepancyEntriesID)) BeginSendMessage(MessageToken.CurrentTODO_AssessDiscrepancyEntriesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_AssessDiscrepancyEntriesIDChanged, _currentTODO_AssessDiscrepancyEntriesID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_AssessDiscrepancyEntriesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_C71ToCreateIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_C71ToCreateRepository ctx = new TODO_C71ToCreateRepository())
                            {
                                CurrentTODO_C71ToCreate = await ctx.GetTODO_C71ToCreate(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_C71ToCreate);
                        }

                        private  string _currentTODO_C71ToCreateID = "";
                        public string CurrentTODO_C71ToCreateID
                        {
                            get
                            {
                                return _currentTODO_C71ToCreateID;
                            }
                            set
                            {
                                if (_currentTODO_C71ToCreateID != value)
                                {
                                    _currentTODO_C71ToCreateID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_C71ToCreateID)) BeginSendMessage(MessageToken.CurrentTODO_C71ToCreateIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_C71ToCreateIDChanged, _currentTODO_C71ToCreateID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_C71ToCreateID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_C71ToXMLIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_C71ToXMLRepository ctx = new TODO_C71ToXMLRepository())
                            {
                                CurrentTODO_C71ToXML = await ctx.GetTODO_C71ToXML(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_C71ToXML);
                        }

                        private  string _currentTODO_C71ToXMLID = "";
                        public string CurrentTODO_C71ToXMLID
                        {
                            get
                            {
                                return _currentTODO_C71ToXMLID;
                            }
                            set
                            {
                                if (_currentTODO_C71ToXMLID != value)
                                {
                                    _currentTODO_C71ToXMLID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_C71ToXMLID)) BeginSendMessage(MessageToken.CurrentTODO_C71ToXMLIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_C71ToXMLIDChanged, _currentTODO_C71ToXMLID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_C71ToXMLID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_CreateDiscrepancyEntriesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_CreateDiscrepancyEntriesRepository ctx = new TODO_CreateDiscrepancyEntriesRepository())
                            {
                                CurrentTODO_CreateDiscrepancyEntries = await ctx.GetTODO_CreateDiscrepancyEntries(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_CreateDiscrepancyEntries);
                        }

                        private  string _currentTODO_CreateDiscrepancyEntriesID = "";
                        public string CurrentTODO_CreateDiscrepancyEntriesID
                        {
                            get
                            {
                                return _currentTODO_CreateDiscrepancyEntriesID;
                            }
                            set
                            {
                                if (_currentTODO_CreateDiscrepancyEntriesID != value)
                                {
                                    _currentTODO_CreateDiscrepancyEntriesID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_CreateDiscrepancyEntriesID)) BeginSendMessage(MessageToken.CurrentTODO_CreateDiscrepancyEntriesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_CreateDiscrepancyEntriesIDChanged, _currentTODO_CreateDiscrepancyEntriesID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_CreateDiscrepancyEntriesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_CreateEx9IDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_CreateEx9Repository ctx = new TODO_CreateEx9Repository())
                            {
                                CurrentTODO_CreateEx9 = await ctx.GetTODO_CreateEx9(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_CreateEx9);
                        }

                        private  string _currentTODO_CreateEx9ID = "";
                        public string CurrentTODO_CreateEx9ID
                        {
                            get
                            {
                                return _currentTODO_CreateEx9ID;
                            }
                            set
                            {
                                if (_currentTODO_CreateEx9ID != value)
                                {
                                    _currentTODO_CreateEx9ID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_CreateEx9ID)) BeginSendMessage(MessageToken.CurrentTODO_CreateEx9IDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_CreateEx9IDChanged, _currentTODO_CreateEx9ID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_CreateEx9ID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_DeleteDocumentSetIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_DeleteDocumentSetRepository ctx = new TODO_DeleteDocumentSetRepository())
                            {
                                CurrentTODO_DeleteDocumentSet = await ctx.GetTODO_DeleteDocumentSet(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_DeleteDocumentSet);
                        }

                        private  string _currentTODO_DeleteDocumentSetID = "";
                        public string CurrentTODO_DeleteDocumentSetID
                        {
                            get
                            {
                                return _currentTODO_DeleteDocumentSetID;
                            }
                            set
                            {
                                if (_currentTODO_DeleteDocumentSetID != value)
                                {
                                    _currentTODO_DeleteDocumentSetID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_DeleteDocumentSetID)) BeginSendMessage(MessageToken.CurrentTODO_DeleteDocumentSetIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_DeleteDocumentSetIDChanged, _currentTODO_DeleteDocumentSetID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_DeleteDocumentSetID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_DiscrepanciesAlreadyXMLedIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_DiscrepanciesAlreadyXMLedRepository ctx = new TODO_DiscrepanciesAlreadyXMLedRepository())
                            {
                                CurrentTODO_DiscrepanciesAlreadyXMLed = await ctx.GetTODO_DiscrepanciesAlreadyXMLed(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_DiscrepanciesAlreadyXMLed);
                        }

                        private  string _currentTODO_DiscrepanciesAlreadyXMLedID = "";
                        public string CurrentTODO_DiscrepanciesAlreadyXMLedID
                        {
                            get
                            {
                                return _currentTODO_DiscrepanciesAlreadyXMLedID;
                            }
                            set
                            {
                                if (_currentTODO_DiscrepanciesAlreadyXMLedID != value)
                                {
                                    _currentTODO_DiscrepanciesAlreadyXMLedID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_DiscrepanciesAlreadyXMLedID)) BeginSendMessage(MessageToken.CurrentTODO_DiscrepanciesAlreadyXMLedIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_DiscrepanciesAlreadyXMLedIDChanged, _currentTODO_DiscrepanciesAlreadyXMLedID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesAlreadyXMLedID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_DiscrepanciesErrorsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_DiscrepanciesErrorsRepository ctx = new TODO_DiscrepanciesErrorsRepository())
                            {
                                CurrentTODO_DiscrepanciesErrors = await ctx.GetTODO_DiscrepanciesErrors(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_DiscrepanciesErrors);
                        }

                        private  string _currentTODO_DiscrepanciesErrorsID = "";
                        public string CurrentTODO_DiscrepanciesErrorsID
                        {
                            get
                            {
                                return _currentTODO_DiscrepanciesErrorsID;
                            }
                            set
                            {
                                if (_currentTODO_DiscrepanciesErrorsID != value)
                                {
                                    _currentTODO_DiscrepanciesErrorsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_DiscrepanciesErrorsID)) BeginSendMessage(MessageToken.CurrentTODO_DiscrepanciesErrorsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_DiscrepanciesErrorsIDChanged, _currentTODO_DiscrepanciesErrorsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesErrorsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_DiscrepanciesExecutionReportIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_DiscrepanciesExecutionReportRepository ctx = new TODO_DiscrepanciesExecutionReportRepository())
                            {
                                CurrentTODO_DiscrepanciesExecutionReport = await ctx.GetTODO_DiscrepanciesExecutionReport(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_DiscrepanciesExecutionReport);
                        }

                        private  string _currentTODO_DiscrepanciesExecutionReportID = "";
                        public string CurrentTODO_DiscrepanciesExecutionReportID
                        {
                            get
                            {
                                return _currentTODO_DiscrepanciesExecutionReportID;
                            }
                            set
                            {
                                if (_currentTODO_DiscrepanciesExecutionReportID != value)
                                {
                                    _currentTODO_DiscrepanciesExecutionReportID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_DiscrepanciesExecutionReportID)) BeginSendMessage(MessageToken.CurrentTODO_DiscrepanciesExecutionReportIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_DiscrepanciesExecutionReportIDChanged, _currentTODO_DiscrepanciesExecutionReportID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesExecutionReportID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_DiscrepanciesToAssessIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_DiscrepanciesToAssessRepository ctx = new TODO_DiscrepanciesToAssessRepository())
                            {
                                CurrentTODO_DiscrepanciesToAssess = await ctx.GetTODO_DiscrepanciesToAssess(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_DiscrepanciesToAssess);
                        }

                        private  string _currentTODO_DiscrepanciesToAssessID = "";
                        public string CurrentTODO_DiscrepanciesToAssessID
                        {
                            get
                            {
                                return _currentTODO_DiscrepanciesToAssessID;
                            }
                            set
                            {
                                if (_currentTODO_DiscrepanciesToAssessID != value)
                                {
                                    _currentTODO_DiscrepanciesToAssessID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_DiscrepanciesToAssessID)) BeginSendMessage(MessageToken.CurrentTODO_DiscrepanciesToAssessIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_DiscrepanciesToAssessIDChanged, _currentTODO_DiscrepanciesToAssessID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesToAssessID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_DiscrepancyPreExecutionReportIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_DiscrepancyPreExecutionReportRepository ctx = new TODO_DiscrepancyPreExecutionReportRepository())
                            {
                                CurrentTODO_DiscrepancyPreExecutionReport = await ctx.GetTODO_DiscrepancyPreExecutionReport(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_DiscrepancyPreExecutionReport);
                        }

                        private  string _currentTODO_DiscrepancyPreExecutionReportID = "";
                        public string CurrentTODO_DiscrepancyPreExecutionReportID
                        {
                            get
                            {
                                return _currentTODO_DiscrepancyPreExecutionReportID;
                            }
                            set
                            {
                                if (_currentTODO_DiscrepancyPreExecutionReportID != value)
                                {
                                    _currentTODO_DiscrepancyPreExecutionReportID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_DiscrepancyPreExecutionReportID)) BeginSendMessage(MessageToken.CurrentTODO_DiscrepancyPreExecutionReportIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_DiscrepancyPreExecutionReportIDChanged, _currentTODO_DiscrepancyPreExecutionReportID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepancyPreExecutionReportID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_DocumentsToDeleteIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_DocumentsToDeleteRepository ctx = new TODO_DocumentsToDeleteRepository())
                            {
                                CurrentTODO_DocumentsToDelete = await ctx.GetTODO_DocumentsToDelete(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_DocumentsToDelete);
                        }

                        private  string _currentTODO_DocumentsToDeleteID = "";
                        public string CurrentTODO_DocumentsToDeleteID
                        {
                            get
                            {
                                return _currentTODO_DocumentsToDeleteID;
                            }
                            set
                            {
                                if (_currentTODO_DocumentsToDeleteID != value)
                                {
                                    _currentTODO_DocumentsToDeleteID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_DocumentsToDeleteID)) BeginSendMessage(MessageToken.CurrentTODO_DocumentsToDeleteIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_DocumentsToDeleteIDChanged, _currentTODO_DocumentsToDeleteID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_DocumentsToDeleteID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_EntriesExpiringNextMonthIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_EntriesExpiringNextMonthRepository ctx = new TODO_EntriesExpiringNextMonthRepository())
                            {
                                CurrentTODO_EntriesExpiringNextMonth = await ctx.GetTODO_EntriesExpiringNextMonth(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_EntriesExpiringNextMonth);
                        }

                        private  string _currentTODO_EntriesExpiringNextMonthID = "";
                        public string CurrentTODO_EntriesExpiringNextMonthID
                        {
                            get
                            {
                                return _currentTODO_EntriesExpiringNextMonthID;
                            }
                            set
                            {
                                if (_currentTODO_EntriesExpiringNextMonthID != value)
                                {
                                    _currentTODO_EntriesExpiringNextMonthID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_EntriesExpiringNextMonthID)) BeginSendMessage(MessageToken.CurrentTODO_EntriesExpiringNextMonthIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_EntriesExpiringNextMonthIDChanged, _currentTODO_EntriesExpiringNextMonthID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_EntriesExpiringNextMonthID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_Error_DuplicateEntryIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_Error_DuplicateEntryRepository ctx = new TODO_Error_DuplicateEntryRepository())
                            {
                                CurrentTODO_Error_DuplicateEntry = await ctx.GetTODO_Error_DuplicateEntry(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_Error_DuplicateEntry);
                        }

                        private  string _currentTODO_Error_DuplicateEntryID = "";
                        public string CurrentTODO_Error_DuplicateEntryID
                        {
                            get
                            {
                                return _currentTODO_Error_DuplicateEntryID;
                            }
                            set
                            {
                                if (_currentTODO_Error_DuplicateEntryID != value)
                                {
                                    _currentTODO_Error_DuplicateEntryID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_Error_DuplicateEntryID)) BeginSendMessage(MessageToken.CurrentTODO_Error_DuplicateEntryIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_Error_DuplicateEntryIDChanged, _currentTODO_Error_DuplicateEntryID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_Error_DuplicateEntryID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_Error_IncompleteImportIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_Error_IncompleteImportRepository ctx = new TODO_Error_IncompleteImportRepository())
                            {
                                CurrentTODO_Error_IncompleteImport = await ctx.GetTODO_Error_IncompleteImport(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_Error_IncompleteImport);
                        }

                        private  string _currentTODO_Error_IncompleteImportID = "";
                        public string CurrentTODO_Error_IncompleteImportID
                        {
                            get
                            {
                                return _currentTODO_Error_IncompleteImportID;
                            }
                            set
                            {
                                if (_currentTODO_Error_IncompleteImportID != value)
                                {
                                    _currentTODO_Error_IncompleteImportID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_Error_IncompleteImportID)) BeginSendMessage(MessageToken.CurrentTODO_Error_IncompleteImportIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_Error_IncompleteImportIDChanged, _currentTODO_Error_IncompleteImportID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_Error_IncompleteImportID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_Error_IncompleteItemsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_Error_IncompleteItemsRepository ctx = new TODO_Error_IncompleteItemsRepository())
                            {
                                CurrentTODO_Error_IncompleteItems = await ctx.GetTODO_Error_IncompleteItems(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_Error_IncompleteItems);
                        }

                        private  string _currentTODO_Error_IncompleteItemsID = "";
                        public string CurrentTODO_Error_IncompleteItemsID
                        {
                            get
                            {
                                return _currentTODO_Error_IncompleteItemsID;
                            }
                            set
                            {
                                if (_currentTODO_Error_IncompleteItemsID != value)
                                {
                                    _currentTODO_Error_IncompleteItemsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_Error_IncompleteItemsID)) BeginSendMessage(MessageToken.CurrentTODO_Error_IncompleteItemsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_Error_IncompleteItemsIDChanged, _currentTODO_Error_IncompleteItemsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_Error_IncompleteItemsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_ERRReport_AllocationsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_ERRReport_AllocationsRepository ctx = new TODO_ERRReport_AllocationsRepository())
                            {
                                CurrentTODO_ERRReport_Allocations = await ctx.GetTODO_ERRReport_Allocations(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_ERRReport_Allocations);
                        }

                        private  string _currentTODO_ERRReport_AllocationsID = "";
                        public string CurrentTODO_ERRReport_AllocationsID
                        {
                            get
                            {
                                return _currentTODO_ERRReport_AllocationsID;
                            }
                            set
                            {
                                if (_currentTODO_ERRReport_AllocationsID != value)
                                {
                                    _currentTODO_ERRReport_AllocationsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_ERRReport_AllocationsID)) BeginSendMessage(MessageToken.CurrentTODO_ERRReport_AllocationsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_ERRReport_AllocationsIDChanged, _currentTODO_ERRReport_AllocationsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_AllocationsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_ERRReport_AsycudaEntriesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_ERRReport_AsycudaEntriesRepository ctx = new TODO_ERRReport_AsycudaEntriesRepository())
                            {
                                CurrentTODO_ERRReport_AsycudaEntries = await ctx.GetTODO_ERRReport_AsycudaEntries(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_ERRReport_AsycudaEntries);
                        }

                        private  string _currentTODO_ERRReport_AsycudaEntriesID = "";
                        public string CurrentTODO_ERRReport_AsycudaEntriesID
                        {
                            get
                            {
                                return _currentTODO_ERRReport_AsycudaEntriesID;
                            }
                            set
                            {
                                if (_currentTODO_ERRReport_AsycudaEntriesID != value)
                                {
                                    _currentTODO_ERRReport_AsycudaEntriesID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_ERRReport_AsycudaEntriesID)) BeginSendMessage(MessageToken.CurrentTODO_ERRReport_AsycudaEntriesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_ERRReport_AsycudaEntriesIDChanged, _currentTODO_ERRReport_AsycudaEntriesID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_AsycudaEntriesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_ERRReport_AsycudaLinesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_ERRReport_AsycudaLinesRepository ctx = new TODO_ERRReport_AsycudaLinesRepository())
                            {
                                CurrentTODO_ERRReport_AsycudaLines = await ctx.GetTODO_ERRReport_AsycudaLines(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_ERRReport_AsycudaLines);
                        }

                        private  string _currentTODO_ERRReport_AsycudaLinesID = "";
                        public string CurrentTODO_ERRReport_AsycudaLinesID
                        {
                            get
                            {
                                return _currentTODO_ERRReport_AsycudaLinesID;
                            }
                            set
                            {
                                if (_currentTODO_ERRReport_AsycudaLinesID != value)
                                {
                                    _currentTODO_ERRReport_AsycudaLinesID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_ERRReport_AsycudaLinesID)) BeginSendMessage(MessageToken.CurrentTODO_ERRReport_AsycudaLinesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_ERRReport_AsycudaLinesIDChanged, _currentTODO_ERRReport_AsycudaLinesID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_AsycudaLinesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_ERRReport_ByItemNumberIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_ERRReport_ByItemNumberRepository ctx = new TODO_ERRReport_ByItemNumberRepository())
                            {
                                CurrentTODO_ERRReport_ByItemNumber = await ctx.GetTODO_ERRReport_ByItemNumber(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_ERRReport_ByItemNumber);
                        }

                        private  string _currentTODO_ERRReport_ByItemNumberID = "";
                        public string CurrentTODO_ERRReport_ByItemNumberID
                        {
                            get
                            {
                                return _currentTODO_ERRReport_ByItemNumberID;
                            }
                            set
                            {
                                if (_currentTODO_ERRReport_ByItemNumberID != value)
                                {
                                    _currentTODO_ERRReport_ByItemNumberID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_ERRReport_ByItemNumberID)) BeginSendMessage(MessageToken.CurrentTODO_ERRReport_ByItemNumberIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_ERRReport_ByItemNumberIDChanged, _currentTODO_ERRReport_ByItemNumberID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_ByItemNumberID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_ERRReport_EntryDataDetailsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_ERRReport_EntryDataDetailsRepository ctx = new TODO_ERRReport_EntryDataDetailsRepository())
                            {
                                CurrentTODO_ERRReport_EntryDataDetails = await ctx.GetTODO_ERRReport_EntryDataDetails(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_ERRReport_EntryDataDetails);
                        }

                        private  string _currentTODO_ERRReport_EntryDataDetailsID = "";
                        public string CurrentTODO_ERRReport_EntryDataDetailsID
                        {
                            get
                            {
                                return _currentTODO_ERRReport_EntryDataDetailsID;
                            }
                            set
                            {
                                if (_currentTODO_ERRReport_EntryDataDetailsID != value)
                                {
                                    _currentTODO_ERRReport_EntryDataDetailsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_ERRReport_EntryDataDetailsID)) BeginSendMessage(MessageToken.CurrentTODO_ERRReport_EntryDataDetailsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_ERRReport_EntryDataDetailsIDChanged, _currentTODO_ERRReport_EntryDataDetailsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_EntryDataDetailsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_ERRReport_SubmitWarehouseErrorsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_ERRReport_SubmitWarehouseErrorsRepository ctx = new TODO_ERRReport_SubmitWarehouseErrorsRepository())
                            {
                                CurrentTODO_ERRReport_SubmitWarehouseErrors = await ctx.GetTODO_ERRReport_SubmitWarehouseErrors(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_ERRReport_SubmitWarehouseErrors);
                        }

                        private  string _currentTODO_ERRReport_SubmitWarehouseErrorsID = "";
                        public string CurrentTODO_ERRReport_SubmitWarehouseErrorsID
                        {
                            get
                            {
                                return _currentTODO_ERRReport_SubmitWarehouseErrorsID;
                            }
                            set
                            {
                                if (_currentTODO_ERRReport_SubmitWarehouseErrorsID != value)
                                {
                                    _currentTODO_ERRReport_SubmitWarehouseErrorsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_ERRReport_SubmitWarehouseErrorsID)) BeginSendMessage(MessageToken.CurrentTODO_ERRReport_SubmitWarehouseErrorsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_ERRReport_SubmitWarehouseErrorsIDChanged, _currentTODO_ERRReport_SubmitWarehouseErrorsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_SubmitWarehouseErrorsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_ERRReport_UnmappedItemsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_ERRReport_UnmappedItemsRepository ctx = new TODO_ERRReport_UnmappedItemsRepository())
                            {
                                CurrentTODO_ERRReport_UnmappedItems = await ctx.GetTODO_ERRReport_UnmappedItems(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_ERRReport_UnmappedItems);
                        }

                        private  string _currentTODO_ERRReport_UnmappedItemsID = "";
                        public string CurrentTODO_ERRReport_UnmappedItemsID
                        {
                            get
                            {
                                return _currentTODO_ERRReport_UnmappedItemsID;
                            }
                            set
                            {
                                if (_currentTODO_ERRReport_UnmappedItemsID != value)
                                {
                                    _currentTODO_ERRReport_UnmappedItemsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_ERRReport_UnmappedItemsID)) BeginSendMessage(MessageToken.CurrentTODO_ERRReport_UnmappedItemsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_ERRReport_UnmappedItemsIDChanged, _currentTODO_ERRReport_UnmappedItemsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_UnmappedItemsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_ImportCompleteEntriesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_ImportCompleteEntriesRepository ctx = new TODO_ImportCompleteEntriesRepository())
                            {
                                CurrentTODO_ImportCompleteEntries = await ctx.GetTODO_ImportCompleteEntries(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_ImportCompleteEntries);
                        }

                        private  string _currentTODO_ImportCompleteEntriesID = "";
                        public string CurrentTODO_ImportCompleteEntriesID
                        {
                            get
                            {
                                return _currentTODO_ImportCompleteEntriesID;
                            }
                            set
                            {
                                if (_currentTODO_ImportCompleteEntriesID != value)
                                {
                                    _currentTODO_ImportCompleteEntriesID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_ImportCompleteEntriesID)) BeginSendMessage(MessageToken.CurrentTODO_ImportCompleteEntriesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_ImportCompleteEntriesIDChanged, _currentTODO_ImportCompleteEntriesID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_ImportCompleteEntriesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_LicenceAvailableQtyIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_LicenceAvailableQtyRepository ctx = new TODO_LicenceAvailableQtyRepository())
                            {
                                CurrentTODO_LicenceAvailableQty = await ctx.GetTODO_LicenceAvailableQty(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_LicenceAvailableQty);
                        }

                        private  string _currentTODO_LicenceAvailableQtyID = "";
                        public string CurrentTODO_LicenceAvailableQtyID
                        {
                            get
                            {
                                return _currentTODO_LicenceAvailableQtyID;
                            }
                            set
                            {
                                if (_currentTODO_LicenceAvailableQtyID != value)
                                {
                                    _currentTODO_LicenceAvailableQtyID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_LicenceAvailableQtyID)) BeginSendMessage(MessageToken.CurrentTODO_LicenceAvailableQtyIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_LicenceAvailableQtyIDChanged, _currentTODO_LicenceAvailableQtyID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_LicenceAvailableQtyID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_LicenseToXMLIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_LicenseToXMLRepository ctx = new TODO_LicenseToXMLRepository())
                            {
                                CurrentTODO_LicenseToXML = await ctx.GetTODO_LicenseToXML(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_LicenseToXML);
                        }

                        private  string _currentTODO_LicenseToXMLID = "";
                        public string CurrentTODO_LicenseToXMLID
                        {
                            get
                            {
                                return _currentTODO_LicenseToXMLID;
                            }
                            set
                            {
                                if (_currentTODO_LicenseToXMLID != value)
                                {
                                    _currentTODO_LicenseToXMLID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_LicenseToXMLID)) BeginSendMessage(MessageToken.CurrentTODO_LicenseToXMLIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_LicenseToXMLIDChanged, _currentTODO_LicenseToXMLID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_LicenseToXMLID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_LICToCreateIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_LICToCreateRepository ctx = new TODO_LICToCreateRepository())
                            {
                                CurrentTODO_LICToCreate = await ctx.GetTODO_LICToCreate(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_LICToCreate);
                        }

                        private  string _currentTODO_LICToCreateID = "";
                        public string CurrentTODO_LICToCreateID
                        {
                            get
                            {
                                return _currentTODO_LICToCreateID;
                            }
                            set
                            {
                                if (_currentTODO_LICToCreateID != value)
                                {
                                    _currentTODO_LICToCreateID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_LICToCreateID)) BeginSendMessage(MessageToken.CurrentTODO_LICToCreateIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_LICToCreateIDChanged, _currentTODO_LICToCreateID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_LICToCreateID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_PODocSetIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_PODocSetRepository ctx = new TODO_PODocSetRepository())
                            {
                                CurrentTODO_PODocSet = await ctx.GetTODO_PODocSet(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_PODocSet);
                        }

                        private  string _currentTODO_PODocSetID = "";
                        public string CurrentTODO_PODocSetID
                        {
                            get
                            {
                                return _currentTODO_PODocSetID;
                            }
                            set
                            {
                                if (_currentTODO_PODocSetID != value)
                                {
                                    _currentTODO_PODocSetID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_PODocSetID)) BeginSendMessage(MessageToken.CurrentTODO_PODocSetIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_PODocSetIDChanged, _currentTODO_PODocSetID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_PODocSetID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_PODocSetToAssessIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_PODocSetToAssessRepository ctx = new TODO_PODocSetToAssessRepository())
                            {
                                CurrentTODO_PODocSetToAssess = await ctx.GetTODO_PODocSetToAssess(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_PODocSetToAssess);
                        }

                        private  string _currentTODO_PODocSetToAssessID = "";
                        public string CurrentTODO_PODocSetToAssessID
                        {
                            get
                            {
                                return _currentTODO_PODocSetToAssessID;
                            }
                            set
                            {
                                if (_currentTODO_PODocSetToAssessID != value)
                                {
                                    _currentTODO_PODocSetToAssessID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_PODocSetToAssessID)) BeginSendMessage(MessageToken.CurrentTODO_PODocSetToAssessIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_PODocSetToAssessIDChanged, _currentTODO_PODocSetToAssessID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_PODocSetToAssessID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_PODocSetToAssessErrorsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_PODocSetToAssessErrorsRepository ctx = new TODO_PODocSetToAssessErrorsRepository())
                            {
                                CurrentTODO_PODocSetToAssessErrors = await ctx.GetTODO_PODocSetToAssessErrors(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_PODocSetToAssessErrors);
                        }

                        private  string _currentTODO_PODocSetToAssessErrorsID = "";
                        public string CurrentTODO_PODocSetToAssessErrorsID
                        {
                            get
                            {
                                return _currentTODO_PODocSetToAssessErrorsID;
                            }
                            set
                            {
                                if (_currentTODO_PODocSetToAssessErrorsID != value)
                                {
                                    _currentTODO_PODocSetToAssessErrorsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_PODocSetToAssessErrorsID)) BeginSendMessage(MessageToken.CurrentTODO_PODocSetToAssessErrorsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_PODocSetToAssessErrorsIDChanged, _currentTODO_PODocSetToAssessErrorsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_PODocSetToAssessErrorsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_PODocSetToExportIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_PODocSetToExportRepository ctx = new TODO_PODocSetToExportRepository())
                            {
                                CurrentTODO_PODocSetToExport = await ctx.GetTODO_PODocSetToExport(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_PODocSetToExport);
                        }

                        private  string _currentTODO_PODocSetToExportID = "";
                        public string CurrentTODO_PODocSetToExportID
                        {
                            get
                            {
                                return _currentTODO_PODocSetToExportID;
                            }
                            set
                            {
                                if (_currentTODO_PODocSetToExportID != value)
                                {
                                    _currentTODO_PODocSetToExportID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_PODocSetToExportID)) BeginSendMessage(MessageToken.CurrentTODO_PODocSetToExportIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_PODocSetToExportIDChanged, _currentTODO_PODocSetToExportID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_PODocSetToExportID);  
                                }
                            }
                        }
                        internal async void OnCurrentToDo_POToXMLIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ToDo_POToXMLRepository ctx = new ToDo_POToXMLRepository())
                            {
                                CurrentToDo_POToXML = await ctx.GetToDo_POToXML(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentToDo_POToXML);
                        }

                        private  string _currentToDo_POToXMLID = "";
                        public string CurrentToDo_POToXMLID
                        {
                            get
                            {
                                return _currentToDo_POToXMLID;
                            }
                            set
                            {
                                if (_currentToDo_POToXMLID != value)
                                {
                                    _currentToDo_POToXMLID = value;
                                    if (!string.IsNullOrEmpty(_currentToDo_POToXMLID)) BeginSendMessage(MessageToken.CurrentToDo_POToXMLIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentToDo_POToXMLIDChanged, _currentToDo_POToXMLID));
                                    NotifyPropertyChanged(x => this.CurrentToDo_POToXMLID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitAllXMLToCustomsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitAllXMLToCustomsRepository ctx = new TODO_SubmitAllXMLToCustomsRepository())
                            {
                                CurrentTODO_SubmitAllXMLToCustoms = await ctx.GetTODO_SubmitAllXMLToCustoms(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitAllXMLToCustoms);
                        }

                        private  string _currentTODO_SubmitAllXMLToCustomsID = "";
                        public string CurrentTODO_SubmitAllXMLToCustomsID
                        {
                            get
                            {
                                return _currentTODO_SubmitAllXMLToCustomsID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitAllXMLToCustomsID != value)
                                {
                                    _currentTODO_SubmitAllXMLToCustomsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitAllXMLToCustomsID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitAllXMLToCustomsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitAllXMLToCustomsIDChanged, _currentTODO_SubmitAllXMLToCustomsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitAllXMLToCustomsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitDiscrepanciesToCustomsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitDiscrepanciesToCustomsRepository ctx = new TODO_SubmitDiscrepanciesToCustomsRepository())
                            {
                                CurrentTODO_SubmitDiscrepanciesToCustoms = await ctx.GetTODO_SubmitDiscrepanciesToCustoms(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitDiscrepanciesToCustoms);
                        }

                        private  string _currentTODO_SubmitDiscrepanciesToCustomsID = "";
                        public string CurrentTODO_SubmitDiscrepanciesToCustomsID
                        {
                            get
                            {
                                return _currentTODO_SubmitDiscrepanciesToCustomsID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitDiscrepanciesToCustomsID != value)
                                {
                                    _currentTODO_SubmitDiscrepanciesToCustomsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitDiscrepanciesToCustomsID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitDiscrepanciesToCustomsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitDiscrepanciesToCustomsIDChanged, _currentTODO_SubmitDiscrepanciesToCustomsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitDiscrepanciesToCustomsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitDocSetWithIncompleteInvoicesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitDocSetWithIncompleteInvoicesRepository ctx = new TODO_SubmitDocSetWithIncompleteInvoicesRepository())
                            {
                                CurrentTODO_SubmitDocSetWithIncompleteInvoices = await ctx.GetTODO_SubmitDocSetWithIncompleteInvoices(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitDocSetWithIncompleteInvoices);
                        }

                        private  string _currentTODO_SubmitDocSetWithIncompleteInvoicesID = "";
                        public string CurrentTODO_SubmitDocSetWithIncompleteInvoicesID
                        {
                            get
                            {
                                return _currentTODO_SubmitDocSetWithIncompleteInvoicesID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitDocSetWithIncompleteInvoicesID != value)
                                {
                                    _currentTODO_SubmitDocSetWithIncompleteInvoicesID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitDocSetWithIncompleteInvoicesID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitDocSetWithIncompleteInvoicesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitDocSetWithIncompleteInvoicesIDChanged, _currentTODO_SubmitDocSetWithIncompleteInvoicesID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitDocSetWithIncompleteInvoicesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitEntryCIFIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitEntryCIFRepository ctx = new TODO_SubmitEntryCIFRepository())
                            {
                                CurrentTODO_SubmitEntryCIF = await ctx.GetTODO_SubmitEntryCIF(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitEntryCIF);
                        }

                        private  string _currentTODO_SubmitEntryCIFID = "";
                        public string CurrentTODO_SubmitEntryCIFID
                        {
                            get
                            {
                                return _currentTODO_SubmitEntryCIFID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitEntryCIFID != value)
                                {
                                    _currentTODO_SubmitEntryCIFID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitEntryCIFID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitEntryCIFIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitEntryCIFIDChanged, _currentTODO_SubmitEntryCIFID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitEntryCIFID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitInadequatePackagesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitInadequatePackagesRepository ctx = new TODO_SubmitInadequatePackagesRepository())
                            {
                                CurrentTODO_SubmitInadequatePackages = await ctx.GetTODO_SubmitInadequatePackages(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitInadequatePackages);
                        }

                        private  string _currentTODO_SubmitInadequatePackagesID = "";
                        public string CurrentTODO_SubmitInadequatePackagesID
                        {
                            get
                            {
                                return _currentTODO_SubmitInadequatePackagesID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitInadequatePackagesID != value)
                                {
                                    _currentTODO_SubmitInadequatePackagesID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitInadequatePackagesID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitInadequatePackagesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitInadequatePackagesIDChanged, _currentTODO_SubmitInadequatePackagesID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitInadequatePackagesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitIncompleteEntryDataIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitIncompleteEntryDataRepository ctx = new TODO_SubmitIncompleteEntryDataRepository())
                            {
                                CurrentTODO_SubmitIncompleteEntryData = await ctx.GetTODO_SubmitIncompleteEntryData(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitIncompleteEntryData);
                        }

                        private  string _currentTODO_SubmitIncompleteEntryDataID = "";
                        public string CurrentTODO_SubmitIncompleteEntryDataID
                        {
                            get
                            {
                                return _currentTODO_SubmitIncompleteEntryDataID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitIncompleteEntryDataID != value)
                                {
                                    _currentTODO_SubmitIncompleteEntryDataID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitIncompleteEntryDataID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitIncompleteEntryDataIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitIncompleteEntryDataIDChanged, _currentTODO_SubmitIncompleteEntryDataID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitIncompleteEntryDataID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitIncompleteSupplierInfoIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitIncompleteSupplierInfoRepository ctx = new TODO_SubmitIncompleteSupplierInfoRepository())
                            {
                                CurrentTODO_SubmitIncompleteSupplierInfo = await ctx.GetTODO_SubmitIncompleteSupplierInfo(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitIncompleteSupplierInfo);
                        }

                        private  string _currentTODO_SubmitIncompleteSupplierInfoID = "";
                        public string CurrentTODO_SubmitIncompleteSupplierInfoID
                        {
                            get
                            {
                                return _currentTODO_SubmitIncompleteSupplierInfoID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitIncompleteSupplierInfoID != value)
                                {
                                    _currentTODO_SubmitIncompleteSupplierInfoID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitIncompleteSupplierInfoID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitIncompleteSupplierInfoIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitIncompleteSupplierInfoIDChanged, _currentTODO_SubmitIncompleteSupplierInfoID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitIncompleteSupplierInfoID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitMissingInvoicePDFsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitMissingInvoicePDFsRepository ctx = new TODO_SubmitMissingInvoicePDFsRepository())
                            {
                                CurrentTODO_SubmitMissingInvoicePDFs = await ctx.GetTODO_SubmitMissingInvoicePDFs(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitMissingInvoicePDFs);
                        }

                        private  string _currentTODO_SubmitMissingInvoicePDFsID = "";
                        public string CurrentTODO_SubmitMissingInvoicePDFsID
                        {
                            get
                            {
                                return _currentTODO_SubmitMissingInvoicePDFsID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitMissingInvoicePDFsID != value)
                                {
                                    _currentTODO_SubmitMissingInvoicePDFsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitMissingInvoicePDFsID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitMissingInvoicePDFsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitMissingInvoicePDFsIDChanged, _currentTODO_SubmitMissingInvoicePDFsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitMissingInvoicePDFsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitPOInfoIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitPOInfoRepository ctx = new TODO_SubmitPOInfoRepository())
                            {
                                CurrentTODO_SubmitPOInfo = await ctx.GetTODO_SubmitPOInfo(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitPOInfo);
                        }

                        private  string _currentTODO_SubmitPOInfoID = "";
                        public string CurrentTODO_SubmitPOInfoID
                        {
                            get
                            {
                                return _currentTODO_SubmitPOInfoID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitPOInfoID != value)
                                {
                                    _currentTODO_SubmitPOInfoID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitPOInfoID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitPOInfoIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitPOInfoIDChanged, _currentTODO_SubmitPOInfoID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitPOInfoID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitSalesToCustomsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitSalesToCustomsRepository ctx = new TODO_SubmitSalesToCustomsRepository())
                            {
                                CurrentTODO_SubmitSalesToCustoms = await ctx.GetTODO_SubmitSalesToCustoms(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitSalesToCustoms);
                        }

                        private  string _currentTODO_SubmitSalesToCustomsID = "";
                        public string CurrentTODO_SubmitSalesToCustomsID
                        {
                            get
                            {
                                return _currentTODO_SubmitSalesToCustomsID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitSalesToCustomsID != value)
                                {
                                    _currentTODO_SubmitSalesToCustomsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitSalesToCustomsID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitSalesToCustomsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitSalesToCustomsIDChanged, _currentTODO_SubmitSalesToCustomsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitSalesToCustomsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitUnclassifiedItemsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitUnclassifiedItemsRepository ctx = new TODO_SubmitUnclassifiedItemsRepository())
                            {
                                CurrentTODO_SubmitUnclassifiedItems = await ctx.GetTODO_SubmitUnclassifiedItems(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitUnclassifiedItems);
                        }

                        private  string _currentTODO_SubmitUnclassifiedItemsID = "";
                        public string CurrentTODO_SubmitUnclassifiedItemsID
                        {
                            get
                            {
                                return _currentTODO_SubmitUnclassifiedItemsID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitUnclassifiedItemsID != value)
                                {
                                    _currentTODO_SubmitUnclassifiedItemsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitUnclassifiedItemsID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitUnclassifiedItemsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitUnclassifiedItemsIDChanged, _currentTODO_SubmitUnclassifiedItemsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitUnclassifiedItemsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_SubmitXMLToCustomsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_SubmitXMLToCustomsRepository ctx = new TODO_SubmitXMLToCustomsRepository())
                            {
                                CurrentTODO_SubmitXMLToCustoms = await ctx.GetTODO_SubmitXMLToCustoms(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_SubmitXMLToCustoms);
                        }

                        private  string _currentTODO_SubmitXMLToCustomsID = "";
                        public string CurrentTODO_SubmitXMLToCustomsID
                        {
                            get
                            {
                                return _currentTODO_SubmitXMLToCustomsID;
                            }
                            set
                            {
                                if (_currentTODO_SubmitXMLToCustomsID != value)
                                {
                                    _currentTODO_SubmitXMLToCustomsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_SubmitXMLToCustomsID)) BeginSendMessage(MessageToken.CurrentTODO_SubmitXMLToCustomsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_SubmitXMLToCustomsIDChanged, _currentTODO_SubmitXMLToCustomsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitXMLToCustomsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_TotalAdjustmentsToProcessIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_TotalAdjustmentsToProcessRepository ctx = new TODO_TotalAdjustmentsToProcessRepository())
                            {
                                CurrentTODO_TotalAdjustmentsToProcess = await ctx.GetTODO_TotalAdjustmentsToProcess(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_TotalAdjustmentsToProcess);
                        }

                        private  string _currentTODO_TotalAdjustmentsToProcessID = "";
                        public string CurrentTODO_TotalAdjustmentsToProcessID
                        {
                            get
                            {
                                return _currentTODO_TotalAdjustmentsToProcessID;
                            }
                            set
                            {
                                if (_currentTODO_TotalAdjustmentsToProcessID != value)
                                {
                                    _currentTODO_TotalAdjustmentsToProcessID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_TotalAdjustmentsToProcessID)) BeginSendMessage(MessageToken.CurrentTODO_TotalAdjustmentsToProcessIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_TotalAdjustmentsToProcessIDChanged, _currentTODO_TotalAdjustmentsToProcessID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_TotalAdjustmentsToProcessID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_UnallocatedSalesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_UnallocatedSalesRepository ctx = new TODO_UnallocatedSalesRepository())
                            {
                                CurrentTODO_UnallocatedSales = await ctx.GetTODO_UnallocatedSales(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_UnallocatedSales);
                        }

                        private  string _currentTODO_UnallocatedSalesID = "";
                        public string CurrentTODO_UnallocatedSalesID
                        {
                            get
                            {
                                return _currentTODO_UnallocatedSalesID;
                            }
                            set
                            {
                                if (_currentTODO_UnallocatedSalesID != value)
                                {
                                    _currentTODO_UnallocatedSalesID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_UnallocatedSalesID)) BeginSendMessage(MessageToken.CurrentTODO_UnallocatedSalesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_UnallocatedSalesIDChanged, _currentTODO_UnallocatedSalesID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_UnallocatedSalesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_UnallocatedShortsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_UnallocatedShortsRepository ctx = new TODO_UnallocatedShortsRepository())
                            {
                                CurrentTODO_UnallocatedShorts = await ctx.GetTODO_UnallocatedShorts(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_UnallocatedShorts);
                        }

                        private  string _currentTODO_UnallocatedShortsID = "";
                        public string CurrentTODO_UnallocatedShortsID
                        {
                            get
                            {
                                return _currentTODO_UnallocatedShortsID;
                            }
                            set
                            {
                                if (_currentTODO_UnallocatedShortsID != value)
                                {
                                    _currentTODO_UnallocatedShortsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_UnallocatedShortsID)) BeginSendMessage(MessageToken.CurrentTODO_UnallocatedShortsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_UnallocatedShortsIDChanged, _currentTODO_UnallocatedShortsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_UnallocatedShortsID);  
                                }
                            }
                        }
                        internal async void OnCurrentxcuda_Supplementary_unitIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (xcuda_Supplementary_unitRepository ctx = new xcuda_Supplementary_unitRepository())
                            {
                                Currentxcuda_Supplementary_unit = await ctx.Getxcuda_Supplementary_unit(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => Currentxcuda_Supplementary_unit);
                        }

                        private  string _currentxcuda_Supplementary_unitID = "";
                        public string Currentxcuda_Supplementary_unitID
                        {
                            get
                            {
                                return _currentxcuda_Supplementary_unitID;
                            }
                            set
                            {
                                if (_currentxcuda_Supplementary_unitID != value)
                                {
                                    _currentxcuda_Supplementary_unitID = value;
                                    if (!string.IsNullOrEmpty(_currentxcuda_Supplementary_unitID)) BeginSendMessage(MessageToken.Currentxcuda_Supplementary_unitIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.Currentxcuda_Supplementary_unitIDChanged, _currentxcuda_Supplementary_unitID));
                                    NotifyPropertyChanged(x => this.Currentxcuda_Supplementary_unitID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentActionDocSetLogsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ActionDocSetLogs> e)
        {
            //CurrentActionDocSetLogs = e.Data;
            NotifyPropertyChanged(m => this.CurrentActionDocSetLogs);
        }

        private  ActionDocSetLogs _currentActionDocSetLogs;
        public ActionDocSetLogs CurrentActionDocSetLogs
        {
            get
            {
                return _currentActionDocSetLogs;
            }
            set
            {
                if (_currentActionDocSetLogs != value)
                {
                    _currentActionDocSetLogs = value;
                    BeginSendMessage(MessageToken.CurrentActionDocSetLogsChanged,
                                                     new NotificationEventArgs<ActionDocSetLogs>(MessageToken.CurrentActionDocSetLogsChanged, _currentActionDocSetLogs)); 
                    NotifyPropertyChanged(x => this.CurrentActionDocSetLogs);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<ActionDocSetLogs> _vcurrentActionDocSetLogs;
        public VirtualListItem<ActionDocSetLogs> VCurrentActionDocSetLogs
        {
            get
            {
                return _vcurrentActionDocSetLogs;
            }
            set
            {
                if (_vcurrentActionDocSetLogs != value)
                {
                    _vcurrentActionDocSetLogs = value;
					if(_vcurrentActionDocSetLogs != null) CurrentActionDocSetLogs = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentActionDocSetLogs);                    
                }
            }
        }



                     
       

        internal void OnCurrentActionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Actions> e)
        {
            //CurrentActions = e.Data;
            NotifyPropertyChanged(m => this.CurrentActions);
        }

        private  Actions _currentActions;
        public Actions CurrentActions
        {
            get
            {
                return _currentActions;
            }
            set
            {
                if (_currentActions != value)
                {
                    _currentActions = value;
                    BeginSendMessage(MessageToken.CurrentActionsChanged,
                                                     new NotificationEventArgs<Actions>(MessageToken.CurrentActionsChanged, _currentActions)); 
                    NotifyPropertyChanged(x => this.CurrentActions);    
                    // all current navigation properties = null
                 CurrentFileTypeActions = null;
                 CurrentSessionActions = null;
                 CurrentActionDocSetLogs = null;
   
                }
            }
        }

		VirtualListItem<Actions> _vcurrentActions;
        public VirtualListItem<Actions> VCurrentActions
        {
            get
            {
                return _vcurrentActions;
            }
            set
            {
                if (_vcurrentActions != value)
                {
                    _vcurrentActions = value;
					if(_vcurrentActions != null) CurrentActions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentActions);                    
                }
            }
        }



                     
       

        internal void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
        {
            //CurrentApplicationSettings = e.Data;
            NotifyPropertyChanged(m => this.CurrentApplicationSettings);
        }

        private  ApplicationSettings _currentApplicationSettings;
        public ApplicationSettings CurrentApplicationSettings
        {
            get
            {
                return _currentApplicationSettings;
            }
            set
            {
                if (_currentApplicationSettings != value)
                {
                    _currentApplicationSettings = value;
                    BeginSendMessage(MessageToken.CurrentApplicationSettingsChanged,
                                                     new NotificationEventArgs<ApplicationSettings>(MessageToken.CurrentApplicationSettingsChanged, _currentApplicationSettings)); 
                    NotifyPropertyChanged(x => this.CurrentApplicationSettings);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentSetEx = null;
                 CurrentAsycudaDocument = null;
                 CurrentAsycudaDocumentItem = null;
                 CurrentInventoryItemX = null;
                 CurrentFileTypes = null;
                 CurrentInfoMapping = null;
                 CurrentEmailMapping = null;
   
                }
            }
        }

		VirtualListItem<ApplicationSettings> _vcurrentApplicationSettings;
        public VirtualListItem<ApplicationSettings> VCurrentApplicationSettings
        {
            get
            {
                return _vcurrentApplicationSettings;
            }
            set
            {
                if (_vcurrentApplicationSettings != value)
                {
                    _vcurrentApplicationSettings = value;
					if(_vcurrentApplicationSettings != null) CurrentApplicationSettings = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentApplicationSettings);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocument> e)
        {
            //CurrentAsycudaDocument = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocument);
        }

        private  AsycudaDocument _currentAsycudaDocument;
        public AsycudaDocument CurrentAsycudaDocument
        {
            get
            {
                return _currentAsycudaDocument;
            }
            set
            {
                if (_currentAsycudaDocument != value)
                {
                    _currentAsycudaDocument = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentChanged,
                                                     new NotificationEventArgs<AsycudaDocument>(MessageToken.CurrentAsycudaDocumentChanged, _currentAsycudaDocument)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocument);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentItem = null;
   
                }
            }
        }

		VirtualListItem<AsycudaDocument> _vcurrentAsycudaDocument;
        public VirtualListItem<AsycudaDocument> VCurrentAsycudaDocument
        {
            get
            {
                return _vcurrentAsycudaDocument;
            }
            set
            {
                if (_vcurrentAsycudaDocument != value)
                {
                    _vcurrentAsycudaDocument = value;
					if(_vcurrentAsycudaDocument != null) CurrentAsycudaDocument = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocument);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocument_AttachmentsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocument_Attachments> e)
        {
            //CurrentAsycudaDocument_Attachments = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocument_Attachments);
        }

        private  AsycudaDocument_Attachments _currentAsycudaDocument_Attachments;
        public AsycudaDocument_Attachments CurrentAsycudaDocument_Attachments
        {
            get
            {
                return _currentAsycudaDocument_Attachments;
            }
            set
            {
                if (_currentAsycudaDocument_Attachments != value)
                {
                    _currentAsycudaDocument_Attachments = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocument_AttachmentsChanged,
                                                     new NotificationEventArgs<AsycudaDocument_Attachments>(MessageToken.CurrentAsycudaDocument_AttachmentsChanged, _currentAsycudaDocument_Attachments)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocument_Attachments);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocument_Attachments> _vcurrentAsycudaDocument_Attachments;
        public VirtualListItem<AsycudaDocument_Attachments> VCurrentAsycudaDocument_Attachments
        {
            get
            {
                return _vcurrentAsycudaDocument_Attachments;
            }
            set
            {
                if (_vcurrentAsycudaDocument_Attachments != value)
                {
                    _vcurrentAsycudaDocument_Attachments = value;
					if(_vcurrentAsycudaDocument_Attachments != null) CurrentAsycudaDocument_Attachments = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocument_Attachments);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentBasicInfoChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentBasicInfo> e)
        {
            //CurrentAsycudaDocumentBasicInfo = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentBasicInfo);
        }

        private  AsycudaDocumentBasicInfo _currentAsycudaDocumentBasicInfo;
        public AsycudaDocumentBasicInfo CurrentAsycudaDocumentBasicInfo
        {
            get
            {
                return _currentAsycudaDocumentBasicInfo;
            }
            set
            {
                if (_currentAsycudaDocumentBasicInfo != value)
                {
                    _currentAsycudaDocumentBasicInfo = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentBasicInfoChanged,
                                                     new NotificationEventArgs<AsycudaDocumentBasicInfo>(MessageToken.CurrentAsycudaDocumentBasicInfoChanged, _currentAsycudaDocumentBasicInfo)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentBasicInfo);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentBasicInfo> _vcurrentAsycudaDocumentBasicInfo;
        public VirtualListItem<AsycudaDocumentBasicInfo> VCurrentAsycudaDocumentBasicInfo
        {
            get
            {
                return _vcurrentAsycudaDocumentBasicInfo;
            }
            set
            {
                if (_vcurrentAsycudaDocumentBasicInfo != value)
                {
                    _vcurrentAsycudaDocumentBasicInfo = value;
					if(_vcurrentAsycudaDocumentBasicInfo != null) CurrentAsycudaDocumentBasicInfo = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentBasicInfo);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItem> e)
        {
            //CurrentAsycudaDocumentItem = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentItem);
        }

        private  AsycudaDocumentItem _currentAsycudaDocumentItem;
        public AsycudaDocumentItem CurrentAsycudaDocumentItem
        {
            get
            {
                return _currentAsycudaDocumentItem;
            }
            set
            {
                if (_currentAsycudaDocumentItem != value)
                {
                    _currentAsycudaDocumentItem = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemChanged,
                                                     new NotificationEventArgs<AsycudaDocumentItem>(MessageToken.CurrentAsycudaDocumentItemChanged, _currentAsycudaDocumentItem)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItem);    
                    // all current navigation properties = null
                 CurrentSubItems = null;
                 CurrentEntryPreviousItems = null;
                 Currentxcuda_Supplementary_unit = null;
                 CurrentAsycudaDocumentItemEntryDataDetails = null;
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentItem> _vcurrentAsycudaDocumentItem;
        public VirtualListItem<AsycudaDocumentItem> VCurrentAsycudaDocumentItem
        {
            get
            {
                return _vcurrentAsycudaDocumentItem;
            }
            set
            {
                if (_vcurrentAsycudaDocumentItem != value)
                {
                    _vcurrentAsycudaDocumentItem = value;
					if(_vcurrentAsycudaDocumentItem != null) CurrentAsycudaDocumentItem = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentItem);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentItemEntryDataDetailsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItemEntryDataDetails> e)
        {
            //CurrentAsycudaDocumentItemEntryDataDetails = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentItemEntryDataDetails);
        }

        private  AsycudaDocumentItemEntryDataDetails _currentAsycudaDocumentItemEntryDataDetails;
        public AsycudaDocumentItemEntryDataDetails CurrentAsycudaDocumentItemEntryDataDetails
        {
            get
            {
                return _currentAsycudaDocumentItemEntryDataDetails;
            }
            set
            {
                if (_currentAsycudaDocumentItemEntryDataDetails != value)
                {
                    _currentAsycudaDocumentItemEntryDataDetails = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsChanged,
                                                     new NotificationEventArgs<AsycudaDocumentItemEntryDataDetails>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsChanged, _currentAsycudaDocumentItemEntryDataDetails)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemEntryDataDetails);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentItemEntryDataDetails> _vcurrentAsycudaDocumentItemEntryDataDetails;
        public VirtualListItem<AsycudaDocumentItemEntryDataDetails> VCurrentAsycudaDocumentItemEntryDataDetails
        {
            get
            {
                return _vcurrentAsycudaDocumentItemEntryDataDetails;
            }
            set
            {
                if (_vcurrentAsycudaDocumentItemEntryDataDetails != value)
                {
                    _vcurrentAsycudaDocumentItemEntryDataDetails = value;
					if(_vcurrentAsycudaDocumentItemEntryDataDetails != null) CurrentAsycudaDocumentItemEntryDataDetails = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentItemEntryDataDetails);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentSet_AttachmentsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSet_Attachments> e)
        {
            //CurrentAsycudaDocumentSet_Attachments = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentSet_Attachments);
        }

        private  AsycudaDocumentSet_Attachments _currentAsycudaDocumentSet_Attachments;
        public AsycudaDocumentSet_Attachments CurrentAsycudaDocumentSet_Attachments
        {
            get
            {
                return _currentAsycudaDocumentSet_Attachments;
            }
            set
            {
                if (_currentAsycudaDocumentSet_Attachments != value)
                {
                    _currentAsycudaDocumentSet_Attachments = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentSet_AttachmentsChanged,
                                                     new NotificationEventArgs<AsycudaDocumentSet_Attachments>(MessageToken.CurrentAsycudaDocumentSet_AttachmentsChanged, _currentAsycudaDocumentSet_Attachments)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSet_Attachments);    
                    // all current navigation properties = null
                 CurrentAttachmentLog = null;
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentSet_Attachments> _vcurrentAsycudaDocumentSet_Attachments;
        public VirtualListItem<AsycudaDocumentSet_Attachments> VCurrentAsycudaDocumentSet_Attachments
        {
            get
            {
                return _vcurrentAsycudaDocumentSet_Attachments;
            }
            set
            {
                if (_vcurrentAsycudaDocumentSet_Attachments != value)
                {
                    _vcurrentAsycudaDocumentSet_Attachments = value;
					if(_vcurrentAsycudaDocumentSet_Attachments != null) CurrentAsycudaDocumentSet_Attachments = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentSet_Attachments);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentSetC71Changed(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetC71> e)
        {
            //CurrentAsycudaDocumentSetC71 = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentSetC71);
        }

        private  AsycudaDocumentSetC71 _currentAsycudaDocumentSetC71;
        public AsycudaDocumentSetC71 CurrentAsycudaDocumentSetC71
        {
            get
            {
                return _currentAsycudaDocumentSetC71;
            }
            set
            {
                if (_currentAsycudaDocumentSetC71 != value)
                {
                    _currentAsycudaDocumentSetC71 = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetC71Changed,
                                                     new NotificationEventArgs<AsycudaDocumentSetC71>(MessageToken.CurrentAsycudaDocumentSetC71Changed, _currentAsycudaDocumentSetC71)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetC71);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentSetC71> _vcurrentAsycudaDocumentSetC71;
        public VirtualListItem<AsycudaDocumentSetC71> VCurrentAsycudaDocumentSetC71
        {
            get
            {
                return _vcurrentAsycudaDocumentSetC71;
            }
            set
            {
                if (_vcurrentAsycudaDocumentSetC71 != value)
                {
                    _vcurrentAsycudaDocumentSetC71 = value;
					if(_vcurrentAsycudaDocumentSetC71 != null) CurrentAsycudaDocumentSetC71 = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentSetC71);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentSetEntryDataExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEntryDataEx> e)
        {
            //CurrentAsycudaDocumentSetEntryDataEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentSetEntryDataEx);
        }

        private  AsycudaDocumentSetEntryDataEx _currentAsycudaDocumentSetEntryDataEx;
        public AsycudaDocumentSetEntryDataEx CurrentAsycudaDocumentSetEntryDataEx
        {
            get
            {
                return _currentAsycudaDocumentSetEntryDataEx;
            }
            set
            {
                if (_currentAsycudaDocumentSetEntryDataEx != value)
                {
                    _currentAsycudaDocumentSetEntryDataEx = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetEntryDataExChanged,
                                                     new NotificationEventArgs<AsycudaDocumentSetEntryDataEx>(MessageToken.CurrentAsycudaDocumentSetEntryDataExChanged, _currentAsycudaDocumentSetEntryDataEx)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEntryDataEx);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentSetEntryDataEx> _vcurrentAsycudaDocumentSetEntryDataEx;
        public VirtualListItem<AsycudaDocumentSetEntryDataEx> VCurrentAsycudaDocumentSetEntryDataEx
        {
            get
            {
                return _vcurrentAsycudaDocumentSetEntryDataEx;
            }
            set
            {
                if (_vcurrentAsycudaDocumentSetEntryDataEx != value)
                {
                    _vcurrentAsycudaDocumentSetEntryDataEx = value;
					if(_vcurrentAsycudaDocumentSetEntryDataEx != null) CurrentAsycudaDocumentSetEntryDataEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentSetEntryDataEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentSetExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEx> e)
        {
            //CurrentAsycudaDocumentSetEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentSetEx);
        }

        private  AsycudaDocumentSetEx _currentAsycudaDocumentSetEx;
        public AsycudaDocumentSetEx CurrentAsycudaDocumentSetEx
        {
            get
            {
                return _currentAsycudaDocumentSetEx;
            }
            set
            {
                if (_currentAsycudaDocumentSetEx != value)
                {
                    _currentAsycudaDocumentSetEx = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetExChanged,
                                                     new NotificationEventArgs<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, _currentAsycudaDocumentSetEx)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEx);    
                    // all current navigation properties = null
                 CurrentAsycudaDocument = null;
                 CurrentLicenceSummary = null;
                 CurrentFileTypes = null;
                 CurrentAsycudaDocumentSet_Attachments = null;
                 CurrentAsycudaDocumentSetEntryDataEx = null;
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentSetEx> _vcurrentAsycudaDocumentSetEx;
        public VirtualListItem<AsycudaDocumentSetEx> VCurrentAsycudaDocumentSetEx
        {
            get
            {
                return _vcurrentAsycudaDocumentSetEx;
            }
            set
            {
                if (_vcurrentAsycudaDocumentSetEx != value)
                {
                    _vcurrentAsycudaDocumentSetEx = value;
					if(_vcurrentAsycudaDocumentSetEx != null) CurrentAsycudaDocumentSetEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentSetEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaItemBasicInfoChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaItemBasicInfo> e)
        {
            //CurrentAsycudaItemBasicInfo = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaItemBasicInfo);
        }

        private  AsycudaItemBasicInfo _currentAsycudaItemBasicInfo;
        public AsycudaItemBasicInfo CurrentAsycudaItemBasicInfo
        {
            get
            {
                return _currentAsycudaItemBasicInfo;
            }
            set
            {
                if (_currentAsycudaItemBasicInfo != value)
                {
                    _currentAsycudaItemBasicInfo = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaItemBasicInfoChanged,
                                                     new NotificationEventArgs<AsycudaItemBasicInfo>(MessageToken.CurrentAsycudaItemBasicInfoChanged, _currentAsycudaItemBasicInfo)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaItemBasicInfo);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaItemBasicInfo> _vcurrentAsycudaItemBasicInfo;
        public VirtualListItem<AsycudaItemBasicInfo> VCurrentAsycudaItemBasicInfo
        {
            get
            {
                return _vcurrentAsycudaItemBasicInfo;
            }
            set
            {
                if (_vcurrentAsycudaItemBasicInfo != value)
                {
                    _vcurrentAsycudaItemBasicInfo = value;
					if(_vcurrentAsycudaItemBasicInfo != null) CurrentAsycudaItemBasicInfo = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaItemBasicInfo);                    
                }
            }
        }



                     
       

        internal void OnCurrentAttachmentLogChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AttachmentLog> e)
        {
            //CurrentAttachmentLog = e.Data;
            NotifyPropertyChanged(m => this.CurrentAttachmentLog);
        }

        private  AttachmentLog _currentAttachmentLog;
        public AttachmentLog CurrentAttachmentLog
        {
            get
            {
                return _currentAttachmentLog;
            }
            set
            {
                if (_currentAttachmentLog != value)
                {
                    _currentAttachmentLog = value;
                    BeginSendMessage(MessageToken.CurrentAttachmentLogChanged,
                                                     new NotificationEventArgs<AttachmentLog>(MessageToken.CurrentAttachmentLogChanged, _currentAttachmentLog)); 
                    NotifyPropertyChanged(x => this.CurrentAttachmentLog);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AttachmentLog> _vcurrentAttachmentLog;
        public VirtualListItem<AttachmentLog> VCurrentAttachmentLog
        {
            get
            {
                return _vcurrentAttachmentLog;
            }
            set
            {
                if (_vcurrentAttachmentLog != value)
                {
                    _vcurrentAttachmentLog = value;
					if(_vcurrentAttachmentLog != null) CurrentAttachmentLog = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAttachmentLog);                    
                }
            }
        }



                     
       

        internal void OnCurrentAttachmentsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Attachments> e)
        {
            //CurrentAttachments = e.Data;
            NotifyPropertyChanged(m => this.CurrentAttachments);
        }

        private  Attachments _currentAttachments;
        public Attachments CurrentAttachments
        {
            get
            {
                return _currentAttachments;
            }
            set
            {
                if (_currentAttachments != value)
                {
                    _currentAttachments = value;
                    BeginSendMessage(MessageToken.CurrentAttachmentsChanged,
                                                     new NotificationEventArgs<Attachments>(MessageToken.CurrentAttachmentsChanged, _currentAttachments)); 
                    NotifyPropertyChanged(x => this.CurrentAttachments);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentSet_Attachments = null;
                 CurrentAsycudaDocument_Attachments = null;
   
                }
            }
        }

		VirtualListItem<Attachments> _vcurrentAttachments;
        public VirtualListItem<Attachments> VCurrentAttachments
        {
            get
            {
                return _vcurrentAttachments;
            }
            set
            {
                if (_vcurrentAttachments != value)
                {
                    _vcurrentAttachments = value;
					if(_vcurrentAttachments != null) CurrentAttachments = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAttachments);                    
                }
            }
        }



                     
       

        internal void OnCurrentCancelledEntriesLstChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<CancelledEntriesLst> e)
        {
            //CurrentCancelledEntriesLst = e.Data;
            NotifyPropertyChanged(m => this.CurrentCancelledEntriesLst);
        }

        private  CancelledEntriesLst _currentCancelledEntriesLst;
        public CancelledEntriesLst CurrentCancelledEntriesLst
        {
            get
            {
                return _currentCancelledEntriesLst;
            }
            set
            {
                if (_currentCancelledEntriesLst != value)
                {
                    _currentCancelledEntriesLst = value;
                    BeginSendMessage(MessageToken.CurrentCancelledEntriesLstChanged,
                                                     new NotificationEventArgs<CancelledEntriesLst>(MessageToken.CurrentCancelledEntriesLstChanged, _currentCancelledEntriesLst)); 
                    NotifyPropertyChanged(x => this.CurrentCancelledEntriesLst);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<CancelledEntriesLst> _vcurrentCancelledEntriesLst;
        public VirtualListItem<CancelledEntriesLst> VCurrentCancelledEntriesLst
        {
            get
            {
                return _vcurrentCancelledEntriesLst;
            }
            set
            {
                if (_vcurrentCancelledEntriesLst != value)
                {
                    _vcurrentCancelledEntriesLst = value;
					if(_vcurrentCancelledEntriesLst != null) CurrentCancelledEntriesLst = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentCancelledEntriesLst);                    
                }
            }
        }



                     
       

        internal void OnCurrentContactsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Contacts> e)
        {
            //CurrentContacts = e.Data;
            NotifyPropertyChanged(m => this.CurrentContacts);
        }

        private  Contacts _currentContacts;
        public Contacts CurrentContacts
        {
            get
            {
                return _currentContacts;
            }
            set
            {
                if (_currentContacts != value)
                {
                    _currentContacts = value;
                    BeginSendMessage(MessageToken.CurrentContactsChanged,
                                                     new NotificationEventArgs<Contacts>(MessageToken.CurrentContactsChanged, _currentContacts)); 
                    NotifyPropertyChanged(x => this.CurrentContacts);    
                    // all current navigation properties = null
                 CurrentFileTypeContacts = null;
   
                }
            }
        }

		VirtualListItem<Contacts> _vcurrentContacts;
        public VirtualListItem<Contacts> VCurrentContacts
        {
            get
            {
                return _vcurrentContacts;
            }
            set
            {
                if (_vcurrentContacts != value)
                {
                    _vcurrentContacts = value;
					if(_vcurrentContacts != null) CurrentContacts = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentContacts);                    
                }
            }
        }



                     
       

        internal void OnCurrentCustoms_ProcedureChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Customs_Procedure> e)
        {
            //CurrentCustoms_Procedure = e.Data;
            NotifyPropertyChanged(m => this.CurrentCustoms_Procedure);
        }

        private  Customs_Procedure _currentCustoms_Procedure;
        public Customs_Procedure CurrentCustoms_Procedure
        {
            get
            {
                return _currentCustoms_Procedure;
            }
            set
            {
                if (_currentCustoms_Procedure != value)
                {
                    _currentCustoms_Procedure = value;
                    BeginSendMessage(MessageToken.CurrentCustoms_ProcedureChanged,
                                                     new NotificationEventArgs<Customs_Procedure>(MessageToken.CurrentCustoms_ProcedureChanged, _currentCustoms_Procedure)); 
                    NotifyPropertyChanged(x => this.CurrentCustoms_Procedure);    
                    // all current navigation properties = null
                 CurrentAsycudaDocument = null;
   
                }
            }
        }

		VirtualListItem<Customs_Procedure> _vcurrentCustoms_Procedure;
        public VirtualListItem<Customs_Procedure> VCurrentCustoms_Procedure
        {
            get
            {
                return _vcurrentCustoms_Procedure;
            }
            set
            {
                if (_vcurrentCustoms_Procedure != value)
                {
                    _vcurrentCustoms_Procedure = value;
					if(_vcurrentCustoms_Procedure != null) CurrentCustoms_Procedure = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentCustoms_Procedure);                    
                }
            }
        }



                     
       

        internal void OnCurrentCustomsOperationsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<CustomsOperations> e)
        {
            //CurrentCustomsOperations = e.Data;
            NotifyPropertyChanged(m => this.CurrentCustomsOperations);
        }

        private  CustomsOperations _currentCustomsOperations;
        public CustomsOperations CurrentCustomsOperations
        {
            get
            {
                return _currentCustomsOperations;
            }
            set
            {
                if (_currentCustomsOperations != value)
                {
                    _currentCustomsOperations = value;
                    BeginSendMessage(MessageToken.CurrentCustomsOperationsChanged,
                                                     new NotificationEventArgs<CustomsOperations>(MessageToken.CurrentCustomsOperationsChanged, _currentCustomsOperations)); 
                    NotifyPropertyChanged(x => this.CurrentCustomsOperations);    
                    // all current navigation properties = null
                 CurrentCustoms_Procedure = null;
   
                }
            }
        }

		VirtualListItem<CustomsOperations> _vcurrentCustomsOperations;
        public VirtualListItem<CustomsOperations> VCurrentCustomsOperations
        {
            get
            {
                return _vcurrentCustomsOperations;
            }
            set
            {
                if (_vcurrentCustomsOperations != value)
                {
                    _vcurrentCustomsOperations = value;
					if(_vcurrentCustomsOperations != null) CurrentCustomsOperations = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentCustomsOperations);                    
                }
            }
        }



                     
       

        internal void OnCurrentDocument_TypeChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Document_Type> e)
        {
            //CurrentDocument_Type = e.Data;
            NotifyPropertyChanged(m => this.CurrentDocument_Type);
        }

        private  Document_Type _currentDocument_Type;
        public Document_Type CurrentDocument_Type
        {
            get
            {
                return _currentDocument_Type;
            }
            set
            {
                if (_currentDocument_Type != value)
                {
                    _currentDocument_Type = value;
                    BeginSendMessage(MessageToken.CurrentDocument_TypeChanged,
                                                     new NotificationEventArgs<Document_Type>(MessageToken.CurrentDocument_TypeChanged, _currentDocument_Type)); 
                    NotifyPropertyChanged(x => this.CurrentDocument_Type);    
                    // all current navigation properties = null
                 CurrentCustoms_Procedure = null;
   
                }
            }
        }

		VirtualListItem<Document_Type> _vcurrentDocument_Type;
        public VirtualListItem<Document_Type> VCurrentDocument_Type
        {
            get
            {
                return _vcurrentDocument_Type;
            }
            set
            {
                if (_vcurrentDocument_Type != value)
                {
                    _vcurrentDocument_Type = value;
					if(_vcurrentDocument_Type != null) CurrentDocument_Type = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentDocument_Type);                    
                }
            }
        }



                     
       

        internal void OnCurrentEmailFileTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EmailFileTypes> e)
        {
            //CurrentEmailFileTypes = e.Data;
            NotifyPropertyChanged(m => this.CurrentEmailFileTypes);
        }

        private  EmailFileTypes _currentEmailFileTypes;
        public EmailFileTypes CurrentEmailFileTypes
        {
            get
            {
                return _currentEmailFileTypes;
            }
            set
            {
                if (_currentEmailFileTypes != value)
                {
                    _currentEmailFileTypes = value;
                    BeginSendMessage(MessageToken.CurrentEmailFileTypesChanged,
                                                     new NotificationEventArgs<EmailFileTypes>(MessageToken.CurrentEmailFileTypesChanged, _currentEmailFileTypes)); 
                    NotifyPropertyChanged(x => this.CurrentEmailFileTypes);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<EmailFileTypes> _vcurrentEmailFileTypes;
        public VirtualListItem<EmailFileTypes> VCurrentEmailFileTypes
        {
            get
            {
                return _vcurrentEmailFileTypes;
            }
            set
            {
                if (_vcurrentEmailFileTypes != value)
                {
                    _vcurrentEmailFileTypes = value;
					if(_vcurrentEmailFileTypes != null) CurrentEmailFileTypes = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEmailFileTypes);                    
                }
            }
        }



                     
       

        internal void OnCurrentEmailInfoMappingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EmailInfoMappings> e)
        {
            //CurrentEmailInfoMappings = e.Data;
            NotifyPropertyChanged(m => this.CurrentEmailInfoMappings);
        }

        private  EmailInfoMappings _currentEmailInfoMappings;
        public EmailInfoMappings CurrentEmailInfoMappings
        {
            get
            {
                return _currentEmailInfoMappings;
            }
            set
            {
                if (_currentEmailInfoMappings != value)
                {
                    _currentEmailInfoMappings = value;
                    BeginSendMessage(MessageToken.CurrentEmailInfoMappingsChanged,
                                                     new NotificationEventArgs<EmailInfoMappings>(MessageToken.CurrentEmailInfoMappingsChanged, _currentEmailInfoMappings)); 
                    NotifyPropertyChanged(x => this.CurrentEmailInfoMappings);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<EmailInfoMappings> _vcurrentEmailInfoMappings;
        public VirtualListItem<EmailInfoMappings> VCurrentEmailInfoMappings
        {
            get
            {
                return _vcurrentEmailInfoMappings;
            }
            set
            {
                if (_vcurrentEmailInfoMappings != value)
                {
                    _vcurrentEmailInfoMappings = value;
					if(_vcurrentEmailInfoMappings != null) CurrentEmailInfoMappings = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEmailInfoMappings);                    
                }
            }
        }



                     
       

        internal void OnCurrentEmailMappingChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EmailMapping> e)
        {
            //CurrentEmailMapping = e.Data;
            NotifyPropertyChanged(m => this.CurrentEmailMapping);
        }

        private  EmailMapping _currentEmailMapping;
        public EmailMapping CurrentEmailMapping
        {
            get
            {
                return _currentEmailMapping;
            }
            set
            {
                if (_currentEmailMapping != value)
                {
                    _currentEmailMapping = value;
                    BeginSendMessage(MessageToken.CurrentEmailMappingChanged,
                                                     new NotificationEventArgs<EmailMapping>(MessageToken.CurrentEmailMappingChanged, _currentEmailMapping)); 
                    NotifyPropertyChanged(x => this.CurrentEmailMapping);    
                    // all current navigation properties = null
                 CurrentEmailFileTypes = null;
                 CurrentEmailInfoMappings = null;
   
                }
            }
        }

		VirtualListItem<EmailMapping> _vcurrentEmailMapping;
        public VirtualListItem<EmailMapping> VCurrentEmailMapping
        {
            get
            {
                return _vcurrentEmailMapping;
            }
            set
            {
                if (_vcurrentEmailMapping != value)
                {
                    _vcurrentEmailMapping = value;
					if(_vcurrentEmailMapping != null) CurrentEmailMapping = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEmailMapping);                    
                }
            }
        }



                     
       

        internal void OnCurrentEmailsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Emails> e)
        {
            //CurrentEmails = e.Data;
            NotifyPropertyChanged(m => this.CurrentEmails);
        }

        private  Emails _currentEmails;
        public Emails CurrentEmails
        {
            get
            {
                return _currentEmails;
            }
            set
            {
                if (_currentEmails != value)
                {
                    _currentEmails = value;
                    BeginSendMessage(MessageToken.CurrentEmailsChanged,
                                                     new NotificationEventArgs<Emails>(MessageToken.CurrentEmailsChanged, _currentEmails)); 
                    NotifyPropertyChanged(x => this.CurrentEmails);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentSet_Attachments = null;
   
                }
            }
        }

		VirtualListItem<Emails> _vcurrentEmails;
        public VirtualListItem<Emails> VCurrentEmails
        {
            get
            {
                return _vcurrentEmails;
            }
            set
            {
                if (_vcurrentEmails != value)
                {
                    _vcurrentEmails = value;
					if(_vcurrentEmails != null) CurrentEmails = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEmails);                    
                }
            }
        }



                     
       

        internal void OnCurrentEntryPreviousItemsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EntryPreviousItems> e)
        {
            //CurrentEntryPreviousItems = e.Data;
            NotifyPropertyChanged(m => this.CurrentEntryPreviousItems);
        }

        private  EntryPreviousItems _currentEntryPreviousItems;
        public EntryPreviousItems CurrentEntryPreviousItems
        {
            get
            {
                return _currentEntryPreviousItems;
            }
            set
            {
                if (_currentEntryPreviousItems != value)
                {
                    _currentEntryPreviousItems = value;
                    BeginSendMessage(MessageToken.CurrentEntryPreviousItemsChanged,
                                                     new NotificationEventArgs<EntryPreviousItems>(MessageToken.CurrentEntryPreviousItemsChanged, _currentEntryPreviousItems)); 
                    NotifyPropertyChanged(x => this.CurrentEntryPreviousItems);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<EntryPreviousItems> _vcurrentEntryPreviousItems;
        public VirtualListItem<EntryPreviousItems> VCurrentEntryPreviousItems
        {
            get
            {
                return _vcurrentEntryPreviousItems;
            }
            set
            {
                if (_vcurrentEntryPreviousItems != value)
                {
                    _vcurrentEntryPreviousItems = value;
					if(_vcurrentEntryPreviousItems != null) CurrentEntryPreviousItems = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEntryPreviousItems);                    
                }
            }
        }



                     
       

        internal void OnCurrentExpiredEntriesLstChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ExpiredEntriesLst> e)
        {
            //CurrentExpiredEntriesLst = e.Data;
            NotifyPropertyChanged(m => this.CurrentExpiredEntriesLst);
        }

        private  ExpiredEntriesLst _currentExpiredEntriesLst;
        public ExpiredEntriesLst CurrentExpiredEntriesLst
        {
            get
            {
                return _currentExpiredEntriesLst;
            }
            set
            {
                if (_currentExpiredEntriesLst != value)
                {
                    _currentExpiredEntriesLst = value;
                    BeginSendMessage(MessageToken.CurrentExpiredEntriesLstChanged,
                                                     new NotificationEventArgs<ExpiredEntriesLst>(MessageToken.CurrentExpiredEntriesLstChanged, _currentExpiredEntriesLst)); 
                    NotifyPropertyChanged(x => this.CurrentExpiredEntriesLst);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<ExpiredEntriesLst> _vcurrentExpiredEntriesLst;
        public VirtualListItem<ExpiredEntriesLst> VCurrentExpiredEntriesLst
        {
            get
            {
                return _vcurrentExpiredEntriesLst;
            }
            set
            {
                if (_vcurrentExpiredEntriesLst != value)
                {
                    _vcurrentExpiredEntriesLst = value;
					if(_vcurrentExpiredEntriesLst != null) CurrentExpiredEntriesLst = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentExpiredEntriesLst);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileGroupsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileGroups> e)
        {
            //CurrentFileGroups = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileGroups);
        }

        private  FileGroups _currentFileGroups;
        public FileGroups CurrentFileGroups
        {
            get
            {
                return _currentFileGroups;
            }
            set
            {
                if (_currentFileGroups != value)
                {
                    _currentFileGroups = value;
                    BeginSendMessage(MessageToken.CurrentFileGroupsChanged,
                                                     new NotificationEventArgs<FileGroups>(MessageToken.CurrentFileGroupsChanged, _currentFileGroups)); 
                    NotifyPropertyChanged(x => this.CurrentFileGroups);    
                    // all current navigation properties = null
                 CurrentFileTypes = null;
   
                }
            }
        }

		VirtualListItem<FileGroups> _vcurrentFileGroups;
        public VirtualListItem<FileGroups> VCurrentFileGroups
        {
            get
            {
                return _vcurrentFileGroups;
            }
            set
            {
                if (_vcurrentFileGroups != value)
                {
                    _vcurrentFileGroups = value;
					if(_vcurrentFileGroups != null) CurrentFileGroups = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileGroups);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileTypeActionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypeActions> e)
        {
            //CurrentFileTypeActions = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileTypeActions);
        }

        private  FileTypeActions _currentFileTypeActions;
        public FileTypeActions CurrentFileTypeActions
        {
            get
            {
                return _currentFileTypeActions;
            }
            set
            {
                if (_currentFileTypeActions != value)
                {
                    _currentFileTypeActions = value;
                    BeginSendMessage(MessageToken.CurrentFileTypeActionsChanged,
                                                     new NotificationEventArgs<FileTypeActions>(MessageToken.CurrentFileTypeActionsChanged, _currentFileTypeActions)); 
                    NotifyPropertyChanged(x => this.CurrentFileTypeActions);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<FileTypeActions> _vcurrentFileTypeActions;
        public VirtualListItem<FileTypeActions> VCurrentFileTypeActions
        {
            get
            {
                return _vcurrentFileTypeActions;
            }
            set
            {
                if (_vcurrentFileTypeActions != value)
                {
                    _vcurrentFileTypeActions = value;
					if(_vcurrentFileTypeActions != null) CurrentFileTypeActions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileTypeActions);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileTypeContactsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypeContacts> e)
        {
            //CurrentFileTypeContacts = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileTypeContacts);
        }

        private  FileTypeContacts _currentFileTypeContacts;
        public FileTypeContacts CurrentFileTypeContacts
        {
            get
            {
                return _currentFileTypeContacts;
            }
            set
            {
                if (_currentFileTypeContacts != value)
                {
                    _currentFileTypeContacts = value;
                    BeginSendMessage(MessageToken.CurrentFileTypeContactsChanged,
                                                     new NotificationEventArgs<FileTypeContacts>(MessageToken.CurrentFileTypeContactsChanged, _currentFileTypeContacts)); 
                    NotifyPropertyChanged(x => this.CurrentFileTypeContacts);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<FileTypeContacts> _vcurrentFileTypeContacts;
        public VirtualListItem<FileTypeContacts> VCurrentFileTypeContacts
        {
            get
            {
                return _vcurrentFileTypeContacts;
            }
            set
            {
                if (_vcurrentFileTypeContacts != value)
                {
                    _vcurrentFileTypeContacts = value;
					if(_vcurrentFileTypeContacts != null) CurrentFileTypeContacts = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileTypeContacts);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileTypeMappingRegExsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypeMappingRegExs> e)
        {
            //CurrentFileTypeMappingRegExs = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileTypeMappingRegExs);
        }

        private  FileTypeMappingRegExs _currentFileTypeMappingRegExs;
        public FileTypeMappingRegExs CurrentFileTypeMappingRegExs
        {
            get
            {
                return _currentFileTypeMappingRegExs;
            }
            set
            {
                if (_currentFileTypeMappingRegExs != value)
                {
                    _currentFileTypeMappingRegExs = value;
                    BeginSendMessage(MessageToken.CurrentFileTypeMappingRegExsChanged,
                                                     new NotificationEventArgs<FileTypeMappingRegExs>(MessageToken.CurrentFileTypeMappingRegExsChanged, _currentFileTypeMappingRegExs)); 
                    NotifyPropertyChanged(x => this.CurrentFileTypeMappingRegExs);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<FileTypeMappingRegExs> _vcurrentFileTypeMappingRegExs;
        public VirtualListItem<FileTypeMappingRegExs> VCurrentFileTypeMappingRegExs
        {
            get
            {
                return _vcurrentFileTypeMappingRegExs;
            }
            set
            {
                if (_vcurrentFileTypeMappingRegExs != value)
                {
                    _vcurrentFileTypeMappingRegExs = value;
					if(_vcurrentFileTypeMappingRegExs != null) CurrentFileTypeMappingRegExs = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileTypeMappingRegExs);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileTypeMappingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypeMappings> e)
        {
            //CurrentFileTypeMappings = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileTypeMappings);
        }

        private  FileTypeMappings _currentFileTypeMappings;
        public FileTypeMappings CurrentFileTypeMappings
        {
            get
            {
                return _currentFileTypeMappings;
            }
            set
            {
                if (_currentFileTypeMappings != value)
                {
                    _currentFileTypeMappings = value;
                    BeginSendMessage(MessageToken.CurrentFileTypeMappingsChanged,
                                                     new NotificationEventArgs<FileTypeMappings>(MessageToken.CurrentFileTypeMappingsChanged, _currentFileTypeMappings)); 
                    NotifyPropertyChanged(x => this.CurrentFileTypeMappings);    
                    // all current navigation properties = null
                 CurrentFileTypeMappingRegExs = null;
   
                }
            }
        }

		VirtualListItem<FileTypeMappings> _vcurrentFileTypeMappings;
        public VirtualListItem<FileTypeMappings> VCurrentFileTypeMappings
        {
            get
            {
                return _vcurrentFileTypeMappings;
            }
            set
            {
                if (_vcurrentFileTypeMappings != value)
                {
                    _vcurrentFileTypeMappings = value;
					if(_vcurrentFileTypeMappings != null) CurrentFileTypeMappings = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileTypeMappings);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypes> e)
        {
            //CurrentFileTypes = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileTypes);
        }

        private  FileTypes _currentFileTypes;
        public FileTypes CurrentFileTypes
        {
            get
            {
                return _currentFileTypes;
            }
            set
            {
                if (_currentFileTypes != value)
                {
                    _currentFileTypes = value;
                    BeginSendMessage(MessageToken.CurrentFileTypesChanged,
                                                     new NotificationEventArgs<FileTypes>(MessageToken.CurrentFileTypesChanged, _currentFileTypes)); 
                    NotifyPropertyChanged(x => this.CurrentFileTypes);    
                    // all current navigation properties = null
                 CurrentFileTypeMappings = null;
                 CurrentFileTypeActions = null;
                 CurrentFileTypeContacts = null;
                 CurrentAsycudaDocumentSet_Attachments = null;
                 CurrentEmailFileTypes = null;
                 CurrentImportActions = null;
   
                }
            }
        }

		VirtualListItem<FileTypes> _vcurrentFileTypes;
        public VirtualListItem<FileTypes> VCurrentFileTypes
        {
            get
            {
                return _vcurrentFileTypes;
            }
            set
            {
                if (_vcurrentFileTypes != value)
                {
                    _vcurrentFileTypes = value;
					if(_vcurrentFileTypes != null) CurrentFileTypes = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileTypes);                    
                }
            }
        }



                     
       

        internal void OnCurrentImportActionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ImportActions> e)
        {
            //CurrentImportActions = e.Data;
            NotifyPropertyChanged(m => this.CurrentImportActions);
        }

        private  ImportActions _currentImportActions;
        public ImportActions CurrentImportActions
        {
            get
            {
                return _currentImportActions;
            }
            set
            {
                if (_currentImportActions != value)
                {
                    _currentImportActions = value;
                    BeginSendMessage(MessageToken.CurrentImportActionsChanged,
                                                     new NotificationEventArgs<ImportActions>(MessageToken.CurrentImportActionsChanged, _currentImportActions)); 
                    NotifyPropertyChanged(x => this.CurrentImportActions);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<ImportActions> _vcurrentImportActions;
        public VirtualListItem<ImportActions> VCurrentImportActions
        {
            get
            {
                return _vcurrentImportActions;
            }
            set
            {
                if (_vcurrentImportActions != value)
                {
                    _vcurrentImportActions = value;
					if(_vcurrentImportActions != null) CurrentImportActions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentImportActions);                    
                }
            }
        }



                     
       

        internal void OnCurrentInfoMappingChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InfoMapping> e)
        {
            //CurrentInfoMapping = e.Data;
            NotifyPropertyChanged(m => this.CurrentInfoMapping);
        }

        private  InfoMapping _currentInfoMapping;
        public InfoMapping CurrentInfoMapping
        {
            get
            {
                return _currentInfoMapping;
            }
            set
            {
                if (_currentInfoMapping != value)
                {
                    _currentInfoMapping = value;
                    BeginSendMessage(MessageToken.CurrentInfoMappingChanged,
                                                     new NotificationEventArgs<InfoMapping>(MessageToken.CurrentInfoMappingChanged, _currentInfoMapping)); 
                    NotifyPropertyChanged(x => this.CurrentInfoMapping);    
                    // all current navigation properties = null
                 CurrentInfoMappingRegEx = null;
                 CurrentEmailInfoMappings = null;
   
                }
            }
        }

		VirtualListItem<InfoMapping> _vcurrentInfoMapping;
        public VirtualListItem<InfoMapping> VCurrentInfoMapping
        {
            get
            {
                return _vcurrentInfoMapping;
            }
            set
            {
                if (_vcurrentInfoMapping != value)
                {
                    _vcurrentInfoMapping = value;
					if(_vcurrentInfoMapping != null) CurrentInfoMapping = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInfoMapping);                    
                }
            }
        }



                     
       

        internal void OnCurrentInfoMappingRegExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InfoMappingRegEx> e)
        {
            //CurrentInfoMappingRegEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentInfoMappingRegEx);
        }

        private  InfoMappingRegEx _currentInfoMappingRegEx;
        public InfoMappingRegEx CurrentInfoMappingRegEx
        {
            get
            {
                return _currentInfoMappingRegEx;
            }
            set
            {
                if (_currentInfoMappingRegEx != value)
                {
                    _currentInfoMappingRegEx = value;
                    BeginSendMessage(MessageToken.CurrentInfoMappingRegExChanged,
                                                     new NotificationEventArgs<InfoMappingRegEx>(MessageToken.CurrentInfoMappingRegExChanged, _currentInfoMappingRegEx)); 
                    NotifyPropertyChanged(x => this.CurrentInfoMappingRegEx);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<InfoMappingRegEx> _vcurrentInfoMappingRegEx;
        public VirtualListItem<InfoMappingRegEx> VCurrentInfoMappingRegEx
        {
            get
            {
                return _vcurrentInfoMappingRegEx;
            }
            set
            {
                if (_vcurrentInfoMappingRegEx != value)
                {
                    _vcurrentInfoMappingRegEx = value;
					if(_vcurrentInfoMappingRegEx != null) CurrentInfoMappingRegEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInfoMappingRegEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentInventoryItemAliasXChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItemAliasX> e)
        {
            //CurrentInventoryItemAliasX = e.Data;
            NotifyPropertyChanged(m => this.CurrentInventoryItemAliasX);
        }

        private  InventoryItemAliasX _currentInventoryItemAliasX;
        public InventoryItemAliasX CurrentInventoryItemAliasX
        {
            get
            {
                return _currentInventoryItemAliasX;
            }
            set
            {
                if (_currentInventoryItemAliasX != value)
                {
                    _currentInventoryItemAliasX = value;
                    BeginSendMessage(MessageToken.CurrentInventoryItemAliasXChanged,
                                                     new NotificationEventArgs<InventoryItemAliasX>(MessageToken.CurrentInventoryItemAliasXChanged, _currentInventoryItemAliasX)); 
                    NotifyPropertyChanged(x => this.CurrentInventoryItemAliasX);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<InventoryItemAliasX> _vcurrentInventoryItemAliasX;
        public VirtualListItem<InventoryItemAliasX> VCurrentInventoryItemAliasX
        {
            get
            {
                return _vcurrentInventoryItemAliasX;
            }
            set
            {
                if (_vcurrentInventoryItemAliasX != value)
                {
                    _vcurrentInventoryItemAliasX = value;
					if(_vcurrentInventoryItemAliasX != null) CurrentInventoryItemAliasX = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInventoryItemAliasX);                    
                }
            }
        }



                     
       

        internal void OnCurrentInventoryItemXChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItemX> e)
        {
            //CurrentInventoryItemX = e.Data;
            NotifyPropertyChanged(m => this.CurrentInventoryItemX);
        }

        private  InventoryItemX _currentInventoryItemX;
        public InventoryItemX CurrentInventoryItemX
        {
            get
            {
                return _currentInventoryItemX;
            }
            set
            {
                if (_currentInventoryItemX != value)
                {
                    _currentInventoryItemX = value;
                    BeginSendMessage(MessageToken.CurrentInventoryItemXChanged,
                                                     new NotificationEventArgs<InventoryItemX>(MessageToken.CurrentInventoryItemXChanged, _currentInventoryItemX)); 
                    NotifyPropertyChanged(x => this.CurrentInventoryItemX);    
                    // all current navigation properties = null
                 CurrentInventoryItemAliasX = null;
                 CurrentAsycudaDocumentItem = null;
   
                }
            }
        }

		VirtualListItem<InventoryItemX> _vcurrentInventoryItemX;
        public VirtualListItem<InventoryItemX> VCurrentInventoryItemX
        {
            get
            {
                return _vcurrentInventoryItemX;
            }
            set
            {
                if (_vcurrentInventoryItemX != value)
                {
                    _vcurrentInventoryItemX = value;
					if(_vcurrentInventoryItemX != null) CurrentInventoryItemX = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInventoryItemX);                    
                }
            }
        }



                     
       

        internal void OnCurrentLicenceSummaryChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<LicenceSummary> e)
        {
            //CurrentLicenceSummary = e.Data;
            NotifyPropertyChanged(m => this.CurrentLicenceSummary);
        }

        private  LicenceSummary _currentLicenceSummary;
        public LicenceSummary CurrentLicenceSummary
        {
            get
            {
                return _currentLicenceSummary;
            }
            set
            {
                if (_currentLicenceSummary != value)
                {
                    _currentLicenceSummary = value;
                    BeginSendMessage(MessageToken.CurrentLicenceSummaryChanged,
                                                     new NotificationEventArgs<LicenceSummary>(MessageToken.CurrentLicenceSummaryChanged, _currentLicenceSummary)); 
                    NotifyPropertyChanged(x => this.CurrentLicenceSummary);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<LicenceSummary> _vcurrentLicenceSummary;
        public VirtualListItem<LicenceSummary> VCurrentLicenceSummary
        {
            get
            {
                return _vcurrentLicenceSummary;
            }
            set
            {
                if (_vcurrentLicenceSummary != value)
                {
                    _vcurrentLicenceSummary = value;
					if(_vcurrentLicenceSummary != null) CurrentLicenceSummary = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentLicenceSummary);                    
                }
            }
        }



                     
       

        internal void OnCurrentSessionActionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<SessionActions> e)
        {
            //CurrentSessionActions = e.Data;
            NotifyPropertyChanged(m => this.CurrentSessionActions);
        }

        private  SessionActions _currentSessionActions;
        public SessionActions CurrentSessionActions
        {
            get
            {
                return _currentSessionActions;
            }
            set
            {
                if (_currentSessionActions != value)
                {
                    _currentSessionActions = value;
                    BeginSendMessage(MessageToken.CurrentSessionActionsChanged,
                                                     new NotificationEventArgs<SessionActions>(MessageToken.CurrentSessionActionsChanged, _currentSessionActions)); 
                    NotifyPropertyChanged(x => this.CurrentSessionActions);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<SessionActions> _vcurrentSessionActions;
        public VirtualListItem<SessionActions> VCurrentSessionActions
        {
            get
            {
                return _vcurrentSessionActions;
            }
            set
            {
                if (_vcurrentSessionActions != value)
                {
                    _vcurrentSessionActions = value;
					if(_vcurrentSessionActions != null) CurrentSessionActions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentSessionActions);                    
                }
            }
        }



                     
       

        internal void OnCurrentSessionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Sessions> e)
        {
            //CurrentSessions = e.Data;
            NotifyPropertyChanged(m => this.CurrentSessions);
        }

        private  Sessions _currentSessions;
        public Sessions CurrentSessions
        {
            get
            {
                return _currentSessions;
            }
            set
            {
                if (_currentSessions != value)
                {
                    _currentSessions = value;
                    BeginSendMessage(MessageToken.CurrentSessionsChanged,
                                                     new NotificationEventArgs<Sessions>(MessageToken.CurrentSessionsChanged, _currentSessions)); 
                    NotifyPropertyChanged(x => this.CurrentSessions);    
                    // all current navigation properties = null
                 CurrentSessionActions = null;
                 CurrentSessionSchedule = null;
   
                }
            }
        }

		VirtualListItem<Sessions> _vcurrentSessions;
        public VirtualListItem<Sessions> VCurrentSessions
        {
            get
            {
                return _vcurrentSessions;
            }
            set
            {
                if (_vcurrentSessions != value)
                {
                    _vcurrentSessions = value;
					if(_vcurrentSessions != null) CurrentSessions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentSessions);                    
                }
            }
        }



                     
       

        internal void OnCurrentSessionScheduleChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<SessionSchedule> e)
        {
            //CurrentSessionSchedule = e.Data;
            NotifyPropertyChanged(m => this.CurrentSessionSchedule);
        }

        private  SessionSchedule _currentSessionSchedule;
        public SessionSchedule CurrentSessionSchedule
        {
            get
            {
                return _currentSessionSchedule;
            }
            set
            {
                if (_currentSessionSchedule != value)
                {
                    _currentSessionSchedule = value;
                    BeginSendMessage(MessageToken.CurrentSessionScheduleChanged,
                                                     new NotificationEventArgs<SessionSchedule>(MessageToken.CurrentSessionScheduleChanged, _currentSessionSchedule)); 
                    NotifyPropertyChanged(x => this.CurrentSessionSchedule);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<SessionSchedule> _vcurrentSessionSchedule;
        public VirtualListItem<SessionSchedule> VCurrentSessionSchedule
        {
            get
            {
                return _vcurrentSessionSchedule;
            }
            set
            {
                if (_vcurrentSessionSchedule != value)
                {
                    _vcurrentSessionSchedule = value;
					if(_vcurrentSessionSchedule != null) CurrentSessionSchedule = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentSessionSchedule);                    
                }
            }
        }



                     
       

        internal void OnCurrentSubItemsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<SubItems> e)
        {
            //CurrentSubItems = e.Data;
            NotifyPropertyChanged(m => this.CurrentSubItems);
        }

        private  SubItems _currentSubItems;
        public SubItems CurrentSubItems
        {
            get
            {
                return _currentSubItems;
            }
            set
            {
                if (_currentSubItems != value)
                {
                    _currentSubItems = value;
                    BeginSendMessage(MessageToken.CurrentSubItemsChanged,
                                                     new NotificationEventArgs<SubItems>(MessageToken.CurrentSubItemsChanged, _currentSubItems)); 
                    NotifyPropertyChanged(x => this.CurrentSubItems);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<SubItems> _vcurrentSubItems;
        public VirtualListItem<SubItems> VCurrentSubItems
        {
            get
            {
                return _vcurrentSubItems;
            }
            set
            {
                if (_vcurrentSubItems != value)
                {
                    _vcurrentSubItems = value;
					if(_vcurrentSubItems != null) CurrentSubItems = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentSubItems);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_AdjustmentsAlreadyXMLedChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_AdjustmentsAlreadyXMLed> e)
        {
            //CurrentTODO_AdjustmentsAlreadyXMLed = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_AdjustmentsAlreadyXMLed);
        }

        private  TODO_AdjustmentsAlreadyXMLed _currentTODO_AdjustmentsAlreadyXMLed;
        public TODO_AdjustmentsAlreadyXMLed CurrentTODO_AdjustmentsAlreadyXMLed
        {
            get
            {
                return _currentTODO_AdjustmentsAlreadyXMLed;
            }
            set
            {
                if (_currentTODO_AdjustmentsAlreadyXMLed != value)
                {
                    _currentTODO_AdjustmentsAlreadyXMLed = value;
                    BeginSendMessage(MessageToken.CurrentTODO_AdjustmentsAlreadyXMLedChanged,
                                                     new NotificationEventArgs<TODO_AdjustmentsAlreadyXMLed>(MessageToken.CurrentTODO_AdjustmentsAlreadyXMLedChanged, _currentTODO_AdjustmentsAlreadyXMLed)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_AdjustmentsAlreadyXMLed);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_AdjustmentsAlreadyXMLed> _vcurrentTODO_AdjustmentsAlreadyXMLed;
        public VirtualListItem<TODO_AdjustmentsAlreadyXMLed> VCurrentTODO_AdjustmentsAlreadyXMLed
        {
            get
            {
                return _vcurrentTODO_AdjustmentsAlreadyXMLed;
            }
            set
            {
                if (_vcurrentTODO_AdjustmentsAlreadyXMLed != value)
                {
                    _vcurrentTODO_AdjustmentsAlreadyXMLed = value;
					if(_vcurrentTODO_AdjustmentsAlreadyXMLed != null) CurrentTODO_AdjustmentsAlreadyXMLed = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_AdjustmentsAlreadyXMLed);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_AssessDiscrepancyEntriesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_AssessDiscrepancyEntries> e)
        {
            //CurrentTODO_AssessDiscrepancyEntries = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_AssessDiscrepancyEntries);
        }

        private  TODO_AssessDiscrepancyEntries _currentTODO_AssessDiscrepancyEntries;
        public TODO_AssessDiscrepancyEntries CurrentTODO_AssessDiscrepancyEntries
        {
            get
            {
                return _currentTODO_AssessDiscrepancyEntries;
            }
            set
            {
                if (_currentTODO_AssessDiscrepancyEntries != value)
                {
                    _currentTODO_AssessDiscrepancyEntries = value;
                    BeginSendMessage(MessageToken.CurrentTODO_AssessDiscrepancyEntriesChanged,
                                                     new NotificationEventArgs<TODO_AssessDiscrepancyEntries>(MessageToken.CurrentTODO_AssessDiscrepancyEntriesChanged, _currentTODO_AssessDiscrepancyEntries)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_AssessDiscrepancyEntries);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_AssessDiscrepancyEntries> _vcurrentTODO_AssessDiscrepancyEntries;
        public VirtualListItem<TODO_AssessDiscrepancyEntries> VCurrentTODO_AssessDiscrepancyEntries
        {
            get
            {
                return _vcurrentTODO_AssessDiscrepancyEntries;
            }
            set
            {
                if (_vcurrentTODO_AssessDiscrepancyEntries != value)
                {
                    _vcurrentTODO_AssessDiscrepancyEntries = value;
					if(_vcurrentTODO_AssessDiscrepancyEntries != null) CurrentTODO_AssessDiscrepancyEntries = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_AssessDiscrepancyEntries);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_C71ToCreateChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_C71ToCreate> e)
        {
            //CurrentTODO_C71ToCreate = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_C71ToCreate);
        }

        private  TODO_C71ToCreate _currentTODO_C71ToCreate;
        public TODO_C71ToCreate CurrentTODO_C71ToCreate
        {
            get
            {
                return _currentTODO_C71ToCreate;
            }
            set
            {
                if (_currentTODO_C71ToCreate != value)
                {
                    _currentTODO_C71ToCreate = value;
                    BeginSendMessage(MessageToken.CurrentTODO_C71ToCreateChanged,
                                                     new NotificationEventArgs<TODO_C71ToCreate>(MessageToken.CurrentTODO_C71ToCreateChanged, _currentTODO_C71ToCreate)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_C71ToCreate);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_C71ToCreate> _vcurrentTODO_C71ToCreate;
        public VirtualListItem<TODO_C71ToCreate> VCurrentTODO_C71ToCreate
        {
            get
            {
                return _vcurrentTODO_C71ToCreate;
            }
            set
            {
                if (_vcurrentTODO_C71ToCreate != value)
                {
                    _vcurrentTODO_C71ToCreate = value;
					if(_vcurrentTODO_C71ToCreate != null) CurrentTODO_C71ToCreate = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_C71ToCreate);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_C71ToXMLChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_C71ToXML> e)
        {
            //CurrentTODO_C71ToXML = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_C71ToXML);
        }

        private  TODO_C71ToXML _currentTODO_C71ToXML;
        public TODO_C71ToXML CurrentTODO_C71ToXML
        {
            get
            {
                return _currentTODO_C71ToXML;
            }
            set
            {
                if (_currentTODO_C71ToXML != value)
                {
                    _currentTODO_C71ToXML = value;
                    BeginSendMessage(MessageToken.CurrentTODO_C71ToXMLChanged,
                                                     new NotificationEventArgs<TODO_C71ToXML>(MessageToken.CurrentTODO_C71ToXMLChanged, _currentTODO_C71ToXML)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_C71ToXML);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_C71ToXML> _vcurrentTODO_C71ToXML;
        public VirtualListItem<TODO_C71ToXML> VCurrentTODO_C71ToXML
        {
            get
            {
                return _vcurrentTODO_C71ToXML;
            }
            set
            {
                if (_vcurrentTODO_C71ToXML != value)
                {
                    _vcurrentTODO_C71ToXML = value;
					if(_vcurrentTODO_C71ToXML != null) CurrentTODO_C71ToXML = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_C71ToXML);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_CreateDiscrepancyEntriesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_CreateDiscrepancyEntries> e)
        {
            //CurrentTODO_CreateDiscrepancyEntries = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_CreateDiscrepancyEntries);
        }

        private  TODO_CreateDiscrepancyEntries _currentTODO_CreateDiscrepancyEntries;
        public TODO_CreateDiscrepancyEntries CurrentTODO_CreateDiscrepancyEntries
        {
            get
            {
                return _currentTODO_CreateDiscrepancyEntries;
            }
            set
            {
                if (_currentTODO_CreateDiscrepancyEntries != value)
                {
                    _currentTODO_CreateDiscrepancyEntries = value;
                    BeginSendMessage(MessageToken.CurrentTODO_CreateDiscrepancyEntriesChanged,
                                                     new NotificationEventArgs<TODO_CreateDiscrepancyEntries>(MessageToken.CurrentTODO_CreateDiscrepancyEntriesChanged, _currentTODO_CreateDiscrepancyEntries)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_CreateDiscrepancyEntries);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_CreateDiscrepancyEntries> _vcurrentTODO_CreateDiscrepancyEntries;
        public VirtualListItem<TODO_CreateDiscrepancyEntries> VCurrentTODO_CreateDiscrepancyEntries
        {
            get
            {
                return _vcurrentTODO_CreateDiscrepancyEntries;
            }
            set
            {
                if (_vcurrentTODO_CreateDiscrepancyEntries != value)
                {
                    _vcurrentTODO_CreateDiscrepancyEntries = value;
					if(_vcurrentTODO_CreateDiscrepancyEntries != null) CurrentTODO_CreateDiscrepancyEntries = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_CreateDiscrepancyEntries);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_CreateEx9Changed(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_CreateEx9> e)
        {
            //CurrentTODO_CreateEx9 = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_CreateEx9);
        }

        private  TODO_CreateEx9 _currentTODO_CreateEx9;
        public TODO_CreateEx9 CurrentTODO_CreateEx9
        {
            get
            {
                return _currentTODO_CreateEx9;
            }
            set
            {
                if (_currentTODO_CreateEx9 != value)
                {
                    _currentTODO_CreateEx9 = value;
                    BeginSendMessage(MessageToken.CurrentTODO_CreateEx9Changed,
                                                     new NotificationEventArgs<TODO_CreateEx9>(MessageToken.CurrentTODO_CreateEx9Changed, _currentTODO_CreateEx9)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_CreateEx9);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_CreateEx9> _vcurrentTODO_CreateEx9;
        public VirtualListItem<TODO_CreateEx9> VCurrentTODO_CreateEx9
        {
            get
            {
                return _vcurrentTODO_CreateEx9;
            }
            set
            {
                if (_vcurrentTODO_CreateEx9 != value)
                {
                    _vcurrentTODO_CreateEx9 = value;
					if(_vcurrentTODO_CreateEx9 != null) CurrentTODO_CreateEx9 = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_CreateEx9);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_DeleteDocumentSetChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_DeleteDocumentSet> e)
        {
            //CurrentTODO_DeleteDocumentSet = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_DeleteDocumentSet);
        }

        private  TODO_DeleteDocumentSet _currentTODO_DeleteDocumentSet;
        public TODO_DeleteDocumentSet CurrentTODO_DeleteDocumentSet
        {
            get
            {
                return _currentTODO_DeleteDocumentSet;
            }
            set
            {
                if (_currentTODO_DeleteDocumentSet != value)
                {
                    _currentTODO_DeleteDocumentSet = value;
                    BeginSendMessage(MessageToken.CurrentTODO_DeleteDocumentSetChanged,
                                                     new NotificationEventArgs<TODO_DeleteDocumentSet>(MessageToken.CurrentTODO_DeleteDocumentSetChanged, _currentTODO_DeleteDocumentSet)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_DeleteDocumentSet);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_DeleteDocumentSet> _vcurrentTODO_DeleteDocumentSet;
        public VirtualListItem<TODO_DeleteDocumentSet> VCurrentTODO_DeleteDocumentSet
        {
            get
            {
                return _vcurrentTODO_DeleteDocumentSet;
            }
            set
            {
                if (_vcurrentTODO_DeleteDocumentSet != value)
                {
                    _vcurrentTODO_DeleteDocumentSet = value;
					if(_vcurrentTODO_DeleteDocumentSet != null) CurrentTODO_DeleteDocumentSet = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_DeleteDocumentSet);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_DiscrepanciesAlreadyXMLedChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_DiscrepanciesAlreadyXMLed> e)
        {
            //CurrentTODO_DiscrepanciesAlreadyXMLed = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_DiscrepanciesAlreadyXMLed);
        }

        private  TODO_DiscrepanciesAlreadyXMLed _currentTODO_DiscrepanciesAlreadyXMLed;
        public TODO_DiscrepanciesAlreadyXMLed CurrentTODO_DiscrepanciesAlreadyXMLed
        {
            get
            {
                return _currentTODO_DiscrepanciesAlreadyXMLed;
            }
            set
            {
                if (_currentTODO_DiscrepanciesAlreadyXMLed != value)
                {
                    _currentTODO_DiscrepanciesAlreadyXMLed = value;
                    BeginSendMessage(MessageToken.CurrentTODO_DiscrepanciesAlreadyXMLedChanged,
                                                     new NotificationEventArgs<TODO_DiscrepanciesAlreadyXMLed>(MessageToken.CurrentTODO_DiscrepanciesAlreadyXMLedChanged, _currentTODO_DiscrepanciesAlreadyXMLed)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesAlreadyXMLed);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_DiscrepanciesAlreadyXMLed> _vcurrentTODO_DiscrepanciesAlreadyXMLed;
        public VirtualListItem<TODO_DiscrepanciesAlreadyXMLed> VCurrentTODO_DiscrepanciesAlreadyXMLed
        {
            get
            {
                return _vcurrentTODO_DiscrepanciesAlreadyXMLed;
            }
            set
            {
                if (_vcurrentTODO_DiscrepanciesAlreadyXMLed != value)
                {
                    _vcurrentTODO_DiscrepanciesAlreadyXMLed = value;
					if(_vcurrentTODO_DiscrepanciesAlreadyXMLed != null) CurrentTODO_DiscrepanciesAlreadyXMLed = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_DiscrepanciesAlreadyXMLed);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_DiscrepanciesErrorsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_DiscrepanciesErrors> e)
        {
            //CurrentTODO_DiscrepanciesErrors = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_DiscrepanciesErrors);
        }

        private  TODO_DiscrepanciesErrors _currentTODO_DiscrepanciesErrors;
        public TODO_DiscrepanciesErrors CurrentTODO_DiscrepanciesErrors
        {
            get
            {
                return _currentTODO_DiscrepanciesErrors;
            }
            set
            {
                if (_currentTODO_DiscrepanciesErrors != value)
                {
                    _currentTODO_DiscrepanciesErrors = value;
                    BeginSendMessage(MessageToken.CurrentTODO_DiscrepanciesErrorsChanged,
                                                     new NotificationEventArgs<TODO_DiscrepanciesErrors>(MessageToken.CurrentTODO_DiscrepanciesErrorsChanged, _currentTODO_DiscrepanciesErrors)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesErrors);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_DiscrepanciesErrors> _vcurrentTODO_DiscrepanciesErrors;
        public VirtualListItem<TODO_DiscrepanciesErrors> VCurrentTODO_DiscrepanciesErrors
        {
            get
            {
                return _vcurrentTODO_DiscrepanciesErrors;
            }
            set
            {
                if (_vcurrentTODO_DiscrepanciesErrors != value)
                {
                    _vcurrentTODO_DiscrepanciesErrors = value;
					if(_vcurrentTODO_DiscrepanciesErrors != null) CurrentTODO_DiscrepanciesErrors = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_DiscrepanciesErrors);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_DiscrepanciesExecutionReportChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_DiscrepanciesExecutionReport> e)
        {
            //CurrentTODO_DiscrepanciesExecutionReport = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_DiscrepanciesExecutionReport);
        }

        private  TODO_DiscrepanciesExecutionReport _currentTODO_DiscrepanciesExecutionReport;
        public TODO_DiscrepanciesExecutionReport CurrentTODO_DiscrepanciesExecutionReport
        {
            get
            {
                return _currentTODO_DiscrepanciesExecutionReport;
            }
            set
            {
                if (_currentTODO_DiscrepanciesExecutionReport != value)
                {
                    _currentTODO_DiscrepanciesExecutionReport = value;
                    BeginSendMessage(MessageToken.CurrentTODO_DiscrepanciesExecutionReportChanged,
                                                     new NotificationEventArgs<TODO_DiscrepanciesExecutionReport>(MessageToken.CurrentTODO_DiscrepanciesExecutionReportChanged, _currentTODO_DiscrepanciesExecutionReport)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesExecutionReport);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_DiscrepanciesExecutionReport> _vcurrentTODO_DiscrepanciesExecutionReport;
        public VirtualListItem<TODO_DiscrepanciesExecutionReport> VCurrentTODO_DiscrepanciesExecutionReport
        {
            get
            {
                return _vcurrentTODO_DiscrepanciesExecutionReport;
            }
            set
            {
                if (_vcurrentTODO_DiscrepanciesExecutionReport != value)
                {
                    _vcurrentTODO_DiscrepanciesExecutionReport = value;
					if(_vcurrentTODO_DiscrepanciesExecutionReport != null) CurrentTODO_DiscrepanciesExecutionReport = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_DiscrepanciesExecutionReport);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_DiscrepanciesToAssessChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_DiscrepanciesToAssess> e)
        {
            //CurrentTODO_DiscrepanciesToAssess = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_DiscrepanciesToAssess);
        }

        private  TODO_DiscrepanciesToAssess _currentTODO_DiscrepanciesToAssess;
        public TODO_DiscrepanciesToAssess CurrentTODO_DiscrepanciesToAssess
        {
            get
            {
                return _currentTODO_DiscrepanciesToAssess;
            }
            set
            {
                if (_currentTODO_DiscrepanciesToAssess != value)
                {
                    _currentTODO_DiscrepanciesToAssess = value;
                    BeginSendMessage(MessageToken.CurrentTODO_DiscrepanciesToAssessChanged,
                                                     new NotificationEventArgs<TODO_DiscrepanciesToAssess>(MessageToken.CurrentTODO_DiscrepanciesToAssessChanged, _currentTODO_DiscrepanciesToAssess)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesToAssess);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_DiscrepanciesToAssess> _vcurrentTODO_DiscrepanciesToAssess;
        public VirtualListItem<TODO_DiscrepanciesToAssess> VCurrentTODO_DiscrepanciesToAssess
        {
            get
            {
                return _vcurrentTODO_DiscrepanciesToAssess;
            }
            set
            {
                if (_vcurrentTODO_DiscrepanciesToAssess != value)
                {
                    _vcurrentTODO_DiscrepanciesToAssess = value;
					if(_vcurrentTODO_DiscrepanciesToAssess != null) CurrentTODO_DiscrepanciesToAssess = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_DiscrepanciesToAssess);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_DiscrepancyPreExecutionReportChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_DiscrepancyPreExecutionReport> e)
        {
            //CurrentTODO_DiscrepancyPreExecutionReport = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_DiscrepancyPreExecutionReport);
        }

        private  TODO_DiscrepancyPreExecutionReport _currentTODO_DiscrepancyPreExecutionReport;
        public TODO_DiscrepancyPreExecutionReport CurrentTODO_DiscrepancyPreExecutionReport
        {
            get
            {
                return _currentTODO_DiscrepancyPreExecutionReport;
            }
            set
            {
                if (_currentTODO_DiscrepancyPreExecutionReport != value)
                {
                    _currentTODO_DiscrepancyPreExecutionReport = value;
                    BeginSendMessage(MessageToken.CurrentTODO_DiscrepancyPreExecutionReportChanged,
                                                     new NotificationEventArgs<TODO_DiscrepancyPreExecutionReport>(MessageToken.CurrentTODO_DiscrepancyPreExecutionReportChanged, _currentTODO_DiscrepancyPreExecutionReport)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepancyPreExecutionReport);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_DiscrepancyPreExecutionReport> _vcurrentTODO_DiscrepancyPreExecutionReport;
        public VirtualListItem<TODO_DiscrepancyPreExecutionReport> VCurrentTODO_DiscrepancyPreExecutionReport
        {
            get
            {
                return _vcurrentTODO_DiscrepancyPreExecutionReport;
            }
            set
            {
                if (_vcurrentTODO_DiscrepancyPreExecutionReport != value)
                {
                    _vcurrentTODO_DiscrepancyPreExecutionReport = value;
					if(_vcurrentTODO_DiscrepancyPreExecutionReport != null) CurrentTODO_DiscrepancyPreExecutionReport = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_DiscrepancyPreExecutionReport);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_DocumentsToDeleteChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_DocumentsToDelete> e)
        {
            //CurrentTODO_DocumentsToDelete = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_DocumentsToDelete);
        }

        private  TODO_DocumentsToDelete _currentTODO_DocumentsToDelete;
        public TODO_DocumentsToDelete CurrentTODO_DocumentsToDelete
        {
            get
            {
                return _currentTODO_DocumentsToDelete;
            }
            set
            {
                if (_currentTODO_DocumentsToDelete != value)
                {
                    _currentTODO_DocumentsToDelete = value;
                    BeginSendMessage(MessageToken.CurrentTODO_DocumentsToDeleteChanged,
                                                     new NotificationEventArgs<TODO_DocumentsToDelete>(MessageToken.CurrentTODO_DocumentsToDeleteChanged, _currentTODO_DocumentsToDelete)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_DocumentsToDelete);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_DocumentsToDelete> _vcurrentTODO_DocumentsToDelete;
        public VirtualListItem<TODO_DocumentsToDelete> VCurrentTODO_DocumentsToDelete
        {
            get
            {
                return _vcurrentTODO_DocumentsToDelete;
            }
            set
            {
                if (_vcurrentTODO_DocumentsToDelete != value)
                {
                    _vcurrentTODO_DocumentsToDelete = value;
					if(_vcurrentTODO_DocumentsToDelete != null) CurrentTODO_DocumentsToDelete = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_DocumentsToDelete);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_EntriesExpiringNextMonthChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_EntriesExpiringNextMonth> e)
        {
            //CurrentTODO_EntriesExpiringNextMonth = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_EntriesExpiringNextMonth);
        }

        private  TODO_EntriesExpiringNextMonth _currentTODO_EntriesExpiringNextMonth;
        public TODO_EntriesExpiringNextMonth CurrentTODO_EntriesExpiringNextMonth
        {
            get
            {
                return _currentTODO_EntriesExpiringNextMonth;
            }
            set
            {
                if (_currentTODO_EntriesExpiringNextMonth != value)
                {
                    _currentTODO_EntriesExpiringNextMonth = value;
                    BeginSendMessage(MessageToken.CurrentTODO_EntriesExpiringNextMonthChanged,
                                                     new NotificationEventArgs<TODO_EntriesExpiringNextMonth>(MessageToken.CurrentTODO_EntriesExpiringNextMonthChanged, _currentTODO_EntriesExpiringNextMonth)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_EntriesExpiringNextMonth);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_EntriesExpiringNextMonth> _vcurrentTODO_EntriesExpiringNextMonth;
        public VirtualListItem<TODO_EntriesExpiringNextMonth> VCurrentTODO_EntriesExpiringNextMonth
        {
            get
            {
                return _vcurrentTODO_EntriesExpiringNextMonth;
            }
            set
            {
                if (_vcurrentTODO_EntriesExpiringNextMonth != value)
                {
                    _vcurrentTODO_EntriesExpiringNextMonth = value;
					if(_vcurrentTODO_EntriesExpiringNextMonth != null) CurrentTODO_EntriesExpiringNextMonth = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_EntriesExpiringNextMonth);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_Error_DuplicateEntryChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_Error_DuplicateEntry> e)
        {
            //CurrentTODO_Error_DuplicateEntry = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_Error_DuplicateEntry);
        }

        private  TODO_Error_DuplicateEntry _currentTODO_Error_DuplicateEntry;
        public TODO_Error_DuplicateEntry CurrentTODO_Error_DuplicateEntry
        {
            get
            {
                return _currentTODO_Error_DuplicateEntry;
            }
            set
            {
                if (_currentTODO_Error_DuplicateEntry != value)
                {
                    _currentTODO_Error_DuplicateEntry = value;
                    BeginSendMessage(MessageToken.CurrentTODO_Error_DuplicateEntryChanged,
                                                     new NotificationEventArgs<TODO_Error_DuplicateEntry>(MessageToken.CurrentTODO_Error_DuplicateEntryChanged, _currentTODO_Error_DuplicateEntry)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_Error_DuplicateEntry);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_Error_DuplicateEntry> _vcurrentTODO_Error_DuplicateEntry;
        public VirtualListItem<TODO_Error_DuplicateEntry> VCurrentTODO_Error_DuplicateEntry
        {
            get
            {
                return _vcurrentTODO_Error_DuplicateEntry;
            }
            set
            {
                if (_vcurrentTODO_Error_DuplicateEntry != value)
                {
                    _vcurrentTODO_Error_DuplicateEntry = value;
					if(_vcurrentTODO_Error_DuplicateEntry != null) CurrentTODO_Error_DuplicateEntry = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_Error_DuplicateEntry);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_Error_IncompleteImportChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_Error_IncompleteImport> e)
        {
            //CurrentTODO_Error_IncompleteImport = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_Error_IncompleteImport);
        }

        private  TODO_Error_IncompleteImport _currentTODO_Error_IncompleteImport;
        public TODO_Error_IncompleteImport CurrentTODO_Error_IncompleteImport
        {
            get
            {
                return _currentTODO_Error_IncompleteImport;
            }
            set
            {
                if (_currentTODO_Error_IncompleteImport != value)
                {
                    _currentTODO_Error_IncompleteImport = value;
                    BeginSendMessage(MessageToken.CurrentTODO_Error_IncompleteImportChanged,
                                                     new NotificationEventArgs<TODO_Error_IncompleteImport>(MessageToken.CurrentTODO_Error_IncompleteImportChanged, _currentTODO_Error_IncompleteImport)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_Error_IncompleteImport);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_Error_IncompleteImport> _vcurrentTODO_Error_IncompleteImport;
        public VirtualListItem<TODO_Error_IncompleteImport> VCurrentTODO_Error_IncompleteImport
        {
            get
            {
                return _vcurrentTODO_Error_IncompleteImport;
            }
            set
            {
                if (_vcurrentTODO_Error_IncompleteImport != value)
                {
                    _vcurrentTODO_Error_IncompleteImport = value;
					if(_vcurrentTODO_Error_IncompleteImport != null) CurrentTODO_Error_IncompleteImport = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_Error_IncompleteImport);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_Error_IncompleteItemsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_Error_IncompleteItems> e)
        {
            //CurrentTODO_Error_IncompleteItems = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_Error_IncompleteItems);
        }

        private  TODO_Error_IncompleteItems _currentTODO_Error_IncompleteItems;
        public TODO_Error_IncompleteItems CurrentTODO_Error_IncompleteItems
        {
            get
            {
                return _currentTODO_Error_IncompleteItems;
            }
            set
            {
                if (_currentTODO_Error_IncompleteItems != value)
                {
                    _currentTODO_Error_IncompleteItems = value;
                    BeginSendMessage(MessageToken.CurrentTODO_Error_IncompleteItemsChanged,
                                                     new NotificationEventArgs<TODO_Error_IncompleteItems>(MessageToken.CurrentTODO_Error_IncompleteItemsChanged, _currentTODO_Error_IncompleteItems)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_Error_IncompleteItems);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_Error_IncompleteItems> _vcurrentTODO_Error_IncompleteItems;
        public VirtualListItem<TODO_Error_IncompleteItems> VCurrentTODO_Error_IncompleteItems
        {
            get
            {
                return _vcurrentTODO_Error_IncompleteItems;
            }
            set
            {
                if (_vcurrentTODO_Error_IncompleteItems != value)
                {
                    _vcurrentTODO_Error_IncompleteItems = value;
					if(_vcurrentTODO_Error_IncompleteItems != null) CurrentTODO_Error_IncompleteItems = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_Error_IncompleteItems);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_ERRReport_AllocationsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_ERRReport_Allocations> e)
        {
            //CurrentTODO_ERRReport_Allocations = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_ERRReport_Allocations);
        }

        private  TODO_ERRReport_Allocations _currentTODO_ERRReport_Allocations;
        public TODO_ERRReport_Allocations CurrentTODO_ERRReport_Allocations
        {
            get
            {
                return _currentTODO_ERRReport_Allocations;
            }
            set
            {
                if (_currentTODO_ERRReport_Allocations != value)
                {
                    _currentTODO_ERRReport_Allocations = value;
                    BeginSendMessage(MessageToken.CurrentTODO_ERRReport_AllocationsChanged,
                                                     new NotificationEventArgs<TODO_ERRReport_Allocations>(MessageToken.CurrentTODO_ERRReport_AllocationsChanged, _currentTODO_ERRReport_Allocations)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_Allocations);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_ERRReport_Allocations> _vcurrentTODO_ERRReport_Allocations;
        public VirtualListItem<TODO_ERRReport_Allocations> VCurrentTODO_ERRReport_Allocations
        {
            get
            {
                return _vcurrentTODO_ERRReport_Allocations;
            }
            set
            {
                if (_vcurrentTODO_ERRReport_Allocations != value)
                {
                    _vcurrentTODO_ERRReport_Allocations = value;
					if(_vcurrentTODO_ERRReport_Allocations != null) CurrentTODO_ERRReport_Allocations = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_ERRReport_Allocations);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_ERRReport_AsycudaEntriesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_ERRReport_AsycudaEntries> e)
        {
            //CurrentTODO_ERRReport_AsycudaEntries = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_ERRReport_AsycudaEntries);
        }

        private  TODO_ERRReport_AsycudaEntries _currentTODO_ERRReport_AsycudaEntries;
        public TODO_ERRReport_AsycudaEntries CurrentTODO_ERRReport_AsycudaEntries
        {
            get
            {
                return _currentTODO_ERRReport_AsycudaEntries;
            }
            set
            {
                if (_currentTODO_ERRReport_AsycudaEntries != value)
                {
                    _currentTODO_ERRReport_AsycudaEntries = value;
                    BeginSendMessage(MessageToken.CurrentTODO_ERRReport_AsycudaEntriesChanged,
                                                     new NotificationEventArgs<TODO_ERRReport_AsycudaEntries>(MessageToken.CurrentTODO_ERRReport_AsycudaEntriesChanged, _currentTODO_ERRReport_AsycudaEntries)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_AsycudaEntries);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_ERRReport_AsycudaEntries> _vcurrentTODO_ERRReport_AsycudaEntries;
        public VirtualListItem<TODO_ERRReport_AsycudaEntries> VCurrentTODO_ERRReport_AsycudaEntries
        {
            get
            {
                return _vcurrentTODO_ERRReport_AsycudaEntries;
            }
            set
            {
                if (_vcurrentTODO_ERRReport_AsycudaEntries != value)
                {
                    _vcurrentTODO_ERRReport_AsycudaEntries = value;
					if(_vcurrentTODO_ERRReport_AsycudaEntries != null) CurrentTODO_ERRReport_AsycudaEntries = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_ERRReport_AsycudaEntries);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_ERRReport_AsycudaLinesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_ERRReport_AsycudaLines> e)
        {
            //CurrentTODO_ERRReport_AsycudaLines = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_ERRReport_AsycudaLines);
        }

        private  TODO_ERRReport_AsycudaLines _currentTODO_ERRReport_AsycudaLines;
        public TODO_ERRReport_AsycudaLines CurrentTODO_ERRReport_AsycudaLines
        {
            get
            {
                return _currentTODO_ERRReport_AsycudaLines;
            }
            set
            {
                if (_currentTODO_ERRReport_AsycudaLines != value)
                {
                    _currentTODO_ERRReport_AsycudaLines = value;
                    BeginSendMessage(MessageToken.CurrentTODO_ERRReport_AsycudaLinesChanged,
                                                     new NotificationEventArgs<TODO_ERRReport_AsycudaLines>(MessageToken.CurrentTODO_ERRReport_AsycudaLinesChanged, _currentTODO_ERRReport_AsycudaLines)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_AsycudaLines);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_ERRReport_AsycudaLines> _vcurrentTODO_ERRReport_AsycudaLines;
        public VirtualListItem<TODO_ERRReport_AsycudaLines> VCurrentTODO_ERRReport_AsycudaLines
        {
            get
            {
                return _vcurrentTODO_ERRReport_AsycudaLines;
            }
            set
            {
                if (_vcurrentTODO_ERRReport_AsycudaLines != value)
                {
                    _vcurrentTODO_ERRReport_AsycudaLines = value;
					if(_vcurrentTODO_ERRReport_AsycudaLines != null) CurrentTODO_ERRReport_AsycudaLines = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_ERRReport_AsycudaLines);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_ERRReport_ByItemNumberChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_ERRReport_ByItemNumber> e)
        {
            //CurrentTODO_ERRReport_ByItemNumber = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_ERRReport_ByItemNumber);
        }

        private  TODO_ERRReport_ByItemNumber _currentTODO_ERRReport_ByItemNumber;
        public TODO_ERRReport_ByItemNumber CurrentTODO_ERRReport_ByItemNumber
        {
            get
            {
                return _currentTODO_ERRReport_ByItemNumber;
            }
            set
            {
                if (_currentTODO_ERRReport_ByItemNumber != value)
                {
                    _currentTODO_ERRReport_ByItemNumber = value;
                    BeginSendMessage(MessageToken.CurrentTODO_ERRReport_ByItemNumberChanged,
                                                     new NotificationEventArgs<TODO_ERRReport_ByItemNumber>(MessageToken.CurrentTODO_ERRReport_ByItemNumberChanged, _currentTODO_ERRReport_ByItemNumber)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_ByItemNumber);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_ERRReport_ByItemNumber> _vcurrentTODO_ERRReport_ByItemNumber;
        public VirtualListItem<TODO_ERRReport_ByItemNumber> VCurrentTODO_ERRReport_ByItemNumber
        {
            get
            {
                return _vcurrentTODO_ERRReport_ByItemNumber;
            }
            set
            {
                if (_vcurrentTODO_ERRReport_ByItemNumber != value)
                {
                    _vcurrentTODO_ERRReport_ByItemNumber = value;
					if(_vcurrentTODO_ERRReport_ByItemNumber != null) CurrentTODO_ERRReport_ByItemNumber = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_ERRReport_ByItemNumber);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_ERRReport_EntryDataDetailsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_ERRReport_EntryDataDetails> e)
        {
            //CurrentTODO_ERRReport_EntryDataDetails = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_ERRReport_EntryDataDetails);
        }

        private  TODO_ERRReport_EntryDataDetails _currentTODO_ERRReport_EntryDataDetails;
        public TODO_ERRReport_EntryDataDetails CurrentTODO_ERRReport_EntryDataDetails
        {
            get
            {
                return _currentTODO_ERRReport_EntryDataDetails;
            }
            set
            {
                if (_currentTODO_ERRReport_EntryDataDetails != value)
                {
                    _currentTODO_ERRReport_EntryDataDetails = value;
                    BeginSendMessage(MessageToken.CurrentTODO_ERRReport_EntryDataDetailsChanged,
                                                     new NotificationEventArgs<TODO_ERRReport_EntryDataDetails>(MessageToken.CurrentTODO_ERRReport_EntryDataDetailsChanged, _currentTODO_ERRReport_EntryDataDetails)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_EntryDataDetails);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_ERRReport_EntryDataDetails> _vcurrentTODO_ERRReport_EntryDataDetails;
        public VirtualListItem<TODO_ERRReport_EntryDataDetails> VCurrentTODO_ERRReport_EntryDataDetails
        {
            get
            {
                return _vcurrentTODO_ERRReport_EntryDataDetails;
            }
            set
            {
                if (_vcurrentTODO_ERRReport_EntryDataDetails != value)
                {
                    _vcurrentTODO_ERRReport_EntryDataDetails = value;
					if(_vcurrentTODO_ERRReport_EntryDataDetails != null) CurrentTODO_ERRReport_EntryDataDetails = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_ERRReport_EntryDataDetails);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_ERRReport_SubmitWarehouseErrorsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_ERRReport_SubmitWarehouseErrors> e)
        {
            //CurrentTODO_ERRReport_SubmitWarehouseErrors = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_ERRReport_SubmitWarehouseErrors);
        }

        private  TODO_ERRReport_SubmitWarehouseErrors _currentTODO_ERRReport_SubmitWarehouseErrors;
        public TODO_ERRReport_SubmitWarehouseErrors CurrentTODO_ERRReport_SubmitWarehouseErrors
        {
            get
            {
                return _currentTODO_ERRReport_SubmitWarehouseErrors;
            }
            set
            {
                if (_currentTODO_ERRReport_SubmitWarehouseErrors != value)
                {
                    _currentTODO_ERRReport_SubmitWarehouseErrors = value;
                    BeginSendMessage(MessageToken.CurrentTODO_ERRReport_SubmitWarehouseErrorsChanged,
                                                     new NotificationEventArgs<TODO_ERRReport_SubmitWarehouseErrors>(MessageToken.CurrentTODO_ERRReport_SubmitWarehouseErrorsChanged, _currentTODO_ERRReport_SubmitWarehouseErrors)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_SubmitWarehouseErrors);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_ERRReport_SubmitWarehouseErrors> _vcurrentTODO_ERRReport_SubmitWarehouseErrors;
        public VirtualListItem<TODO_ERRReport_SubmitWarehouseErrors> VCurrentTODO_ERRReport_SubmitWarehouseErrors
        {
            get
            {
                return _vcurrentTODO_ERRReport_SubmitWarehouseErrors;
            }
            set
            {
                if (_vcurrentTODO_ERRReport_SubmitWarehouseErrors != value)
                {
                    _vcurrentTODO_ERRReport_SubmitWarehouseErrors = value;
					if(_vcurrentTODO_ERRReport_SubmitWarehouseErrors != null) CurrentTODO_ERRReport_SubmitWarehouseErrors = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_ERRReport_SubmitWarehouseErrors);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_ERRReport_UnmappedItemsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_ERRReport_UnmappedItems> e)
        {
            //CurrentTODO_ERRReport_UnmappedItems = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_ERRReport_UnmappedItems);
        }

        private  TODO_ERRReport_UnmappedItems _currentTODO_ERRReport_UnmappedItems;
        public TODO_ERRReport_UnmappedItems CurrentTODO_ERRReport_UnmappedItems
        {
            get
            {
                return _currentTODO_ERRReport_UnmappedItems;
            }
            set
            {
                if (_currentTODO_ERRReport_UnmappedItems != value)
                {
                    _currentTODO_ERRReport_UnmappedItems = value;
                    BeginSendMessage(MessageToken.CurrentTODO_ERRReport_UnmappedItemsChanged,
                                                     new NotificationEventArgs<TODO_ERRReport_UnmappedItems>(MessageToken.CurrentTODO_ERRReport_UnmappedItemsChanged, _currentTODO_ERRReport_UnmappedItems)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_ERRReport_UnmappedItems);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_ERRReport_UnmappedItems> _vcurrentTODO_ERRReport_UnmappedItems;
        public VirtualListItem<TODO_ERRReport_UnmappedItems> VCurrentTODO_ERRReport_UnmappedItems
        {
            get
            {
                return _vcurrentTODO_ERRReport_UnmappedItems;
            }
            set
            {
                if (_vcurrentTODO_ERRReport_UnmappedItems != value)
                {
                    _vcurrentTODO_ERRReport_UnmappedItems = value;
					if(_vcurrentTODO_ERRReport_UnmappedItems != null) CurrentTODO_ERRReport_UnmappedItems = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_ERRReport_UnmappedItems);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_ImportCompleteEntriesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_ImportCompleteEntries> e)
        {
            //CurrentTODO_ImportCompleteEntries = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_ImportCompleteEntries);
        }

        private  TODO_ImportCompleteEntries _currentTODO_ImportCompleteEntries;
        public TODO_ImportCompleteEntries CurrentTODO_ImportCompleteEntries
        {
            get
            {
                return _currentTODO_ImportCompleteEntries;
            }
            set
            {
                if (_currentTODO_ImportCompleteEntries != value)
                {
                    _currentTODO_ImportCompleteEntries = value;
                    BeginSendMessage(MessageToken.CurrentTODO_ImportCompleteEntriesChanged,
                                                     new NotificationEventArgs<TODO_ImportCompleteEntries>(MessageToken.CurrentTODO_ImportCompleteEntriesChanged, _currentTODO_ImportCompleteEntries)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_ImportCompleteEntries);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_ImportCompleteEntries> _vcurrentTODO_ImportCompleteEntries;
        public VirtualListItem<TODO_ImportCompleteEntries> VCurrentTODO_ImportCompleteEntries
        {
            get
            {
                return _vcurrentTODO_ImportCompleteEntries;
            }
            set
            {
                if (_vcurrentTODO_ImportCompleteEntries != value)
                {
                    _vcurrentTODO_ImportCompleteEntries = value;
					if(_vcurrentTODO_ImportCompleteEntries != null) CurrentTODO_ImportCompleteEntries = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_ImportCompleteEntries);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_LicenceAvailableQtyChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_LicenceAvailableQty> e)
        {
            //CurrentTODO_LicenceAvailableQty = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_LicenceAvailableQty);
        }

        private  TODO_LicenceAvailableQty _currentTODO_LicenceAvailableQty;
        public TODO_LicenceAvailableQty CurrentTODO_LicenceAvailableQty
        {
            get
            {
                return _currentTODO_LicenceAvailableQty;
            }
            set
            {
                if (_currentTODO_LicenceAvailableQty != value)
                {
                    _currentTODO_LicenceAvailableQty = value;
                    BeginSendMessage(MessageToken.CurrentTODO_LicenceAvailableQtyChanged,
                                                     new NotificationEventArgs<TODO_LicenceAvailableQty>(MessageToken.CurrentTODO_LicenceAvailableQtyChanged, _currentTODO_LicenceAvailableQty)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_LicenceAvailableQty);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_LicenceAvailableQty> _vcurrentTODO_LicenceAvailableQty;
        public VirtualListItem<TODO_LicenceAvailableQty> VCurrentTODO_LicenceAvailableQty
        {
            get
            {
                return _vcurrentTODO_LicenceAvailableQty;
            }
            set
            {
                if (_vcurrentTODO_LicenceAvailableQty != value)
                {
                    _vcurrentTODO_LicenceAvailableQty = value;
					if(_vcurrentTODO_LicenceAvailableQty != null) CurrentTODO_LicenceAvailableQty = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_LicenceAvailableQty);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_LicenseToXMLChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_LicenseToXML> e)
        {
            //CurrentTODO_LicenseToXML = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_LicenseToXML);
        }

        private  TODO_LicenseToXML _currentTODO_LicenseToXML;
        public TODO_LicenseToXML CurrentTODO_LicenseToXML
        {
            get
            {
                return _currentTODO_LicenseToXML;
            }
            set
            {
                if (_currentTODO_LicenseToXML != value)
                {
                    _currentTODO_LicenseToXML = value;
                    BeginSendMessage(MessageToken.CurrentTODO_LicenseToXMLChanged,
                                                     new NotificationEventArgs<TODO_LicenseToXML>(MessageToken.CurrentTODO_LicenseToXMLChanged, _currentTODO_LicenseToXML)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_LicenseToXML);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_LicenseToXML> _vcurrentTODO_LicenseToXML;
        public VirtualListItem<TODO_LicenseToXML> VCurrentTODO_LicenseToXML
        {
            get
            {
                return _vcurrentTODO_LicenseToXML;
            }
            set
            {
                if (_vcurrentTODO_LicenseToXML != value)
                {
                    _vcurrentTODO_LicenseToXML = value;
					if(_vcurrentTODO_LicenseToXML != null) CurrentTODO_LicenseToXML = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_LicenseToXML);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_LICToCreateChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_LICToCreate> e)
        {
            //CurrentTODO_LICToCreate = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_LICToCreate);
        }

        private  TODO_LICToCreate _currentTODO_LICToCreate;
        public TODO_LICToCreate CurrentTODO_LICToCreate
        {
            get
            {
                return _currentTODO_LICToCreate;
            }
            set
            {
                if (_currentTODO_LICToCreate != value)
                {
                    _currentTODO_LICToCreate = value;
                    BeginSendMessage(MessageToken.CurrentTODO_LICToCreateChanged,
                                                     new NotificationEventArgs<TODO_LICToCreate>(MessageToken.CurrentTODO_LICToCreateChanged, _currentTODO_LICToCreate)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_LICToCreate);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_LICToCreate> _vcurrentTODO_LICToCreate;
        public VirtualListItem<TODO_LICToCreate> VCurrentTODO_LICToCreate
        {
            get
            {
                return _vcurrentTODO_LICToCreate;
            }
            set
            {
                if (_vcurrentTODO_LICToCreate != value)
                {
                    _vcurrentTODO_LICToCreate = value;
					if(_vcurrentTODO_LICToCreate != null) CurrentTODO_LICToCreate = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_LICToCreate);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_PODocSetChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_PODocSet> e)
        {
            //CurrentTODO_PODocSet = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_PODocSet);
        }

        private  TODO_PODocSet _currentTODO_PODocSet;
        public TODO_PODocSet CurrentTODO_PODocSet
        {
            get
            {
                return _currentTODO_PODocSet;
            }
            set
            {
                if (_currentTODO_PODocSet != value)
                {
                    _currentTODO_PODocSet = value;
                    BeginSendMessage(MessageToken.CurrentTODO_PODocSetChanged,
                                                     new NotificationEventArgs<TODO_PODocSet>(MessageToken.CurrentTODO_PODocSetChanged, _currentTODO_PODocSet)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_PODocSet);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_PODocSet> _vcurrentTODO_PODocSet;
        public VirtualListItem<TODO_PODocSet> VCurrentTODO_PODocSet
        {
            get
            {
                return _vcurrentTODO_PODocSet;
            }
            set
            {
                if (_vcurrentTODO_PODocSet != value)
                {
                    _vcurrentTODO_PODocSet = value;
					if(_vcurrentTODO_PODocSet != null) CurrentTODO_PODocSet = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_PODocSet);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_PODocSetToAssessChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_PODocSetToAssess> e)
        {
            //CurrentTODO_PODocSetToAssess = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_PODocSetToAssess);
        }

        private  TODO_PODocSetToAssess _currentTODO_PODocSetToAssess;
        public TODO_PODocSetToAssess CurrentTODO_PODocSetToAssess
        {
            get
            {
                return _currentTODO_PODocSetToAssess;
            }
            set
            {
                if (_currentTODO_PODocSetToAssess != value)
                {
                    _currentTODO_PODocSetToAssess = value;
                    BeginSendMessage(MessageToken.CurrentTODO_PODocSetToAssessChanged,
                                                     new NotificationEventArgs<TODO_PODocSetToAssess>(MessageToken.CurrentTODO_PODocSetToAssessChanged, _currentTODO_PODocSetToAssess)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_PODocSetToAssess);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_PODocSetToAssess> _vcurrentTODO_PODocSetToAssess;
        public VirtualListItem<TODO_PODocSetToAssess> VCurrentTODO_PODocSetToAssess
        {
            get
            {
                return _vcurrentTODO_PODocSetToAssess;
            }
            set
            {
                if (_vcurrentTODO_PODocSetToAssess != value)
                {
                    _vcurrentTODO_PODocSetToAssess = value;
					if(_vcurrentTODO_PODocSetToAssess != null) CurrentTODO_PODocSetToAssess = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_PODocSetToAssess);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_PODocSetToAssessErrorsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_PODocSetToAssessErrors> e)
        {
            //CurrentTODO_PODocSetToAssessErrors = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_PODocSetToAssessErrors);
        }

        private  TODO_PODocSetToAssessErrors _currentTODO_PODocSetToAssessErrors;
        public TODO_PODocSetToAssessErrors CurrentTODO_PODocSetToAssessErrors
        {
            get
            {
                return _currentTODO_PODocSetToAssessErrors;
            }
            set
            {
                if (_currentTODO_PODocSetToAssessErrors != value)
                {
                    _currentTODO_PODocSetToAssessErrors = value;
                    BeginSendMessage(MessageToken.CurrentTODO_PODocSetToAssessErrorsChanged,
                                                     new NotificationEventArgs<TODO_PODocSetToAssessErrors>(MessageToken.CurrentTODO_PODocSetToAssessErrorsChanged, _currentTODO_PODocSetToAssessErrors)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_PODocSetToAssessErrors);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_PODocSetToAssessErrors> _vcurrentTODO_PODocSetToAssessErrors;
        public VirtualListItem<TODO_PODocSetToAssessErrors> VCurrentTODO_PODocSetToAssessErrors
        {
            get
            {
                return _vcurrentTODO_PODocSetToAssessErrors;
            }
            set
            {
                if (_vcurrentTODO_PODocSetToAssessErrors != value)
                {
                    _vcurrentTODO_PODocSetToAssessErrors = value;
					if(_vcurrentTODO_PODocSetToAssessErrors != null) CurrentTODO_PODocSetToAssessErrors = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_PODocSetToAssessErrors);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_PODocSetToExportChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_PODocSetToExport> e)
        {
            //CurrentTODO_PODocSetToExport = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_PODocSetToExport);
        }

        private  TODO_PODocSetToExport _currentTODO_PODocSetToExport;
        public TODO_PODocSetToExport CurrentTODO_PODocSetToExport
        {
            get
            {
                return _currentTODO_PODocSetToExport;
            }
            set
            {
                if (_currentTODO_PODocSetToExport != value)
                {
                    _currentTODO_PODocSetToExport = value;
                    BeginSendMessage(MessageToken.CurrentTODO_PODocSetToExportChanged,
                                                     new NotificationEventArgs<TODO_PODocSetToExport>(MessageToken.CurrentTODO_PODocSetToExportChanged, _currentTODO_PODocSetToExport)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_PODocSetToExport);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_PODocSetToExport> _vcurrentTODO_PODocSetToExport;
        public VirtualListItem<TODO_PODocSetToExport> VCurrentTODO_PODocSetToExport
        {
            get
            {
                return _vcurrentTODO_PODocSetToExport;
            }
            set
            {
                if (_vcurrentTODO_PODocSetToExport != value)
                {
                    _vcurrentTODO_PODocSetToExport = value;
					if(_vcurrentTODO_PODocSetToExport != null) CurrentTODO_PODocSetToExport = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_PODocSetToExport);                    
                }
            }
        }



                     
       

        internal void OnCurrentToDo_POToXMLChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ToDo_POToXML> e)
        {
            //CurrentToDo_POToXML = e.Data;
            NotifyPropertyChanged(m => this.CurrentToDo_POToXML);
        }

        private  ToDo_POToXML _currentToDo_POToXML;
        public ToDo_POToXML CurrentToDo_POToXML
        {
            get
            {
                return _currentToDo_POToXML;
            }
            set
            {
                if (_currentToDo_POToXML != value)
                {
                    _currentToDo_POToXML = value;
                    BeginSendMessage(MessageToken.CurrentToDo_POToXMLChanged,
                                                     new NotificationEventArgs<ToDo_POToXML>(MessageToken.CurrentToDo_POToXMLChanged, _currentToDo_POToXML)); 
                    NotifyPropertyChanged(x => this.CurrentToDo_POToXML);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<ToDo_POToXML> _vcurrentToDo_POToXML;
        public VirtualListItem<ToDo_POToXML> VCurrentToDo_POToXML
        {
            get
            {
                return _vcurrentToDo_POToXML;
            }
            set
            {
                if (_vcurrentToDo_POToXML != value)
                {
                    _vcurrentToDo_POToXML = value;
					if(_vcurrentToDo_POToXML != null) CurrentToDo_POToXML = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentToDo_POToXML);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitAllXMLToCustomsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitAllXMLToCustoms> e)
        {
            //CurrentTODO_SubmitAllXMLToCustoms = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitAllXMLToCustoms);
        }

        private  TODO_SubmitAllXMLToCustoms _currentTODO_SubmitAllXMLToCustoms;
        public TODO_SubmitAllXMLToCustoms CurrentTODO_SubmitAllXMLToCustoms
        {
            get
            {
                return _currentTODO_SubmitAllXMLToCustoms;
            }
            set
            {
                if (_currentTODO_SubmitAllXMLToCustoms != value)
                {
                    _currentTODO_SubmitAllXMLToCustoms = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitAllXMLToCustomsChanged,
                                                     new NotificationEventArgs<TODO_SubmitAllXMLToCustoms>(MessageToken.CurrentTODO_SubmitAllXMLToCustomsChanged, _currentTODO_SubmitAllXMLToCustoms)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitAllXMLToCustoms);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitAllXMLToCustoms> _vcurrentTODO_SubmitAllXMLToCustoms;
        public VirtualListItem<TODO_SubmitAllXMLToCustoms> VCurrentTODO_SubmitAllXMLToCustoms
        {
            get
            {
                return _vcurrentTODO_SubmitAllXMLToCustoms;
            }
            set
            {
                if (_vcurrentTODO_SubmitAllXMLToCustoms != value)
                {
                    _vcurrentTODO_SubmitAllXMLToCustoms = value;
					if(_vcurrentTODO_SubmitAllXMLToCustoms != null) CurrentTODO_SubmitAllXMLToCustoms = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitAllXMLToCustoms);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitDiscrepanciesToCustomsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitDiscrepanciesToCustoms> e)
        {
            //CurrentTODO_SubmitDiscrepanciesToCustoms = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitDiscrepanciesToCustoms);
        }

        private  TODO_SubmitDiscrepanciesToCustoms _currentTODO_SubmitDiscrepanciesToCustoms;
        public TODO_SubmitDiscrepanciesToCustoms CurrentTODO_SubmitDiscrepanciesToCustoms
        {
            get
            {
                return _currentTODO_SubmitDiscrepanciesToCustoms;
            }
            set
            {
                if (_currentTODO_SubmitDiscrepanciesToCustoms != value)
                {
                    _currentTODO_SubmitDiscrepanciesToCustoms = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitDiscrepanciesToCustomsChanged,
                                                     new NotificationEventArgs<TODO_SubmitDiscrepanciesToCustoms>(MessageToken.CurrentTODO_SubmitDiscrepanciesToCustomsChanged, _currentTODO_SubmitDiscrepanciesToCustoms)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitDiscrepanciesToCustoms);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitDiscrepanciesToCustoms> _vcurrentTODO_SubmitDiscrepanciesToCustoms;
        public VirtualListItem<TODO_SubmitDiscrepanciesToCustoms> VCurrentTODO_SubmitDiscrepanciesToCustoms
        {
            get
            {
                return _vcurrentTODO_SubmitDiscrepanciesToCustoms;
            }
            set
            {
                if (_vcurrentTODO_SubmitDiscrepanciesToCustoms != value)
                {
                    _vcurrentTODO_SubmitDiscrepanciesToCustoms = value;
					if(_vcurrentTODO_SubmitDiscrepanciesToCustoms != null) CurrentTODO_SubmitDiscrepanciesToCustoms = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitDiscrepanciesToCustoms);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitDocSetWithIncompleteInvoicesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitDocSetWithIncompleteInvoices> e)
        {
            //CurrentTODO_SubmitDocSetWithIncompleteInvoices = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitDocSetWithIncompleteInvoices);
        }

        private  TODO_SubmitDocSetWithIncompleteInvoices _currentTODO_SubmitDocSetWithIncompleteInvoices;
        public TODO_SubmitDocSetWithIncompleteInvoices CurrentTODO_SubmitDocSetWithIncompleteInvoices
        {
            get
            {
                return _currentTODO_SubmitDocSetWithIncompleteInvoices;
            }
            set
            {
                if (_currentTODO_SubmitDocSetWithIncompleteInvoices != value)
                {
                    _currentTODO_SubmitDocSetWithIncompleteInvoices = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitDocSetWithIncompleteInvoicesChanged,
                                                     new NotificationEventArgs<TODO_SubmitDocSetWithIncompleteInvoices>(MessageToken.CurrentTODO_SubmitDocSetWithIncompleteInvoicesChanged, _currentTODO_SubmitDocSetWithIncompleteInvoices)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitDocSetWithIncompleteInvoices);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitDocSetWithIncompleteInvoices> _vcurrentTODO_SubmitDocSetWithIncompleteInvoices;
        public VirtualListItem<TODO_SubmitDocSetWithIncompleteInvoices> VCurrentTODO_SubmitDocSetWithIncompleteInvoices
        {
            get
            {
                return _vcurrentTODO_SubmitDocSetWithIncompleteInvoices;
            }
            set
            {
                if (_vcurrentTODO_SubmitDocSetWithIncompleteInvoices != value)
                {
                    _vcurrentTODO_SubmitDocSetWithIncompleteInvoices = value;
					if(_vcurrentTODO_SubmitDocSetWithIncompleteInvoices != null) CurrentTODO_SubmitDocSetWithIncompleteInvoices = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitDocSetWithIncompleteInvoices);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitEntryCIFChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitEntryCIF> e)
        {
            //CurrentTODO_SubmitEntryCIF = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitEntryCIF);
        }

        private  TODO_SubmitEntryCIF _currentTODO_SubmitEntryCIF;
        public TODO_SubmitEntryCIF CurrentTODO_SubmitEntryCIF
        {
            get
            {
                return _currentTODO_SubmitEntryCIF;
            }
            set
            {
                if (_currentTODO_SubmitEntryCIF != value)
                {
                    _currentTODO_SubmitEntryCIF = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitEntryCIFChanged,
                                                     new NotificationEventArgs<TODO_SubmitEntryCIF>(MessageToken.CurrentTODO_SubmitEntryCIFChanged, _currentTODO_SubmitEntryCIF)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitEntryCIF);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitEntryCIF> _vcurrentTODO_SubmitEntryCIF;
        public VirtualListItem<TODO_SubmitEntryCIF> VCurrentTODO_SubmitEntryCIF
        {
            get
            {
                return _vcurrentTODO_SubmitEntryCIF;
            }
            set
            {
                if (_vcurrentTODO_SubmitEntryCIF != value)
                {
                    _vcurrentTODO_SubmitEntryCIF = value;
					if(_vcurrentTODO_SubmitEntryCIF != null) CurrentTODO_SubmitEntryCIF = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitEntryCIF);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitInadequatePackagesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitInadequatePackages> e)
        {
            //CurrentTODO_SubmitInadequatePackages = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitInadequatePackages);
        }

        private  TODO_SubmitInadequatePackages _currentTODO_SubmitInadequatePackages;
        public TODO_SubmitInadequatePackages CurrentTODO_SubmitInadequatePackages
        {
            get
            {
                return _currentTODO_SubmitInadequatePackages;
            }
            set
            {
                if (_currentTODO_SubmitInadequatePackages != value)
                {
                    _currentTODO_SubmitInadequatePackages = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitInadequatePackagesChanged,
                                                     new NotificationEventArgs<TODO_SubmitInadequatePackages>(MessageToken.CurrentTODO_SubmitInadequatePackagesChanged, _currentTODO_SubmitInadequatePackages)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitInadequatePackages);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitInadequatePackages> _vcurrentTODO_SubmitInadequatePackages;
        public VirtualListItem<TODO_SubmitInadequatePackages> VCurrentTODO_SubmitInadequatePackages
        {
            get
            {
                return _vcurrentTODO_SubmitInadequatePackages;
            }
            set
            {
                if (_vcurrentTODO_SubmitInadequatePackages != value)
                {
                    _vcurrentTODO_SubmitInadequatePackages = value;
					if(_vcurrentTODO_SubmitInadequatePackages != null) CurrentTODO_SubmitInadequatePackages = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitInadequatePackages);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitIncompleteEntryDataChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitIncompleteEntryData> e)
        {
            //CurrentTODO_SubmitIncompleteEntryData = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitIncompleteEntryData);
        }

        private  TODO_SubmitIncompleteEntryData _currentTODO_SubmitIncompleteEntryData;
        public TODO_SubmitIncompleteEntryData CurrentTODO_SubmitIncompleteEntryData
        {
            get
            {
                return _currentTODO_SubmitIncompleteEntryData;
            }
            set
            {
                if (_currentTODO_SubmitIncompleteEntryData != value)
                {
                    _currentTODO_SubmitIncompleteEntryData = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitIncompleteEntryDataChanged,
                                                     new NotificationEventArgs<TODO_SubmitIncompleteEntryData>(MessageToken.CurrentTODO_SubmitIncompleteEntryDataChanged, _currentTODO_SubmitIncompleteEntryData)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitIncompleteEntryData);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitIncompleteEntryData> _vcurrentTODO_SubmitIncompleteEntryData;
        public VirtualListItem<TODO_SubmitIncompleteEntryData> VCurrentTODO_SubmitIncompleteEntryData
        {
            get
            {
                return _vcurrentTODO_SubmitIncompleteEntryData;
            }
            set
            {
                if (_vcurrentTODO_SubmitIncompleteEntryData != value)
                {
                    _vcurrentTODO_SubmitIncompleteEntryData = value;
					if(_vcurrentTODO_SubmitIncompleteEntryData != null) CurrentTODO_SubmitIncompleteEntryData = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitIncompleteEntryData);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitIncompleteSupplierInfoChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitIncompleteSupplierInfo> e)
        {
            //CurrentTODO_SubmitIncompleteSupplierInfo = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitIncompleteSupplierInfo);
        }

        private  TODO_SubmitIncompleteSupplierInfo _currentTODO_SubmitIncompleteSupplierInfo;
        public TODO_SubmitIncompleteSupplierInfo CurrentTODO_SubmitIncompleteSupplierInfo
        {
            get
            {
                return _currentTODO_SubmitIncompleteSupplierInfo;
            }
            set
            {
                if (_currentTODO_SubmitIncompleteSupplierInfo != value)
                {
                    _currentTODO_SubmitIncompleteSupplierInfo = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitIncompleteSupplierInfoChanged,
                                                     new NotificationEventArgs<TODO_SubmitIncompleteSupplierInfo>(MessageToken.CurrentTODO_SubmitIncompleteSupplierInfoChanged, _currentTODO_SubmitIncompleteSupplierInfo)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitIncompleteSupplierInfo);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitIncompleteSupplierInfo> _vcurrentTODO_SubmitIncompleteSupplierInfo;
        public VirtualListItem<TODO_SubmitIncompleteSupplierInfo> VCurrentTODO_SubmitIncompleteSupplierInfo
        {
            get
            {
                return _vcurrentTODO_SubmitIncompleteSupplierInfo;
            }
            set
            {
                if (_vcurrentTODO_SubmitIncompleteSupplierInfo != value)
                {
                    _vcurrentTODO_SubmitIncompleteSupplierInfo = value;
					if(_vcurrentTODO_SubmitIncompleteSupplierInfo != null) CurrentTODO_SubmitIncompleteSupplierInfo = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitIncompleteSupplierInfo);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitMissingInvoicePDFsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitMissingInvoicePDFs> e)
        {
            //CurrentTODO_SubmitMissingInvoicePDFs = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitMissingInvoicePDFs);
        }

        private  TODO_SubmitMissingInvoicePDFs _currentTODO_SubmitMissingInvoicePDFs;
        public TODO_SubmitMissingInvoicePDFs CurrentTODO_SubmitMissingInvoicePDFs
        {
            get
            {
                return _currentTODO_SubmitMissingInvoicePDFs;
            }
            set
            {
                if (_currentTODO_SubmitMissingInvoicePDFs != value)
                {
                    _currentTODO_SubmitMissingInvoicePDFs = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitMissingInvoicePDFsChanged,
                                                     new NotificationEventArgs<TODO_SubmitMissingInvoicePDFs>(MessageToken.CurrentTODO_SubmitMissingInvoicePDFsChanged, _currentTODO_SubmitMissingInvoicePDFs)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitMissingInvoicePDFs);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitMissingInvoicePDFs> _vcurrentTODO_SubmitMissingInvoicePDFs;
        public VirtualListItem<TODO_SubmitMissingInvoicePDFs> VCurrentTODO_SubmitMissingInvoicePDFs
        {
            get
            {
                return _vcurrentTODO_SubmitMissingInvoicePDFs;
            }
            set
            {
                if (_vcurrentTODO_SubmitMissingInvoicePDFs != value)
                {
                    _vcurrentTODO_SubmitMissingInvoicePDFs = value;
					if(_vcurrentTODO_SubmitMissingInvoicePDFs != null) CurrentTODO_SubmitMissingInvoicePDFs = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitMissingInvoicePDFs);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitPOInfoChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitPOInfo> e)
        {
            //CurrentTODO_SubmitPOInfo = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitPOInfo);
        }

        private  TODO_SubmitPOInfo _currentTODO_SubmitPOInfo;
        public TODO_SubmitPOInfo CurrentTODO_SubmitPOInfo
        {
            get
            {
                return _currentTODO_SubmitPOInfo;
            }
            set
            {
                if (_currentTODO_SubmitPOInfo != value)
                {
                    _currentTODO_SubmitPOInfo = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitPOInfoChanged,
                                                     new NotificationEventArgs<TODO_SubmitPOInfo>(MessageToken.CurrentTODO_SubmitPOInfoChanged, _currentTODO_SubmitPOInfo)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitPOInfo);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitPOInfo> _vcurrentTODO_SubmitPOInfo;
        public VirtualListItem<TODO_SubmitPOInfo> VCurrentTODO_SubmitPOInfo
        {
            get
            {
                return _vcurrentTODO_SubmitPOInfo;
            }
            set
            {
                if (_vcurrentTODO_SubmitPOInfo != value)
                {
                    _vcurrentTODO_SubmitPOInfo = value;
					if(_vcurrentTODO_SubmitPOInfo != null) CurrentTODO_SubmitPOInfo = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitPOInfo);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitSalesToCustomsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitSalesToCustoms> e)
        {
            //CurrentTODO_SubmitSalesToCustoms = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitSalesToCustoms);
        }

        private  TODO_SubmitSalesToCustoms _currentTODO_SubmitSalesToCustoms;
        public TODO_SubmitSalesToCustoms CurrentTODO_SubmitSalesToCustoms
        {
            get
            {
                return _currentTODO_SubmitSalesToCustoms;
            }
            set
            {
                if (_currentTODO_SubmitSalesToCustoms != value)
                {
                    _currentTODO_SubmitSalesToCustoms = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitSalesToCustomsChanged,
                                                     new NotificationEventArgs<TODO_SubmitSalesToCustoms>(MessageToken.CurrentTODO_SubmitSalesToCustomsChanged, _currentTODO_SubmitSalesToCustoms)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitSalesToCustoms);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitSalesToCustoms> _vcurrentTODO_SubmitSalesToCustoms;
        public VirtualListItem<TODO_SubmitSalesToCustoms> VCurrentTODO_SubmitSalesToCustoms
        {
            get
            {
                return _vcurrentTODO_SubmitSalesToCustoms;
            }
            set
            {
                if (_vcurrentTODO_SubmitSalesToCustoms != value)
                {
                    _vcurrentTODO_SubmitSalesToCustoms = value;
					if(_vcurrentTODO_SubmitSalesToCustoms != null) CurrentTODO_SubmitSalesToCustoms = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitSalesToCustoms);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitUnclassifiedItemsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitUnclassifiedItems> e)
        {
            //CurrentTODO_SubmitUnclassifiedItems = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitUnclassifiedItems);
        }

        private  TODO_SubmitUnclassifiedItems _currentTODO_SubmitUnclassifiedItems;
        public TODO_SubmitUnclassifiedItems CurrentTODO_SubmitUnclassifiedItems
        {
            get
            {
                return _currentTODO_SubmitUnclassifiedItems;
            }
            set
            {
                if (_currentTODO_SubmitUnclassifiedItems != value)
                {
                    _currentTODO_SubmitUnclassifiedItems = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitUnclassifiedItemsChanged,
                                                     new NotificationEventArgs<TODO_SubmitUnclassifiedItems>(MessageToken.CurrentTODO_SubmitUnclassifiedItemsChanged, _currentTODO_SubmitUnclassifiedItems)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitUnclassifiedItems);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitUnclassifiedItems> _vcurrentTODO_SubmitUnclassifiedItems;
        public VirtualListItem<TODO_SubmitUnclassifiedItems> VCurrentTODO_SubmitUnclassifiedItems
        {
            get
            {
                return _vcurrentTODO_SubmitUnclassifiedItems;
            }
            set
            {
                if (_vcurrentTODO_SubmitUnclassifiedItems != value)
                {
                    _vcurrentTODO_SubmitUnclassifiedItems = value;
					if(_vcurrentTODO_SubmitUnclassifiedItems != null) CurrentTODO_SubmitUnclassifiedItems = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitUnclassifiedItems);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_SubmitXMLToCustomsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_SubmitXMLToCustoms> e)
        {
            //CurrentTODO_SubmitXMLToCustoms = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_SubmitXMLToCustoms);
        }

        private  TODO_SubmitXMLToCustoms _currentTODO_SubmitXMLToCustoms;
        public TODO_SubmitXMLToCustoms CurrentTODO_SubmitXMLToCustoms
        {
            get
            {
                return _currentTODO_SubmitXMLToCustoms;
            }
            set
            {
                if (_currentTODO_SubmitXMLToCustoms != value)
                {
                    _currentTODO_SubmitXMLToCustoms = value;
                    BeginSendMessage(MessageToken.CurrentTODO_SubmitXMLToCustomsChanged,
                                                     new NotificationEventArgs<TODO_SubmitXMLToCustoms>(MessageToken.CurrentTODO_SubmitXMLToCustomsChanged, _currentTODO_SubmitXMLToCustoms)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_SubmitXMLToCustoms);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_SubmitXMLToCustoms> _vcurrentTODO_SubmitXMLToCustoms;
        public VirtualListItem<TODO_SubmitXMLToCustoms> VCurrentTODO_SubmitXMLToCustoms
        {
            get
            {
                return _vcurrentTODO_SubmitXMLToCustoms;
            }
            set
            {
                if (_vcurrentTODO_SubmitXMLToCustoms != value)
                {
                    _vcurrentTODO_SubmitXMLToCustoms = value;
					if(_vcurrentTODO_SubmitXMLToCustoms != null) CurrentTODO_SubmitXMLToCustoms = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_SubmitXMLToCustoms);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_TotalAdjustmentsToProcessChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_TotalAdjustmentsToProcess> e)
        {
            //CurrentTODO_TotalAdjustmentsToProcess = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_TotalAdjustmentsToProcess);
        }

        private  TODO_TotalAdjustmentsToProcess _currentTODO_TotalAdjustmentsToProcess;
        public TODO_TotalAdjustmentsToProcess CurrentTODO_TotalAdjustmentsToProcess
        {
            get
            {
                return _currentTODO_TotalAdjustmentsToProcess;
            }
            set
            {
                if (_currentTODO_TotalAdjustmentsToProcess != value)
                {
                    _currentTODO_TotalAdjustmentsToProcess = value;
                    BeginSendMessage(MessageToken.CurrentTODO_TotalAdjustmentsToProcessChanged,
                                                     new NotificationEventArgs<TODO_TotalAdjustmentsToProcess>(MessageToken.CurrentTODO_TotalAdjustmentsToProcessChanged, _currentTODO_TotalAdjustmentsToProcess)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_TotalAdjustmentsToProcess);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_TotalAdjustmentsToProcess> _vcurrentTODO_TotalAdjustmentsToProcess;
        public VirtualListItem<TODO_TotalAdjustmentsToProcess> VCurrentTODO_TotalAdjustmentsToProcess
        {
            get
            {
                return _vcurrentTODO_TotalAdjustmentsToProcess;
            }
            set
            {
                if (_vcurrentTODO_TotalAdjustmentsToProcess != value)
                {
                    _vcurrentTODO_TotalAdjustmentsToProcess = value;
					if(_vcurrentTODO_TotalAdjustmentsToProcess != null) CurrentTODO_TotalAdjustmentsToProcess = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_TotalAdjustmentsToProcess);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_UnallocatedSalesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_UnallocatedSales> e)
        {
            //CurrentTODO_UnallocatedSales = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_UnallocatedSales);
        }

        private  TODO_UnallocatedSales _currentTODO_UnallocatedSales;
        public TODO_UnallocatedSales CurrentTODO_UnallocatedSales
        {
            get
            {
                return _currentTODO_UnallocatedSales;
            }
            set
            {
                if (_currentTODO_UnallocatedSales != value)
                {
                    _currentTODO_UnallocatedSales = value;
                    BeginSendMessage(MessageToken.CurrentTODO_UnallocatedSalesChanged,
                                                     new NotificationEventArgs<TODO_UnallocatedSales>(MessageToken.CurrentTODO_UnallocatedSalesChanged, _currentTODO_UnallocatedSales)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_UnallocatedSales);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_UnallocatedSales> _vcurrentTODO_UnallocatedSales;
        public VirtualListItem<TODO_UnallocatedSales> VCurrentTODO_UnallocatedSales
        {
            get
            {
                return _vcurrentTODO_UnallocatedSales;
            }
            set
            {
                if (_vcurrentTODO_UnallocatedSales != value)
                {
                    _vcurrentTODO_UnallocatedSales = value;
					if(_vcurrentTODO_UnallocatedSales != null) CurrentTODO_UnallocatedSales = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_UnallocatedSales);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_UnallocatedShortsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_UnallocatedShorts> e)
        {
            //CurrentTODO_UnallocatedShorts = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_UnallocatedShorts);
        }

        private  TODO_UnallocatedShorts _currentTODO_UnallocatedShorts;
        public TODO_UnallocatedShorts CurrentTODO_UnallocatedShorts
        {
            get
            {
                return _currentTODO_UnallocatedShorts;
            }
            set
            {
                if (_currentTODO_UnallocatedShorts != value)
                {
                    _currentTODO_UnallocatedShorts = value;
                    BeginSendMessage(MessageToken.CurrentTODO_UnallocatedShortsChanged,
                                                     new NotificationEventArgs<TODO_UnallocatedShorts>(MessageToken.CurrentTODO_UnallocatedShortsChanged, _currentTODO_UnallocatedShorts)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_UnallocatedShorts);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_UnallocatedShorts> _vcurrentTODO_UnallocatedShorts;
        public VirtualListItem<TODO_UnallocatedShorts> VCurrentTODO_UnallocatedShorts
        {
            get
            {
                return _vcurrentTODO_UnallocatedShorts;
            }
            set
            {
                if (_vcurrentTODO_UnallocatedShorts != value)
                {
                    _vcurrentTODO_UnallocatedShorts = value;
					if(_vcurrentTODO_UnallocatedShorts != null) CurrentTODO_UnallocatedShorts = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_UnallocatedShorts);                    
                }
            }
        }



                     
       

        internal void OnCurrentxcuda_Supplementary_unitChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<xcuda_Supplementary_unit> e)
        {
            //Currentxcuda_Supplementary_unit = e.Data;
            NotifyPropertyChanged(m => this.Currentxcuda_Supplementary_unit);
        }

        private  xcuda_Supplementary_unit _currentxcuda_Supplementary_unit;
        public xcuda_Supplementary_unit Currentxcuda_Supplementary_unit
        {
            get
            {
                return _currentxcuda_Supplementary_unit;
            }
            set
            {
                if (_currentxcuda_Supplementary_unit != value)
                {
                    _currentxcuda_Supplementary_unit = value;
                    BeginSendMessage(MessageToken.Currentxcuda_Supplementary_unitChanged,
                                                     new NotificationEventArgs<xcuda_Supplementary_unit>(MessageToken.Currentxcuda_Supplementary_unitChanged, _currentxcuda_Supplementary_unit)); 
                    NotifyPropertyChanged(x => this.Currentxcuda_Supplementary_unit);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<xcuda_Supplementary_unit> _vcurrentxcuda_Supplementary_unit;
        public VirtualListItem<xcuda_Supplementary_unit> VCurrentxcuda_Supplementary_unit
        {
            get
            {
                return _vcurrentxcuda_Supplementary_unit;
            }
            set
            {
                if (_vcurrentxcuda_Supplementary_unit != value)
                {
                    _vcurrentxcuda_Supplementary_unit = value;
					if(_vcurrentxcuda_Supplementary_unit != null) Currentxcuda_Supplementary_unit = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentxcuda_Supplementary_unit);                    
                }
            }
        }






        static CoreEntitiesOnCreated newCoreEntitiesOnCreated = new CoreEntitiesOnCreated();
    }		
}

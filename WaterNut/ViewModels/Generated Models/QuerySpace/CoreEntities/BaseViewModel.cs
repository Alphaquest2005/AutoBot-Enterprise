// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;



namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // ViewModelBase<BaseViewModel>
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class CoreEntitiesOnCreated: BaseViewModel
        {
           // Load Repository
                public CoreEntitiesOnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentActionsIDChanged, OnCurrentActionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentApplicationSettingsIDChanged, OnCurrentApplicationSettingsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentIDChanged, OnCurrentAsycudaDocumentIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentItemIDChanged, OnCurrentAsycudaDocumentItemIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsIDChanged, OnCurrentAsycudaDocumentItemEntryDataDetailsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentSet_AttachmentsIDChanged, OnCurrentAsycudaDocumentSet_AttachmentsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentSetExIDChanged, OnCurrentAsycudaDocumentSetExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAttachmentLogIDChanged, OnCurrentAttachmentLogIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAttachmentsIDChanged, OnCurrentAttachmentsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentContactsIDChanged, OnCurrentContactsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentCustoms_ProcedureIDChanged, OnCurrentCustoms_ProcedureIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentDocument_TypeIDChanged, OnCurrentDocument_TypeIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEmailMappingIDChanged, OnCurrentEmailMappingIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEmailsIDChanged, OnCurrentEmailsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentEntryPreviousItemsIDChanged, OnCurrentEntryPreviousItemsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileGroupsIDChanged, OnCurrentFileGroupsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileTypeActionsIDChanged, OnCurrentFileTypeActionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileTypeContactsIDChanged, OnCurrentFileTypeContactsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileTypeMappingsIDChanged, OnCurrentFileTypeMappingsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentFileTypesIDChanged, OnCurrentFileTypesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInfoMappingIDChanged, OnCurrentInfoMappingIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInventoryItemAliasXIDChanged, OnCurrentInventoryItemAliasXIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInventoryItemXIDChanged, OnCurrentInventoryItemXIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentLicenceSummaryIDChanged, OnCurrentLicenceSummaryIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentSessionActionsIDChanged, OnCurrentSessionActionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentSessionsIDChanged, OnCurrentSessionsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentSubItemsIDChanged, OnCurrentSubItemsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_AdjustmentsToXMLIDChanged, OnCurrentTODO_AdjustmentsToXMLIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_CreateDiscrepancyEntriesIDChanged, OnCurrentTODO_CreateDiscrepancyEntriesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_CreateEx9IDChanged, OnCurrentTODO_CreateEx9IDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_DeleteDocumentSetIDChanged, OnCurrentTODO_DeleteDocumentSetIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_DiscrepanciesToSubmitIDChanged, OnCurrentTODO_DiscrepanciesToSubmitIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_DocumentsToDeleteIDChanged, OnCurrentTODO_DocumentsToDeleteIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_PODocSetIDChanged, OnCurrentTODO_PODocSetIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_UnallocatedSalesIDChanged, OnCurrentTODO_UnallocatedSalesIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentTODO_UnallocatedShortsIDChanged, OnCurrentTODO_UnallocatedShortsIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.Currentxcuda_Supplementary_unitIDChanged, OnCurrentxcuda_Supplementary_unitIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<Actions>(MessageToken.CurrentActionsChanged, OnCurrentActionsChanged);
                        RegisterToReceiveMessages<ApplicationSettings>(MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
                        RegisterToReceiveMessages<AsycudaDocument>(MessageToken.CurrentAsycudaDocumentChanged, OnCurrentAsycudaDocumentChanged);
                        RegisterToReceiveMessages<AsycudaDocumentItem>(MessageToken.CurrentAsycudaDocumentItemChanged, OnCurrentAsycudaDocumentItemChanged);
                        RegisterToReceiveMessages<AsycudaDocumentItemEntryDataDetails>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsChanged, OnCurrentAsycudaDocumentItemEntryDataDetailsChanged);
                        RegisterToReceiveMessages<AsycudaDocumentSet_Attachments>(MessageToken.CurrentAsycudaDocumentSet_AttachmentsChanged, OnCurrentAsycudaDocumentSet_AttachmentsChanged);
                        RegisterToReceiveMessages<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, OnCurrentAsycudaDocumentSetExChanged);
                        RegisterToReceiveMessages<AttachmentLog>(MessageToken.CurrentAttachmentLogChanged, OnCurrentAttachmentLogChanged);
                        RegisterToReceiveMessages<Attachments>(MessageToken.CurrentAttachmentsChanged, OnCurrentAttachmentsChanged);
                        RegisterToReceiveMessages<Contacts>(MessageToken.CurrentContactsChanged, OnCurrentContactsChanged);
                        RegisterToReceiveMessages<Customs_Procedure>(MessageToken.CurrentCustoms_ProcedureChanged, OnCurrentCustoms_ProcedureChanged);
                        RegisterToReceiveMessages<Document_Type>(MessageToken.CurrentDocument_TypeChanged, OnCurrentDocument_TypeChanged);
                        RegisterToReceiveMessages<EmailMapping>(MessageToken.CurrentEmailMappingChanged, OnCurrentEmailMappingChanged);
                        RegisterToReceiveMessages<Emails>(MessageToken.CurrentEmailsChanged, OnCurrentEmailsChanged);
                        RegisterToReceiveMessages<EntryPreviousItems>(MessageToken.CurrentEntryPreviousItemsChanged, OnCurrentEntryPreviousItemsChanged);
                        RegisterToReceiveMessages<FileGroups>(MessageToken.CurrentFileGroupsChanged, OnCurrentFileGroupsChanged);
                        RegisterToReceiveMessages<FileTypeActions>(MessageToken.CurrentFileTypeActionsChanged, OnCurrentFileTypeActionsChanged);
                        RegisterToReceiveMessages<FileTypeContacts>(MessageToken.CurrentFileTypeContactsChanged, OnCurrentFileTypeContactsChanged);
                        RegisterToReceiveMessages<FileTypeMappings>(MessageToken.CurrentFileTypeMappingsChanged, OnCurrentFileTypeMappingsChanged);
                        RegisterToReceiveMessages<FileTypes>(MessageToken.CurrentFileTypesChanged, OnCurrentFileTypesChanged);
                        RegisterToReceiveMessages<InfoMapping>(MessageToken.CurrentInfoMappingChanged, OnCurrentInfoMappingChanged);
                        RegisterToReceiveMessages<InventoryItemAliasX>(MessageToken.CurrentInventoryItemAliasXChanged, OnCurrentInventoryItemAliasXChanged);
                        RegisterToReceiveMessages<InventoryItemX>(MessageToken.CurrentInventoryItemXChanged, OnCurrentInventoryItemXChanged);
                        RegisterToReceiveMessages<LicenceSummary>(MessageToken.CurrentLicenceSummaryChanged, OnCurrentLicenceSummaryChanged);
                        RegisterToReceiveMessages<SessionActions>(MessageToken.CurrentSessionActionsChanged, OnCurrentSessionActionsChanged);
                        RegisterToReceiveMessages<Sessions>(MessageToken.CurrentSessionsChanged, OnCurrentSessionsChanged);
                        RegisterToReceiveMessages<SubItems>(MessageToken.CurrentSubItemsChanged, OnCurrentSubItemsChanged);
                        RegisterToReceiveMessages<TODO_AdjustmentsToXML>(MessageToken.CurrentTODO_AdjustmentsToXMLChanged, OnCurrentTODO_AdjustmentsToXMLChanged);
                        RegisterToReceiveMessages<TODO_CreateDiscrepancyEntries>(MessageToken.CurrentTODO_CreateDiscrepancyEntriesChanged, OnCurrentTODO_CreateDiscrepancyEntriesChanged);
                        RegisterToReceiveMessages<TODO_CreateEx9>(MessageToken.CurrentTODO_CreateEx9Changed, OnCurrentTODO_CreateEx9Changed);
                        RegisterToReceiveMessages<TODO_DeleteDocumentSet>(MessageToken.CurrentTODO_DeleteDocumentSetChanged, OnCurrentTODO_DeleteDocumentSetChanged);
                        RegisterToReceiveMessages<TODO_DiscrepanciesToSubmit>(MessageToken.CurrentTODO_DiscrepanciesToSubmitChanged, OnCurrentTODO_DiscrepanciesToSubmitChanged);
                        RegisterToReceiveMessages<TODO_DocumentsToDelete>(MessageToken.CurrentTODO_DocumentsToDeleteChanged, OnCurrentTODO_DocumentsToDeleteChanged);
                        RegisterToReceiveMessages<TODO_PODocSet>(MessageToken.CurrentTODO_PODocSetChanged, OnCurrentTODO_PODocSetChanged);
                        RegisterToReceiveMessages<TODO_UnallocatedSales>(MessageToken.CurrentTODO_UnallocatedSalesChanged, OnCurrentTODO_UnallocatedSalesChanged);
                        RegisterToReceiveMessages<TODO_UnallocatedShorts>(MessageToken.CurrentTODO_UnallocatedShortsChanged, OnCurrentTODO_UnallocatedShortsChanged);
                        RegisterToReceiveMessages<xcuda_Supplementary_unit>(MessageToken.Currentxcuda_Supplementary_unitChanged, OnCurrentxcuda_Supplementary_unitChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentActionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ActionsRepository ctx = new ActionsRepository())
                            {
                                CurrentActions = await ctx.GetActions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentActions);
                        }

                        private  string _currentActionsID = "";
                        public string CurrentActionsID
                        {
                            get
                            {
                                return _currentActionsID;
                            }
                            set
                            {
                                if (_currentActionsID != value)
                                {
                                    _currentActionsID = value;
                                    if (!string.IsNullOrEmpty(_currentActionsID)) BeginSendMessage(MessageToken.CurrentActionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentActionsIDChanged, _currentActionsID));
                                    NotifyPropertyChanged(x => this.CurrentActionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentApplicationSettingsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ApplicationSettingsRepository ctx = new ApplicationSettingsRepository())
                            {
                                CurrentApplicationSettings = await ctx.GetApplicationSettings(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentApplicationSettings);
                        }

                        private  string _currentApplicationSettingsID = "";
                        public string CurrentApplicationSettingsID
                        {
                            get
                            {
                                return _currentApplicationSettingsID;
                            }
                            set
                            {
                                if (_currentApplicationSettingsID != value)
                                {
                                    _currentApplicationSettingsID = value;
                                    if (!string.IsNullOrEmpty(_currentApplicationSettingsID)) BeginSendMessage(MessageToken.CurrentApplicationSettingsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentApplicationSettingsIDChanged, _currentApplicationSettingsID));
                                    NotifyPropertyChanged(x => this.CurrentApplicationSettingsID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentRepository ctx = new AsycudaDocumentRepository())
                            {
                                CurrentAsycudaDocument = await ctx.GetAsycudaDocument(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocument);
                        }

                        private  string _currentAsycudaDocumentID = "";
                        public string CurrentAsycudaDocumentID
                        {
                            get
                            {
                                return _currentAsycudaDocumentID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentID != value)
                                {
                                    _currentAsycudaDocumentID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentIDChanged, _currentAsycudaDocumentID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentItemIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentItemRepository ctx = new AsycudaDocumentItemRepository())
                            {
                                CurrentAsycudaDocumentItem = await ctx.GetAsycudaDocumentItem(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentItem);
                        }

                        private  string _currentAsycudaDocumentItemID = "";
                        public string CurrentAsycudaDocumentItemID
                        {
                            get
                            {
                                return _currentAsycudaDocumentItemID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentItemID != value)
                                {
                                    _currentAsycudaDocumentItemID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentItemID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentItemIDChanged, _currentAsycudaDocumentItemID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentItemEntryDataDetailsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentItemEntryDataDetailsRepository ctx = new AsycudaDocumentItemEntryDataDetailsRepository())
                            {
                                CurrentAsycudaDocumentItemEntryDataDetails = await ctx.GetAsycudaDocumentItemEntryDataDetails(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentItemEntryDataDetails);
                        }

                        private  string _currentAsycudaDocumentItemEntryDataDetailsID = "";
                        public string CurrentAsycudaDocumentItemEntryDataDetailsID
                        {
                            get
                            {
                                return _currentAsycudaDocumentItemEntryDataDetailsID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentItemEntryDataDetailsID != value)
                                {
                                    _currentAsycudaDocumentItemEntryDataDetailsID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentItemEntryDataDetailsID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsIDChanged, _currentAsycudaDocumentItemEntryDataDetailsID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemEntryDataDetailsID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentSet_AttachmentsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentSet_AttachmentsRepository ctx = new AsycudaDocumentSet_AttachmentsRepository())
                            {
                                CurrentAsycudaDocumentSet_Attachments = await ctx.GetAsycudaDocumentSet_Attachments(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentSet_Attachments);
                        }

                        private  string _currentAsycudaDocumentSet_AttachmentsID = "";
                        public string CurrentAsycudaDocumentSet_AttachmentsID
                        {
                            get
                            {
                                return _currentAsycudaDocumentSet_AttachmentsID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentSet_AttachmentsID != value)
                                {
                                    _currentAsycudaDocumentSet_AttachmentsID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentSet_AttachmentsID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentSet_AttachmentsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentSet_AttachmentsIDChanged, _currentAsycudaDocumentSet_AttachmentsID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSet_AttachmentsID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentSetExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentSetExRepository ctx = new AsycudaDocumentSetExRepository())
                            {
                                CurrentAsycudaDocumentSetEx = await ctx.GetAsycudaDocumentSetEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentSetEx);
                        }

                        private  string _currentAsycudaDocumentSetExID = "";
                        public string CurrentAsycudaDocumentSetExID
                        {
                            get
                            {
                                return _currentAsycudaDocumentSetExID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentSetExID != value)
                                {
                                    _currentAsycudaDocumentSetExID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentSetExID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentSetExIDChanged, _currentAsycudaDocumentSetExID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetExID);  
                                }
                            }
                        }
                        internal async void OnCurrentAttachmentLogIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AttachmentLogRepository ctx = new AttachmentLogRepository())
                            {
                                CurrentAttachmentLog = await ctx.GetAttachmentLog(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAttachmentLog);
                        }

                        private  string _currentAttachmentLogID = "";
                        public string CurrentAttachmentLogID
                        {
                            get
                            {
                                return _currentAttachmentLogID;
                            }
                            set
                            {
                                if (_currentAttachmentLogID != value)
                                {
                                    _currentAttachmentLogID = value;
                                    if (!string.IsNullOrEmpty(_currentAttachmentLogID)) BeginSendMessage(MessageToken.CurrentAttachmentLogIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAttachmentLogIDChanged, _currentAttachmentLogID));
                                    NotifyPropertyChanged(x => this.CurrentAttachmentLogID);  
                                }
                            }
                        }
                        internal async void OnCurrentAttachmentsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AttachmentsRepository ctx = new AttachmentsRepository())
                            {
                                CurrentAttachments = await ctx.GetAttachments(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAttachments);
                        }

                        private  string _currentAttachmentsID = "";
                        public string CurrentAttachmentsID
                        {
                            get
                            {
                                return _currentAttachmentsID;
                            }
                            set
                            {
                                if (_currentAttachmentsID != value)
                                {
                                    _currentAttachmentsID = value;
                                    if (!string.IsNullOrEmpty(_currentAttachmentsID)) BeginSendMessage(MessageToken.CurrentAttachmentsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAttachmentsIDChanged, _currentAttachmentsID));
                                    NotifyPropertyChanged(x => this.CurrentAttachmentsID);  
                                }
                            }
                        }
                        internal async void OnCurrentContactsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (ContactsRepository ctx = new ContactsRepository())
                            {
                                CurrentContacts = await ctx.GetContacts(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentContacts);
                        }

                        private  string _currentContactsID = "";
                        public string CurrentContactsID
                        {
                            get
                            {
                                return _currentContactsID;
                            }
                            set
                            {
                                if (_currentContactsID != value)
                                {
                                    _currentContactsID = value;
                                    if (!string.IsNullOrEmpty(_currentContactsID)) BeginSendMessage(MessageToken.CurrentContactsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentContactsIDChanged, _currentContactsID));
                                    NotifyPropertyChanged(x => this.CurrentContactsID);  
                                }
                            }
                        }
                        internal async void OnCurrentCustoms_ProcedureIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (Customs_ProcedureRepository ctx = new Customs_ProcedureRepository())
                            {
                                CurrentCustoms_Procedure = await ctx.GetCustoms_Procedure(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentCustoms_Procedure);
                        }

                        private  string _currentCustoms_ProcedureID = "";
                        public string CurrentCustoms_ProcedureID
                        {
                            get
                            {
                                return _currentCustoms_ProcedureID;
                            }
                            set
                            {
                                if (_currentCustoms_ProcedureID != value)
                                {
                                    _currentCustoms_ProcedureID = value;
                                    if (!string.IsNullOrEmpty(_currentCustoms_ProcedureID)) BeginSendMessage(MessageToken.CurrentCustoms_ProcedureIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentCustoms_ProcedureIDChanged, _currentCustoms_ProcedureID));
                                    NotifyPropertyChanged(x => this.CurrentCustoms_ProcedureID);  
                                }
                            }
                        }
                        internal async void OnCurrentDocument_TypeIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (Document_TypeRepository ctx = new Document_TypeRepository())
                            {
                                CurrentDocument_Type = await ctx.GetDocument_Type(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentDocument_Type);
                        }

                        private  string _currentDocument_TypeID = "";
                        public string CurrentDocument_TypeID
                        {
                            get
                            {
                                return _currentDocument_TypeID;
                            }
                            set
                            {
                                if (_currentDocument_TypeID != value)
                                {
                                    _currentDocument_TypeID = value;
                                    if (!string.IsNullOrEmpty(_currentDocument_TypeID)) BeginSendMessage(MessageToken.CurrentDocument_TypeIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentDocument_TypeIDChanged, _currentDocument_TypeID));
                                    NotifyPropertyChanged(x => this.CurrentDocument_TypeID);  
                                }
                            }
                        }
                        internal async void OnCurrentEmailMappingIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EmailMappingRepository ctx = new EmailMappingRepository())
                            {
                                CurrentEmailMapping = await ctx.GetEmailMapping(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEmailMapping);
                        }

                        private  string _currentEmailMappingID = "";
                        public string CurrentEmailMappingID
                        {
                            get
                            {
                                return _currentEmailMappingID;
                            }
                            set
                            {
                                if (_currentEmailMappingID != value)
                                {
                                    _currentEmailMappingID = value;
                                    if (!string.IsNullOrEmpty(_currentEmailMappingID)) BeginSendMessage(MessageToken.CurrentEmailMappingIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEmailMappingIDChanged, _currentEmailMappingID));
                                    NotifyPropertyChanged(x => this.CurrentEmailMappingID);  
                                }
                            }
                        }
                        internal async void OnCurrentEmailsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EmailsRepository ctx = new EmailsRepository())
                            {
                                CurrentEmails = await ctx.GetEmails(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEmails);
                        }

                        private  string _currentEmailsID = "";
                        public string CurrentEmailsID
                        {
                            get
                            {
                                return _currentEmailsID;
                            }
                            set
                            {
                                if (_currentEmailsID != value)
                                {
                                    _currentEmailsID = value;
                                    if (!string.IsNullOrEmpty(_currentEmailsID)) BeginSendMessage(MessageToken.CurrentEmailsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEmailsIDChanged, _currentEmailsID));
                                    NotifyPropertyChanged(x => this.CurrentEmailsID);  
                                }
                            }
                        }
                        internal async void OnCurrentEntryPreviousItemsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (EntryPreviousItemsRepository ctx = new EntryPreviousItemsRepository())
                            {
                                CurrentEntryPreviousItems = await ctx.GetEntryPreviousItems(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentEntryPreviousItems);
                        }

                        private  string _currentEntryPreviousItemsID = "";
                        public string CurrentEntryPreviousItemsID
                        {
                            get
                            {
                                return _currentEntryPreviousItemsID;
                            }
                            set
                            {
                                if (_currentEntryPreviousItemsID != value)
                                {
                                    _currentEntryPreviousItemsID = value;
                                    if (!string.IsNullOrEmpty(_currentEntryPreviousItemsID)) BeginSendMessage(MessageToken.CurrentEntryPreviousItemsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentEntryPreviousItemsIDChanged, _currentEntryPreviousItemsID));
                                    NotifyPropertyChanged(x => this.CurrentEntryPreviousItemsID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileGroupsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileGroupsRepository ctx = new FileGroupsRepository())
                            {
                                CurrentFileGroups = await ctx.GetFileGroups(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileGroups);
                        }

                        private  string _currentFileGroupsID = "";
                        public string CurrentFileGroupsID
                        {
                            get
                            {
                                return _currentFileGroupsID;
                            }
                            set
                            {
                                if (_currentFileGroupsID != value)
                                {
                                    _currentFileGroupsID = value;
                                    if (!string.IsNullOrEmpty(_currentFileGroupsID)) BeginSendMessage(MessageToken.CurrentFileGroupsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileGroupsIDChanged, _currentFileGroupsID));
                                    NotifyPropertyChanged(x => this.CurrentFileGroupsID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileTypeActionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileTypeActionsRepository ctx = new FileTypeActionsRepository())
                            {
                                CurrentFileTypeActions = await ctx.GetFileTypeActions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileTypeActions);
                        }

                        private  string _currentFileTypeActionsID = "";
                        public string CurrentFileTypeActionsID
                        {
                            get
                            {
                                return _currentFileTypeActionsID;
                            }
                            set
                            {
                                if (_currentFileTypeActionsID != value)
                                {
                                    _currentFileTypeActionsID = value;
                                    if (!string.IsNullOrEmpty(_currentFileTypeActionsID)) BeginSendMessage(MessageToken.CurrentFileTypeActionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileTypeActionsIDChanged, _currentFileTypeActionsID));
                                    NotifyPropertyChanged(x => this.CurrentFileTypeActionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileTypeContactsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileTypeContactsRepository ctx = new FileTypeContactsRepository())
                            {
                                CurrentFileTypeContacts = await ctx.GetFileTypeContacts(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileTypeContacts);
                        }

                        private  string _currentFileTypeContactsID = "";
                        public string CurrentFileTypeContactsID
                        {
                            get
                            {
                                return _currentFileTypeContactsID;
                            }
                            set
                            {
                                if (_currentFileTypeContactsID != value)
                                {
                                    _currentFileTypeContactsID = value;
                                    if (!string.IsNullOrEmpty(_currentFileTypeContactsID)) BeginSendMessage(MessageToken.CurrentFileTypeContactsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileTypeContactsIDChanged, _currentFileTypeContactsID));
                                    NotifyPropertyChanged(x => this.CurrentFileTypeContactsID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileTypeMappingsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileTypeMappingsRepository ctx = new FileTypeMappingsRepository())
                            {
                                CurrentFileTypeMappings = await ctx.GetFileTypeMappings(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileTypeMappings);
                        }

                        private  string _currentFileTypeMappingsID = "";
                        public string CurrentFileTypeMappingsID
                        {
                            get
                            {
                                return _currentFileTypeMappingsID;
                            }
                            set
                            {
                                if (_currentFileTypeMappingsID != value)
                                {
                                    _currentFileTypeMappingsID = value;
                                    if (!string.IsNullOrEmpty(_currentFileTypeMappingsID)) BeginSendMessage(MessageToken.CurrentFileTypeMappingsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileTypeMappingsIDChanged, _currentFileTypeMappingsID));
                                    NotifyPropertyChanged(x => this.CurrentFileTypeMappingsID);  
                                }
                            }
                        }
                        internal async void OnCurrentFileTypesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (FileTypesRepository ctx = new FileTypesRepository())
                            {
                                CurrentFileTypes = await ctx.GetFileTypes(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentFileTypes);
                        }

                        private  string _currentFileTypesID = "";
                        public string CurrentFileTypesID
                        {
                            get
                            {
                                return _currentFileTypesID;
                            }
                            set
                            {
                                if (_currentFileTypesID != value)
                                {
                                    _currentFileTypesID = value;
                                    if (!string.IsNullOrEmpty(_currentFileTypesID)) BeginSendMessage(MessageToken.CurrentFileTypesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentFileTypesIDChanged, _currentFileTypesID));
                                    NotifyPropertyChanged(x => this.CurrentFileTypesID);  
                                }
                            }
                        }
                        internal async void OnCurrentInfoMappingIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InfoMappingRepository ctx = new InfoMappingRepository())
                            {
                                CurrentInfoMapping = await ctx.GetInfoMapping(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInfoMapping);
                        }

                        private  string _currentInfoMappingID = "";
                        public string CurrentInfoMappingID
                        {
                            get
                            {
                                return _currentInfoMappingID;
                            }
                            set
                            {
                                if (_currentInfoMappingID != value)
                                {
                                    _currentInfoMappingID = value;
                                    if (!string.IsNullOrEmpty(_currentInfoMappingID)) BeginSendMessage(MessageToken.CurrentInfoMappingIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInfoMappingIDChanged, _currentInfoMappingID));
                                    NotifyPropertyChanged(x => this.CurrentInfoMappingID);  
                                }
                            }
                        }
                        internal async void OnCurrentInventoryItemAliasXIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InventoryItemAliasXRepository ctx = new InventoryItemAliasXRepository())
                            {
                                CurrentInventoryItemAliasX = await ctx.GetInventoryItemAliasX(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInventoryItemAliasX);
                        }

                        private  string _currentInventoryItemAliasXID = "";
                        public string CurrentInventoryItemAliasXID
                        {
                            get
                            {
                                return _currentInventoryItemAliasXID;
                            }
                            set
                            {
                                if (_currentInventoryItemAliasXID != value)
                                {
                                    _currentInventoryItemAliasXID = value;
                                    if (!string.IsNullOrEmpty(_currentInventoryItemAliasXID)) BeginSendMessage(MessageToken.CurrentInventoryItemAliasXIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInventoryItemAliasXIDChanged, _currentInventoryItemAliasXID));
                                    NotifyPropertyChanged(x => this.CurrentInventoryItemAliasXID);  
                                }
                            }
                        }
                        internal async void OnCurrentInventoryItemXIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InventoryItemXRepository ctx = new InventoryItemXRepository())
                            {
                                CurrentInventoryItemX = await ctx.GetInventoryItemX(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInventoryItemX);
                        }

                        private  string _currentInventoryItemXID = "";
                        public string CurrentInventoryItemXID
                        {
                            get
                            {
                                return _currentInventoryItemXID;
                            }
                            set
                            {
                                if (_currentInventoryItemXID != value)
                                {
                                    _currentInventoryItemXID = value;
                                    if (!string.IsNullOrEmpty(_currentInventoryItemXID)) BeginSendMessage(MessageToken.CurrentInventoryItemXIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInventoryItemXIDChanged, _currentInventoryItemXID));
                                    NotifyPropertyChanged(x => this.CurrentInventoryItemXID);  
                                }
                            }
                        }
                        internal async void OnCurrentLicenceSummaryIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (LicenceSummaryRepository ctx = new LicenceSummaryRepository())
                            {
                                CurrentLicenceSummary = await ctx.GetLicenceSummary(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentLicenceSummary);
                        }

                        private  string _currentLicenceSummaryID = "";
                        public string CurrentLicenceSummaryID
                        {
                            get
                            {
                                return _currentLicenceSummaryID;
                            }
                            set
                            {
                                if (_currentLicenceSummaryID != value)
                                {
                                    _currentLicenceSummaryID = value;
                                    if (!string.IsNullOrEmpty(_currentLicenceSummaryID)) BeginSendMessage(MessageToken.CurrentLicenceSummaryIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentLicenceSummaryIDChanged, _currentLicenceSummaryID));
                                    NotifyPropertyChanged(x => this.CurrentLicenceSummaryID);  
                                }
                            }
                        }
                        internal async void OnCurrentSessionActionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (SessionActionsRepository ctx = new SessionActionsRepository())
                            {
                                CurrentSessionActions = await ctx.GetSessionActions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentSessionActions);
                        }

                        private  string _currentSessionActionsID = "";
                        public string CurrentSessionActionsID
                        {
                            get
                            {
                                return _currentSessionActionsID;
                            }
                            set
                            {
                                if (_currentSessionActionsID != value)
                                {
                                    _currentSessionActionsID = value;
                                    if (!string.IsNullOrEmpty(_currentSessionActionsID)) BeginSendMessage(MessageToken.CurrentSessionActionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentSessionActionsIDChanged, _currentSessionActionsID));
                                    NotifyPropertyChanged(x => this.CurrentSessionActionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentSessionsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (SessionsRepository ctx = new SessionsRepository())
                            {
                                CurrentSessions = await ctx.GetSessions(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentSessions);
                        }

                        private  string _currentSessionsID = "";
                        public string CurrentSessionsID
                        {
                            get
                            {
                                return _currentSessionsID;
                            }
                            set
                            {
                                if (_currentSessionsID != value)
                                {
                                    _currentSessionsID = value;
                                    if (!string.IsNullOrEmpty(_currentSessionsID)) BeginSendMessage(MessageToken.CurrentSessionsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentSessionsIDChanged, _currentSessionsID));
                                    NotifyPropertyChanged(x => this.CurrentSessionsID);  
                                }
                            }
                        }
                        internal async void OnCurrentSubItemsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (SubItemsRepository ctx = new SubItemsRepository())
                            {
                                CurrentSubItems = await ctx.GetSubItems(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentSubItems);
                        }

                        private  string _currentSubItemsID = "";
                        public string CurrentSubItemsID
                        {
                            get
                            {
                                return _currentSubItemsID;
                            }
                            set
                            {
                                if (_currentSubItemsID != value)
                                {
                                    _currentSubItemsID = value;
                                    if (!string.IsNullOrEmpty(_currentSubItemsID)) BeginSendMessage(MessageToken.CurrentSubItemsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentSubItemsIDChanged, _currentSubItemsID));
                                    NotifyPropertyChanged(x => this.CurrentSubItemsID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_AdjustmentsToXMLIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_AdjustmentsToXMLRepository ctx = new TODO_AdjustmentsToXMLRepository())
                            {
                                CurrentTODO_AdjustmentsToXML = await ctx.GetTODO_AdjustmentsToXML(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_AdjustmentsToXML);
                        }

                        private  string _currentTODO_AdjustmentsToXMLID = "";
                        public string CurrentTODO_AdjustmentsToXMLID
                        {
                            get
                            {
                                return _currentTODO_AdjustmentsToXMLID;
                            }
                            set
                            {
                                if (_currentTODO_AdjustmentsToXMLID != value)
                                {
                                    _currentTODO_AdjustmentsToXMLID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_AdjustmentsToXMLID)) BeginSendMessage(MessageToken.CurrentTODO_AdjustmentsToXMLIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_AdjustmentsToXMLIDChanged, _currentTODO_AdjustmentsToXMLID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_AdjustmentsToXMLID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_CreateDiscrepancyEntriesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_CreateDiscrepancyEntriesRepository ctx = new TODO_CreateDiscrepancyEntriesRepository())
                            {
                                CurrentTODO_CreateDiscrepancyEntries = await ctx.GetTODO_CreateDiscrepancyEntries(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_CreateDiscrepancyEntries);
                        }

                        private  string _currentTODO_CreateDiscrepancyEntriesID = "";
                        public string CurrentTODO_CreateDiscrepancyEntriesID
                        {
                            get
                            {
                                return _currentTODO_CreateDiscrepancyEntriesID;
                            }
                            set
                            {
                                if (_currentTODO_CreateDiscrepancyEntriesID != value)
                                {
                                    _currentTODO_CreateDiscrepancyEntriesID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_CreateDiscrepancyEntriesID)) BeginSendMessage(MessageToken.CurrentTODO_CreateDiscrepancyEntriesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_CreateDiscrepancyEntriesIDChanged, _currentTODO_CreateDiscrepancyEntriesID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_CreateDiscrepancyEntriesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_CreateEx9IDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_CreateEx9Repository ctx = new TODO_CreateEx9Repository())
                            {
                                CurrentTODO_CreateEx9 = await ctx.GetTODO_CreateEx9(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_CreateEx9);
                        }

                        private  string _currentTODO_CreateEx9ID = "";
                        public string CurrentTODO_CreateEx9ID
                        {
                            get
                            {
                                return _currentTODO_CreateEx9ID;
                            }
                            set
                            {
                                if (_currentTODO_CreateEx9ID != value)
                                {
                                    _currentTODO_CreateEx9ID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_CreateEx9ID)) BeginSendMessage(MessageToken.CurrentTODO_CreateEx9IDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_CreateEx9IDChanged, _currentTODO_CreateEx9ID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_CreateEx9ID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_DeleteDocumentSetIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_DeleteDocumentSetRepository ctx = new TODO_DeleteDocumentSetRepository())
                            {
                                CurrentTODO_DeleteDocumentSet = await ctx.GetTODO_DeleteDocumentSet(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_DeleteDocumentSet);
                        }

                        private  string _currentTODO_DeleteDocumentSetID = "";
                        public string CurrentTODO_DeleteDocumentSetID
                        {
                            get
                            {
                                return _currentTODO_DeleteDocumentSetID;
                            }
                            set
                            {
                                if (_currentTODO_DeleteDocumentSetID != value)
                                {
                                    _currentTODO_DeleteDocumentSetID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_DeleteDocumentSetID)) BeginSendMessage(MessageToken.CurrentTODO_DeleteDocumentSetIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_DeleteDocumentSetIDChanged, _currentTODO_DeleteDocumentSetID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_DeleteDocumentSetID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_DiscrepanciesToSubmitIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_DiscrepanciesToSubmitRepository ctx = new TODO_DiscrepanciesToSubmitRepository())
                            {
                                CurrentTODO_DiscrepanciesToSubmit = await ctx.GetTODO_DiscrepanciesToSubmit(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_DiscrepanciesToSubmit);
                        }

                        private  string _currentTODO_DiscrepanciesToSubmitID = "";
                        public string CurrentTODO_DiscrepanciesToSubmitID
                        {
                            get
                            {
                                return _currentTODO_DiscrepanciesToSubmitID;
                            }
                            set
                            {
                                if (_currentTODO_DiscrepanciesToSubmitID != value)
                                {
                                    _currentTODO_DiscrepanciesToSubmitID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_DiscrepanciesToSubmitID)) BeginSendMessage(MessageToken.CurrentTODO_DiscrepanciesToSubmitIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_DiscrepanciesToSubmitIDChanged, _currentTODO_DiscrepanciesToSubmitID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesToSubmitID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_DocumentsToDeleteIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_DocumentsToDeleteRepository ctx = new TODO_DocumentsToDeleteRepository())
                            {
                                CurrentTODO_DocumentsToDelete = await ctx.GetTODO_DocumentsToDelete(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_DocumentsToDelete);
                        }

                        private  string _currentTODO_DocumentsToDeleteID = "";
                        public string CurrentTODO_DocumentsToDeleteID
                        {
                            get
                            {
                                return _currentTODO_DocumentsToDeleteID;
                            }
                            set
                            {
                                if (_currentTODO_DocumentsToDeleteID != value)
                                {
                                    _currentTODO_DocumentsToDeleteID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_DocumentsToDeleteID)) BeginSendMessage(MessageToken.CurrentTODO_DocumentsToDeleteIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_DocumentsToDeleteIDChanged, _currentTODO_DocumentsToDeleteID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_DocumentsToDeleteID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_PODocSetIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_PODocSetRepository ctx = new TODO_PODocSetRepository())
                            {
                                CurrentTODO_PODocSet = await ctx.GetTODO_PODocSet(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_PODocSet);
                        }

                        private  string _currentTODO_PODocSetID = "";
                        public string CurrentTODO_PODocSetID
                        {
                            get
                            {
                                return _currentTODO_PODocSetID;
                            }
                            set
                            {
                                if (_currentTODO_PODocSetID != value)
                                {
                                    _currentTODO_PODocSetID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_PODocSetID)) BeginSendMessage(MessageToken.CurrentTODO_PODocSetIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_PODocSetIDChanged, _currentTODO_PODocSetID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_PODocSetID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_UnallocatedSalesIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_UnallocatedSalesRepository ctx = new TODO_UnallocatedSalesRepository())
                            {
                                CurrentTODO_UnallocatedSales = await ctx.GetTODO_UnallocatedSales(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_UnallocatedSales);
                        }

                        private  string _currentTODO_UnallocatedSalesID = "";
                        public string CurrentTODO_UnallocatedSalesID
                        {
                            get
                            {
                                return _currentTODO_UnallocatedSalesID;
                            }
                            set
                            {
                                if (_currentTODO_UnallocatedSalesID != value)
                                {
                                    _currentTODO_UnallocatedSalesID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_UnallocatedSalesID)) BeginSendMessage(MessageToken.CurrentTODO_UnallocatedSalesIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_UnallocatedSalesIDChanged, _currentTODO_UnallocatedSalesID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_UnallocatedSalesID);  
                                }
                            }
                        }
                        internal async void OnCurrentTODO_UnallocatedShortsIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (TODO_UnallocatedShortsRepository ctx = new TODO_UnallocatedShortsRepository())
                            {
                                CurrentTODO_UnallocatedShorts = await ctx.GetTODO_UnallocatedShorts(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentTODO_UnallocatedShorts);
                        }

                        private  string _currentTODO_UnallocatedShortsID = "";
                        public string CurrentTODO_UnallocatedShortsID
                        {
                            get
                            {
                                return _currentTODO_UnallocatedShortsID;
                            }
                            set
                            {
                                if (_currentTODO_UnallocatedShortsID != value)
                                {
                                    _currentTODO_UnallocatedShortsID = value;
                                    if (!string.IsNullOrEmpty(_currentTODO_UnallocatedShortsID)) BeginSendMessage(MessageToken.CurrentTODO_UnallocatedShortsIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentTODO_UnallocatedShortsIDChanged, _currentTODO_UnallocatedShortsID));
                                    NotifyPropertyChanged(x => this.CurrentTODO_UnallocatedShortsID);  
                                }
                            }
                        }
                        internal async void OnCurrentxcuda_Supplementary_unitIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (xcuda_Supplementary_unitRepository ctx = new xcuda_Supplementary_unitRepository())
                            {
                                Currentxcuda_Supplementary_unit = await ctx.Getxcuda_Supplementary_unit(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => Currentxcuda_Supplementary_unit);
                        }

                        private  string _currentxcuda_Supplementary_unitID = "";
                        public string Currentxcuda_Supplementary_unitID
                        {
                            get
                            {
                                return _currentxcuda_Supplementary_unitID;
                            }
                            set
                            {
                                if (_currentxcuda_Supplementary_unitID != value)
                                {
                                    _currentxcuda_Supplementary_unitID = value;
                                    if (!string.IsNullOrEmpty(_currentxcuda_Supplementary_unitID)) BeginSendMessage(MessageToken.Currentxcuda_Supplementary_unitIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.Currentxcuda_Supplementary_unitIDChanged, _currentxcuda_Supplementary_unitID));
                                    NotifyPropertyChanged(x => this.Currentxcuda_Supplementary_unitID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentActionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Actions> e)
        {
            //CurrentActions = e.Data;
            NotifyPropertyChanged(m => this.CurrentActions);
        }

        private  Actions _currentActions;
        public Actions CurrentActions
        {
            get
            {
                return _currentActions;
            }
            set
            {
                if (_currentActions != value)
                {
                    _currentActions = value;
                    BeginSendMessage(MessageToken.CurrentActionsChanged,
                                                     new NotificationEventArgs<Actions>(MessageToken.CurrentActionsChanged, _currentActions)); 
                    NotifyPropertyChanged(x => this.CurrentActions);    
                    // all current navigation properties = null
                 CurrentFileTypeActions = null;
                 CurrentSessionActions = null;
   
                }
            }
        }

		VirtualListItem<Actions> _vcurrentActions;
        public VirtualListItem<Actions> VCurrentActions
        {
            get
            {
                return _vcurrentActions;
            }
            set
            {
                if (_vcurrentActions != value)
                {
                    _vcurrentActions = value;
					if(_vcurrentActions != null) CurrentActions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentActions);                    
                }
            }
        }



                     
       

        internal void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
        {
            //CurrentApplicationSettings = e.Data;
            NotifyPropertyChanged(m => this.CurrentApplicationSettings);
        }

        private  ApplicationSettings _currentApplicationSettings;
        public ApplicationSettings CurrentApplicationSettings
        {
            get
            {
                return _currentApplicationSettings;
            }
            set
            {
                if (_currentApplicationSettings != value)
                {
                    _currentApplicationSettings = value;
                    BeginSendMessage(MessageToken.CurrentApplicationSettingsChanged,
                                                     new NotificationEventArgs<ApplicationSettings>(MessageToken.CurrentApplicationSettingsChanged, _currentApplicationSettings)); 
                    NotifyPropertyChanged(x => this.CurrentApplicationSettings);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentSetEx = null;
                 CurrentAsycudaDocument = null;
                 CurrentAsycudaDocumentItem = null;
                 CurrentInventoryItemX = null;
                 CurrentFileTypes = null;
                 CurrentInfoMapping = null;
                 CurrentEmailMapping = null;
   
                }
            }
        }

		VirtualListItem<ApplicationSettings> _vcurrentApplicationSettings;
        public VirtualListItem<ApplicationSettings> VCurrentApplicationSettings
        {
            get
            {
                return _vcurrentApplicationSettings;
            }
            set
            {
                if (_vcurrentApplicationSettings != value)
                {
                    _vcurrentApplicationSettings = value;
					if(_vcurrentApplicationSettings != null) CurrentApplicationSettings = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentApplicationSettings);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocument> e)
        {
            //CurrentAsycudaDocument = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocument);
        }

        private  AsycudaDocument _currentAsycudaDocument;
        public AsycudaDocument CurrentAsycudaDocument
        {
            get
            {
                return _currentAsycudaDocument;
            }
            set
            {
                if (_currentAsycudaDocument != value)
                {
                    _currentAsycudaDocument = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentChanged,
                                                     new NotificationEventArgs<AsycudaDocument>(MessageToken.CurrentAsycudaDocumentChanged, _currentAsycudaDocument)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocument);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentItem = null;
   
                }
            }
        }

		VirtualListItem<AsycudaDocument> _vcurrentAsycudaDocument;
        public VirtualListItem<AsycudaDocument> VCurrentAsycudaDocument
        {
            get
            {
                return _vcurrentAsycudaDocument;
            }
            set
            {
                if (_vcurrentAsycudaDocument != value)
                {
                    _vcurrentAsycudaDocument = value;
					if(_vcurrentAsycudaDocument != null) CurrentAsycudaDocument = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocument);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItem> e)
        {
            //CurrentAsycudaDocumentItem = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentItem);
        }

        private  AsycudaDocumentItem _currentAsycudaDocumentItem;
        public AsycudaDocumentItem CurrentAsycudaDocumentItem
        {
            get
            {
                return _currentAsycudaDocumentItem;
            }
            set
            {
                if (_currentAsycudaDocumentItem != value)
                {
                    _currentAsycudaDocumentItem = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemChanged,
                                                     new NotificationEventArgs<AsycudaDocumentItem>(MessageToken.CurrentAsycudaDocumentItemChanged, _currentAsycudaDocumentItem)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItem);    
                    // all current navigation properties = null
                 CurrentSubItems = null;
                 CurrentEntryPreviousItems = null;
                 Currentxcuda_Supplementary_unit = null;
                 CurrentAsycudaDocumentItemEntryDataDetails = null;
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentItem> _vcurrentAsycudaDocumentItem;
        public VirtualListItem<AsycudaDocumentItem> VCurrentAsycudaDocumentItem
        {
            get
            {
                return _vcurrentAsycudaDocumentItem;
            }
            set
            {
                if (_vcurrentAsycudaDocumentItem != value)
                {
                    _vcurrentAsycudaDocumentItem = value;
					if(_vcurrentAsycudaDocumentItem != null) CurrentAsycudaDocumentItem = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentItem);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentItemEntryDataDetailsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItemEntryDataDetails> e)
        {
            //CurrentAsycudaDocumentItemEntryDataDetails = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentItemEntryDataDetails);
        }

        private  AsycudaDocumentItemEntryDataDetails _currentAsycudaDocumentItemEntryDataDetails;
        public AsycudaDocumentItemEntryDataDetails CurrentAsycudaDocumentItemEntryDataDetails
        {
            get
            {
                return _currentAsycudaDocumentItemEntryDataDetails;
            }
            set
            {
                if (_currentAsycudaDocumentItemEntryDataDetails != value)
                {
                    _currentAsycudaDocumentItemEntryDataDetails = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsChanged,
                                                     new NotificationEventArgs<AsycudaDocumentItemEntryDataDetails>(MessageToken.CurrentAsycudaDocumentItemEntryDataDetailsChanged, _currentAsycudaDocumentItemEntryDataDetails)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemEntryDataDetails);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentItemEntryDataDetails> _vcurrentAsycudaDocumentItemEntryDataDetails;
        public VirtualListItem<AsycudaDocumentItemEntryDataDetails> VCurrentAsycudaDocumentItemEntryDataDetails
        {
            get
            {
                return _vcurrentAsycudaDocumentItemEntryDataDetails;
            }
            set
            {
                if (_vcurrentAsycudaDocumentItemEntryDataDetails != value)
                {
                    _vcurrentAsycudaDocumentItemEntryDataDetails = value;
					if(_vcurrentAsycudaDocumentItemEntryDataDetails != null) CurrentAsycudaDocumentItemEntryDataDetails = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentItemEntryDataDetails);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentSet_AttachmentsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSet_Attachments> e)
        {
            //CurrentAsycudaDocumentSet_Attachments = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentSet_Attachments);
        }

        private  AsycudaDocumentSet_Attachments _currentAsycudaDocumentSet_Attachments;
        public AsycudaDocumentSet_Attachments CurrentAsycudaDocumentSet_Attachments
        {
            get
            {
                return _currentAsycudaDocumentSet_Attachments;
            }
            set
            {
                if (_currentAsycudaDocumentSet_Attachments != value)
                {
                    _currentAsycudaDocumentSet_Attachments = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentSet_AttachmentsChanged,
                                                     new NotificationEventArgs<AsycudaDocumentSet_Attachments>(MessageToken.CurrentAsycudaDocumentSet_AttachmentsChanged, _currentAsycudaDocumentSet_Attachments)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSet_Attachments);    
                    // all current navigation properties = null
                 CurrentAttachmentLog = null;
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentSet_Attachments> _vcurrentAsycudaDocumentSet_Attachments;
        public VirtualListItem<AsycudaDocumentSet_Attachments> VCurrentAsycudaDocumentSet_Attachments
        {
            get
            {
                return _vcurrentAsycudaDocumentSet_Attachments;
            }
            set
            {
                if (_vcurrentAsycudaDocumentSet_Attachments != value)
                {
                    _vcurrentAsycudaDocumentSet_Attachments = value;
					if(_vcurrentAsycudaDocumentSet_Attachments != null) CurrentAsycudaDocumentSet_Attachments = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentSet_Attachments);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentSetExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEx> e)
        {
            //CurrentAsycudaDocumentSetEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentSetEx);
        }

        private  AsycudaDocumentSetEx _currentAsycudaDocumentSetEx;
        public AsycudaDocumentSetEx CurrentAsycudaDocumentSetEx
        {
            get
            {
                return _currentAsycudaDocumentSetEx;
            }
            set
            {
                if (_currentAsycudaDocumentSetEx != value)
                {
                    _currentAsycudaDocumentSetEx = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentSetExChanged,
                                                     new NotificationEventArgs<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, _currentAsycudaDocumentSetEx)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetEx);    
                    // all current navigation properties = null
                 CurrentAsycudaDocument = null;
                 CurrentLicenceSummary = null;
                 CurrentFileTypes = null;
                 CurrentAsycudaDocumentSet_Attachments = null;
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentSetEx> _vcurrentAsycudaDocumentSetEx;
        public VirtualListItem<AsycudaDocumentSetEx> VCurrentAsycudaDocumentSetEx
        {
            get
            {
                return _vcurrentAsycudaDocumentSetEx;
            }
            set
            {
                if (_vcurrentAsycudaDocumentSetEx != value)
                {
                    _vcurrentAsycudaDocumentSetEx = value;
					if(_vcurrentAsycudaDocumentSetEx != null) CurrentAsycudaDocumentSetEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentSetEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentAttachmentLogChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AttachmentLog> e)
        {
            //CurrentAttachmentLog = e.Data;
            NotifyPropertyChanged(m => this.CurrentAttachmentLog);
        }

        private  AttachmentLog _currentAttachmentLog;
        public AttachmentLog CurrentAttachmentLog
        {
            get
            {
                return _currentAttachmentLog;
            }
            set
            {
                if (_currentAttachmentLog != value)
                {
                    _currentAttachmentLog = value;
                    BeginSendMessage(MessageToken.CurrentAttachmentLogChanged,
                                                     new NotificationEventArgs<AttachmentLog>(MessageToken.CurrentAttachmentLogChanged, _currentAttachmentLog)); 
                    NotifyPropertyChanged(x => this.CurrentAttachmentLog);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AttachmentLog> _vcurrentAttachmentLog;
        public VirtualListItem<AttachmentLog> VCurrentAttachmentLog
        {
            get
            {
                return _vcurrentAttachmentLog;
            }
            set
            {
                if (_vcurrentAttachmentLog != value)
                {
                    _vcurrentAttachmentLog = value;
					if(_vcurrentAttachmentLog != null) CurrentAttachmentLog = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAttachmentLog);                    
                }
            }
        }



                     
       

        internal void OnCurrentAttachmentsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Attachments> e)
        {
            //CurrentAttachments = e.Data;
            NotifyPropertyChanged(m => this.CurrentAttachments);
        }

        private  Attachments _currentAttachments;
        public Attachments CurrentAttachments
        {
            get
            {
                return _currentAttachments;
            }
            set
            {
                if (_currentAttachments != value)
                {
                    _currentAttachments = value;
                    BeginSendMessage(MessageToken.CurrentAttachmentsChanged,
                                                     new NotificationEventArgs<Attachments>(MessageToken.CurrentAttachmentsChanged, _currentAttachments)); 
                    NotifyPropertyChanged(x => this.CurrentAttachments);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentSet_Attachments = null;
   
                }
            }
        }

		VirtualListItem<Attachments> _vcurrentAttachments;
        public VirtualListItem<Attachments> VCurrentAttachments
        {
            get
            {
                return _vcurrentAttachments;
            }
            set
            {
                if (_vcurrentAttachments != value)
                {
                    _vcurrentAttachments = value;
					if(_vcurrentAttachments != null) CurrentAttachments = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAttachments);                    
                }
            }
        }



                     
       

        internal void OnCurrentContactsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Contacts> e)
        {
            //CurrentContacts = e.Data;
            NotifyPropertyChanged(m => this.CurrentContacts);
        }

        private  Contacts _currentContacts;
        public Contacts CurrentContacts
        {
            get
            {
                return _currentContacts;
            }
            set
            {
                if (_currentContacts != value)
                {
                    _currentContacts = value;
                    BeginSendMessage(MessageToken.CurrentContactsChanged,
                                                     new NotificationEventArgs<Contacts>(MessageToken.CurrentContactsChanged, _currentContacts)); 
                    NotifyPropertyChanged(x => this.CurrentContacts);    
                    // all current navigation properties = null
                 CurrentFileTypeContacts = null;
   
                }
            }
        }

		VirtualListItem<Contacts> _vcurrentContacts;
        public VirtualListItem<Contacts> VCurrentContacts
        {
            get
            {
                return _vcurrentContacts;
            }
            set
            {
                if (_vcurrentContacts != value)
                {
                    _vcurrentContacts = value;
					if(_vcurrentContacts != null) CurrentContacts = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentContacts);                    
                }
            }
        }



                     
       

        internal void OnCurrentCustoms_ProcedureChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Customs_Procedure> e)
        {
            //CurrentCustoms_Procedure = e.Data;
            NotifyPropertyChanged(m => this.CurrentCustoms_Procedure);
        }

        private  Customs_Procedure _currentCustoms_Procedure;
        public Customs_Procedure CurrentCustoms_Procedure
        {
            get
            {
                return _currentCustoms_Procedure;
            }
            set
            {
                if (_currentCustoms_Procedure != value)
                {
                    _currentCustoms_Procedure = value;
                    BeginSendMessage(MessageToken.CurrentCustoms_ProcedureChanged,
                                                     new NotificationEventArgs<Customs_Procedure>(MessageToken.CurrentCustoms_ProcedureChanged, _currentCustoms_Procedure)); 
                    NotifyPropertyChanged(x => this.CurrentCustoms_Procedure);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<Customs_Procedure> _vcurrentCustoms_Procedure;
        public VirtualListItem<Customs_Procedure> VCurrentCustoms_Procedure
        {
            get
            {
                return _vcurrentCustoms_Procedure;
            }
            set
            {
                if (_vcurrentCustoms_Procedure != value)
                {
                    _vcurrentCustoms_Procedure = value;
					if(_vcurrentCustoms_Procedure != null) CurrentCustoms_Procedure = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentCustoms_Procedure);                    
                }
            }
        }



                     
       

        internal void OnCurrentDocument_TypeChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Document_Type> e)
        {
            //CurrentDocument_Type = e.Data;
            NotifyPropertyChanged(m => this.CurrentDocument_Type);
        }

        private  Document_Type _currentDocument_Type;
        public Document_Type CurrentDocument_Type
        {
            get
            {
                return _currentDocument_Type;
            }
            set
            {
                if (_currentDocument_Type != value)
                {
                    _currentDocument_Type = value;
                    BeginSendMessage(MessageToken.CurrentDocument_TypeChanged,
                                                     new NotificationEventArgs<Document_Type>(MessageToken.CurrentDocument_TypeChanged, _currentDocument_Type)); 
                    NotifyPropertyChanged(x => this.CurrentDocument_Type);    
                    // all current navigation properties = null
                 CurrentCustoms_Procedure = null;
   
                }
            }
        }

		VirtualListItem<Document_Type> _vcurrentDocument_Type;
        public VirtualListItem<Document_Type> VCurrentDocument_Type
        {
            get
            {
                return _vcurrentDocument_Type;
            }
            set
            {
                if (_vcurrentDocument_Type != value)
                {
                    _vcurrentDocument_Type = value;
					if(_vcurrentDocument_Type != null) CurrentDocument_Type = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentDocument_Type);                    
                }
            }
        }



                     
       

        internal void OnCurrentEmailMappingChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EmailMapping> e)
        {
            //CurrentEmailMapping = e.Data;
            NotifyPropertyChanged(m => this.CurrentEmailMapping);
        }

        private  EmailMapping _currentEmailMapping;
        public EmailMapping CurrentEmailMapping
        {
            get
            {
                return _currentEmailMapping;
            }
            set
            {
                if (_currentEmailMapping != value)
                {
                    _currentEmailMapping = value;
                    BeginSendMessage(MessageToken.CurrentEmailMappingChanged,
                                                     new NotificationEventArgs<EmailMapping>(MessageToken.CurrentEmailMappingChanged, _currentEmailMapping)); 
                    NotifyPropertyChanged(x => this.CurrentEmailMapping);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<EmailMapping> _vcurrentEmailMapping;
        public VirtualListItem<EmailMapping> VCurrentEmailMapping
        {
            get
            {
                return _vcurrentEmailMapping;
            }
            set
            {
                if (_vcurrentEmailMapping != value)
                {
                    _vcurrentEmailMapping = value;
					if(_vcurrentEmailMapping != null) CurrentEmailMapping = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEmailMapping);                    
                }
            }
        }



                     
       

        internal void OnCurrentEmailsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Emails> e)
        {
            //CurrentEmails = e.Data;
            NotifyPropertyChanged(m => this.CurrentEmails);
        }

        private  Emails _currentEmails;
        public Emails CurrentEmails
        {
            get
            {
                return _currentEmails;
            }
            set
            {
                if (_currentEmails != value)
                {
                    _currentEmails = value;
                    BeginSendMessage(MessageToken.CurrentEmailsChanged,
                                                     new NotificationEventArgs<Emails>(MessageToken.CurrentEmailsChanged, _currentEmails)); 
                    NotifyPropertyChanged(x => this.CurrentEmails);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentSet_Attachments = null;
   
                }
            }
        }

		VirtualListItem<Emails> _vcurrentEmails;
        public VirtualListItem<Emails> VCurrentEmails
        {
            get
            {
                return _vcurrentEmails;
            }
            set
            {
                if (_vcurrentEmails != value)
                {
                    _vcurrentEmails = value;
					if(_vcurrentEmails != null) CurrentEmails = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEmails);                    
                }
            }
        }



                     
       

        internal void OnCurrentEntryPreviousItemsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EntryPreviousItems> e)
        {
            //CurrentEntryPreviousItems = e.Data;
            NotifyPropertyChanged(m => this.CurrentEntryPreviousItems);
        }

        private  EntryPreviousItems _currentEntryPreviousItems;
        public EntryPreviousItems CurrentEntryPreviousItems
        {
            get
            {
                return _currentEntryPreviousItems;
            }
            set
            {
                if (_currentEntryPreviousItems != value)
                {
                    _currentEntryPreviousItems = value;
                    BeginSendMessage(MessageToken.CurrentEntryPreviousItemsChanged,
                                                     new NotificationEventArgs<EntryPreviousItems>(MessageToken.CurrentEntryPreviousItemsChanged, _currentEntryPreviousItems)); 
                    NotifyPropertyChanged(x => this.CurrentEntryPreviousItems);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<EntryPreviousItems> _vcurrentEntryPreviousItems;
        public VirtualListItem<EntryPreviousItems> VCurrentEntryPreviousItems
        {
            get
            {
                return _vcurrentEntryPreviousItems;
            }
            set
            {
                if (_vcurrentEntryPreviousItems != value)
                {
                    _vcurrentEntryPreviousItems = value;
					if(_vcurrentEntryPreviousItems != null) CurrentEntryPreviousItems = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentEntryPreviousItems);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileGroupsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileGroups> e)
        {
            //CurrentFileGroups = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileGroups);
        }

        private  FileGroups _currentFileGroups;
        public FileGroups CurrentFileGroups
        {
            get
            {
                return _currentFileGroups;
            }
            set
            {
                if (_currentFileGroups != value)
                {
                    _currentFileGroups = value;
                    BeginSendMessage(MessageToken.CurrentFileGroupsChanged,
                                                     new NotificationEventArgs<FileGroups>(MessageToken.CurrentFileGroupsChanged, _currentFileGroups)); 
                    NotifyPropertyChanged(x => this.CurrentFileGroups);    
                    // all current navigation properties = null
                 CurrentFileTypes = null;
   
                }
            }
        }

		VirtualListItem<FileGroups> _vcurrentFileGroups;
        public VirtualListItem<FileGroups> VCurrentFileGroups
        {
            get
            {
                return _vcurrentFileGroups;
            }
            set
            {
                if (_vcurrentFileGroups != value)
                {
                    _vcurrentFileGroups = value;
					if(_vcurrentFileGroups != null) CurrentFileGroups = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileGroups);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileTypeActionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypeActions> e)
        {
            //CurrentFileTypeActions = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileTypeActions);
        }

        private  FileTypeActions _currentFileTypeActions;
        public FileTypeActions CurrentFileTypeActions
        {
            get
            {
                return _currentFileTypeActions;
            }
            set
            {
                if (_currentFileTypeActions != value)
                {
                    _currentFileTypeActions = value;
                    BeginSendMessage(MessageToken.CurrentFileTypeActionsChanged,
                                                     new NotificationEventArgs<FileTypeActions>(MessageToken.CurrentFileTypeActionsChanged, _currentFileTypeActions)); 
                    NotifyPropertyChanged(x => this.CurrentFileTypeActions);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<FileTypeActions> _vcurrentFileTypeActions;
        public VirtualListItem<FileTypeActions> VCurrentFileTypeActions
        {
            get
            {
                return _vcurrentFileTypeActions;
            }
            set
            {
                if (_vcurrentFileTypeActions != value)
                {
                    _vcurrentFileTypeActions = value;
					if(_vcurrentFileTypeActions != null) CurrentFileTypeActions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileTypeActions);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileTypeContactsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypeContacts> e)
        {
            //CurrentFileTypeContacts = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileTypeContacts);
        }

        private  FileTypeContacts _currentFileTypeContacts;
        public FileTypeContacts CurrentFileTypeContacts
        {
            get
            {
                return _currentFileTypeContacts;
            }
            set
            {
                if (_currentFileTypeContacts != value)
                {
                    _currentFileTypeContacts = value;
                    BeginSendMessage(MessageToken.CurrentFileTypeContactsChanged,
                                                     new NotificationEventArgs<FileTypeContacts>(MessageToken.CurrentFileTypeContactsChanged, _currentFileTypeContacts)); 
                    NotifyPropertyChanged(x => this.CurrentFileTypeContacts);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<FileTypeContacts> _vcurrentFileTypeContacts;
        public VirtualListItem<FileTypeContacts> VCurrentFileTypeContacts
        {
            get
            {
                return _vcurrentFileTypeContacts;
            }
            set
            {
                if (_vcurrentFileTypeContacts != value)
                {
                    _vcurrentFileTypeContacts = value;
					if(_vcurrentFileTypeContacts != null) CurrentFileTypeContacts = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileTypeContacts);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileTypeMappingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypeMappings> e)
        {
            //CurrentFileTypeMappings = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileTypeMappings);
        }

        private  FileTypeMappings _currentFileTypeMappings;
        public FileTypeMappings CurrentFileTypeMappings
        {
            get
            {
                return _currentFileTypeMappings;
            }
            set
            {
                if (_currentFileTypeMappings != value)
                {
                    _currentFileTypeMappings = value;
                    BeginSendMessage(MessageToken.CurrentFileTypeMappingsChanged,
                                                     new NotificationEventArgs<FileTypeMappings>(MessageToken.CurrentFileTypeMappingsChanged, _currentFileTypeMappings)); 
                    NotifyPropertyChanged(x => this.CurrentFileTypeMappings);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<FileTypeMappings> _vcurrentFileTypeMappings;
        public VirtualListItem<FileTypeMappings> VCurrentFileTypeMappings
        {
            get
            {
                return _vcurrentFileTypeMappings;
            }
            set
            {
                if (_vcurrentFileTypeMappings != value)
                {
                    _vcurrentFileTypeMappings = value;
					if(_vcurrentFileTypeMappings != null) CurrentFileTypeMappings = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileTypeMappings);                    
                }
            }
        }



                     
       

        internal void OnCurrentFileTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypes> e)
        {
            //CurrentFileTypes = e.Data;
            NotifyPropertyChanged(m => this.CurrentFileTypes);
        }

        private  FileTypes _currentFileTypes;
        public FileTypes CurrentFileTypes
        {
            get
            {
                return _currentFileTypes;
            }
            set
            {
                if (_currentFileTypes != value)
                {
                    _currentFileTypes = value;
                    BeginSendMessage(MessageToken.CurrentFileTypesChanged,
                                                     new NotificationEventArgs<FileTypes>(MessageToken.CurrentFileTypesChanged, _currentFileTypes)); 
                    NotifyPropertyChanged(x => this.CurrentFileTypes);    
                    // all current navigation properties = null
                 CurrentFileTypeMappings = null;
                 CurrentFileTypeActions = null;
                 CurrentFileTypeContacts = null;
                 CurrentAsycudaDocumentSet_Attachments = null;
   
                }
            }
        }

		VirtualListItem<FileTypes> _vcurrentFileTypes;
        public VirtualListItem<FileTypes> VCurrentFileTypes
        {
            get
            {
                return _vcurrentFileTypes;
            }
            set
            {
                if (_vcurrentFileTypes != value)
                {
                    _vcurrentFileTypes = value;
					if(_vcurrentFileTypes != null) CurrentFileTypes = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentFileTypes);                    
                }
            }
        }



                     
       

        internal void OnCurrentInfoMappingChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InfoMapping> e)
        {
            //CurrentInfoMapping = e.Data;
            NotifyPropertyChanged(m => this.CurrentInfoMapping);
        }

        private  InfoMapping _currentInfoMapping;
        public InfoMapping CurrentInfoMapping
        {
            get
            {
                return _currentInfoMapping;
            }
            set
            {
                if (_currentInfoMapping != value)
                {
                    _currentInfoMapping = value;
                    BeginSendMessage(MessageToken.CurrentInfoMappingChanged,
                                                     new NotificationEventArgs<InfoMapping>(MessageToken.CurrentInfoMappingChanged, _currentInfoMapping)); 
                    NotifyPropertyChanged(x => this.CurrentInfoMapping);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<InfoMapping> _vcurrentInfoMapping;
        public VirtualListItem<InfoMapping> VCurrentInfoMapping
        {
            get
            {
                return _vcurrentInfoMapping;
            }
            set
            {
                if (_vcurrentInfoMapping != value)
                {
                    _vcurrentInfoMapping = value;
					if(_vcurrentInfoMapping != null) CurrentInfoMapping = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInfoMapping);                    
                }
            }
        }



                     
       

        internal void OnCurrentInventoryItemAliasXChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItemAliasX> e)
        {
            //CurrentInventoryItemAliasX = e.Data;
            NotifyPropertyChanged(m => this.CurrentInventoryItemAliasX);
        }

        private  InventoryItemAliasX _currentInventoryItemAliasX;
        public InventoryItemAliasX CurrentInventoryItemAliasX
        {
            get
            {
                return _currentInventoryItemAliasX;
            }
            set
            {
                if (_currentInventoryItemAliasX != value)
                {
                    _currentInventoryItemAliasX = value;
                    BeginSendMessage(MessageToken.CurrentInventoryItemAliasXChanged,
                                                     new NotificationEventArgs<InventoryItemAliasX>(MessageToken.CurrentInventoryItemAliasXChanged, _currentInventoryItemAliasX)); 
                    NotifyPropertyChanged(x => this.CurrentInventoryItemAliasX);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<InventoryItemAliasX> _vcurrentInventoryItemAliasX;
        public VirtualListItem<InventoryItemAliasX> VCurrentInventoryItemAliasX
        {
            get
            {
                return _vcurrentInventoryItemAliasX;
            }
            set
            {
                if (_vcurrentInventoryItemAliasX != value)
                {
                    _vcurrentInventoryItemAliasX = value;
					if(_vcurrentInventoryItemAliasX != null) CurrentInventoryItemAliasX = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInventoryItemAliasX);                    
                }
            }
        }



                     
       

        internal void OnCurrentInventoryItemXChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItemX> e)
        {
            //CurrentInventoryItemX = e.Data;
            NotifyPropertyChanged(m => this.CurrentInventoryItemX);
        }

        private  InventoryItemX _currentInventoryItemX;
        public InventoryItemX CurrentInventoryItemX
        {
            get
            {
                return _currentInventoryItemX;
            }
            set
            {
                if (_currentInventoryItemX != value)
                {
                    _currentInventoryItemX = value;
                    BeginSendMessage(MessageToken.CurrentInventoryItemXChanged,
                                                     new NotificationEventArgs<InventoryItemX>(MessageToken.CurrentInventoryItemXChanged, _currentInventoryItemX)); 
                    NotifyPropertyChanged(x => this.CurrentInventoryItemX);    
                    // all current navigation properties = null
                 CurrentInventoryItemAliasX = null;
                 CurrentAsycudaDocumentItem = null;
   
                }
            }
        }

		VirtualListItem<InventoryItemX> _vcurrentInventoryItemX;
        public VirtualListItem<InventoryItemX> VCurrentInventoryItemX
        {
            get
            {
                return _vcurrentInventoryItemX;
            }
            set
            {
                if (_vcurrentInventoryItemX != value)
                {
                    _vcurrentInventoryItemX = value;
					if(_vcurrentInventoryItemX != null) CurrentInventoryItemX = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInventoryItemX);                    
                }
            }
        }



                     
       

        internal void OnCurrentLicenceSummaryChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<LicenceSummary> e)
        {
            //CurrentLicenceSummary = e.Data;
            NotifyPropertyChanged(m => this.CurrentLicenceSummary);
        }

        private  LicenceSummary _currentLicenceSummary;
        public LicenceSummary CurrentLicenceSummary
        {
            get
            {
                return _currentLicenceSummary;
            }
            set
            {
                if (_currentLicenceSummary != value)
                {
                    _currentLicenceSummary = value;
                    BeginSendMessage(MessageToken.CurrentLicenceSummaryChanged,
                                                     new NotificationEventArgs<LicenceSummary>(MessageToken.CurrentLicenceSummaryChanged, _currentLicenceSummary)); 
                    NotifyPropertyChanged(x => this.CurrentLicenceSummary);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<LicenceSummary> _vcurrentLicenceSummary;
        public VirtualListItem<LicenceSummary> VCurrentLicenceSummary
        {
            get
            {
                return _vcurrentLicenceSummary;
            }
            set
            {
                if (_vcurrentLicenceSummary != value)
                {
                    _vcurrentLicenceSummary = value;
					if(_vcurrentLicenceSummary != null) CurrentLicenceSummary = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentLicenceSummary);                    
                }
            }
        }



                     
       

        internal void OnCurrentSessionActionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<SessionActions> e)
        {
            //CurrentSessionActions = e.Data;
            NotifyPropertyChanged(m => this.CurrentSessionActions);
        }

        private  SessionActions _currentSessionActions;
        public SessionActions CurrentSessionActions
        {
            get
            {
                return _currentSessionActions;
            }
            set
            {
                if (_currentSessionActions != value)
                {
                    _currentSessionActions = value;
                    BeginSendMessage(MessageToken.CurrentSessionActionsChanged,
                                                     new NotificationEventArgs<SessionActions>(MessageToken.CurrentSessionActionsChanged, _currentSessionActions)); 
                    NotifyPropertyChanged(x => this.CurrentSessionActions);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<SessionActions> _vcurrentSessionActions;
        public VirtualListItem<SessionActions> VCurrentSessionActions
        {
            get
            {
                return _vcurrentSessionActions;
            }
            set
            {
                if (_vcurrentSessionActions != value)
                {
                    _vcurrentSessionActions = value;
					if(_vcurrentSessionActions != null) CurrentSessionActions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentSessionActions);                    
                }
            }
        }



                     
       

        internal void OnCurrentSessionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Sessions> e)
        {
            //CurrentSessions = e.Data;
            NotifyPropertyChanged(m => this.CurrentSessions);
        }

        private  Sessions _currentSessions;
        public Sessions CurrentSessions
        {
            get
            {
                return _currentSessions;
            }
            set
            {
                if (_currentSessions != value)
                {
                    _currentSessions = value;
                    BeginSendMessage(MessageToken.CurrentSessionsChanged,
                                                     new NotificationEventArgs<Sessions>(MessageToken.CurrentSessionsChanged, _currentSessions)); 
                    NotifyPropertyChanged(x => this.CurrentSessions);    
                    // all current navigation properties = null
                 CurrentSessionActions = null;
   
                }
            }
        }

		VirtualListItem<Sessions> _vcurrentSessions;
        public VirtualListItem<Sessions> VCurrentSessions
        {
            get
            {
                return _vcurrentSessions;
            }
            set
            {
                if (_vcurrentSessions != value)
                {
                    _vcurrentSessions = value;
					if(_vcurrentSessions != null) CurrentSessions = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentSessions);                    
                }
            }
        }



                     
       

        internal void OnCurrentSubItemsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<SubItems> e)
        {
            //CurrentSubItems = e.Data;
            NotifyPropertyChanged(m => this.CurrentSubItems);
        }

        private  SubItems _currentSubItems;
        public SubItems CurrentSubItems
        {
            get
            {
                return _currentSubItems;
            }
            set
            {
                if (_currentSubItems != value)
                {
                    _currentSubItems = value;
                    BeginSendMessage(MessageToken.CurrentSubItemsChanged,
                                                     new NotificationEventArgs<SubItems>(MessageToken.CurrentSubItemsChanged, _currentSubItems)); 
                    NotifyPropertyChanged(x => this.CurrentSubItems);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<SubItems> _vcurrentSubItems;
        public VirtualListItem<SubItems> VCurrentSubItems
        {
            get
            {
                return _vcurrentSubItems;
            }
            set
            {
                if (_vcurrentSubItems != value)
                {
                    _vcurrentSubItems = value;
					if(_vcurrentSubItems != null) CurrentSubItems = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentSubItems);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_AdjustmentsToXMLChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_AdjustmentsToXML> e)
        {
            //CurrentTODO_AdjustmentsToXML = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_AdjustmentsToXML);
        }

        private  TODO_AdjustmentsToXML _currentTODO_AdjustmentsToXML;
        public TODO_AdjustmentsToXML CurrentTODO_AdjustmentsToXML
        {
            get
            {
                return _currentTODO_AdjustmentsToXML;
            }
            set
            {
                if (_currentTODO_AdjustmentsToXML != value)
                {
                    _currentTODO_AdjustmentsToXML = value;
                    BeginSendMessage(MessageToken.CurrentTODO_AdjustmentsToXMLChanged,
                                                     new NotificationEventArgs<TODO_AdjustmentsToXML>(MessageToken.CurrentTODO_AdjustmentsToXMLChanged, _currentTODO_AdjustmentsToXML)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_AdjustmentsToXML);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_AdjustmentsToXML> _vcurrentTODO_AdjustmentsToXML;
        public VirtualListItem<TODO_AdjustmentsToXML> VCurrentTODO_AdjustmentsToXML
        {
            get
            {
                return _vcurrentTODO_AdjustmentsToXML;
            }
            set
            {
                if (_vcurrentTODO_AdjustmentsToXML != value)
                {
                    _vcurrentTODO_AdjustmentsToXML = value;
					if(_vcurrentTODO_AdjustmentsToXML != null) CurrentTODO_AdjustmentsToXML = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_AdjustmentsToXML);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_CreateDiscrepancyEntriesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_CreateDiscrepancyEntries> e)
        {
            //CurrentTODO_CreateDiscrepancyEntries = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_CreateDiscrepancyEntries);
        }

        private  TODO_CreateDiscrepancyEntries _currentTODO_CreateDiscrepancyEntries;
        public TODO_CreateDiscrepancyEntries CurrentTODO_CreateDiscrepancyEntries
        {
            get
            {
                return _currentTODO_CreateDiscrepancyEntries;
            }
            set
            {
                if (_currentTODO_CreateDiscrepancyEntries != value)
                {
                    _currentTODO_CreateDiscrepancyEntries = value;
                    BeginSendMessage(MessageToken.CurrentTODO_CreateDiscrepancyEntriesChanged,
                                                     new NotificationEventArgs<TODO_CreateDiscrepancyEntries>(MessageToken.CurrentTODO_CreateDiscrepancyEntriesChanged, _currentTODO_CreateDiscrepancyEntries)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_CreateDiscrepancyEntries);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_CreateDiscrepancyEntries> _vcurrentTODO_CreateDiscrepancyEntries;
        public VirtualListItem<TODO_CreateDiscrepancyEntries> VCurrentTODO_CreateDiscrepancyEntries
        {
            get
            {
                return _vcurrentTODO_CreateDiscrepancyEntries;
            }
            set
            {
                if (_vcurrentTODO_CreateDiscrepancyEntries != value)
                {
                    _vcurrentTODO_CreateDiscrepancyEntries = value;
					if(_vcurrentTODO_CreateDiscrepancyEntries != null) CurrentTODO_CreateDiscrepancyEntries = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_CreateDiscrepancyEntries);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_CreateEx9Changed(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_CreateEx9> e)
        {
            //CurrentTODO_CreateEx9 = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_CreateEx9);
        }

        private  TODO_CreateEx9 _currentTODO_CreateEx9;
        public TODO_CreateEx9 CurrentTODO_CreateEx9
        {
            get
            {
                return _currentTODO_CreateEx9;
            }
            set
            {
                if (_currentTODO_CreateEx9 != value)
                {
                    _currentTODO_CreateEx9 = value;
                    BeginSendMessage(MessageToken.CurrentTODO_CreateEx9Changed,
                                                     new NotificationEventArgs<TODO_CreateEx9>(MessageToken.CurrentTODO_CreateEx9Changed, _currentTODO_CreateEx9)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_CreateEx9);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_CreateEx9> _vcurrentTODO_CreateEx9;
        public VirtualListItem<TODO_CreateEx9> VCurrentTODO_CreateEx9
        {
            get
            {
                return _vcurrentTODO_CreateEx9;
            }
            set
            {
                if (_vcurrentTODO_CreateEx9 != value)
                {
                    _vcurrentTODO_CreateEx9 = value;
					if(_vcurrentTODO_CreateEx9 != null) CurrentTODO_CreateEx9 = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_CreateEx9);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_DeleteDocumentSetChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_DeleteDocumentSet> e)
        {
            //CurrentTODO_DeleteDocumentSet = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_DeleteDocumentSet);
        }

        private  TODO_DeleteDocumentSet _currentTODO_DeleteDocumentSet;
        public TODO_DeleteDocumentSet CurrentTODO_DeleteDocumentSet
        {
            get
            {
                return _currentTODO_DeleteDocumentSet;
            }
            set
            {
                if (_currentTODO_DeleteDocumentSet != value)
                {
                    _currentTODO_DeleteDocumentSet = value;
                    BeginSendMessage(MessageToken.CurrentTODO_DeleteDocumentSetChanged,
                                                     new NotificationEventArgs<TODO_DeleteDocumentSet>(MessageToken.CurrentTODO_DeleteDocumentSetChanged, _currentTODO_DeleteDocumentSet)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_DeleteDocumentSet);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_DeleteDocumentSet> _vcurrentTODO_DeleteDocumentSet;
        public VirtualListItem<TODO_DeleteDocumentSet> VCurrentTODO_DeleteDocumentSet
        {
            get
            {
                return _vcurrentTODO_DeleteDocumentSet;
            }
            set
            {
                if (_vcurrentTODO_DeleteDocumentSet != value)
                {
                    _vcurrentTODO_DeleteDocumentSet = value;
					if(_vcurrentTODO_DeleteDocumentSet != null) CurrentTODO_DeleteDocumentSet = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_DeleteDocumentSet);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_DiscrepanciesToSubmitChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_DiscrepanciesToSubmit> e)
        {
            //CurrentTODO_DiscrepanciesToSubmit = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_DiscrepanciesToSubmit);
        }

        private  TODO_DiscrepanciesToSubmit _currentTODO_DiscrepanciesToSubmit;
        public TODO_DiscrepanciesToSubmit CurrentTODO_DiscrepanciesToSubmit
        {
            get
            {
                return _currentTODO_DiscrepanciesToSubmit;
            }
            set
            {
                if (_currentTODO_DiscrepanciesToSubmit != value)
                {
                    _currentTODO_DiscrepanciesToSubmit = value;
                    BeginSendMessage(MessageToken.CurrentTODO_DiscrepanciesToSubmitChanged,
                                                     new NotificationEventArgs<TODO_DiscrepanciesToSubmit>(MessageToken.CurrentTODO_DiscrepanciesToSubmitChanged, _currentTODO_DiscrepanciesToSubmit)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesToSubmit);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_DiscrepanciesToSubmit> _vcurrentTODO_DiscrepanciesToSubmit;
        public VirtualListItem<TODO_DiscrepanciesToSubmit> VCurrentTODO_DiscrepanciesToSubmit
        {
            get
            {
                return _vcurrentTODO_DiscrepanciesToSubmit;
            }
            set
            {
                if (_vcurrentTODO_DiscrepanciesToSubmit != value)
                {
                    _vcurrentTODO_DiscrepanciesToSubmit = value;
					if(_vcurrentTODO_DiscrepanciesToSubmit != null) CurrentTODO_DiscrepanciesToSubmit = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_DiscrepanciesToSubmit);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_DocumentsToDeleteChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_DocumentsToDelete> e)
        {
            //CurrentTODO_DocumentsToDelete = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_DocumentsToDelete);
        }

        private  TODO_DocumentsToDelete _currentTODO_DocumentsToDelete;
        public TODO_DocumentsToDelete CurrentTODO_DocumentsToDelete
        {
            get
            {
                return _currentTODO_DocumentsToDelete;
            }
            set
            {
                if (_currentTODO_DocumentsToDelete != value)
                {
                    _currentTODO_DocumentsToDelete = value;
                    BeginSendMessage(MessageToken.CurrentTODO_DocumentsToDeleteChanged,
                                                     new NotificationEventArgs<TODO_DocumentsToDelete>(MessageToken.CurrentTODO_DocumentsToDeleteChanged, _currentTODO_DocumentsToDelete)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_DocumentsToDelete);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_DocumentsToDelete> _vcurrentTODO_DocumentsToDelete;
        public VirtualListItem<TODO_DocumentsToDelete> VCurrentTODO_DocumentsToDelete
        {
            get
            {
                return _vcurrentTODO_DocumentsToDelete;
            }
            set
            {
                if (_vcurrentTODO_DocumentsToDelete != value)
                {
                    _vcurrentTODO_DocumentsToDelete = value;
					if(_vcurrentTODO_DocumentsToDelete != null) CurrentTODO_DocumentsToDelete = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_DocumentsToDelete);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_PODocSetChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_PODocSet> e)
        {
            //CurrentTODO_PODocSet = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_PODocSet);
        }

        private  TODO_PODocSet _currentTODO_PODocSet;
        public TODO_PODocSet CurrentTODO_PODocSet
        {
            get
            {
                return _currentTODO_PODocSet;
            }
            set
            {
                if (_currentTODO_PODocSet != value)
                {
                    _currentTODO_PODocSet = value;
                    BeginSendMessage(MessageToken.CurrentTODO_PODocSetChanged,
                                                     new NotificationEventArgs<TODO_PODocSet>(MessageToken.CurrentTODO_PODocSetChanged, _currentTODO_PODocSet)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_PODocSet);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_PODocSet> _vcurrentTODO_PODocSet;
        public VirtualListItem<TODO_PODocSet> VCurrentTODO_PODocSet
        {
            get
            {
                return _vcurrentTODO_PODocSet;
            }
            set
            {
                if (_vcurrentTODO_PODocSet != value)
                {
                    _vcurrentTODO_PODocSet = value;
					if(_vcurrentTODO_PODocSet != null) CurrentTODO_PODocSet = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_PODocSet);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_UnallocatedSalesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_UnallocatedSales> e)
        {
            //CurrentTODO_UnallocatedSales = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_UnallocatedSales);
        }

        private  TODO_UnallocatedSales _currentTODO_UnallocatedSales;
        public TODO_UnallocatedSales CurrentTODO_UnallocatedSales
        {
            get
            {
                return _currentTODO_UnallocatedSales;
            }
            set
            {
                if (_currentTODO_UnallocatedSales != value)
                {
                    _currentTODO_UnallocatedSales = value;
                    BeginSendMessage(MessageToken.CurrentTODO_UnallocatedSalesChanged,
                                                     new NotificationEventArgs<TODO_UnallocatedSales>(MessageToken.CurrentTODO_UnallocatedSalesChanged, _currentTODO_UnallocatedSales)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_UnallocatedSales);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_UnallocatedSales> _vcurrentTODO_UnallocatedSales;
        public VirtualListItem<TODO_UnallocatedSales> VCurrentTODO_UnallocatedSales
        {
            get
            {
                return _vcurrentTODO_UnallocatedSales;
            }
            set
            {
                if (_vcurrentTODO_UnallocatedSales != value)
                {
                    _vcurrentTODO_UnallocatedSales = value;
					if(_vcurrentTODO_UnallocatedSales != null) CurrentTODO_UnallocatedSales = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_UnallocatedSales);                    
                }
            }
        }



                     
       

        internal void OnCurrentTODO_UnallocatedShortsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<TODO_UnallocatedShorts> e)
        {
            //CurrentTODO_UnallocatedShorts = e.Data;
            NotifyPropertyChanged(m => this.CurrentTODO_UnallocatedShorts);
        }

        private  TODO_UnallocatedShorts _currentTODO_UnallocatedShorts;
        public TODO_UnallocatedShorts CurrentTODO_UnallocatedShorts
        {
            get
            {
                return _currentTODO_UnallocatedShorts;
            }
            set
            {
                if (_currentTODO_UnallocatedShorts != value)
                {
                    _currentTODO_UnallocatedShorts = value;
                    BeginSendMessage(MessageToken.CurrentTODO_UnallocatedShortsChanged,
                                                     new NotificationEventArgs<TODO_UnallocatedShorts>(MessageToken.CurrentTODO_UnallocatedShortsChanged, _currentTODO_UnallocatedShorts)); 
                    NotifyPropertyChanged(x => this.CurrentTODO_UnallocatedShorts);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<TODO_UnallocatedShorts> _vcurrentTODO_UnallocatedShorts;
        public VirtualListItem<TODO_UnallocatedShorts> VCurrentTODO_UnallocatedShorts
        {
            get
            {
                return _vcurrentTODO_UnallocatedShorts;
            }
            set
            {
                if (_vcurrentTODO_UnallocatedShorts != value)
                {
                    _vcurrentTODO_UnallocatedShorts = value;
					if(_vcurrentTODO_UnallocatedShorts != null) CurrentTODO_UnallocatedShorts = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentTODO_UnallocatedShorts);                    
                }
            }
        }



                     
       

        internal void OnCurrentxcuda_Supplementary_unitChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<xcuda_Supplementary_unit> e)
        {
            //Currentxcuda_Supplementary_unit = e.Data;
            NotifyPropertyChanged(m => this.Currentxcuda_Supplementary_unit);
        }

        private  xcuda_Supplementary_unit _currentxcuda_Supplementary_unit;
        public xcuda_Supplementary_unit Currentxcuda_Supplementary_unit
        {
            get
            {
                return _currentxcuda_Supplementary_unit;
            }
            set
            {
                if (_currentxcuda_Supplementary_unit != value)
                {
                    _currentxcuda_Supplementary_unit = value;
                    BeginSendMessage(MessageToken.Currentxcuda_Supplementary_unitChanged,
                                                     new NotificationEventArgs<xcuda_Supplementary_unit>(MessageToken.Currentxcuda_Supplementary_unitChanged, _currentxcuda_Supplementary_unit)); 
                    NotifyPropertyChanged(x => this.Currentxcuda_Supplementary_unit);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<xcuda_Supplementary_unit> _vcurrentxcuda_Supplementary_unit;
        public VirtualListItem<xcuda_Supplementary_unit> VCurrentxcuda_Supplementary_unit
        {
            get
            {
                return _vcurrentxcuda_Supplementary_unit;
            }
            set
            {
                if (_vcurrentxcuda_Supplementary_unit != value)
                {
                    _vcurrentxcuda_Supplementary_unit = value;
					if(_vcurrentxcuda_Supplementary_unit != null) Currentxcuda_Supplementary_unit = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentxcuda_Supplementary_unit);                    
                }
            }
        }






        static CoreEntitiesOnCreated newCoreEntitiesOnCreated = new CoreEntitiesOnCreated();
    }		
}

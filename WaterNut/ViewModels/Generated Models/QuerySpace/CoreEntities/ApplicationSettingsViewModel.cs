// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class ApplicationSettingsViewModel_AutoGen : ViewModelBase<ApplicationSettingsViewModel_AutoGen>
	{

       private static readonly ApplicationSettingsViewModel_AutoGen instance;
       static ApplicationSettingsViewModel_AutoGen()
        {
            instance = new ApplicationSettingsViewModel_AutoGen();
        }

       public static ApplicationSettingsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public ApplicationSettingsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<ApplicationSettings>(MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
            RegisterToReceiveMessages(MessageToken.ApplicationSettingsChanged, OnApplicationSettingsChanged);
			RegisterToReceiveMessages(MessageToken.ApplicationSettingsFilterExpressionChanged, OnApplicationSettingsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			ApplicationSettings = new VirtualList<ApplicationSettings>(vloader);
			ApplicationSettings.LoadingStateChanged += ApplicationSettings_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(ApplicationSettings, lockObject);
			
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";
             OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<ApplicationSettings> _ApplicationSettings = null;
        public VirtualList<ApplicationSettings> ApplicationSettings
        {
            get
            {
                return _ApplicationSettings;
            }
            set
            {
                _ApplicationSettings = value;
            }
        }

		 private void OnApplicationSettingsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			ApplicationSettings.Refresh();
            SelectedApplicationSettings.Clear();
            NotifyPropertyChanged(x => SelectedApplicationSettings);
            BeginSendMessage(MessageToken.SelectedApplicationSettingsChanged, new NotificationEventArgs(MessageToken.SelectedApplicationSettingsChanged));
        }

		void ApplicationSettings_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (ApplicationSettings.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => ApplicationSettings);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("ApplicationSettings | Error occured..." + ApplicationSettings.LastLoadingError.Message);
                    NotifyPropertyChanged(x => ApplicationSettings);
                    break;
            }
           
        }

		
		public readonly ApplicationSettingsVirturalListLoader vloader = new ApplicationSettingsVirturalListLoader();

		private ObservableCollection<ApplicationSettings> _selectedApplicationSettings = new ObservableCollection<ApplicationSettings>();
        public ObservableCollection<ApplicationSettings> SelectedApplicationSettings
        {
            get
            {
                return _selectedApplicationSettings;
            }
            set
            {
                _selectedApplicationSettings = value;
				BeginSendMessage(MessageToken.SelectedApplicationSettingsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedApplicationSettingsChanged));
				 NotifyPropertyChanged(x => SelectedApplicationSettings);
            }
        }

        internal virtual void OnCurrentApplicationSettingsChanged(object sender, NotificationEventArgs<ApplicationSettings> e)
        {
            if(BaseViewModel.Instance.CurrentApplicationSettings != null) BaseViewModel.Instance.CurrentApplicationSettings.PropertyChanged += CurrentApplicationSettings__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentApplicationSettings);
        }   

            void CurrentApplicationSettings__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnApplicationSettingsChanged(object sender, NotificationEventArgs e)
        {
            _ApplicationSettings.Refresh();
			NotifyPropertyChanged(x => this.ApplicationSettings);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_ApplicationSettings.Refresh();
			NotifyPropertyChanged(x => this.ApplicationSettings);
		}

		public async Task SelectAll()
        {
            IEnumerable<ApplicationSettings> lst = null;
            using (var ctx = new ApplicationSettingsRepository())
            {
                lst = await ctx.GetApplicationSettingsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedApplicationSettings = new ObservableCollection<ApplicationSettings>(lst);
        }

 

		private string _descriptionFilter;
        public string DescriptionFilter
        {
            get
            {
                return _descriptionFilter;
            }
            set
            {
                _descriptionFilter = value;
				NotifyPropertyChanged(x => DescriptionFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _maxEntryLinesFilter;
        public Int32? MaxEntryLinesFilter
        {
            get
            {
                return _maxEntryLinesFilter;
            }
            set
            {
                _maxEntryLinesFilter = value;
				NotifyPropertyChanged(x => MaxEntryLinesFilter);
                FilterData();
                
            }
        }	

 

		private string _softwareNameFilter;
        public string SoftwareNameFilter
        {
            get
            {
                return _softwareNameFilter;
            }
            set
            {
                _softwareNameFilter = value;
				NotifyPropertyChanged(x => SoftwareNameFilter);
                FilterData();
                
            }
        }	

 

		private string _allowCounterPointFilter;
        public string AllowCounterPointFilter
        {
            get
            {
                return _allowCounterPointFilter;
            }
            set
            {
                _allowCounterPointFilter = value;
				NotifyPropertyChanged(x => AllowCounterPointFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _groupEX9Filter;
        public Boolean? GroupEX9Filter
        {
            get
            {
                return _groupEX9Filter;
            }
            set
            {
                _groupEX9Filter = value;
				NotifyPropertyChanged(x => GroupEX9Filter);
                FilterData();
                
            }
        }	

 

		private Boolean? _invoicePerEntryFilter;
        public Boolean? InvoicePerEntryFilter
        {
            get
            {
                return _invoicePerEntryFilter;
            }
            set
            {
                _invoicePerEntryFilter = value;
				NotifyPropertyChanged(x => InvoicePerEntryFilter);
                FilterData();
                
            }
        }	

 

		private string _allowTariffCodesFilter;
        public string AllowTariffCodesFilter
        {
            get
            {
                return _allowTariffCodesFilter;
            }
            set
            {
                _allowTariffCodesFilter = value;
				NotifyPropertyChanged(x => AllowTariffCodesFilter);
                FilterData();
                
            }
        }	

 

		private string _allowWareHouseFilter;
        public string AllowWareHouseFilter
        {
            get
            {
                return _allowWareHouseFilter;
            }
            set
            {
                _allowWareHouseFilter = value;
				NotifyPropertyChanged(x => AllowWareHouseFilter);
                FilterData();
                
            }
        }	

 

		private string _allowXBondFilter;
        public string AllowXBondFilter
        {
            get
            {
                return _allowXBondFilter;
            }
            set
            {
                _allowXBondFilter = value;
				NotifyPropertyChanged(x => AllowXBondFilter);
                FilterData();
                
            }
        }	

 

		private string _allowAsycudaManagerFilter;
        public string AllowAsycudaManagerFilter
        {
            get
            {
                return _allowAsycudaManagerFilter;
            }
            set
            {
                _allowAsycudaManagerFilter = value;
				NotifyPropertyChanged(x => AllowAsycudaManagerFilter);
                FilterData();
                
            }
        }	

 

		private string _allowQuickBooksFilter;
        public string AllowQuickBooksFilter
        {
            get
            {
                return _allowQuickBooksFilter;
            }
            set
            {
                _allowQuickBooksFilter = value;
				NotifyPropertyChanged(x => AllowQuickBooksFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _itemDescriptionContainsAsycudaAttributeFilter;
        public Boolean? ItemDescriptionContainsAsycudaAttributeFilter
        {
            get
            {
                return _itemDescriptionContainsAsycudaAttributeFilter;
            }
            set
            {
                _itemDescriptionContainsAsycudaAttributeFilter = value;
				NotifyPropertyChanged(x => ItemDescriptionContainsAsycudaAttributeFilter);
                FilterData();
                
            }
        }	

 

		private string _allowExportToExcelFilter;
        public string AllowExportToExcelFilter
        {
            get
            {
                return _allowExportToExcelFilter;
            }
            set
            {
                _allowExportToExcelFilter = value;
				NotifyPropertyChanged(x => AllowExportToExcelFilter);
                FilterData();
                
            }
        }	

 

		private string _allowAutoWeightCalculationFilter;
        public string AllowAutoWeightCalculationFilter
        {
            get
            {
                return _allowAutoWeightCalculationFilter;
            }
            set
            {
                _allowAutoWeightCalculationFilter = value;
				NotifyPropertyChanged(x => AllowAutoWeightCalculationFilter);
                FilterData();
                
            }
        }	

 

		private string _allowEntryPerIM7Filter;
        public string AllowEntryPerIM7Filter
        {
            get
            {
                return _allowEntryPerIM7Filter;
            }
            set
            {
                _allowEntryPerIM7Filter = value;
				NotifyPropertyChanged(x => AllowEntryPerIM7Filter);
                FilterData();
                
            }
        }	

 

		private string _allowSalesToPIFilter;
        public string AllowSalesToPIFilter
        {
            get
            {
                return _allowSalesToPIFilter;
            }
            set
            {
                _allowSalesToPIFilter = value;
				NotifyPropertyChanged(x => AllowSalesToPIFilter);
                FilterData();
                
            }
        }	

 

		private string _allowEffectiveAssessmentDateFilter;
        public string AllowEffectiveAssessmentDateFilter
        {
            get
            {
                return _allowEffectiveAssessmentDateFilter;
            }
            set
            {
                _allowEffectiveAssessmentDateFilter = value;
				NotifyPropertyChanged(x => AllowEffectiveAssessmentDateFilter);
                FilterData();
                
            }
        }	

 

		private string _allowAutoFreightCalculationFilter;
        public string AllowAutoFreightCalculationFilter
        {
            get
            {
                return _allowAutoFreightCalculationFilter;
            }
            set
            {
                _allowAutoFreightCalculationFilter = value;
				NotifyPropertyChanged(x => AllowAutoFreightCalculationFilter);
                FilterData();
                
            }
        }	

 

		private string _allowSubItemsFilter;
        public string AllowSubItemsFilter
        {
            get
            {
                return _allowSubItemsFilter;
            }
            set
            {
                _allowSubItemsFilter = value;
				NotifyPropertyChanged(x => AllowSubItemsFilter);
                FilterData();
                
            }
        }	

 

		private string _allowEntryDoNotAllocateFilter;
        public string AllowEntryDoNotAllocateFilter
        {
            get
            {
                return _allowEntryDoNotAllocateFilter;
            }
            set
            {
                _allowEntryDoNotAllocateFilter = value;
				NotifyPropertyChanged(x => AllowEntryDoNotAllocateFilter);
                FilterData();
                
            }
        }	

 

		private string _allowPreviousItemsFilter;
        public string AllowPreviousItemsFilter
        {
            get
            {
                return _allowPreviousItemsFilter;
            }
            set
            {
                _allowPreviousItemsFilter = value;
				NotifyPropertyChanged(x => AllowPreviousItemsFilter);
                FilterData();
                
            }
        }	

 

		private string _allowOversShortFilter;
        public string AllowOversShortFilter
        {
            get
            {
                return _allowOversShortFilter;
            }
            set
            {
                _allowOversShortFilter = value;
				NotifyPropertyChanged(x => AllowOversShortFilter);
                FilterData();
                
            }
        }	

 

		private string _allowContainersFilter;
        public string AllowContainersFilter
        {
            get
            {
                return _allowContainersFilter;
            }
            set
            {
                _allowContainersFilter = value;
				NotifyPropertyChanged(x => AllowContainersFilter);
                FilterData();
                
            }
        }	

 

		private string _allowNonXEntriesFilter;
        public string AllowNonXEntriesFilter
        {
            get
            {
                return _allowNonXEntriesFilter;
            }
            set
            {
                _allowNonXEntriesFilter = value;
				NotifyPropertyChanged(x => AllowNonXEntriesFilter);
                FilterData();
                
            }
        }	

 

		private string _allowValidateTariffCodesFilter;
        public string AllowValidateTariffCodesFilter
        {
            get
            {
                return _allowValidateTariffCodesFilter;
            }
            set
            {
                _allowValidateTariffCodesFilter = value;
				NotifyPropertyChanged(x => AllowValidateTariffCodesFilter);
                FilterData();
                
            }
        }	

 

		private string _allowCleanBondFilter;
        public string AllowCleanBondFilter
        {
            get
            {
                return _allowCleanBondFilter;
            }
            set
            {
                _allowCleanBondFilter = value;
				NotifyPropertyChanged(x => AllowCleanBondFilter);
                FilterData();
                
            }
        }	

 

		private string _orderEntriesByFilter;
        public string OrderEntriesByFilter
        {
            get
            {
                return _orderEntriesByFilter;
            }
            set
            {
                _orderEntriesByFilter = value;
				NotifyPropertyChanged(x => OrderEntriesByFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startOpeningStockDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartOpeningStockDateFilter
        {
            get
            {
                return _startOpeningStockDateFilter;
            }
            set
            {
                _startOpeningStockDateFilter = value;
				NotifyPropertyChanged(x => StartOpeningStockDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endOpeningStockDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndOpeningStockDateFilter
        {
            get
            {
                return _endOpeningStockDateFilter;
            }
            set
            {
                _endOpeningStockDateFilter = value;
				NotifyPropertyChanged(x => EndOpeningStockDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _openingStockDateFilter;
        public DateTime? OpeningStockDateFilter
        {
            get
            {
                return _openingStockDateFilter;
            }
            set
            {
                _openingStockDateFilter = value;
				NotifyPropertyChanged(x => OpeningStockDateFilter);
                FilterData();
                
            }
        }	

 

		private string _declarantCodeFilter;
        public string DeclarantCodeFilter
        {
            get
            {
                return _declarantCodeFilter;
            }
            set
            {
                _declarantCodeFilter = value;
				NotifyPropertyChanged(x => DeclarantCodeFilter);
                FilterData();
                
            }
        }	

 

		private string _weightCalculationMethodFilter;
        public string WeightCalculationMethodFilter
        {
            get
            {
                return _weightCalculationMethodFilter;
            }
            set
            {
                _weightCalculationMethodFilter = value;
				NotifyPropertyChanged(x => WeightCalculationMethodFilter);
                FilterData();
                
            }
        }	

 

		private Double? _bondQuantumFilter;
        public Double? BondQuantumFilter
        {
            get
            {
                return _bondQuantumFilter;
            }
            set
            {
                _bondQuantumFilter = value;
				NotifyPropertyChanged(x => BondQuantumFilter);
                FilterData();
                
            }
        }	

 

		private string _dataFolderFilter;
        public string DataFolderFilter
        {
            get
            {
                return _dataFolderFilter;
            }
            set
            {
                _dataFolderFilter = value;
				NotifyPropertyChanged(x => DataFolderFilter);
                FilterData();
                
            }
        }	

 

		private string _companyNameFilter;
        public string CompanyNameFilter
        {
            get
            {
                return _companyNameFilter;
            }
            set
            {
                _companyNameFilter = value;
				NotifyPropertyChanged(x => CompanyNameFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isActiveFilter;
        public Boolean? IsActiveFilter
        {
            get
            {
                return _isActiveFilter;
            }
            set
            {
                _isActiveFilter = value;
				NotifyPropertyChanged(x => IsActiveFilter);
                FilterData();
                
            }
        }	

 

		private string _emailFilter;
        public string EmailFilter
        {
            get
            {
                return _emailFilter;
            }
            set
            {
                _emailFilter = value;
				NotifyPropertyChanged(x => EmailFilter);
                FilterData();
                
            }
        }	

 

		private string _emailPasswordFilter;
        public string EmailPasswordFilter
        {
            get
            {
                return _emailPasswordFilter;
            }
            set
            {
                _emailPasswordFilter = value;
				NotifyPropertyChanged(x => EmailPasswordFilter);
                FilterData();
                
            }
        }	

 

		private string _asycudaLoginFilter;
        public string AsycudaLoginFilter
        {
            get
            {
                return _asycudaLoginFilter;
            }
            set
            {
                _asycudaLoginFilter = value;
				NotifyPropertyChanged(x => AsycudaLoginFilter);
                FilterData();
                
            }
        }	

 

		private string _asycudaPasswordFilter;
        public string AsycudaPasswordFilter
        {
            get
            {
                return _asycudaPasswordFilter;
            }
            set
            {
                _asycudaPasswordFilter = value;
				NotifyPropertyChanged(x => AsycudaPasswordFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _assessIM7Filter;
        public Boolean? AssessIM7Filter
        {
            get
            {
                return _assessIM7Filter;
            }
            set
            {
                _assessIM7Filter = value;
				NotifyPropertyChanged(x => AssessIM7Filter);
                FilterData();
                
            }
        }	

 

		private Boolean? _assessEXFilter;
        public Boolean? AssessEXFilter
        {
            get
            {
                return _assessEXFilter;
            }
            set
            {
                _assessEXFilter = value;
				NotifyPropertyChanged(x => AssessEXFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			ApplicationSettings.Refresh();
			NotifyPropertyChanged(x => this.ApplicationSettings);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(DescriptionFilter) == false)
						res.Append(" && " + string.Format("Description.Contains(\"{0}\")",  DescriptionFilter));						
 

					if(MaxEntryLinesFilter.HasValue)
						res.Append(" && " + string.Format("MaxEntryLines == {0}",  MaxEntryLinesFilter.ToString()));				 

									if(string.IsNullOrEmpty(SoftwareNameFilter) == false)
						res.Append(" && " + string.Format("SoftwareName.Contains(\"{0}\")",  SoftwareNameFilter));						
 

									if(string.IsNullOrEmpty(AllowCounterPointFilter) == false)
						res.Append(" && " + string.Format("AllowCounterPoint.Contains(\"{0}\")",  AllowCounterPointFilter));						
 

									if(GroupEX9Filter.HasValue)
						res.Append(" && " + string.Format("GroupEX9 == {0}",  GroupEX9Filter));						
 

									if(InvoicePerEntryFilter.HasValue)
						res.Append(" && " + string.Format("InvoicePerEntry == {0}",  InvoicePerEntryFilter));						
 

									if(string.IsNullOrEmpty(AllowTariffCodesFilter) == false)
						res.Append(" && " + string.Format("AllowTariffCodes.Contains(\"{0}\")",  AllowTariffCodesFilter));						
 

									if(string.IsNullOrEmpty(AllowWareHouseFilter) == false)
						res.Append(" && " + string.Format("AllowWareHouse.Contains(\"{0}\")",  AllowWareHouseFilter));						
 

									if(string.IsNullOrEmpty(AllowXBondFilter) == false)
						res.Append(" && " + string.Format("AllowXBond.Contains(\"{0}\")",  AllowXBondFilter));						
 

									if(string.IsNullOrEmpty(AllowAsycudaManagerFilter) == false)
						res.Append(" && " + string.Format("AllowAsycudaManager.Contains(\"{0}\")",  AllowAsycudaManagerFilter));						
 

									if(string.IsNullOrEmpty(AllowQuickBooksFilter) == false)
						res.Append(" && " + string.Format("AllowQuickBooks.Contains(\"{0}\")",  AllowQuickBooksFilter));						
 

									if(ItemDescriptionContainsAsycudaAttributeFilter.HasValue)
						res.Append(" && " + string.Format("ItemDescriptionContainsAsycudaAttribute == {0}",  ItemDescriptionContainsAsycudaAttributeFilter));						
 

									if(string.IsNullOrEmpty(AllowExportToExcelFilter) == false)
						res.Append(" && " + string.Format("AllowExportToExcel.Contains(\"{0}\")",  AllowExportToExcelFilter));						
 

									if(string.IsNullOrEmpty(AllowAutoWeightCalculationFilter) == false)
						res.Append(" && " + string.Format("AllowAutoWeightCalculation.Contains(\"{0}\")",  AllowAutoWeightCalculationFilter));						
 

									if(string.IsNullOrEmpty(AllowEntryPerIM7Filter) == false)
						res.Append(" && " + string.Format("AllowEntryPerIM7.Contains(\"{0}\")",  AllowEntryPerIM7Filter));						
 

									if(string.IsNullOrEmpty(AllowSalesToPIFilter) == false)
						res.Append(" && " + string.Format("AllowSalesToPI.Contains(\"{0}\")",  AllowSalesToPIFilter));						
 

									if(string.IsNullOrEmpty(AllowEffectiveAssessmentDateFilter) == false)
						res.Append(" && " + string.Format("AllowEffectiveAssessmentDate.Contains(\"{0}\")",  AllowEffectiveAssessmentDateFilter));						
 

									if(string.IsNullOrEmpty(AllowAutoFreightCalculationFilter) == false)
						res.Append(" && " + string.Format("AllowAutoFreightCalculation.Contains(\"{0}\")",  AllowAutoFreightCalculationFilter));						
 

									if(string.IsNullOrEmpty(AllowSubItemsFilter) == false)
						res.Append(" && " + string.Format("AllowSubItems.Contains(\"{0}\")",  AllowSubItemsFilter));						
 

									if(string.IsNullOrEmpty(AllowEntryDoNotAllocateFilter) == false)
						res.Append(" && " + string.Format("AllowEntryDoNotAllocate.Contains(\"{0}\")",  AllowEntryDoNotAllocateFilter));						
 

									if(string.IsNullOrEmpty(AllowPreviousItemsFilter) == false)
						res.Append(" && " + string.Format("AllowPreviousItems.Contains(\"{0}\")",  AllowPreviousItemsFilter));						
 

									if(string.IsNullOrEmpty(AllowOversShortFilter) == false)
						res.Append(" && " + string.Format("AllowOversShort.Contains(\"{0}\")",  AllowOversShortFilter));						
 

									if(string.IsNullOrEmpty(AllowContainersFilter) == false)
						res.Append(" && " + string.Format("AllowContainers.Contains(\"{0}\")",  AllowContainersFilter));						
 

									if(string.IsNullOrEmpty(AllowNonXEntriesFilter) == false)
						res.Append(" && " + string.Format("AllowNonXEntries.Contains(\"{0}\")",  AllowNonXEntriesFilter));						
 

									if(string.IsNullOrEmpty(AllowValidateTariffCodesFilter) == false)
						res.Append(" && " + string.Format("AllowValidateTariffCodes.Contains(\"{0}\")",  AllowValidateTariffCodesFilter));						
 

									if(string.IsNullOrEmpty(AllowCleanBondFilter) == false)
						res.Append(" && " + string.Format("AllowCleanBond.Contains(\"{0}\")",  AllowCleanBondFilter));						
 

									if(string.IsNullOrEmpty(OrderEntriesByFilter) == false)
						res.Append(" && " + string.Format("OrderEntriesBy.Contains(\"{0}\")",  OrderEntriesByFilter));						
 

 

				if (Convert.ToDateTime(StartOpeningStockDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndOpeningStockDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartOpeningStockDateFilter).Date != DateTime.MinValue)
						{
							if(StartOpeningStockDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndOpeningStockDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("OpeningStockDate >= \"{0}\"",  Convert.ToDateTime(StartOpeningStockDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndOpeningStockDateFilter).Date != DateTime.MinValue)
						{
							if(EndOpeningStockDateFilter.HasValue)
								res.Append(" && " + string.Format("OpeningStockDate <= \"{0}\"",  Convert.ToDateTime(EndOpeningStockDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartOpeningStockDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndOpeningStockDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_openingStockDateFilter).Date != DateTime.MinValue)
						{
							if(OpeningStockDateFilter.HasValue)
								res.Append(" && " + string.Format("OpeningStockDate == \"{0}\"",  Convert.ToDateTime(OpeningStockDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(DeclarantCodeFilter) == false)
						res.Append(" && " + string.Format("DeclarantCode.Contains(\"{0}\")",  DeclarantCodeFilter));						
 

									if(string.IsNullOrEmpty(WeightCalculationMethodFilter) == false)
						res.Append(" && " + string.Format("WeightCalculationMethod.Contains(\"{0}\")",  WeightCalculationMethodFilter));						
 

					if(BondQuantumFilter.HasValue)
						res.Append(" && " + string.Format("BondQuantum == {0}",  BondQuantumFilter.ToString()));				 

									if(string.IsNullOrEmpty(DataFolderFilter) == false)
						res.Append(" && " + string.Format("DataFolder.Contains(\"{0}\")",  DataFolderFilter));						
 

									if(string.IsNullOrEmpty(CompanyNameFilter) == false)
						res.Append(" && " + string.Format("CompanyName.Contains(\"{0}\")",  CompanyNameFilter));						
 

									if(IsActiveFilter.HasValue)
						res.Append(" && " + string.Format("IsActive == {0}",  IsActiveFilter));						
 

									if(string.IsNullOrEmpty(EmailFilter) == false)
						res.Append(" && " + string.Format("Email.Contains(\"{0}\")",  EmailFilter));						
 

									if(string.IsNullOrEmpty(EmailPasswordFilter) == false)
						res.Append(" && " + string.Format("EmailPassword.Contains(\"{0}\")",  EmailPasswordFilter));						
 

									if(string.IsNullOrEmpty(AsycudaLoginFilter) == false)
						res.Append(" && " + string.Format("AsycudaLogin.Contains(\"{0}\")",  AsycudaLoginFilter));						
 

									if(string.IsNullOrEmpty(AsycudaPasswordFilter) == false)
						res.Append(" && " + string.Format("AsycudaPassword.Contains(\"{0}\")",  AsycudaPasswordFilter));						
 

									if(AssessIM7Filter.HasValue)
						res.Append(" && " + string.Format("AssessIM7 == {0}",  AssessIM7Filter));						
 

									if(AssessEXFilter.HasValue)
						res.Append(" && " + string.Format("AssessEX == {0}",  AssessEXFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<ApplicationSettings> lst = null;
            using (var ctx = new ApplicationSettingsRepository())
            {
                lst = await ctx.GetApplicationSettingsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<ApplicationSettingsExcelLine, List<ApplicationSettingsExcelLine>>
            {
                dataToPrint = lst.Select(x => new ApplicationSettingsExcelLine
                {
 
                    Description = x.Description ,
                    
 
                    MaxEntryLines = x.MaxEntryLines ,
                    
 
                    SoftwareName = x.SoftwareName ,
                    
 
                    AllowCounterPoint = x.AllowCounterPoint ,
                    
 
                    GroupEX9 = x.GroupEX9 ,
                    
 
                    InvoicePerEntry = x.InvoicePerEntry ,
                    
 
                    AllowTariffCodes = x.AllowTariffCodes ,
                    
 
                    AllowWareHouse = x.AllowWareHouse ,
                    
 
                    AllowXBond = x.AllowXBond ,
                    
 
                    AllowAsycudaManager = x.AllowAsycudaManager ,
                    
 
                    AllowQuickBooks = x.AllowQuickBooks ,
                    
 
                    ItemDescriptionContainsAsycudaAttribute = x.ItemDescriptionContainsAsycudaAttribute ,
                    
 
                    AllowExportToExcel = x.AllowExportToExcel ,
                    
 
                    AllowAutoWeightCalculation = x.AllowAutoWeightCalculation ,
                    
 
                    AllowEntryPerIM7 = x.AllowEntryPerIM7 ,
                    
 
                    AllowSalesToPI = x.AllowSalesToPI ,
                    
 
                    AllowEffectiveAssessmentDate = x.AllowEffectiveAssessmentDate ,
                    
 
                    AllowAutoFreightCalculation = x.AllowAutoFreightCalculation ,
                    
 
                    AllowSubItems = x.AllowSubItems ,
                    
 
                    AllowEntryDoNotAllocate = x.AllowEntryDoNotAllocate ,
                    
 
                    AllowPreviousItems = x.AllowPreviousItems ,
                    
 
                    AllowOversShort = x.AllowOversShort ,
                    
 
                    AllowContainers = x.AllowContainers ,
                    
 
                    AllowNonXEntries = x.AllowNonXEntries ,
                    
 
                    AllowValidateTariffCodes = x.AllowValidateTariffCodes ,
                    
 
                    AllowCleanBond = x.AllowCleanBond ,
                    
 
                    OrderEntriesBy = x.OrderEntriesBy ,
                    
 
                    OpeningStockDate = x.OpeningStockDate ,
                    
 
                    DeclarantCode = x.DeclarantCode ,
                    
 
                    WeightCalculationMethod = x.WeightCalculationMethod ,
                    
 
                    BondQuantum = x.BondQuantum ,
                    
 
                    DataFolder = x.DataFolder ,
                    
 
                    CompanyName = x.CompanyName ,
                    
 
                    IsActive = x.IsActive ,
                    
 
                    Email = x.Email ,
                    
 
                    EmailPassword = x.EmailPassword ,
                    
 
                    AsycudaLogin = x.AsycudaLogin ,
                    
 
                    AsycudaPassword = x.AsycudaPassword ,
                    
 
                    AssessIM7 = x.AssessIM7 ,
                    
 
                    AssessEX = x.AssessEX 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class ApplicationSettingsExcelLine
        {
		 
                    public string Description { get; set; } 
                    
 
                    public Nullable<int> MaxEntryLines { get; set; } 
                    
 
                    public string SoftwareName { get; set; } 
                    
 
                    public string AllowCounterPoint { get; set; } 
                    
 
                    public Nullable<bool> GroupEX9 { get; set; } 
                    
 
                    public Nullable<bool> InvoicePerEntry { get; set; } 
                    
 
                    public string AllowTariffCodes { get; set; } 
                    
 
                    public string AllowWareHouse { get; set; } 
                    
 
                    public string AllowXBond { get; set; } 
                    
 
                    public string AllowAsycudaManager { get; set; } 
                    
 
                    public string AllowQuickBooks { get; set; } 
                    
 
                    public Nullable<bool> ItemDescriptionContainsAsycudaAttribute { get; set; } 
                    
 
                    public string AllowExportToExcel { get; set; } 
                    
 
                    public string AllowAutoWeightCalculation { get; set; } 
                    
 
                    public string AllowEntryPerIM7 { get; set; } 
                    
 
                    public string AllowSalesToPI { get; set; } 
                    
 
                    public string AllowEffectiveAssessmentDate { get; set; } 
                    
 
                    public string AllowAutoFreightCalculation { get; set; } 
                    
 
                    public string AllowSubItems { get; set; } 
                    
 
                    public string AllowEntryDoNotAllocate { get; set; } 
                    
 
                    public string AllowPreviousItems { get; set; } 
                    
 
                    public string AllowOversShort { get; set; } 
                    
 
                    public string AllowContainers { get; set; } 
                    
 
                    public string AllowNonXEntries { get; set; } 
                    
 
                    public string AllowValidateTariffCodes { get; set; } 
                    
 
                    public string AllowCleanBond { get; set; } 
                    
 
                    public string OrderEntriesBy { get; set; } 
                    
 
                    public Nullable<System.DateTime> OpeningStockDate { get; set; } 
                    
 
                    public string DeclarantCode { get; set; } 
                    
 
                    public string WeightCalculationMethod { get; set; } 
                    
 
                    public Nullable<double> BondQuantum { get; set; } 
                    
 
                    public string DataFolder { get; set; } 
                    
 
                    public string CompanyName { get; set; } 
                    
 
                    public Nullable<bool> IsActive { get; set; } 
                    
 
                    public string Email { get; set; } 
                    
 
                    public string EmailPassword { get; set; } 
                    
 
                    public string AsycudaLogin { get; set; } 
                    
 
                    public string AsycudaPassword { get; set; } 
                    
 
                    public Nullable<bool> AssessIM7 { get; set; } 
                    
 
                    public Nullable<bool> AssessEX { get; set; } 
                    
        }

		
    }
}
		

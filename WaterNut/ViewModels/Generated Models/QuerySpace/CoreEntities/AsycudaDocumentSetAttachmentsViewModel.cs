// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class AsycudaDocumentSetAttachmentsViewModel_AutoGen : ViewModelBase<AsycudaDocumentSetAttachmentsViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentSetAttachmentsViewModel_AutoGen instance;
       static AsycudaDocumentSetAttachmentsViewModel_AutoGen()
        {
            instance = new AsycudaDocumentSetAttachmentsViewModel_AutoGen();
        }

       public static AsycudaDocumentSetAttachmentsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentSetAttachmentsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentSetAttachments>(MessageToken.CurrentAsycudaDocumentSetAttachmentsChanged, OnCurrentAsycudaDocumentSetAttachmentsChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetAttachmentsChanged, OnAsycudaDocumentSetAttachmentsChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetAttachmentsFilterExpressionChanged, OnAsycudaDocumentSetAttachmentsFilterExpressionChanged);

 
			RegisterToReceiveMessages<FileTypes>(MessageToken.CurrentFileTypesChanged, OnCurrentFileTypesChanged);
 
			RegisterToReceiveMessages<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, OnCurrentAsycudaDocumentSetExChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentSetAttachments = new VirtualList<AsycudaDocumentSetAttachments>(vloader);
			AsycudaDocumentSetAttachments.LoadingStateChanged += AsycudaDocumentSetAttachments_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentSetAttachments, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentSetAttachments> _AsycudaDocumentSetAttachments = null;
        public VirtualList<AsycudaDocumentSetAttachments> AsycudaDocumentSetAttachments
        {
            get
            {
                return _AsycudaDocumentSetAttachments;
            }
            set
            {
                _AsycudaDocumentSetAttachments = value;
                NotifyPropertyChanged( x => x.AsycudaDocumentSetAttachments);
            }
        }

		 private void OnAsycudaDocumentSetAttachmentsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => AsycudaDocumentSetAttachments.Refresh()).ConfigureAwait(false);
            SelectedAsycudaDocumentSetAttachments.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentSetAttachments);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetAttachmentsChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetAttachmentsChanged));
        }

		void AsycudaDocumentSetAttachments_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentSetAttachments.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentSetAttachments);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentSetAttachments | Error occured..." + AsycudaDocumentSetAttachments.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentSetAttachments);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentSetAttachmentsVirturalListLoader vloader = new AsycudaDocumentSetAttachmentsVirturalListLoader();

		private ObservableCollection<AsycudaDocumentSetAttachments> _selectedAsycudaDocumentSetAttachments = new ObservableCollection<AsycudaDocumentSetAttachments>();
        public ObservableCollection<AsycudaDocumentSetAttachments> SelectedAsycudaDocumentSetAttachments
        {
            get
            {
                return _selectedAsycudaDocumentSetAttachments;
            }
            set
            {
                _selectedAsycudaDocumentSetAttachments = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetAttachmentsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetAttachmentsChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentSetAttachments);
            }
        }

        internal virtual void OnCurrentAsycudaDocumentSetAttachmentsChanged(object sender, NotificationEventArgs<AsycudaDocumentSetAttachments> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentSetAttachments != null) BaseViewModel.Instance.CurrentAsycudaDocumentSetAttachments.PropertyChanged += CurrentAsycudaDocumentSetAttachments__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetAttachments);
        }   

            void CurrentAsycudaDocumentSetAttachments__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddFileTypes")
                   // {
                   //    if(FileTypes.Contains(CurrentAsycudaDocumentSetAttachments.FileTypes) == false) FileTypes.Add(CurrentAsycudaDocumentSetAttachments.FileTypes);
                    //}
                    //if (e.PropertyName == "AddAsycudaDocumentSetEx")
                   // {
                   //    if(AsycudaDocumentSetExs.Contains(CurrentAsycudaDocumentSetAttachments.AsycudaDocumentSetEx) == false) AsycudaDocumentSetExs.Add(CurrentAsycudaDocumentSetAttachments.AsycudaDocumentSetEx);
                    //}
                 } 
        internal virtual void OnAsycudaDocumentSetAttachmentsChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentSetAttachments.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetAttachments);
        }   


 	
		 internal virtual void OnCurrentFileTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypes> e)
			{
			if(ViewCurrentFileTypes == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("FileTypeId == {0}", e.Data.Id.ToString());
                 }

				AsycudaDocumentSetAttachments.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentSetAttachments);
                // SendMessage(MessageToken.AsycudaDocumentSetAttachmentsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentSetAttachmentsChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocumentSetAttachments = null;
			}
	
		 internal virtual void OnCurrentAsycudaDocumentSetExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEx> e)
			{
			if(ViewCurrentAsycudaDocumentSetEx == false) return;
			if (e.Data == null || e.Data.AsycudaDocumentSetId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("AsycudaDocumentSetId == {0}", e.Data.AsycudaDocumentSetId.ToString());
                 }

				AsycudaDocumentSetAttachments.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentSetAttachments);
                // SendMessage(MessageToken.AsycudaDocumentSetAttachmentsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentSetAttachmentsChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocumentSetAttachments = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentFileTypes = false;
         public bool ViewCurrentFileTypes
         {
             get
             {
                 return _viewCurrentFileTypes;
             }
             set
             {
                 _viewCurrentFileTypes = value;
                 NotifyPropertyChanged(x => x.ViewCurrentFileTypes);
                FilterData();
             }
         }
 	
		 bool _viewCurrentAsycudaDocumentSetEx = false;
         public bool ViewCurrentAsycudaDocumentSetEx
         {
             get
             {
                 return _viewCurrentAsycudaDocumentSetEx;
             }
             set
             {
                 _viewCurrentAsycudaDocumentSetEx = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocumentSetEx);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_AsycudaDocumentSetAttachments.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetAttachments);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentSetAttachments> lst = null;
            using (var ctx = new AsycudaDocumentSetAttachmentsRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetAttachmentsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentSetAttachments = new ObservableCollection<AsycudaDocumentSetAttachments>(lst);
        }

 

		private string _declarant_Reference_NumberFilter;
        public string Declarant_Reference_NumberFilter
        {
            get
            {
                return _declarant_Reference_NumberFilter;
            }
            set
            {
                _declarant_Reference_NumberFilter = value;
				NotifyPropertyChanged(x => Declarant_Reference_NumberFilter);
                FilterData();
                
            }
        }	

 

		private string _descriptionFilter;
        public string DescriptionFilter
        {
            get
            {
                return _descriptionFilter;
            }
            set
            {
                _descriptionFilter = value;
				NotifyPropertyChanged(x => DescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _filePathFilter;
        public string FilePathFilter
        {
            get
            {
                return _filePathFilter;
            }
            set
            {
                _filePathFilter = value;
				NotifyPropertyChanged(x => FilePathFilter);
                FilterData();
                
            }
        }	

 

		private string _documentCodeFilter;
        public string DocumentCodeFilter
        {
            get
            {
                return _documentCodeFilter;
            }
            set
            {
                _documentCodeFilter = value;
				NotifyPropertyChanged(x => DocumentCodeFilter);
                FilterData();
                
            }
        }	

 

		private string _referenceFilter;
        public string ReferenceFilter
        {
            get
            {
                return _referenceFilter;
            }
            set
            {
                _referenceFilter = value;
				NotifyPropertyChanged(x => ReferenceFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentSetAttachments.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetAttachments);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(Declarant_Reference_NumberFilter) == false)
						res.Append(" && " + string.Format("Declarant_Reference_Number.Contains(\"{0}\")",  Declarant_Reference_NumberFilter));						
 

									if(string.IsNullOrEmpty(DescriptionFilter) == false)
						res.Append(" && " + string.Format("Description.Contains(\"{0}\")",  DescriptionFilter));						
 

									if(string.IsNullOrEmpty(FilePathFilter) == false)
						res.Append(" && " + string.Format("FilePath.Contains(\"{0}\")",  FilePathFilter));						
 

									if(string.IsNullOrEmpty(DocumentCodeFilter) == false)
						res.Append(" && " + string.Format("DocumentCode.Contains(\"{0}\")",  DocumentCodeFilter));						
 

									if(string.IsNullOrEmpty(ReferenceFilter) == false)
						res.Append(" && " + string.Format("Reference.Contains(\"{0}\")",  ReferenceFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentSetAttachments> lst = null;
            using (var ctx = new AsycudaDocumentSetAttachmentsRepository())
            {
                lst = await ctx.GetAsycudaDocumentSetAttachmentsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentSetAttachmentsExcelLine, List<AsycudaDocumentSetAttachmentsExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentSetAttachmentsExcelLine
                {
 
                    Declarant_Reference_Number = x.Declarant_Reference_Number ,
                    
 
                    Description = x.Description ,
                    
 
                    FilePath = x.FilePath ,
                    
 
                    DocumentCode = x.DocumentCode ,
                    
 
                    Reference = x.Reference 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class AsycudaDocumentSetAttachmentsExcelLine
        {
		 
                    public string Declarant_Reference_Number { get; set; } 
                    
 
                    public string Description { get; set; } 
                    
 
                    public string FilePath { get; set; } 
                    
 
                    public string DocumentCode { get; set; } 
                    
 
                    public string Reference { get; set; } 
                    
        }

		
    }
}
		

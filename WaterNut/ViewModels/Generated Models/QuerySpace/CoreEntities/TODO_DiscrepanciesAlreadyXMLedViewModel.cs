// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_DiscrepanciesAlreadyXMLedViewModel_AutoGen : ViewModelBase<TODO_DiscrepanciesAlreadyXMLedViewModel_AutoGen>
	{

       private static readonly TODO_DiscrepanciesAlreadyXMLedViewModel_AutoGen instance;
       static TODO_DiscrepanciesAlreadyXMLedViewModel_AutoGen()
        {
            instance = new TODO_DiscrepanciesAlreadyXMLedViewModel_AutoGen();
        }

       public static TODO_DiscrepanciesAlreadyXMLedViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_DiscrepanciesAlreadyXMLedViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_DiscrepanciesAlreadyXMLed>(MessageToken.CurrentTODO_DiscrepanciesAlreadyXMLedChanged, OnCurrentTODO_DiscrepanciesAlreadyXMLedChanged);
            RegisterToReceiveMessages(MessageToken.TODO_DiscrepanciesAlreadyXMLedChanged, OnTODO_DiscrepanciesAlreadyXMLedChanged);
			RegisterToReceiveMessages(MessageToken.TODO_DiscrepanciesAlreadyXMLedFilterExpressionChanged, OnTODO_DiscrepanciesAlreadyXMLedFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_DiscrepanciesAlreadyXMLed = new VirtualList<TODO_DiscrepanciesAlreadyXMLed>(vloader);
			TODO_DiscrepanciesAlreadyXMLed.LoadingStateChanged += TODO_DiscrepanciesAlreadyXMLed_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_DiscrepanciesAlreadyXMLed, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_DiscrepanciesAlreadyXMLed> _TODO_DiscrepanciesAlreadyXMLed = null;
        public VirtualList<TODO_DiscrepanciesAlreadyXMLed> TODO_DiscrepanciesAlreadyXMLed
        {
            get
            {
                return _TODO_DiscrepanciesAlreadyXMLed;
            }
            set
            {
                _TODO_DiscrepanciesAlreadyXMLed = value;
            }
        }

		 private void OnTODO_DiscrepanciesAlreadyXMLedFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			TODO_DiscrepanciesAlreadyXMLed.Refresh();
            SelectedTODO_DiscrepanciesAlreadyXMLed.Clear();
            NotifyPropertyChanged(x => SelectedTODO_DiscrepanciesAlreadyXMLed);
            BeginSendMessage(MessageToken.SelectedTODO_DiscrepanciesAlreadyXMLedChanged, new NotificationEventArgs(MessageToken.SelectedTODO_DiscrepanciesAlreadyXMLedChanged));
        }

		void TODO_DiscrepanciesAlreadyXMLed_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_DiscrepanciesAlreadyXMLed.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_DiscrepanciesAlreadyXMLed);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_DiscrepanciesAlreadyXMLed | Error occured..." + TODO_DiscrepanciesAlreadyXMLed.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_DiscrepanciesAlreadyXMLed);
                    break;
            }
           
        }

		
		public readonly TODO_DiscrepanciesAlreadyXMLedVirturalListLoader vloader = new TODO_DiscrepanciesAlreadyXMLedVirturalListLoader();

		private ObservableCollection<TODO_DiscrepanciesAlreadyXMLed> _selectedTODO_DiscrepanciesAlreadyXMLed = new ObservableCollection<TODO_DiscrepanciesAlreadyXMLed>();
        public ObservableCollection<TODO_DiscrepanciesAlreadyXMLed> SelectedTODO_DiscrepanciesAlreadyXMLed
        {
            get
            {
                return _selectedTODO_DiscrepanciesAlreadyXMLed;
            }
            set
            {
                _selectedTODO_DiscrepanciesAlreadyXMLed = value;
				BeginSendMessage(MessageToken.SelectedTODO_DiscrepanciesAlreadyXMLedChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_DiscrepanciesAlreadyXMLedChanged));
				 NotifyPropertyChanged(x => SelectedTODO_DiscrepanciesAlreadyXMLed);
            }
        }

        internal virtual void OnCurrentTODO_DiscrepanciesAlreadyXMLedChanged(object sender, NotificationEventArgs<TODO_DiscrepanciesAlreadyXMLed> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_DiscrepanciesAlreadyXMLed != null) BaseViewModel.Instance.CurrentTODO_DiscrepanciesAlreadyXMLed.PropertyChanged += CurrentTODO_DiscrepanciesAlreadyXMLed__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_DiscrepanciesAlreadyXMLed);
        }   

            void CurrentTODO_DiscrepanciesAlreadyXMLed__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnTODO_DiscrepanciesAlreadyXMLedChanged(object sender, NotificationEventArgs e)
        {
            _TODO_DiscrepanciesAlreadyXMLed.Refresh();
			NotifyPropertyChanged(x => this.TODO_DiscrepanciesAlreadyXMLed);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_DiscrepanciesAlreadyXMLed.Refresh();
			NotifyPropertyChanged(x => this.TODO_DiscrepanciesAlreadyXMLed);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_DiscrepanciesAlreadyXMLed> lst = null;
            using (var ctx = new TODO_DiscrepanciesAlreadyXMLedRepository())
            {
                lst = await ctx.GetTODO_DiscrepanciesAlreadyXMLedByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_DiscrepanciesAlreadyXMLed = new ObservableCollection<TODO_DiscrepanciesAlreadyXMLed>(lst);
        }

 

		private Boolean? _isClassifiedFilter;
        public Boolean? IsClassifiedFilter
        {
            get
            {
                return _isClassifiedFilter;
            }
            set
            {
                _isClassifiedFilter = value;
				NotifyPropertyChanged(x => IsClassifiedFilter);
                FilterData();
                
            }
        }	

 

		private string _adjustmentTypeFilter;
        public string AdjustmentTypeFilter
        {
            get
            {
                return _adjustmentTypeFilter;
            }
            set
            {
                _adjustmentTypeFilter = value;
				NotifyPropertyChanged(x => AdjustmentTypeFilter);
                FilterData();
                
            }
        }	

 

		private string _invoiceNoFilter;
        public string InvoiceNoFilter
        {
            get
            {
                return _invoiceNoFilter;
            }
            set
            {
                _invoiceNoFilter = value;
				NotifyPropertyChanged(x => InvoiceNoFilter);
                FilterData();
                
            }
        }	

 

		private Double? _invoiceQtyFilter;
        public Double? InvoiceQtyFilter
        {
            get
            {
                return _invoiceQtyFilter;
            }
            set
            {
                _invoiceQtyFilter = value;
				NotifyPropertyChanged(x => InvoiceQtyFilter);
                FilterData();
                
            }
        }	

 

		private Double? _receivedQtyFilter;
        public Double? ReceivedQtyFilter
        {
            get
            {
                return _receivedQtyFilter;
            }
            set
            {
                _receivedQtyFilter = value;
				NotifyPropertyChanged(x => ReceivedQtyFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startInvoiceDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartInvoiceDateFilter
        {
            get
            {
                return _startInvoiceDateFilter;
            }
            set
            {
                _startInvoiceDateFilter = value;
				NotifyPropertyChanged(x => StartInvoiceDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endInvoiceDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndInvoiceDateFilter
        {
            get
            {
                return _endInvoiceDateFilter;
            }
            set
            {
                _endInvoiceDateFilter = value;
				NotifyPropertyChanged(x => EndInvoiceDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _invoiceDateFilter;
        public DateTime? InvoiceDateFilter
        {
            get
            {
                return _invoiceDateFilter;
            }
            set
            {
                _invoiceDateFilter = value;
				NotifyPropertyChanged(x => InvoiceDateFilter);
                FilterData();
                
            }
        }	

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _statusFilter;
        public string StatusFilter
        {
            get
            {
                return _statusFilter;
            }
            set
            {
                _statusFilter = value;
				NotifyPropertyChanged(x => StatusFilter);
                FilterData();
                
            }
        }	

 

		private string _cNumberFilter;
        public string CNumberFilter
        {
            get
            {
                return _cNumberFilter;
            }
            set
            {
                _cNumberFilter = value;
				NotifyPropertyChanged(x => CNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _declarant_Reference_NumberFilter;
        public string Declarant_Reference_NumberFilter
        {
            get
            {
                return _declarant_Reference_NumberFilter;
            }
            set
            {
                _declarant_Reference_NumberFilter = value;
				NotifyPropertyChanged(x => Declarant_Reference_NumberFilter);
                FilterData();
                
            }
        }	

 

		private string _pCNumberFilter;
        public string pCNumberFilter
        {
            get
            {
                return _pCNumberFilter;
            }
            set
            {
                _pCNumberFilter = value;
				NotifyPropertyChanged(x => pCNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartRegistrationDateFilter
        {
            get
            {
                return _startRegistrationDateFilter;
            }
            set
            {
                _startRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndRegistrationDateFilter
        {
            get
            {
                return _endRegistrationDateFilter;
            }
            set
            {
                _endRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _registrationDateFilter;
        public DateTime? RegistrationDateFilter
        {
            get
            {
                return _registrationDateFilter;
            }
            set
            {
                _registrationDateFilter = value;
				NotifyPropertyChanged(x => RegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private string _referenceNumberFilter;
        public string ReferenceNumberFilter
        {
            get
            {
                return _referenceNumberFilter;
            }
            set
            {
                _referenceNumberFilter = value;
				NotifyPropertyChanged(x => ReferenceNumberFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_DiscrepanciesAlreadyXMLed.Refresh();
			NotifyPropertyChanged(x => this.TODO_DiscrepanciesAlreadyXMLed);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(IsClassifiedFilter.HasValue)
						res.Append(" && " + string.Format("IsClassified == {0}",  IsClassifiedFilter));						
 

									if(string.IsNullOrEmpty(AdjustmentTypeFilter) == false)
						res.Append(" && " + string.Format("AdjustmentType.Contains(\"{0}\")",  AdjustmentTypeFilter));						
 

									if(string.IsNullOrEmpty(InvoiceNoFilter) == false)
						res.Append(" && " + string.Format("InvoiceNo.Contains(\"{0}\")",  InvoiceNoFilter));						
 

					if(InvoiceQtyFilter.HasValue)
						res.Append(" && " + string.Format("InvoiceQty == {0}",  InvoiceQtyFilter.ToString()));				 

					if(ReceivedQtyFilter.HasValue)
						res.Append(" && " + string.Format("ReceivedQty == {0}",  ReceivedQtyFilter.ToString()));				 

 

				if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue)
						{
							if(StartInvoiceDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("InvoiceDate >= \"{0}\"",  Convert.ToDateTime(StartInvoiceDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue)
						{
							if(EndInvoiceDateFilter.HasValue)
								res.Append(" && " + string.Format("InvoiceDate <= \"{0}\"",  Convert.ToDateTime(EndInvoiceDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_invoiceDateFilter).Date != DateTime.MinValue)
						{
							if(InvoiceDateFilter.HasValue)
								res.Append(" && " + string.Format("InvoiceDate == \"{0}\"",  Convert.ToDateTime(InvoiceDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(StatusFilter) == false)
						res.Append(" && " + string.Format("Status.Contains(\"{0}\")",  StatusFilter));						
 

									if(string.IsNullOrEmpty(CNumberFilter) == false)
						res.Append(" && " + string.Format("CNumber.Contains(\"{0}\")",  CNumberFilter));						
 

									if(string.IsNullOrEmpty(Declarant_Reference_NumberFilter) == false)
						res.Append(" && " + string.Format("Declarant_Reference_Number.Contains(\"{0}\")",  Declarant_Reference_NumberFilter));						
 

									if(string.IsNullOrEmpty(pCNumberFilter) == false)
						res.Append(" && " + string.Format("pCNumber.Contains(\"{0}\")",  pCNumberFilter));						
 

 

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("RegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_registrationDateFilter).Date != DateTime.MinValue)
						{
							if(RegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate == \"{0}\"",  Convert.ToDateTime(RegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(ReferenceNumberFilter) == false)
						res.Append(" && " + string.Format("ReferenceNumber.Contains(\"{0}\")",  ReferenceNumberFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_DiscrepanciesAlreadyXMLed> lst = null;
            using (var ctx = new TODO_DiscrepanciesAlreadyXMLedRepository())
            {
                lst = await ctx.GetTODO_DiscrepanciesAlreadyXMLedByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_DiscrepanciesAlreadyXMLedExcelLine, List<TODO_DiscrepanciesAlreadyXMLedExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_DiscrepanciesAlreadyXMLedExcelLine
                {
 
                    IsClassified = x.IsClassified ,
                    
 
                    AdjustmentType = x.AdjustmentType ,
                    
 
                    InvoiceNo = x.InvoiceNo ,
                    
 
                    InvoiceQty = x.InvoiceQty ,
                    
 
                    ReceivedQty = x.ReceivedQty ,
                    
 
                    InvoiceDate = x.InvoiceDate ,
                    
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    Status = x.Status ,
                    
 
                    CNumber = x.CNumber ,
                    
 
                    Declarant_Reference_Number = x.Declarant_Reference_Number ,
                    
 
                    pCNumber = x.pCNumber ,
                    
 
                    RegistrationDate = x.RegistrationDate ,
                    
 
                    ReferenceNumber = x.ReferenceNumber 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TODO_DiscrepanciesAlreadyXMLedExcelLine
        {
		 
                    public Nullable<bool> IsClassified { get; set; } 
                    
 
                    public string AdjustmentType { get; set; } 
                    
 
                    public string InvoiceNo { get; set; } 
                    
 
                    public Nullable<double> InvoiceQty { get; set; } 
                    
 
                    public Nullable<double> ReceivedQty { get; set; } 
                    
 
                    public System.DateTime InvoiceDate { get; set; } 
                    
 
                    public string ItemNumber { get; set; } 
                    
 
                    public string Status { get; set; } 
                    
 
                    public string CNumber { get; set; } 
                    
 
                    public string Declarant_Reference_Number { get; set; } 
                    
 
                    public string pCNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> RegistrationDate { get; set; } 
                    
 
                    public string ReferenceNumber { get; set; } 
                    
        }

		
    }
}
		

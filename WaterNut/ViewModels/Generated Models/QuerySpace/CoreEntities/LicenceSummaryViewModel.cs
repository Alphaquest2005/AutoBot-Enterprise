// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class LicenceSummaryViewModel_AutoGen : ViewModelBase<LicenceSummaryViewModel_AutoGen>
	{

       private static readonly LicenceSummaryViewModel_AutoGen instance;
       static LicenceSummaryViewModel_AutoGen()
        {
            instance = new LicenceSummaryViewModel_AutoGen();
        }

       public static LicenceSummaryViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public LicenceSummaryViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<LicenceSummary>(MessageToken.CurrentLicenceSummaryChanged, OnCurrentLicenceSummaryChanged);
            RegisterToReceiveMessages(MessageToken.LicenceSummaryChanged, OnLicenceSummaryChanged);
			RegisterToReceiveMessages(MessageToken.LicenceSummaryFilterExpressionChanged, OnLicenceSummaryFilterExpressionChanged);

 
			RegisterToReceiveMessages<AsycudaDocumentSetEx>(MessageToken.CurrentAsycudaDocumentSetExChanged, OnCurrentAsycudaDocumentSetExChanged);

 			// Recieve messages for Core Current Entities Changed
 

			LicenceSummary = new VirtualList<LicenceSummary>(vloader);
			LicenceSummary.LoadingStateChanged += LicenceSummary_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(LicenceSummary, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<LicenceSummary> _LicenceSummary = null;
        public VirtualList<LicenceSummary> LicenceSummary
        {
            get
            {
                return _LicenceSummary;
            }
            set
            {
                _LicenceSummary = value;
                NotifyPropertyChanged( x => x.LicenceSummary);
            }
        }

		 private void OnLicenceSummaryFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => LicenceSummary.Refresh()).ConfigureAwait(false);
            SelectedLicenceSummary.Clear();
            NotifyPropertyChanged(x => SelectedLicenceSummary);
            BeginSendMessage(MessageToken.SelectedLicenceSummaryChanged, new NotificationEventArgs(MessageToken.SelectedLicenceSummaryChanged));
        }

		void LicenceSummary_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (LicenceSummary.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => LicenceSummary);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("LicenceSummary | Error occured..." + LicenceSummary.LastLoadingError.Message);
                    NotifyPropertyChanged(x => LicenceSummary);
                    break;
            }
           
        }

		
		public readonly LicenceSummaryVirturalListLoader vloader = new LicenceSummaryVirturalListLoader();

		private ObservableCollection<LicenceSummary> _selectedLicenceSummary = new ObservableCollection<LicenceSummary>();
        public ObservableCollection<LicenceSummary> SelectedLicenceSummary
        {
            get
            {
                return _selectedLicenceSummary;
            }
            set
            {
                _selectedLicenceSummary = value;
				BeginSendMessage(MessageToken.SelectedLicenceSummaryChanged,
                                    new NotificationEventArgs(MessageToken.SelectedLicenceSummaryChanged));
				 NotifyPropertyChanged(x => SelectedLicenceSummary);
            }
        }

        internal virtual void OnCurrentLicenceSummaryChanged(object sender, NotificationEventArgs<LicenceSummary> e)
        {
            if(BaseViewModel.Instance.CurrentLicenceSummary != null) BaseViewModel.Instance.CurrentLicenceSummary.PropertyChanged += CurrentLicenceSummary__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentLicenceSummary);
        }   

            void CurrentLicenceSummary__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddAsycudaDocumentSetEx")
                   // {
                   //    if(AsycudaDocumentSetExs.Contains(CurrentLicenceSummary.AsycudaDocumentSetEx) == false) AsycudaDocumentSetExs.Add(CurrentLicenceSummary.AsycudaDocumentSetEx);
                    //}
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentLicenceSummary.ApplicationSettings) == false) ApplicationSettings.Add(CurrentLicenceSummary.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnLicenceSummaryChanged(object sender, NotificationEventArgs e)
        {
            _LicenceSummary.Refresh();
			NotifyPropertyChanged(x => this.LicenceSummary);
        }   


 	
		 internal virtual void OnCurrentAsycudaDocumentSetExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentSetEx> e)
			{
			if(ViewCurrentAsycudaDocumentSetEx == false) return;
			if (e.Data == null || e.Data.AsycudaDocumentSetId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("AsycudaDocumentSetId == {0}", e.Data.AsycudaDocumentSetId.ToString());
                 }

				LicenceSummary.Refresh();
				NotifyPropertyChanged(x => this.LicenceSummary);
                // SendMessage(MessageToken.LicenceSummaryChanged, new NotificationEventArgs(MessageToken.LicenceSummaryChanged));
                                          
                BaseViewModel.Instance.CurrentLicenceSummary = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    LicenceSummary.Refresh();
					NotifyPropertyChanged(x => this.LicenceSummary);
				}
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentAsycudaDocumentSetEx = false;
         public bool ViewCurrentAsycudaDocumentSetEx
         {
             get
             {
                 return _viewCurrentAsycudaDocumentSetEx;
             }
             set
             {
                 _viewCurrentAsycudaDocumentSetEx = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocumentSetEx);
                FilterData();
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_LicenceSummary.Refresh();
			NotifyPropertyChanged(x => this.LicenceSummary);
		}

		public async Task SelectAll()
        {
            IEnumerable<LicenceSummary> lst = null;
            using (var ctx = new LicenceSummaryRepository())
            {
                lst = await ctx.GetLicenceSummaryByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedLicenceSummary = new ObservableCollection<LicenceSummary>(lst);
        }

 

		private string _tariffCodeFilter;
        public string TariffCodeFilter
        {
            get
            {
                return _tariffCodeFilter;
            }
            set
            {
                _tariffCodeFilter = value;
				NotifyPropertyChanged(x => TariffCodeFilter);
                FilterData();
                
            }
        }	

 

		private Double? _quantityFilter;
        public Double? QuantityFilter
        {
            get
            {
                return _quantityFilter;
            }
            set
            {
                _quantityFilter = value;
				NotifyPropertyChanged(x => QuantityFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _totalFilter;
        public Int32? TotalFilter
        {
            get
            {
                return _totalFilter;
            }
            set
            {
                _totalFilter = value;
				NotifyPropertyChanged(x => TotalFilter);
                FilterData();
                
            }
        }	

 

		private string _tariffCodeDescriptionFilter;
        public string TariffCodeDescriptionFilter
        {
            get
            {
                return _tariffCodeDescriptionFilter;
            }
            set
            {
                _tariffCodeDescriptionFilter = value;
				NotifyPropertyChanged(x => TariffCodeDescriptionFilter);
                FilterData();
                
            }
        }	

 

		private Int64? _rowNumberFilter;
        public Int64? RowNumberFilter
        {
            get
            {
                return _rowNumberFilter;
            }
            set
            {
                _rowNumberFilter = value;
				NotifyPropertyChanged(x => RowNumberFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			LicenceSummary.Refresh();
			NotifyPropertyChanged(x => this.LicenceSummary);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(TariffCodeFilter) == false)
						res.Append(" && " + string.Format("TariffCode.Contains(\"{0}\")",  TariffCodeFilter));						
 

					if(QuantityFilter.HasValue)
						res.Append(" && " + string.Format("Quantity == {0}",  QuantityFilter.ToString()));				 

					if(TotalFilter.HasValue)
						res.Append(" && " + string.Format("Total == {0}",  TotalFilter.ToString()));				 

									if(string.IsNullOrEmpty(TariffCodeDescriptionFilter) == false)
						res.Append(" && " + string.Format("TariffCodeDescription.Contains(\"{0}\")",  TariffCodeDescriptionFilter));						
 

							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<LicenceSummary> lst = null;
            using (var ctx = new LicenceSummaryRepository())
            {
                lst = await ctx.GetLicenceSummaryByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<LicenceSummaryExcelLine, List<LicenceSummaryExcelLine>>
            {
                dataToPrint = lst.Select(x => new LicenceSummaryExcelLine
                {
 
                    TariffCode = x.TariffCode ,
                    
 
                    Quantity = x.Quantity ,
                    
 
                    Total = x.Total ,
                    
 
                    TariffCodeDescription = x.TariffCodeDescription ,
                    
 
                    RowNumber = x.RowNumber 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class LicenceSummaryExcelLine
        {
		 
                    public string TariffCode { get; set; } 
                    
 
                    public Nullable<double> Quantity { get; set; } 
                    
 
                    public int Total { get; set; } 
                    
 
                    public string TariffCodeDescription { get; set; } 
                    
 
                    public long RowNumber { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_SubmitDiscrepanciesErrorReportViewModel_AutoGen : ViewModelBase<TODO_SubmitDiscrepanciesErrorReportViewModel_AutoGen>
	{

       private static readonly TODO_SubmitDiscrepanciesErrorReportViewModel_AutoGen instance;
       static TODO_SubmitDiscrepanciesErrorReportViewModel_AutoGen()
        {
            instance = new TODO_SubmitDiscrepanciesErrorReportViewModel_AutoGen();
        }

       public static TODO_SubmitDiscrepanciesErrorReportViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_SubmitDiscrepanciesErrorReportViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_SubmitDiscrepanciesErrorReport>(MessageToken.CurrentTODO_SubmitDiscrepanciesErrorReportChanged, OnCurrentTODO_SubmitDiscrepanciesErrorReportChanged);
            RegisterToReceiveMessages(MessageToken.TODO_SubmitDiscrepanciesErrorReportChanged, OnTODO_SubmitDiscrepanciesErrorReportChanged);
			RegisterToReceiveMessages(MessageToken.TODO_SubmitDiscrepanciesErrorReportFilterExpressionChanged, OnTODO_SubmitDiscrepanciesErrorReportFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_SubmitDiscrepanciesErrorReport = new VirtualList<TODO_SubmitDiscrepanciesErrorReport>(vloader);
			TODO_SubmitDiscrepanciesErrorReport.LoadingStateChanged += TODO_SubmitDiscrepanciesErrorReport_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_SubmitDiscrepanciesErrorReport, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_SubmitDiscrepanciesErrorReport> _TODO_SubmitDiscrepanciesErrorReport = null;
        public VirtualList<TODO_SubmitDiscrepanciesErrorReport> TODO_SubmitDiscrepanciesErrorReport
        {
            get
            {
                return _TODO_SubmitDiscrepanciesErrorReport;
            }
            set
            {
                _TODO_SubmitDiscrepanciesErrorReport = value;
            }
        }

		 private void OnTODO_SubmitDiscrepanciesErrorReportFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			TODO_SubmitDiscrepanciesErrorReport.Refresh();
            SelectedTODO_SubmitDiscrepanciesErrorReport.Clear();
            NotifyPropertyChanged(x => SelectedTODO_SubmitDiscrepanciesErrorReport);
            BeginSendMessage(MessageToken.SelectedTODO_SubmitDiscrepanciesErrorReportChanged, new NotificationEventArgs(MessageToken.SelectedTODO_SubmitDiscrepanciesErrorReportChanged));
        }

		void TODO_SubmitDiscrepanciesErrorReport_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_SubmitDiscrepanciesErrorReport.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_SubmitDiscrepanciesErrorReport);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_SubmitDiscrepanciesErrorReport | Error occured..." + TODO_SubmitDiscrepanciesErrorReport.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_SubmitDiscrepanciesErrorReport);
                    break;
            }
           
        }

		
		public readonly TODO_SubmitDiscrepanciesErrorReportVirturalListLoader vloader = new TODO_SubmitDiscrepanciesErrorReportVirturalListLoader();

		private ObservableCollection<TODO_SubmitDiscrepanciesErrorReport> _selectedTODO_SubmitDiscrepanciesErrorReport = new ObservableCollection<TODO_SubmitDiscrepanciesErrorReport>();
        public ObservableCollection<TODO_SubmitDiscrepanciesErrorReport> SelectedTODO_SubmitDiscrepanciesErrorReport
        {
            get
            {
                return _selectedTODO_SubmitDiscrepanciesErrorReport;
            }
            set
            {
                _selectedTODO_SubmitDiscrepanciesErrorReport = value;
				BeginSendMessage(MessageToken.SelectedTODO_SubmitDiscrepanciesErrorReportChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_SubmitDiscrepanciesErrorReportChanged));
				 NotifyPropertyChanged(x => SelectedTODO_SubmitDiscrepanciesErrorReport);
            }
        }

        internal virtual void OnCurrentTODO_SubmitDiscrepanciesErrorReportChanged(object sender, NotificationEventArgs<TODO_SubmitDiscrepanciesErrorReport> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_SubmitDiscrepanciesErrorReport != null) BaseViewModel.Instance.CurrentTODO_SubmitDiscrepanciesErrorReport.PropertyChanged += CurrentTODO_SubmitDiscrepanciesErrorReport__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_SubmitDiscrepanciesErrorReport);
        }   

            void CurrentTODO_SubmitDiscrepanciesErrorReport__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnTODO_SubmitDiscrepanciesErrorReportChanged(object sender, NotificationEventArgs e)
        {
            _TODO_SubmitDiscrepanciesErrorReport.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitDiscrepanciesErrorReport);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_SubmitDiscrepanciesErrorReport.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitDiscrepanciesErrorReport);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_SubmitDiscrepanciesErrorReport> lst = null;
            using (var ctx = new TODO_SubmitDiscrepanciesErrorReportRepository())
            {
                lst = await ctx.GetTODO_SubmitDiscrepanciesErrorReportByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_SubmitDiscrepanciesErrorReport = new ObservableCollection<TODO_SubmitDiscrepanciesErrorReport>(lst);
        }

 

		private string _typeFilter;
        public string TypeFilter
        {
            get
            {
                return _typeFilter;
            }
            set
            {
                _typeFilter = value;
				NotifyPropertyChanged(x => TypeFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startInvoiceDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartInvoiceDateFilter
        {
            get
            {
                return _startInvoiceDateFilter;
            }
            set
            {
                _startInvoiceDateFilter = value;
				NotifyPropertyChanged(x => StartInvoiceDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endInvoiceDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndInvoiceDateFilter
        {
            get
            {
                return _endInvoiceDateFilter;
            }
            set
            {
                _endInvoiceDateFilter = value;
				NotifyPropertyChanged(x => EndInvoiceDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _invoiceDateFilter;
        public DateTime? InvoiceDateFilter
        {
            get
            {
                return _invoiceDateFilter;
            }
            set
            {
                _invoiceDateFilter = value;
				NotifyPropertyChanged(x => InvoiceDateFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startEffectiveDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartEffectiveDateFilter
        {
            get
            {
                return _startEffectiveDateFilter;
            }
            set
            {
                _startEffectiveDateFilter = value;
				NotifyPropertyChanged(x => StartEffectiveDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endEffectiveDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndEffectiveDateFilter
        {
            get
            {
                return _endEffectiveDateFilter;
            }
            set
            {
                _endEffectiveDateFilter = value;
				NotifyPropertyChanged(x => EndEffectiveDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _effectiveDateFilter;
        public DateTime? EffectiveDateFilter
        {
            get
            {
                return _effectiveDateFilter;
            }
            set
            {
                _effectiveDateFilter = value;
				NotifyPropertyChanged(x => EffectiveDateFilter);
                FilterData();
                
            }
        }	

 

		private string _invoiceNoFilter;
        public string InvoiceNoFilter
        {
            get
            {
                return _invoiceNoFilter;
            }
            set
            {
                _invoiceNoFilter = value;
				NotifyPropertyChanged(x => InvoiceNoFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _lineNumberFilter;
        public Int32? LineNumberFilter
        {
            get
            {
                return _lineNumberFilter;
            }
            set
            {
                _lineNumberFilter = value;
				NotifyPropertyChanged(x => LineNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _itemDescriptionFilter;
        public string ItemDescriptionFilter
        {
            get
            {
                return _itemDescriptionFilter;
            }
            set
            {
                _itemDescriptionFilter = value;
				NotifyPropertyChanged(x => ItemDescriptionFilter);
                FilterData();
                
            }
        }	

 

		private Double? _invoiceQtyFilter;
        public Double? InvoiceQtyFilter
        {
            get
            {
                return _invoiceQtyFilter;
            }
            set
            {
                _invoiceQtyFilter = value;
				NotifyPropertyChanged(x => InvoiceQtyFilter);
                FilterData();
                
            }
        }	

 

		private Double? _receivedQtyFilter;
        public Double? ReceivedQtyFilter
        {
            get
            {
                return _receivedQtyFilter;
            }
            set
            {
                _receivedQtyFilter = value;
				NotifyPropertyChanged(x => ReceivedQtyFilter);
                FilterData();
                
            }
        }	

 

		private Double? _costFilter;
        public Double? CostFilter
        {
            get
            {
                return _costFilter;
            }
            set
            {
                _costFilter = value;
				NotifyPropertyChanged(x => CostFilter);
                FilterData();
                
            }
        }	

 

		private string _previousCNumberFilter;
        public string PreviousCNumberFilter
        {
            get
            {
                return _previousCNumberFilter;
            }
            set
            {
                _previousCNumberFilter = value;
				NotifyPropertyChanged(x => PreviousCNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _previousInvoiceNumberFilter;
        public string PreviousInvoiceNumberFilter
        {
            get
            {
                return _previousInvoiceNumberFilter;
            }
            set
            {
                _previousInvoiceNumberFilter = value;
				NotifyPropertyChanged(x => PreviousInvoiceNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _commentFilter;
        public string commentFilter
        {
            get
            {
                return _commentFilter;
            }
            set
            {
                _commentFilter = value;
				NotifyPropertyChanged(x => commentFilter);
                FilterData();
                
            }
        }	

 

		private string _statusFilter;
        public string StatusFilter
        {
            get
            {
                return _statusFilter;
            }
            set
            {
                _statusFilter = value;
				NotifyPropertyChanged(x => StatusFilter);
                FilterData();
                
            }
        }	

 

		private string _dutyFreePaidFilter;
        public string DutyFreePaidFilter
        {
            get
            {
                return _dutyFreePaidFilter;
            }
            set
            {
                _dutyFreePaidFilter = value;
				NotifyPropertyChanged(x => DutyFreePaidFilter);
                FilterData();
                
            }
        }	

 

		private string _subjectFilter;
        public string subjectFilter
        {
            get
            {
                return _subjectFilter;
            }
            set
            {
                _subjectFilter = value;
				NotifyPropertyChanged(x => subjectFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startemailDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartemailDateFilter
        {
            get
            {
                return _startemailDateFilter;
            }
            set
            {
                _startemailDateFilter = value;
				NotifyPropertyChanged(x => StartemailDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endemailDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndemailDateFilter
        {
            get
            {
                return _endemailDateFilter;
            }
            set
            {
                _endemailDateFilter = value;
				NotifyPropertyChanged(x => EndemailDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _emailDateFilter;
        public DateTime? emailDateFilter
        {
            get
            {
                return _emailDateFilter;
            }
            set
            {
                _emailDateFilter = value;
				NotifyPropertyChanged(x => emailDateFilter);
                FilterData();
                
            }
        }	

 

		private Double? _quantityFilter;
        public Double? QuantityFilter
        {
            get
            {
                return _quantityFilter;
            }
            set
            {
                _quantityFilter = value;
				NotifyPropertyChanged(x => QuantityFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_SubmitDiscrepanciesErrorReport.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitDiscrepanciesErrorReport);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(TypeFilter) == false)
						res.Append(" && " + string.Format("Type.Contains(\"{0}\")",  TypeFilter));						
 

 

				if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue)
						{
							if(StartInvoiceDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("InvoiceDate >= \"{0}\"",  Convert.ToDateTime(StartInvoiceDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue)
						{
							if(EndInvoiceDateFilter.HasValue)
								res.Append(" && " + string.Format("InvoiceDate <= \"{0}\"",  Convert.ToDateTime(EndInvoiceDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_invoiceDateFilter).Date != DateTime.MinValue)
						{
							if(InvoiceDateFilter.HasValue)
								res.Append(" && " + string.Format("InvoiceDate == \"{0}\"",  Convert.ToDateTime(InvoiceDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

 

				if (Convert.ToDateTime(StartEffectiveDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEffectiveDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartEffectiveDateFilter).Date != DateTime.MinValue)
						{
							if(StartEffectiveDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndEffectiveDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("EffectiveDate >= \"{0}\"",  Convert.ToDateTime(StartEffectiveDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndEffectiveDateFilter).Date != DateTime.MinValue)
						{
							if(EndEffectiveDateFilter.HasValue)
								res.Append(" && " + string.Format("EffectiveDate <= \"{0}\"",  Convert.ToDateTime(EndEffectiveDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartEffectiveDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndEffectiveDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_effectiveDateFilter).Date != DateTime.MinValue)
						{
							if(EffectiveDateFilter.HasValue)
								res.Append(" && " + string.Format("EffectiveDate == \"{0}\"",  Convert.ToDateTime(EffectiveDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(InvoiceNoFilter) == false)
						res.Append(" && " + string.Format("InvoiceNo.Contains(\"{0}\")",  InvoiceNoFilter));						
 

					if(LineNumberFilter.HasValue)
						res.Append(" && " + string.Format("LineNumber == {0}",  LineNumberFilter.ToString()));				 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(ItemDescriptionFilter) == false)
						res.Append(" && " + string.Format("ItemDescription.Contains(\"{0}\")",  ItemDescriptionFilter));						
 

					if(InvoiceQtyFilter.HasValue)
						res.Append(" && " + string.Format("InvoiceQty == {0}",  InvoiceQtyFilter.ToString()));				 

					if(ReceivedQtyFilter.HasValue)
						res.Append(" && " + string.Format("ReceivedQty == {0}",  ReceivedQtyFilter.ToString()));				 

					if(CostFilter.HasValue)
						res.Append(" && " + string.Format("Cost == {0}",  CostFilter.ToString()));				 

									if(string.IsNullOrEmpty(PreviousCNumberFilter) == false)
						res.Append(" && " + string.Format("PreviousCNumber.Contains(\"{0}\")",  PreviousCNumberFilter));						
 

									if(string.IsNullOrEmpty(PreviousInvoiceNumberFilter) == false)
						res.Append(" && " + string.Format("PreviousInvoiceNumber.Contains(\"{0}\")",  PreviousInvoiceNumberFilter));						
 

									if(string.IsNullOrEmpty(commentFilter) == false)
						res.Append(" && " + string.Format("comment.Contains(\"{0}\")",  commentFilter));						
 

									if(string.IsNullOrEmpty(StatusFilter) == false)
						res.Append(" && " + string.Format("Status.Contains(\"{0}\")",  StatusFilter));						
 

									if(string.IsNullOrEmpty(DutyFreePaidFilter) == false)
						res.Append(" && " + string.Format("DutyFreePaid.Contains(\"{0}\")",  DutyFreePaidFilter));						
 

									if(string.IsNullOrEmpty(subjectFilter) == false)
						res.Append(" && " + string.Format("subject.Contains(\"{0}\")",  subjectFilter));						
 

 

				if (Convert.ToDateTime(StartemailDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndemailDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartemailDateFilter).Date != DateTime.MinValue)
						{
							if(StartemailDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndemailDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("emailDate >= \"{0}\"",  Convert.ToDateTime(StartemailDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndemailDateFilter).Date != DateTime.MinValue)
						{
							if(EndemailDateFilter.HasValue)
								res.Append(" && " + string.Format("emailDate <= \"{0}\"",  Convert.ToDateTime(EndemailDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartemailDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndemailDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_emailDateFilter).Date != DateTime.MinValue)
						{
							if(emailDateFilter.HasValue)
								res.Append(" && " + string.Format("emailDate == \"{0}\"",  Convert.ToDateTime(emailDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(QuantityFilter.HasValue)
						res.Append(" && " + string.Format("Quantity == {0}",  QuantityFilter.ToString()));							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_SubmitDiscrepanciesErrorReport> lst = null;
            using (var ctx = new TODO_SubmitDiscrepanciesErrorReportRepository())
            {
                lst = await ctx.GetTODO_SubmitDiscrepanciesErrorReportByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_SubmitDiscrepanciesErrorReportExcelLine, List<TODO_SubmitDiscrepanciesErrorReportExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_SubmitDiscrepanciesErrorReportExcelLine
                {
 
                    Type = x.Type ,
                    
 
                    InvoiceDate = x.InvoiceDate ,
                    
 
                    EffectiveDate = x.EffectiveDate ,
                    
 
                    InvoiceNo = x.InvoiceNo ,
                    
 
                    LineNumber = x.LineNumber ,
                    
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    ItemDescription = x.ItemDescription ,
                    
 
                    InvoiceQty = x.InvoiceQty ,
                    
 
                    ReceivedQty = x.ReceivedQty ,
                    
 
                    Cost = x.Cost ,
                    
 
                    PreviousCNumber = x.PreviousCNumber ,
                    
 
                    PreviousInvoiceNumber = x.PreviousInvoiceNumber ,
                    
 
                    comment = x.comment ,
                    
 
                    Status = x.Status ,
                    
 
                    DutyFreePaid = x.DutyFreePaid ,
                    
 
                    subject = x.subject ,
                    
 
                    emailDate = x.emailDate ,
                    
 
                    Quantity = x.Quantity 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TODO_SubmitDiscrepanciesErrorReportExcelLine
        {
		 
                    public string Type { get; set; } 
                    
 
                    public System.DateTime InvoiceDate { get; set; } 
                    
 
                    public Nullable<System.DateTime> EffectiveDate { get; set; } 
                    
 
                    public string InvoiceNo { get; set; } 
                    
 
                    public Nullable<int> LineNumber { get; set; } 
                    
 
                    public string ItemNumber { get; set; } 
                    
 
                    public string ItemDescription { get; set; } 
                    
 
                    public Nullable<double> InvoiceQty { get; set; } 
                    
 
                    public Nullable<double> ReceivedQty { get; set; } 
                    
 
                    public double Cost { get; set; } 
                    
 
                    public string PreviousCNumber { get; set; } 
                    
 
                    public string PreviousInvoiceNumber { get; set; } 
                    
 
                    public string comment { get; set; } 
                    
 
                    public string Status { get; set; } 
                    
 
                    public string DutyFreePaid { get; set; } 
                    
 
                    public string subject { get; set; } 
                    
 
                    public System.DateTime emailDate { get; set; } 
                    
 
                    public double Quantity { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class FileImporterInfoViewModel_AutoGen : ViewModelBase<FileImporterInfoViewModel_AutoGen>
	{

       private static readonly FileImporterInfoViewModel_AutoGen instance;
       static FileImporterInfoViewModel_AutoGen()
        {
            instance = new FileImporterInfoViewModel_AutoGen();
        }

       public static FileImporterInfoViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public FileImporterInfoViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<FileImporterInfo>(MessageToken.CurrentFileImporterInfoChanged, OnCurrentFileImporterInfoChanged);
            RegisterToReceiveMessages(MessageToken.FileImporterInfosChanged, OnFileImporterInfosChanged);
			RegisterToReceiveMessages(MessageToken.FileImporterInfosFilterExpressionChanged, OnFileImporterInfosFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			FileImporterInfos = new VirtualList<FileImporterInfo>(vloader);
			FileImporterInfos.LoadingStateChanged += FileImporterInfos_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(FileImporterInfos, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<FileImporterInfo> _FileImporterInfos = null;
        public VirtualList<FileImporterInfo> FileImporterInfos
        {
            get
            {
                return _FileImporterInfos;
            }
            set
            {
                _FileImporterInfos = value;
                NotifyPropertyChanged( x => x.FileImporterInfos);
            }
        }

		 private void OnFileImporterInfosFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => FileImporterInfos.Refresh()).ConfigureAwait(false);
            SelectedFileImporterInfos.Clear();
            NotifyPropertyChanged(x => SelectedFileImporterInfos);
            BeginSendMessage(MessageToken.SelectedFileImporterInfosChanged, new NotificationEventArgs(MessageToken.SelectedFileImporterInfosChanged));
        }

		void FileImporterInfos_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (FileImporterInfos.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => FileImporterInfos);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("FileImporterInfos | Error occured..." + FileImporterInfos.LastLoadingError.Message);
                    NotifyPropertyChanged(x => FileImporterInfos);
                    break;
            }
           
        }

		
		public readonly FileImporterInfoVirturalListLoader vloader = new FileImporterInfoVirturalListLoader();

		private ObservableCollection<FileImporterInfo> _selectedFileImporterInfos = new ObservableCollection<FileImporterInfo>();
        public ObservableCollection<FileImporterInfo> SelectedFileImporterInfos
        {
            get
            {
                return _selectedFileImporterInfos;
            }
            set
            {
                _selectedFileImporterInfos = value;
				BeginSendMessage(MessageToken.SelectedFileImporterInfosChanged,
                                    new NotificationEventArgs(MessageToken.SelectedFileImporterInfosChanged));
				 NotifyPropertyChanged(x => SelectedFileImporterInfos);
            }
        }

        internal virtual void OnCurrentFileImporterInfoChanged(object sender, NotificationEventArgs<FileImporterInfo> e)
        {
            if(BaseViewModel.Instance.CurrentFileImporterInfo != null) BaseViewModel.Instance.CurrentFileImporterInfo.PropertyChanged += CurrentFileImporterInfo__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentFileImporterInfo);
        }   

            void CurrentFileImporterInfo__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnFileImporterInfosChanged(object sender, NotificationEventArgs e)
        {
            _FileImporterInfos.Refresh();
			NotifyPropertyChanged(x => this.FileImporterInfos);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_FileImporterInfos.Refresh();
			NotifyPropertyChanged(x => this.FileImporterInfos);
		}

		public async Task SelectAll()
        {
            IEnumerable<FileImporterInfo> lst = null;
            using (var ctx = new FileImporterInfoRepository())
            {
                lst = await ctx.GetFileImporterInfosByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedFileImporterInfos = new ObservableCollection<FileImporterInfo>(lst);
        }

 

		private string _entryTypeFilter;
        public string EntryTypeFilter
        {
            get
            {
                return _entryTypeFilter;
            }
            set
            {
                _entryTypeFilter = value;
				NotifyPropertyChanged(x => EntryTypeFilter);
                FilterData();
                
            }
        }	

 

		private string _formatFilter;
        public string FormatFilter
        {
            get
            {
                return _formatFilter;
            }
            set
            {
                _formatFilter = value;
				NotifyPropertyChanged(x => FormatFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			FileImporterInfos.Refresh();
			NotifyPropertyChanged(x => this.FileImporterInfos);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(EntryTypeFilter) == false)
						res.Append(" && " + string.Format("EntryType.Contains(\"{0}\")",  EntryTypeFilter));						
 

									if(string.IsNullOrEmpty(FormatFilter) == false)
						res.Append(" && " + string.Format("Format.Contains(\"{0}\")",  FormatFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<FileImporterInfo> lst = null;
            using (var ctx = new FileImporterInfoRepository())
            {
                lst = await ctx.GetFileImporterInfosByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<FileImporterInfoExcelLine, List<FileImporterInfoExcelLine>>
            {
                dataToPrint = lst.Select(x => new FileImporterInfoExcelLine
                {
 
                    EntryType = x.EntryType ,
                    
 
                    Format = x.Format 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class FileImporterInfoExcelLine
        {
		 
                    public string EntryType { get; set; } 
                    
 
                    public string Format { get; set; } 
                    
        }

		
    }
}
		

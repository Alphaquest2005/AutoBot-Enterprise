// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class SessionScheduleViewModel_AutoGen : ViewModelBase<SessionScheduleViewModel_AutoGen>
	{

       private static readonly SessionScheduleViewModel_AutoGen instance;
       static SessionScheduleViewModel_AutoGen()
        {
            instance = new SessionScheduleViewModel_AutoGen();
        }

       public static SessionScheduleViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public SessionScheduleViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<SessionSchedule>(MessageToken.CurrentSessionScheduleChanged, OnCurrentSessionScheduleChanged);
            RegisterToReceiveMessages(MessageToken.SessionScheduleChanged, OnSessionScheduleChanged);
			RegisterToReceiveMessages(MessageToken.SessionScheduleFilterExpressionChanged, OnSessionScheduleFilterExpressionChanged);

 
			RegisterToReceiveMessages<Sessions>(MessageToken.CurrentSessionsChanged, OnCurrentSessionsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			SessionSchedule = new VirtualList<SessionSchedule>(vloader);
			SessionSchedule.LoadingStateChanged += SessionSchedule_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(SessionSchedule, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<SessionSchedule> _SessionSchedule = null;
        public VirtualList<SessionSchedule> SessionSchedule
        {
            get
            {
                return _SessionSchedule;
            }
            set
            {
                _SessionSchedule = value;
                NotifyPropertyChanged( x => x.SessionSchedule);
            }
        }

		 private void OnSessionScheduleFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => SessionSchedule.Refresh()).ConfigureAwait(false);
            SelectedSessionSchedule.Clear();
            NotifyPropertyChanged(x => SelectedSessionSchedule);
            BeginSendMessage(MessageToken.SelectedSessionScheduleChanged, new NotificationEventArgs(MessageToken.SelectedSessionScheduleChanged));
        }

		void SessionSchedule_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (SessionSchedule.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => SessionSchedule);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("SessionSchedule | Error occured..." + SessionSchedule.LastLoadingError.Message);
                    NotifyPropertyChanged(x => SessionSchedule);
                    break;
            }
           
        }

		
		public readonly SessionScheduleVirturalListLoader vloader = new SessionScheduleVirturalListLoader();

		private ObservableCollection<SessionSchedule> _selectedSessionSchedule = new ObservableCollection<SessionSchedule>();
        public ObservableCollection<SessionSchedule> SelectedSessionSchedule
        {
            get
            {
                return _selectedSessionSchedule;
            }
            set
            {
                _selectedSessionSchedule = value;
				BeginSendMessage(MessageToken.SelectedSessionScheduleChanged,
                                    new NotificationEventArgs(MessageToken.SelectedSessionScheduleChanged));
				 NotifyPropertyChanged(x => SelectedSessionSchedule);
            }
        }

        internal virtual void OnCurrentSessionScheduleChanged(object sender, NotificationEventArgs<SessionSchedule> e)
        {
            if(BaseViewModel.Instance.CurrentSessionSchedule != null) BaseViewModel.Instance.CurrentSessionSchedule.PropertyChanged += CurrentSessionSchedule__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentSessionSchedule);
        }   

            void CurrentSessionSchedule__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddSessions")
                   // {
                   //    if(Sessions.Contains(CurrentSessionSchedule.Sessions) == false) Sessions.Add(CurrentSessionSchedule.Sessions);
                    //}
                 } 
        internal virtual void OnSessionScheduleChanged(object sender, NotificationEventArgs e)
        {
            _SessionSchedule.Refresh();
			NotifyPropertyChanged(x => this.SessionSchedule);
        }   


 	
		 internal virtual void OnCurrentSessionsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Sessions> e)
			{
			if(ViewCurrentSessions == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("SesseionId == {0}", e.Data.Id.ToString());
                 }

				SessionSchedule.Refresh();
				NotifyPropertyChanged(x => this.SessionSchedule);
                // SendMessage(MessageToken.SessionScheduleChanged, new NotificationEventArgs(MessageToken.SessionScheduleChanged));
                                          
                BaseViewModel.Instance.CurrentSessionSchedule = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentSessions = false;
         public bool ViewCurrentSessions
         {
             get
             {
                 return _viewCurrentSessions;
             }
             set
             {
                 _viewCurrentSessions = value;
                 NotifyPropertyChanged(x => x.ViewCurrentSessions);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_SessionSchedule.Refresh();
			NotifyPropertyChanged(x => this.SessionSchedule);
		}

		public async Task SelectAll()
        {
            IEnumerable<SessionSchedule> lst = null;
            using (var ctx = new SessionScheduleRepository())
            {
                lst = await ctx.GetSessionScheduleByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedSessionSchedule = new ObservableCollection<SessionSchedule>(lst);
        }

 
		private DateTime? _startRunDateTimeFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartRunDateTimeFilter
        {
            get
            {
                return _startRunDateTimeFilter;
            }
            set
            {
                _startRunDateTimeFilter = value;
				NotifyPropertyChanged(x => StartRunDateTimeFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endRunDateTimeFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndRunDateTimeFilter
        {
            get
            {
                return _endRunDateTimeFilter;
            }
            set
            {
                _endRunDateTimeFilter = value;
				NotifyPropertyChanged(x => EndRunDateTimeFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _runDateTimeFilter;
        public DateTime? RunDateTimeFilter
        {
            get
            {
                return _runDateTimeFilter;
            }
            set
            {
                _runDateTimeFilter = value;
				NotifyPropertyChanged(x => RunDateTimeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			SessionSchedule.Refresh();
			NotifyPropertyChanged(x => this.SessionSchedule);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

 

				if (Convert.ToDateTime(StartRunDateTimeFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRunDateTimeFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartRunDateTimeFilter).Date != DateTime.MinValue)
						{
							if(StartRunDateTimeFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndRunDateTimeFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("RunDateTime >= \"{0}\"",  Convert.ToDateTime(StartRunDateTimeFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndRunDateTimeFilter).Date != DateTime.MinValue)
						{
							if(EndRunDateTimeFilter.HasValue)
								res.Append(" && " + string.Format("RunDateTime <= \"{0}\"",  Convert.ToDateTime(EndRunDateTimeFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartRunDateTimeFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRunDateTimeFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_runDateTimeFilter).Date != DateTime.MinValue)
						{
							if(RunDateTimeFilter.HasValue)
								res.Append(" && " + string.Format("RunDateTime == \"{0}\"",  Convert.ToDateTime(RunDateTimeFilter).Date.ToString("MM/dd/yyyy")));
						}
							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<SessionSchedule> lst = null;
            using (var ctx = new SessionScheduleRepository())
            {
                lst = await ctx.GetSessionScheduleByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<SessionScheduleExcelLine, List<SessionScheduleExcelLine>>
            {
                dataToPrint = lst.Select(x => new SessionScheduleExcelLine
                {
 
                    RunDateTime = x.RunDateTime 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class SessionScheduleExcelLine
        {
		 
                    public System.DateTime RunDateTime { get; set; } 
                    
        }

		
    }
}
		

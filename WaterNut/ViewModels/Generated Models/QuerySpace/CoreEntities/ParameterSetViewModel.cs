// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class ParameterSetViewModel_AutoGen : ViewModelBase<ParameterSetViewModel_AutoGen>
	{

       private static readonly ParameterSetViewModel_AutoGen instance;
       static ParameterSetViewModel_AutoGen()
        {
            instance = new ParameterSetViewModel_AutoGen();
        }

       public static ParameterSetViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public ParameterSetViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<ParameterSet>(MessageToken.CurrentParameterSetChanged, OnCurrentParameterSetChanged);
            RegisterToReceiveMessages(MessageToken.ParameterSetChanged, OnParameterSetChanged);
			RegisterToReceiveMessages(MessageToken.ParameterSetFilterExpressionChanged, OnParameterSetFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			ParameterSet = new VirtualList<ParameterSet>(vloader);
			ParameterSet.LoadingStateChanged += ParameterSet_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(ParameterSet, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<ParameterSet> _ParameterSet = null;
        public VirtualList<ParameterSet> ParameterSet
        {
            get
            {
                return _ParameterSet;
            }
            set
            {
                _ParameterSet = value;
                NotifyPropertyChanged( x => x.ParameterSet);
            }
        }

		 private void OnParameterSetFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => ParameterSet.Refresh()).ConfigureAwait(false);
            SelectedParameterSet.Clear();
            NotifyPropertyChanged(x => SelectedParameterSet);
            BeginSendMessage(MessageToken.SelectedParameterSetChanged, new NotificationEventArgs(MessageToken.SelectedParameterSetChanged));
        }

		void ParameterSet_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (ParameterSet.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => ParameterSet);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("ParameterSet | Error occured..." + ParameterSet.LastLoadingError.Message);
                    NotifyPropertyChanged(x => ParameterSet);
                    break;
            }
           
        }

		
		public readonly ParameterSetVirturalListLoader vloader = new ParameterSetVirturalListLoader();

		private ObservableCollection<ParameterSet> _selectedParameterSet = new ObservableCollection<ParameterSet>();
        public ObservableCollection<ParameterSet> SelectedParameterSet
        {
            get
            {
                return _selectedParameterSet;
            }
            set
            {
                _selectedParameterSet = value;
				BeginSendMessage(MessageToken.SelectedParameterSetChanged,
                                    new NotificationEventArgs(MessageToken.SelectedParameterSetChanged));
				 NotifyPropertyChanged(x => SelectedParameterSet);
            }
        }

        internal virtual void OnCurrentParameterSetChanged(object sender, NotificationEventArgs<ParameterSet> e)
        {
            if(BaseViewModel.Instance.CurrentParameterSet != null) BaseViewModel.Instance.CurrentParameterSet.PropertyChanged += CurrentParameterSet__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentParameterSet);
        }   

            void CurrentParameterSet__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnParameterSetChanged(object sender, NotificationEventArgs e)
        {
            _ParameterSet.Refresh();
			NotifyPropertyChanged(x => this.ParameterSet);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_ParameterSet.Refresh();
			NotifyPropertyChanged(x => this.ParameterSet);
		}

		public async Task SelectAll()
        {
            IEnumerable<ParameterSet> lst = null;
            using (var ctx = new ParameterSetRepository())
            {
                lst = await ctx.GetParameterSetByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedParameterSet = new ObservableCollection<ParameterSet>(lst);
        }

 

		private string _nameFilter;
        public string NameFilter
        {
            get
            {
                return _nameFilter;
            }
            set
            {
                _nameFilter = value;
				NotifyPropertyChanged(x => NameFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			ParameterSet.Refresh();
			NotifyPropertyChanged(x => this.ParameterSet);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(NameFilter) == false)
						res.Append(" && " + string.Format("Name.Contains(\"{0}\")",  NameFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<ParameterSet> lst = null;
            using (var ctx = new ParameterSetRepository())
            {
                lst = await ctx.GetParameterSetByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<ParameterSetExcelLine, List<ParameterSetExcelLine>>
            {
                dataToPrint = lst.Select(x => new ParameterSetExcelLine
                {
 
                    Name = x.Name 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class ParameterSetExcelLine
        {
		 
                    public string Name { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class FileTypeMappingsValuesViewModel_AutoGen : ViewModelBase<FileTypeMappingsValuesViewModel_AutoGen>
	{

       private static readonly FileTypeMappingsValuesViewModel_AutoGen instance;
       static FileTypeMappingsValuesViewModel_AutoGen()
        {
            instance = new FileTypeMappingsValuesViewModel_AutoGen();
        }

       public static FileTypeMappingsValuesViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public FileTypeMappingsValuesViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<FileTypeMappingsValues>(MessageToken.CurrentFileTypeMappingsValuesChanged, OnCurrentFileTypeMappingsValuesChanged);
            RegisterToReceiveMessages(MessageToken.FileTypeMappingsValuesChanged, OnFileTypeMappingsValuesChanged);
			RegisterToReceiveMessages(MessageToken.FileTypeMappingsValuesFilterExpressionChanged, OnFileTypeMappingsValuesFilterExpressionChanged);

 
			RegisterToReceiveMessages<FileTypeMappings>(MessageToken.CurrentFileTypeMappingsChanged, OnCurrentFileTypeMappingsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			FileTypeMappingsValues = new VirtualList<FileTypeMappingsValues>(vloader);
			FileTypeMappingsValues.LoadingStateChanged += FileTypeMappingsValues_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(FileTypeMappingsValues, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<FileTypeMappingsValues> _FileTypeMappingsValues = null;
        public VirtualList<FileTypeMappingsValues> FileTypeMappingsValues
        {
            get
            {
                return _FileTypeMappingsValues;
            }
            set
            {
                _FileTypeMappingsValues = value;
                NotifyPropertyChanged( x => x.FileTypeMappingsValues);
            }
        }

		 private void OnFileTypeMappingsValuesFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => FileTypeMappingsValues.Refresh()).ConfigureAwait(false);
            SelectedFileTypeMappingsValues.Clear();
            NotifyPropertyChanged(x => SelectedFileTypeMappingsValues);
            BeginSendMessage(MessageToken.SelectedFileTypeMappingsValuesChanged, new NotificationEventArgs(MessageToken.SelectedFileTypeMappingsValuesChanged));
        }

		void FileTypeMappingsValues_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (FileTypeMappingsValues.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => FileTypeMappingsValues);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("FileTypeMappingsValues | Error occured..." + FileTypeMappingsValues.LastLoadingError.Message);
                    NotifyPropertyChanged(x => FileTypeMappingsValues);
                    break;
            }
           
        }

		
		public readonly FileTypeMappingsValuesVirturalListLoader vloader = new FileTypeMappingsValuesVirturalListLoader();

		private ObservableCollection<FileTypeMappingsValues> _selectedFileTypeMappingsValues = new ObservableCollection<FileTypeMappingsValues>();
        public ObservableCollection<FileTypeMappingsValues> SelectedFileTypeMappingsValues
        {
            get
            {
                return _selectedFileTypeMappingsValues;
            }
            set
            {
                _selectedFileTypeMappingsValues = value;
				BeginSendMessage(MessageToken.SelectedFileTypeMappingsValuesChanged,
                                    new NotificationEventArgs(MessageToken.SelectedFileTypeMappingsValuesChanged));
				 NotifyPropertyChanged(x => SelectedFileTypeMappingsValues);
            }
        }

        internal virtual void OnCurrentFileTypeMappingsValuesChanged(object sender, NotificationEventArgs<FileTypeMappingsValues> e)
        {
            if(BaseViewModel.Instance.CurrentFileTypeMappingsValues != null) BaseViewModel.Instance.CurrentFileTypeMappingsValues.PropertyChanged += CurrentFileTypeMappingsValues__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentFileTypeMappingsValues);
        }   

            void CurrentFileTypeMappingsValues__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddFileTypeMappings")
                   // {
                   //    if(FileTypeMappings.Contains(CurrentFileTypeMappingsValues.FileTypeMappings) == false) FileTypeMappings.Add(CurrentFileTypeMappingsValues.FileTypeMappings);
                    //}
                 } 
        internal virtual void OnFileTypeMappingsValuesChanged(object sender, NotificationEventArgs e)
        {
            _FileTypeMappingsValues.Refresh();
			NotifyPropertyChanged(x => this.FileTypeMappingsValues);
        }   


 	
		 internal virtual void OnCurrentFileTypeMappingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypeMappings> e)
			{
			if(ViewCurrentFileTypeMappings == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("FileTypeMappingId == {0}", e.Data.Id.ToString());
                 }

				FileTypeMappingsValues.Refresh();
				NotifyPropertyChanged(x => this.FileTypeMappingsValues);
                // SendMessage(MessageToken.FileTypeMappingsValuesChanged, new NotificationEventArgs(MessageToken.FileTypeMappingsValuesChanged));
                                          
                BaseViewModel.Instance.CurrentFileTypeMappingsValues = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentFileTypeMappings = false;
         public bool ViewCurrentFileTypeMappings
         {
             get
             {
                 return _viewCurrentFileTypeMappings;
             }
             set
             {
                 _viewCurrentFileTypeMappings = value;
                 NotifyPropertyChanged(x => x.ViewCurrentFileTypeMappings);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_FileTypeMappingsValues.Refresh();
			NotifyPropertyChanged(x => this.FileTypeMappingsValues);
		}

		public async Task SelectAll()
        {
            IEnumerable<FileTypeMappingsValues> lst = null;
            using (var ctx = new FileTypeMappingsValuesRepository())
            {
                lst = await ctx.GetFileTypeMappingsValuesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedFileTypeMappingsValues = new ObservableCollection<FileTypeMappingsValues>(lst);
        }

 

		private string _valueFilter;
        public string ValueFilter
        {
            get
            {
                return _valueFilter;
            }
            set
            {
                _valueFilter = value;
				NotifyPropertyChanged(x => ValueFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			FileTypeMappingsValues.Refresh();
			NotifyPropertyChanged(x => this.FileTypeMappingsValues);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(ValueFilter) == false)
						res.Append(" && " + string.Format("Value.Contains(\"{0}\")",  ValueFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<FileTypeMappingsValues> lst = null;
            using (var ctx = new FileTypeMappingsValuesRepository())
            {
                lst = await ctx.GetFileTypeMappingsValuesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<FileTypeMappingsValuesExcelLine, List<FileTypeMappingsValuesExcelLine>>
            {
                dataToPrint = lst.Select(x => new FileTypeMappingsValuesExcelLine
                {
 
                    Value = x.Value 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class FileTypeMappingsValuesExcelLine
        {
		 
                    public string Value { get; set; } 
                    
        }

		
    }
}
		

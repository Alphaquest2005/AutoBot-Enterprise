// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class ActionsViewModel_AutoGen : ViewModelBase<ActionsViewModel_AutoGen>
	{

       private static readonly ActionsViewModel_AutoGen instance;
       static ActionsViewModel_AutoGen()
        {
            instance = new ActionsViewModel_AutoGen();
        }

       public static ActionsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public ActionsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<Actions>(MessageToken.CurrentActionsChanged, OnCurrentActionsChanged);
            RegisterToReceiveMessages(MessageToken.ActionsChanged, OnActionsChanged);
			RegisterToReceiveMessages(MessageToken.ActionsFilterExpressionChanged, OnActionsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			Actions = new VirtualList<Actions>(vloader);
			Actions.LoadingStateChanged += Actions_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(Actions, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<Actions> _Actions = null;
        public VirtualList<Actions> Actions
        {
            get
            {
                return _Actions;
            }
            set
            {
                _Actions = value;
            }
        }

		 private void OnActionsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Actions.Refresh();
            SelectedActions.Clear();
            NotifyPropertyChanged(x => SelectedActions);
            BeginSendMessage(MessageToken.SelectedActionsChanged, new NotificationEventArgs(MessageToken.SelectedActionsChanged));
        }

		void Actions_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (Actions.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => Actions);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("Actions | Error occured..." + Actions.LastLoadingError.Message);
                    NotifyPropertyChanged(x => Actions);
                    break;
            }
           
        }

		
		public readonly ActionsVirturalListLoader vloader = new ActionsVirturalListLoader();

		private ObservableCollection<Actions> _selectedActions = new ObservableCollection<Actions>();
        public ObservableCollection<Actions> SelectedActions
        {
            get
            {
                return _selectedActions;
            }
            set
            {
                _selectedActions = value;
				BeginSendMessage(MessageToken.SelectedActionsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedActionsChanged));
				 NotifyPropertyChanged(x => SelectedActions);
            }
        }

        internal virtual void OnCurrentActionsChanged(object sender, NotificationEventArgs<Actions> e)
        {
            if(BaseViewModel.Instance.CurrentActions != null) BaseViewModel.Instance.CurrentActions.PropertyChanged += CurrentActions__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentActions);
        }   

            void CurrentActions__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnActionsChanged(object sender, NotificationEventArgs e)
        {
            _Actions.Refresh();
			NotifyPropertyChanged(x => this.Actions);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_Actions.Refresh();
			NotifyPropertyChanged(x => this.Actions);
		}

		public async Task SelectAll()
        {
            IEnumerable<Actions> lst = null;
            using (var ctx = new ActionsRepository())
            {
                lst = await ctx.GetActionsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedActions = new ObservableCollection<Actions>(lst);
        }

 

		private string _nameFilter;
        public string NameFilter
        {
            get
            {
                return _nameFilter;
            }
            set
            {
                _nameFilter = value;
				NotifyPropertyChanged(x => NameFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _testModeFilter;
        public Boolean? TestModeFilter
        {
            get
            {
                return _testModeFilter;
            }
            set
            {
                _testModeFilter = value;
				NotifyPropertyChanged(x => TestModeFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			Actions.Refresh();
			NotifyPropertyChanged(x => this.Actions);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(NameFilter) == false)
						res.Append(" && " + string.Format("Name.Contains(\"{0}\")",  NameFilter));						
 

									if(TestModeFilter.HasValue)
						res.Append(" && " + string.Format("TestMode == {0}",  TestModeFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<Actions> lst = null;
            using (var ctx = new ActionsRepository())
            {
                lst = await ctx.GetActionsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<ActionsExcelLine, List<ActionsExcelLine>>
            {
                dataToPrint = lst.Select(x => new ActionsExcelLine
                {
 
                    Name = x.Name ,
                    
 
                    TestMode = x.TestMode 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class ActionsExcelLine
        {
		 
                    public string Name { get; set; } 
                    
 
                    public bool TestMode { get; set; } 
                    
        }

		
    }
}
		

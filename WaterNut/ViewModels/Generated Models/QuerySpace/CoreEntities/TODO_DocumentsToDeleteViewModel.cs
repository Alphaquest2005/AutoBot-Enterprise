// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_DocumentsToDeleteViewModel_AutoGen : ViewModelBase<TODO_DocumentsToDeleteViewModel_AutoGen>
	{

       private static readonly TODO_DocumentsToDeleteViewModel_AutoGen instance;
       static TODO_DocumentsToDeleteViewModel_AutoGen()
        {
            instance = new TODO_DocumentsToDeleteViewModel_AutoGen();
        }

       public static TODO_DocumentsToDeleteViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_DocumentsToDeleteViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_DocumentsToDelete>(MessageToken.CurrentTODO_DocumentsToDeleteChanged, OnCurrentTODO_DocumentsToDeleteChanged);
            RegisterToReceiveMessages(MessageToken.TODO_DocumentsToDeleteChanged, OnTODO_DocumentsToDeleteChanged);
			RegisterToReceiveMessages(MessageToken.TODO_DocumentsToDeleteFilterExpressionChanged, OnTODO_DocumentsToDeleteFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_DocumentsToDelete = new VirtualList<TODO_DocumentsToDelete>(vloader);
			TODO_DocumentsToDelete.LoadingStateChanged += TODO_DocumentsToDelete_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_DocumentsToDelete, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_DocumentsToDelete> _TODO_DocumentsToDelete = null;
        public VirtualList<TODO_DocumentsToDelete> TODO_DocumentsToDelete
        {
            get
            {
                return _TODO_DocumentsToDelete;
            }
            set
            {
                _TODO_DocumentsToDelete = value;
                NotifyPropertyChanged( x => x.TODO_DocumentsToDelete);
            }
        }

		 private void OnTODO_DocumentsToDeleteFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => TODO_DocumentsToDelete.Refresh()).ConfigureAwait(false);
            SelectedTODO_DocumentsToDelete.Clear();
            NotifyPropertyChanged(x => SelectedTODO_DocumentsToDelete);
            BeginSendMessage(MessageToken.SelectedTODO_DocumentsToDeleteChanged, new NotificationEventArgs(MessageToken.SelectedTODO_DocumentsToDeleteChanged));
        }

		void TODO_DocumentsToDelete_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_DocumentsToDelete.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_DocumentsToDelete);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_DocumentsToDelete | Error occured..." + TODO_DocumentsToDelete.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_DocumentsToDelete);
                    break;
            }
           
        }

		
		public readonly TODO_DocumentsToDeleteVirturalListLoader vloader = new TODO_DocumentsToDeleteVirturalListLoader();

		private ObservableCollection<TODO_DocumentsToDelete> _selectedTODO_DocumentsToDelete = new ObservableCollection<TODO_DocumentsToDelete>();
        public ObservableCollection<TODO_DocumentsToDelete> SelectedTODO_DocumentsToDelete
        {
            get
            {
                return _selectedTODO_DocumentsToDelete;
            }
            set
            {
                _selectedTODO_DocumentsToDelete = value;
				BeginSendMessage(MessageToken.SelectedTODO_DocumentsToDeleteChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_DocumentsToDeleteChanged));
				 NotifyPropertyChanged(x => SelectedTODO_DocumentsToDelete);
            }
        }

        internal virtual void OnCurrentTODO_DocumentsToDeleteChanged(object sender, NotificationEventArgs<TODO_DocumentsToDelete> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_DocumentsToDelete != null) BaseViewModel.Instance.CurrentTODO_DocumentsToDelete.PropertyChanged += CurrentTODO_DocumentsToDelete__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_DocumentsToDelete);
        }   

            void CurrentTODO_DocumentsToDelete__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnTODO_DocumentsToDeleteChanged(object sender, NotificationEventArgs e)
        {
            _TODO_DocumentsToDelete.Refresh();
			NotifyPropertyChanged(x => this.TODO_DocumentsToDelete);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_DocumentsToDelete.Refresh();
			NotifyPropertyChanged(x => this.TODO_DocumentsToDelete);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_DocumentsToDelete> lst = null;
            using (var ctx = new TODO_DocumentsToDeleteRepository())
            {
                lst = await ctx.GetTODO_DocumentsToDeleteByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_DocumentsToDelete = new ObservableCollection<TODO_DocumentsToDelete>(lst);
        }

 

		private string _documentTypeFilter;
        public string DocumentTypeFilter
        {
            get
            {
                return _documentTypeFilter;
            }
            set
            {
                _documentTypeFilter = value;
				NotifyPropertyChanged(x => DocumentTypeFilter);
                FilterData();
                
            }
        }	

 

		private string _referenceFilter;
        public string ReferenceFilter
        {
            get
            {
                return _referenceFilter;
            }
            set
            {
                _referenceFilter = value;
				NotifyPropertyChanged(x => ReferenceFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_DocumentsToDelete.Refresh();
			NotifyPropertyChanged(x => this.TODO_DocumentsToDelete);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(DocumentTypeFilter) == false)
						res.Append(" && " + string.Format("DocumentType.Contains(\"{0}\")",  DocumentTypeFilter));						
 

									if(string.IsNullOrEmpty(ReferenceFilter) == false)
						res.Append(" && " + string.Format("Reference.Contains(\"{0}\")",  ReferenceFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_DocumentsToDelete> lst = null;
            using (var ctx = new TODO_DocumentsToDeleteRepository())
            {
                lst = await ctx.GetTODO_DocumentsToDeleteByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_DocumentsToDeleteExcelLine, List<TODO_DocumentsToDeleteExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_DocumentsToDeleteExcelLine
                {
 
                    DocumentType = x.DocumentType ,
                    
 
                    Reference = x.Reference 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class TODO_DocumentsToDeleteExcelLine
        {
		 
                    public string DocumentType { get; set; } 
                    
 
                    public string Reference { get; set; } 
                    
        }

		
    }
}
		

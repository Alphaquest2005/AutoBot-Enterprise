// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_SubmitEntryCIFViewModel_AutoGen : ViewModelBase<TODO_SubmitEntryCIFViewModel_AutoGen>
	{

       private static readonly TODO_SubmitEntryCIFViewModel_AutoGen instance;
       static TODO_SubmitEntryCIFViewModel_AutoGen()
        {
            instance = new TODO_SubmitEntryCIFViewModel_AutoGen();
        }

       public static TODO_SubmitEntryCIFViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_SubmitEntryCIFViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_SubmitEntryCIF>(MessageToken.CurrentTODO_SubmitEntryCIFChanged, OnCurrentTODO_SubmitEntryCIFChanged);
            RegisterToReceiveMessages(MessageToken.TODO_SubmitEntryCIFChanged, OnTODO_SubmitEntryCIFChanged);
			RegisterToReceiveMessages(MessageToken.TODO_SubmitEntryCIFFilterExpressionChanged, OnTODO_SubmitEntryCIFFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_SubmitEntryCIF = new VirtualList<TODO_SubmitEntryCIF>(vloader);
			TODO_SubmitEntryCIF.LoadingStateChanged += TODO_SubmitEntryCIF_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_SubmitEntryCIF, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_SubmitEntryCIF> _TODO_SubmitEntryCIF = null;
        public VirtualList<TODO_SubmitEntryCIF> TODO_SubmitEntryCIF
        {
            get
            {
                return _TODO_SubmitEntryCIF;
            }
            set
            {
                _TODO_SubmitEntryCIF = value;
                NotifyPropertyChanged( x => x.TODO_SubmitEntryCIF);
            }
        }

		 private void OnTODO_SubmitEntryCIFFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => TODO_SubmitEntryCIF.Refresh()).ConfigureAwait(false);
            SelectedTODO_SubmitEntryCIF.Clear();
            NotifyPropertyChanged(x => SelectedTODO_SubmitEntryCIF);
            BeginSendMessage(MessageToken.SelectedTODO_SubmitEntryCIFChanged, new NotificationEventArgs(MessageToken.SelectedTODO_SubmitEntryCIFChanged));
        }

		void TODO_SubmitEntryCIF_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_SubmitEntryCIF.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_SubmitEntryCIF);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_SubmitEntryCIF | Error occured..." + TODO_SubmitEntryCIF.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_SubmitEntryCIF);
                    break;
            }
           
        }

		
		public readonly TODO_SubmitEntryCIFVirturalListLoader vloader = new TODO_SubmitEntryCIFVirturalListLoader();

		private ObservableCollection<TODO_SubmitEntryCIF> _selectedTODO_SubmitEntryCIF = new ObservableCollection<TODO_SubmitEntryCIF>();
        public ObservableCollection<TODO_SubmitEntryCIF> SelectedTODO_SubmitEntryCIF
        {
            get
            {
                return _selectedTODO_SubmitEntryCIF;
            }
            set
            {
                _selectedTODO_SubmitEntryCIF = value;
				BeginSendMessage(MessageToken.SelectedTODO_SubmitEntryCIFChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_SubmitEntryCIFChanged));
				 NotifyPropertyChanged(x => SelectedTODO_SubmitEntryCIF);
            }
        }

        internal virtual void OnCurrentTODO_SubmitEntryCIFChanged(object sender, NotificationEventArgs<TODO_SubmitEntryCIF> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_SubmitEntryCIF != null) BaseViewModel.Instance.CurrentTODO_SubmitEntryCIF.PropertyChanged += CurrentTODO_SubmitEntryCIF__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_SubmitEntryCIF);
        }   

            void CurrentTODO_SubmitEntryCIF__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnTODO_SubmitEntryCIFChanged(object sender, NotificationEventArgs e)
        {
            _TODO_SubmitEntryCIF.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitEntryCIF);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_SubmitEntryCIF.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitEntryCIF);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_SubmitEntryCIF> lst = null;
            using (var ctx = new TODO_SubmitEntryCIFRepository())
            {
                lst = await ctx.GetTODO_SubmitEntryCIFByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_SubmitEntryCIF = new ObservableCollection<TODO_SubmitEntryCIF>(lst);
        }

 

		private string _typeFilter;
        public string TypeFilter
        {
            get
            {
                return _typeFilter;
            }
            set
            {
                _typeFilter = value;
				NotifyPropertyChanged(x => TypeFilter);
                FilterData();
                
            }
        }	

 

		private string _invoiceNoFilter;
        public string InvoiceNoFilter
        {
            get
            {
                return _invoiceNoFilter;
            }
            set
            {
                _invoiceNoFilter = value;
				NotifyPropertyChanged(x => InvoiceNoFilter);
                FilterData();
                
            }
        }	

 

		private string _supplierInvoiceNoFilter;
        public string SupplierInvoiceNoFilter
        {
            get
            {
                return _supplierInvoiceNoFilter;
            }
            set
            {
                _supplierInvoiceNoFilter = value;
				NotifyPropertyChanged(x => SupplierInvoiceNoFilter);
                FilterData();
                
            }
        }	

 

		private Double? _invoiceTotalFilter;
        public Double? InvoiceTotalFilter
        {
            get
            {
                return _invoiceTotalFilter;
            }
            set
            {
                _invoiceTotalFilter = value;
				NotifyPropertyChanged(x => InvoiceTotalFilter);
                FilterData();
                
            }
        }	

 

		private string _warehouseNoFilter;
        public string WarehouseNoFilter
        {
            get
            {
                return _warehouseNoFilter;
            }
            set
            {
                _warehouseNoFilter = value;
				NotifyPropertyChanged(x => WarehouseNoFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _packagesFilter;
        public Int32? PackagesFilter
        {
            get
            {
                return _packagesFilter;
            }
            set
            {
                _packagesFilter = value;
				NotifyPropertyChanged(x => PackagesFilter);
                FilterData();
                
            }
        }	

 

		private string _declarant_Reference_NumberFilter;
        public string Declarant_Reference_NumberFilter
        {
            get
            {
                return _declarant_Reference_NumberFilter;
            }
            set
            {
                _declarant_Reference_NumberFilter = value;
				NotifyPropertyChanged(x => Declarant_Reference_NumberFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _totalPackagesFilter;
        public Int32? TotalPackagesFilter
        {
            get
            {
                return _totalPackagesFilter;
            }
            set
            {
                _totalPackagesFilter = value;
				NotifyPropertyChanged(x => TotalPackagesFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_SubmitEntryCIF.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitEntryCIF);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(TypeFilter) == false)
						res.Append(" && " + string.Format("Type.Contains(\"{0}\")",  TypeFilter));						
 

									if(string.IsNullOrEmpty(InvoiceNoFilter) == false)
						res.Append(" && " + string.Format("InvoiceNo.Contains(\"{0}\")",  InvoiceNoFilter));						
 

									if(string.IsNullOrEmpty(SupplierInvoiceNoFilter) == false)
						res.Append(" && " + string.Format("SupplierInvoiceNo.Contains(\"{0}\")",  SupplierInvoiceNoFilter));						
 

					if(InvoiceTotalFilter.HasValue)
						res.Append(" && " + string.Format("InvoiceTotal == {0}",  InvoiceTotalFilter.ToString()));				 

									if(string.IsNullOrEmpty(WarehouseNoFilter) == false)
						res.Append(" && " + string.Format("WarehouseNo.Contains(\"{0}\")",  WarehouseNoFilter));						
 

					if(PackagesFilter.HasValue)
						res.Append(" && " + string.Format("Packages == {0}",  PackagesFilter.ToString()));				 

									if(string.IsNullOrEmpty(Declarant_Reference_NumberFilter) == false)
						res.Append(" && " + string.Format("Declarant_Reference_Number.Contains(\"{0}\")",  Declarant_Reference_NumberFilter));						
 

					if(TotalPackagesFilter.HasValue)
						res.Append(" && " + string.Format("TotalPackages == {0}",  TotalPackagesFilter.ToString()));							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_SubmitEntryCIF> lst = null;
            using (var ctx = new TODO_SubmitEntryCIFRepository())
            {
                lst = await ctx.GetTODO_SubmitEntryCIFByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_SubmitEntryCIFExcelLine, List<TODO_SubmitEntryCIFExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_SubmitEntryCIFExcelLine
                {
 
                    Type = x.Type ,
                    
 
                    InvoiceNo = x.InvoiceNo ,
                    
 
                    SupplierInvoiceNo = x.SupplierInvoiceNo ,
                    
 
                    InvoiceTotal = x.InvoiceTotal ,
                    
 
                    WarehouseNo = x.WarehouseNo ,
                    
 
                    Packages = x.Packages ,
                    
 
                    Declarant_Reference_Number = x.Declarant_Reference_Number ,
                    
 
                    TotalPackages = x.TotalPackages 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TODO_SubmitEntryCIFExcelLine
        {
		 
                    public string Type { get; set; } 
                    
 
                    public string InvoiceNo { get; set; } 
                    
 
                    public string SupplierInvoiceNo { get; set; } 
                    
 
                    public Nullable<double> InvoiceTotal { get; set; } 
                    
 
                    public string WarehouseNo { get; set; } 
                    
 
                    public int Packages { get; set; } 
                    
 
                    public string Declarant_Reference_Number { get; set; } 
                    
 
                    public Nullable<int> TotalPackages { get; set; } 
                    
        }

		
    }
}
		

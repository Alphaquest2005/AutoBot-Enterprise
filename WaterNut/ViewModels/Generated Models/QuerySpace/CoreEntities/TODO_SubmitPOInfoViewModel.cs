// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_SubmitPOInfoViewModel_AutoGen : ViewModelBase<TODO_SubmitPOInfoViewModel_AutoGen>
	{

       private static readonly TODO_SubmitPOInfoViewModel_AutoGen instance;
       static TODO_SubmitPOInfoViewModel_AutoGen()
        {
            instance = new TODO_SubmitPOInfoViewModel_AutoGen();
        }

       public static TODO_SubmitPOInfoViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_SubmitPOInfoViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_SubmitPOInfo>(MessageToken.CurrentTODO_SubmitPOInfoChanged, OnCurrentTODO_SubmitPOInfoChanged);
            RegisterToReceiveMessages(MessageToken.TODO_SubmitPOInfoChanged, OnTODO_SubmitPOInfoChanged);
			RegisterToReceiveMessages(MessageToken.TODO_SubmitPOInfoFilterExpressionChanged, OnTODO_SubmitPOInfoFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_SubmitPOInfo = new VirtualList<TODO_SubmitPOInfo>(vloader);
			TODO_SubmitPOInfo.LoadingStateChanged += TODO_SubmitPOInfo_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_SubmitPOInfo, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_SubmitPOInfo> _TODO_SubmitPOInfo = null;
        public VirtualList<TODO_SubmitPOInfo> TODO_SubmitPOInfo
        {
            get
            {
                return _TODO_SubmitPOInfo;
            }
            set
            {
                _TODO_SubmitPOInfo = value;
                NotifyPropertyChanged( x => x.TODO_SubmitPOInfo);
            }
        }

		 private void OnTODO_SubmitPOInfoFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => TODO_SubmitPOInfo.Refresh()).ConfigureAwait(false);
            SelectedTODO_SubmitPOInfo.Clear();
            NotifyPropertyChanged(x => SelectedTODO_SubmitPOInfo);
            BeginSendMessage(MessageToken.SelectedTODO_SubmitPOInfoChanged, new NotificationEventArgs(MessageToken.SelectedTODO_SubmitPOInfoChanged));
        }

		void TODO_SubmitPOInfo_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_SubmitPOInfo.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_SubmitPOInfo);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_SubmitPOInfo | Error occured..." + TODO_SubmitPOInfo.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_SubmitPOInfo);
                    break;
            }
           
        }

		
		public readonly TODO_SubmitPOInfoVirturalListLoader vloader = new TODO_SubmitPOInfoVirturalListLoader();

		private ObservableCollection<TODO_SubmitPOInfo> _selectedTODO_SubmitPOInfo = new ObservableCollection<TODO_SubmitPOInfo>();
        public ObservableCollection<TODO_SubmitPOInfo> SelectedTODO_SubmitPOInfo
        {
            get
            {
                return _selectedTODO_SubmitPOInfo;
            }
            set
            {
                _selectedTODO_SubmitPOInfo = value;
				BeginSendMessage(MessageToken.SelectedTODO_SubmitPOInfoChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_SubmitPOInfoChanged));
				 NotifyPropertyChanged(x => SelectedTODO_SubmitPOInfo);
            }
        }

        internal virtual void OnCurrentTODO_SubmitPOInfoChanged(object sender, NotificationEventArgs<TODO_SubmitPOInfo> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_SubmitPOInfo != null) BaseViewModel.Instance.CurrentTODO_SubmitPOInfo.PropertyChanged += CurrentTODO_SubmitPOInfo__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_SubmitPOInfo);
        }   

            void CurrentTODO_SubmitPOInfo__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentTODO_SubmitPOInfo.ApplicationSettings) == false) ApplicationSettings.Add(CurrentTODO_SubmitPOInfo.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnTODO_SubmitPOInfoChanged(object sender, NotificationEventArgs e)
        {
            _TODO_SubmitPOInfo.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitPOInfo);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    TODO_SubmitPOInfo.Refresh();
					NotifyPropertyChanged(x => this.TODO_SubmitPOInfo);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_SubmitPOInfo.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitPOInfo);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_SubmitPOInfo> lst = null;
            using (var ctx = new TODO_SubmitPOInfoRepository())
            {
                lst = await ctx.GetTODO_SubmitPOInfoByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_SubmitPOInfo = new ObservableCollection<TODO_SubmitPOInfo>(lst);
        }

 

		private string _numberFilter;
        public string NumberFilter
        {
            get
            {
                return _numberFilter;
            }
            set
            {
                _numberFilter = value;
				NotifyPropertyChanged(x => NumberFilter);
                FilterData();
                
            }
        }	

 

		private string _dateFilter;
        public string DateFilter
        {
            get
            {
                return _dateFilter;
            }
            set
            {
                _dateFilter = value;
				NotifyPropertyChanged(x => DateFilter);
                FilterData();
                
            }
        }	

 

		private string _supplierInvoiceNoFilter;
        public string SupplierInvoiceNoFilter
        {
            get
            {
                return _supplierInvoiceNoFilter;
            }
            set
            {
                _supplierInvoiceNoFilter = value;
				NotifyPropertyChanged(x => SupplierInvoiceNoFilter);
                FilterData();
                
            }
        }	

 

		private string _emailIdFilter;
        public string EmailIdFilter
        {
            get
            {
                return _emailIdFilter;
            }
            set
            {
                _emailIdFilter = value;
				NotifyPropertyChanged(x => EmailIdFilter);
                FilterData();
                
            }
        }	

 

		private string _statusFilter;
        public string StatusFilter
        {
            get
            {
                return _statusFilter;
            }
            set
            {
                _statusFilter = value;
				NotifyPropertyChanged(x => StatusFilter);
                FilterData();
                
            }
        }	

 

		private string _customsProcedureFilter;
        public string CustomsProcedureFilter
        {
            get
            {
                return _customsProcedureFilter;
            }
            set
            {
                _customsProcedureFilter = value;
				NotifyPropertyChanged(x => CustomsProcedureFilter);
                FilterData();
                
            }
        }	

 

		private string _documentTypeFilter;
        public string DocumentTypeFilter
        {
            get
            {
                return _documentTypeFilter;
            }
            set
            {
                _documentTypeFilter = value;
				NotifyPropertyChanged(x => DocumentTypeFilter);
                FilterData();
                
            }
        }	

 

		private string _cNumberFilter;
        public string CNumberFilter
        {
            get
            {
                return _cNumberFilter;
            }
            set
            {
                _cNumberFilter = value;
				NotifyPropertyChanged(x => CNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _referenceFilter;
        public string ReferenceFilter
        {
            get
            {
                return _referenceFilter;
            }
            set
            {
                _referenceFilter = value;
				NotifyPropertyChanged(x => ReferenceFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _totals_taxesFilter;
        public Decimal? Totals_taxesFilter
        {
            get
            {
                return _totals_taxesFilter;
            }
            set
            {
                _totals_taxesFilter = value;
				NotifyPropertyChanged(x => Totals_taxesFilter);
                FilterData();
                
            }
        }	

 

		private Double? _total_CIFFilter;
        public Double? Total_CIFFilter
        {
            get
            {
                return _total_CIFFilter;
            }
            set
            {
                _total_CIFFilter = value;
				NotifyPropertyChanged(x => Total_CIFFilter);
                FilterData();
                
            }
        }	

 

		private string _warehouseNoFilter;
        public string WarehouseNoFilter
        {
            get
            {
                return _warehouseNoFilter;
            }
            set
            {
                _warehouseNoFilter = value;
				NotifyPropertyChanged(x => WarehouseNoFilter);
                FilterData();
                
            }
        }	

 

		private string _billingLineFilter;
        public string BillingLineFilter
        {
            get
            {
                return _billingLineFilter;
            }
            set
            {
                _billingLineFilter = value;
				NotifyPropertyChanged(x => BillingLineFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isSubmittedFilter;
        public Boolean? IsSubmittedFilter
        {
            get
            {
                return _isSubmittedFilter;
            }
            set
            {
                _isSubmittedFilter = value;
				NotifyPropertyChanged(x => IsSubmittedFilter);
                FilterData();
                
            }
        }	

 

		private string _pONumberFilter;
        public string PONumberFilter
        {
            get
            {
                return _pONumberFilter;
            }
            set
            {
                _pONumberFilter = value;
				NotifyPropertyChanged(x => PONumberFilter);
                FilterData();
                
            }
        }	

 

		private string _marks2_of_packagesFilter;
        public string Marks2_of_packagesFilter
        {
            get
            {
                return _marks2_of_packagesFilter;
            }
            set
            {
                _marks2_of_packagesFilter = value;
				NotifyPropertyChanged(x => Marks2_of_packagesFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_SubmitPOInfo.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitPOInfo);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(NumberFilter) == false)
						res.Append(" && " + string.Format("Number.Contains(\"{0}\")",  NumberFilter));						
 

									if(string.IsNullOrEmpty(DateFilter) == false)
						res.Append(" && " + string.Format("Date.Contains(\"{0}\")",  DateFilter));						
 

									if(string.IsNullOrEmpty(SupplierInvoiceNoFilter) == false)
						res.Append(" && " + string.Format("SupplierInvoiceNo.Contains(\"{0}\")",  SupplierInvoiceNoFilter));						
 

									if(string.IsNullOrEmpty(EmailIdFilter) == false)
						res.Append(" && " + string.Format("EmailId.Contains(\"{0}\")",  EmailIdFilter));						
 

									if(string.IsNullOrEmpty(StatusFilter) == false)
						res.Append(" && " + string.Format("Status.Contains(\"{0}\")",  StatusFilter));						
 

									if(string.IsNullOrEmpty(CustomsProcedureFilter) == false)
						res.Append(" && " + string.Format("CustomsProcedure.Contains(\"{0}\")",  CustomsProcedureFilter));						
 

									if(string.IsNullOrEmpty(DocumentTypeFilter) == false)
						res.Append(" && " + string.Format("DocumentType.Contains(\"{0}\")",  DocumentTypeFilter));						
 

									if(string.IsNullOrEmpty(CNumberFilter) == false)
						res.Append(" && " + string.Format("CNumber.Contains(\"{0}\")",  CNumberFilter));						
 

									if(string.IsNullOrEmpty(ReferenceFilter) == false)
						res.Append(" && " + string.Format("Reference.Contains(\"{0}\")",  ReferenceFilter));						
 

					if(Totals_taxesFilter.HasValue)
						res.Append(" && " + string.Format("Totals_taxes == {0}",  Totals_taxesFilter.ToString()));				 

					if(Total_CIFFilter.HasValue)
						res.Append(" && " + string.Format("Total_CIF == {0}",  Total_CIFFilter.ToString()));				 

									if(string.IsNullOrEmpty(WarehouseNoFilter) == false)
						res.Append(" && " + string.Format("WarehouseNo.Contains(\"{0}\")",  WarehouseNoFilter));						
 

									if(string.IsNullOrEmpty(BillingLineFilter) == false)
						res.Append(" && " + string.Format("BillingLine.Contains(\"{0}\")",  BillingLineFilter));						
 

									if(IsSubmittedFilter.HasValue)
						res.Append(" && " + string.Format("IsSubmitted == {0}",  IsSubmittedFilter));						
 

									if(string.IsNullOrEmpty(PONumberFilter) == false)
						res.Append(" && " + string.Format("PONumber.Contains(\"{0}\")",  PONumberFilter));						
 

									if(string.IsNullOrEmpty(Marks2_of_packagesFilter) == false)
						res.Append(" && " + string.Format("Marks2_of_packages.Contains(\"{0}\")",  Marks2_of_packagesFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_SubmitPOInfo> lst = null;
            using (var ctx = new TODO_SubmitPOInfoRepository())
            {
                lst = await ctx.GetTODO_SubmitPOInfoByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_SubmitPOInfoExcelLine, List<TODO_SubmitPOInfoExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_SubmitPOInfoExcelLine
                {
 
                    Number = x.Number ,
                    
 
                    Date = x.Date ,
                    
 
                    SupplierInvoiceNo = x.SupplierInvoiceNo ,
                    
 
                    EmailId = x.EmailId ,
                    
 
                    Status = x.Status ,
                    
 
                    CustomsProcedure = x.CustomsProcedure ,
                    
 
                    DocumentType = x.DocumentType ,
                    
 
                    CNumber = x.CNumber ,
                    
 
                    Reference = x.Reference ,
                    
 
                    Totals_taxes = x.Totals_taxes ,
                    
 
                    Total_CIF = x.Total_CIF ,
                    
 
                    WarehouseNo = x.WarehouseNo ,
                    
 
                    BillingLine = x.BillingLine ,
                    
 
                    IsSubmitted = x.IsSubmitted ,
                    
 
                    PONumber = x.PONumber ,
                    
 
                    Marks2_of_packages = x.Marks2_of_packages 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class TODO_SubmitPOInfoExcelLine
        {
		 
                    public string Number { get; set; } 
                    
 
                    public string Date { get; set; } 
                    
 
                    public string SupplierInvoiceNo { get; set; } 
                    
 
                    public string EmailId { get; set; } 
                    
 
                    public string Status { get; set; } 
                    
 
                    public string CustomsProcedure { get; set; } 
                    
 
                    public string DocumentType { get; set; } 
                    
 
                    public string CNumber { get; set; } 
                    
 
                    public string Reference { get; set; } 
                    
 
                    public Nullable<decimal> Totals_taxes { get; set; } 
                    
 
                    public double Total_CIF { get; set; } 
                    
 
                    public string WarehouseNo { get; set; } 
                    
 
                    public string BillingLine { get; set; } 
                    
 
                    public Nullable<bool> IsSubmitted { get; set; } 
                    
 
                    public string PONumber { get; set; } 
                    
 
                    public string Marks2_of_packages { get; set; } 
                    
        }

		
    }
}
		

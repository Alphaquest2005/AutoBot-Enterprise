// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_SubmitIncompleteEntryDataViewModel_AutoGen : ViewModelBase<TODO_SubmitIncompleteEntryDataViewModel_AutoGen>
	{

       private static readonly TODO_SubmitIncompleteEntryDataViewModel_AutoGen instance;
       static TODO_SubmitIncompleteEntryDataViewModel_AutoGen()
        {
            instance = new TODO_SubmitIncompleteEntryDataViewModel_AutoGen();
        }

       public static TODO_SubmitIncompleteEntryDataViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_SubmitIncompleteEntryDataViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_SubmitIncompleteEntryData>(MessageToken.CurrentTODO_SubmitIncompleteEntryDataChanged, OnCurrentTODO_SubmitIncompleteEntryDataChanged);
            RegisterToReceiveMessages(MessageToken.TODO_SubmitIncompleteEntryDataChanged, OnTODO_SubmitIncompleteEntryDataChanged);
			RegisterToReceiveMessages(MessageToken.TODO_SubmitIncompleteEntryDataFilterExpressionChanged, OnTODO_SubmitIncompleteEntryDataFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_SubmitIncompleteEntryData = new VirtualList<TODO_SubmitIncompleteEntryData>(vloader);
			TODO_SubmitIncompleteEntryData.LoadingStateChanged += TODO_SubmitIncompleteEntryData_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_SubmitIncompleteEntryData, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_SubmitIncompleteEntryData> _TODO_SubmitIncompleteEntryData = null;
        public VirtualList<TODO_SubmitIncompleteEntryData> TODO_SubmitIncompleteEntryData
        {
            get
            {
                return _TODO_SubmitIncompleteEntryData;
            }
            set
            {
                _TODO_SubmitIncompleteEntryData = value;
                NotifyPropertyChanged( x => x.TODO_SubmitIncompleteEntryData);
            }
        }

		 private void OnTODO_SubmitIncompleteEntryDataFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => TODO_SubmitIncompleteEntryData.Refresh()).ConfigureAwait(false);
            SelectedTODO_SubmitIncompleteEntryData.Clear();
            NotifyPropertyChanged(x => SelectedTODO_SubmitIncompleteEntryData);
            BeginSendMessage(MessageToken.SelectedTODO_SubmitIncompleteEntryDataChanged, new NotificationEventArgs(MessageToken.SelectedTODO_SubmitIncompleteEntryDataChanged));
        }

		void TODO_SubmitIncompleteEntryData_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_SubmitIncompleteEntryData.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_SubmitIncompleteEntryData);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_SubmitIncompleteEntryData | Error occured..." + TODO_SubmitIncompleteEntryData.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_SubmitIncompleteEntryData);
                    break;
            }
           
        }

		
		public readonly TODO_SubmitIncompleteEntryDataVirturalListLoader vloader = new TODO_SubmitIncompleteEntryDataVirturalListLoader();

		private ObservableCollection<TODO_SubmitIncompleteEntryData> _selectedTODO_SubmitIncompleteEntryData = new ObservableCollection<TODO_SubmitIncompleteEntryData>();
        public ObservableCollection<TODO_SubmitIncompleteEntryData> SelectedTODO_SubmitIncompleteEntryData
        {
            get
            {
                return _selectedTODO_SubmitIncompleteEntryData;
            }
            set
            {
                _selectedTODO_SubmitIncompleteEntryData = value;
				BeginSendMessage(MessageToken.SelectedTODO_SubmitIncompleteEntryDataChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_SubmitIncompleteEntryDataChanged));
				 NotifyPropertyChanged(x => SelectedTODO_SubmitIncompleteEntryData);
            }
        }

        internal virtual void OnCurrentTODO_SubmitIncompleteEntryDataChanged(object sender, NotificationEventArgs<TODO_SubmitIncompleteEntryData> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_SubmitIncompleteEntryData != null) BaseViewModel.Instance.CurrentTODO_SubmitIncompleteEntryData.PropertyChanged += CurrentTODO_SubmitIncompleteEntryData__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_SubmitIncompleteEntryData);
        }   

            void CurrentTODO_SubmitIncompleteEntryData__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentTODO_SubmitIncompleteEntryData.ApplicationSettings) == false) ApplicationSettings.Add(CurrentTODO_SubmitIncompleteEntryData.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnTODO_SubmitIncompleteEntryDataChanged(object sender, NotificationEventArgs e)
        {
            _TODO_SubmitIncompleteEntryData.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitIncompleteEntryData);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    TODO_SubmitIncompleteEntryData.Refresh();
					NotifyPropertyChanged(x => this.TODO_SubmitIncompleteEntryData);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_SubmitIncompleteEntryData.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitIncompleteEntryData);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_SubmitIncompleteEntryData> lst = null;
            using (var ctx = new TODO_SubmitIncompleteEntryDataRepository())
            {
                lst = await ctx.GetTODO_SubmitIncompleteEntryDataByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_SubmitIncompleteEntryData = new ObservableCollection<TODO_SubmitIncompleteEntryData>(lst);
        }

 
		private DateTime? _startInvoiceDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartInvoiceDateFilter
        {
            get
            {
                return _startInvoiceDateFilter;
            }
            set
            {
                _startInvoiceDateFilter = value;
				NotifyPropertyChanged(x => StartInvoiceDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endInvoiceDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndInvoiceDateFilter
        {
            get
            {
                return _endInvoiceDateFilter;
            }
            set
            {
                _endInvoiceDateFilter = value;
				NotifyPropertyChanged(x => EndInvoiceDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _invoiceDateFilter;
        public DateTime? InvoiceDateFilter
        {
            get
            {
                return _invoiceDateFilter;
            }
            set
            {
                _invoiceDateFilter = value;
				NotifyPropertyChanged(x => InvoiceDateFilter);
                FilterData();
                
            }
        }	

 

		private string _typeFilter;
        public string TypeFilter
        {
            get
            {
                return _typeFilter;
            }
            set
            {
                _typeFilter = value;
				NotifyPropertyChanged(x => TypeFilter);
                FilterData();
                
            }
        }	

 

		private Double? _importedTotalFilter;
        public Double? ImportedTotalFilter
        {
            get
            {
                return _importedTotalFilter;
            }
            set
            {
                _importedTotalFilter = value;
				NotifyPropertyChanged(x => ImportedTotalFilter);
                FilterData();
                
            }
        }	

 

		private string _invoiceNoFilter;
        public string InvoiceNoFilter
        {
            get
            {
                return _invoiceNoFilter;
            }
            set
            {
                _invoiceNoFilter = value;
				NotifyPropertyChanged(x => InvoiceNoFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _importedLinesFilter;
        public Int32? ImportedLinesFilter
        {
            get
            {
                return _importedLinesFilter;
            }
            set
            {
                _importedLinesFilter = value;
				NotifyPropertyChanged(x => ImportedLinesFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _totalLinesFilter;
        public Int32? TotalLinesFilter
        {
            get
            {
                return _totalLinesFilter;
            }
            set
            {
                _totalLinesFilter = value;
				NotifyPropertyChanged(x => TotalLinesFilter);
                FilterData();
                
            }
        }	

 

		private string _currencyFilter;
        public string CurrencyFilter
        {
            get
            {
                return _currencyFilter;
            }
            set
            {
                _currencyFilter = value;
				NotifyPropertyChanged(x => CurrencyFilter);
                FilterData();
                
            }
        }	

 

		private string _dutyFreePaidFilter;
        public string DutyFreePaidFilter
        {
            get
            {
                return _dutyFreePaidFilter;
            }
            set
            {
                _dutyFreePaidFilter = value;
				NotifyPropertyChanged(x => DutyFreePaidFilter);
                FilterData();
                
            }
        }	

 

		private string _emailIdFilter;
        public string EmailIdFilter
        {
            get
            {
                return _emailIdFilter;
            }
            set
            {
                _emailIdFilter = value;
				NotifyPropertyChanged(x => EmailIdFilter);
                FilterData();
                
            }
        }	

 

		private string _supplierCodeFilter;
        public string SupplierCodeFilter
        {
            get
            {
                return _supplierCodeFilter;
            }
            set
            {
                _supplierCodeFilter = value;
				NotifyPropertyChanged(x => SupplierCodeFilter);
                FilterData();
                
            }
        }	

 

		private Double? _expectedTotalFilter;
        public Double? ExpectedTotalFilter
        {
            get
            {
                return _expectedTotalFilter;
            }
            set
            {
                _expectedTotalFilter = value;
				NotifyPropertyChanged(x => ExpectedTotalFilter);
                FilterData();
                
            }
        }	

 

		private Double? _invoiceTotalFilter;
        public Double? InvoiceTotalFilter
        {
            get
            {
                return _invoiceTotalFilter;
            }
            set
            {
                _invoiceTotalFilter = value;
				NotifyPropertyChanged(x => InvoiceTotalFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_SubmitIncompleteEntryData.Refresh();
			NotifyPropertyChanged(x => this.TODO_SubmitIncompleteEntryData);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

 

				if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue)
						{
							if(StartInvoiceDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("InvoiceDate >= \"{0}\"",  Convert.ToDateTime(StartInvoiceDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue)
						{
							if(EndInvoiceDateFilter.HasValue)
								res.Append(" && " + string.Format("InvoiceDate <= \"{0}\"",  Convert.ToDateTime(EndInvoiceDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_invoiceDateFilter).Date != DateTime.MinValue)
						{
							if(InvoiceDateFilter.HasValue)
								res.Append(" && " + string.Format("InvoiceDate == \"{0}\"",  Convert.ToDateTime(InvoiceDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(TypeFilter) == false)
						res.Append(" && " + string.Format("Type.Contains(\"{0}\")",  TypeFilter));						
 

					if(ImportedTotalFilter.HasValue)
						res.Append(" && " + string.Format("ImportedTotal == {0}",  ImportedTotalFilter.ToString()));				 

									if(string.IsNullOrEmpty(InvoiceNoFilter) == false)
						res.Append(" && " + string.Format("InvoiceNo.Contains(\"{0}\")",  InvoiceNoFilter));						
 

					if(ImportedLinesFilter.HasValue)
						res.Append(" && " + string.Format("ImportedLines == {0}",  ImportedLinesFilter.ToString()));				 

					if(TotalLinesFilter.HasValue)
						res.Append(" && " + string.Format("TotalLines == {0}",  TotalLinesFilter.ToString()));				 

									if(string.IsNullOrEmpty(CurrencyFilter) == false)
						res.Append(" && " + string.Format("Currency.Contains(\"{0}\")",  CurrencyFilter));						
 

									if(string.IsNullOrEmpty(DutyFreePaidFilter) == false)
						res.Append(" && " + string.Format("DutyFreePaid.Contains(\"{0}\")",  DutyFreePaidFilter));						
 

									if(string.IsNullOrEmpty(EmailIdFilter) == false)
						res.Append(" && " + string.Format("EmailId.Contains(\"{0}\")",  EmailIdFilter));						
 

									if(string.IsNullOrEmpty(SupplierCodeFilter) == false)
						res.Append(" && " + string.Format("SupplierCode.Contains(\"{0}\")",  SupplierCodeFilter));						
 

					if(ExpectedTotalFilter.HasValue)
						res.Append(" && " + string.Format("ExpectedTotal == {0}",  ExpectedTotalFilter.ToString()));				 

					if(InvoiceTotalFilter.HasValue)
						res.Append(" && " + string.Format("InvoiceTotal == {0}",  InvoiceTotalFilter.ToString()));							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_SubmitIncompleteEntryData> lst = null;
            using (var ctx = new TODO_SubmitIncompleteEntryDataRepository())
            {
                lst = await ctx.GetTODO_SubmitIncompleteEntryDataByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_SubmitIncompleteEntryDataExcelLine, List<TODO_SubmitIncompleteEntryDataExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_SubmitIncompleteEntryDataExcelLine
                {
 
                    InvoiceDate = x.InvoiceDate ,
                    
 
                    Type = x.Type ,
                    
 
                    ImportedTotal = x.ImportedTotal ,
                    
 
                    InvoiceNo = x.InvoiceNo ,
                    
 
                    ImportedLines = x.ImportedLines ,
                    
 
                    TotalLines = x.TotalLines ,
                    
 
                    Currency = x.Currency ,
                    
 
                    DutyFreePaid = x.DutyFreePaid ,
                    
 
                    EmailId = x.EmailId ,
                    
 
                    SupplierCode = x.SupplierCode ,
                    
 
                    ExpectedTotal = x.ExpectedTotal ,
                    
 
                    InvoiceTotal = x.InvoiceTotal 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TODO_SubmitIncompleteEntryDataExcelLine
        {
		 
                    public System.DateTime InvoiceDate { get; set; } 
                    
 
                    public string Type { get; set; } 
                    
 
                    public Nullable<double> ImportedTotal { get; set; } 
                    
 
                    public string InvoiceNo { get; set; } 
                    
 
                    public Nullable<int> ImportedLines { get; set; } 
                    
 
                    public Nullable<int> TotalLines { get; set; } 
                    
 
                    public string Currency { get; set; } 
                    
 
                    public string DutyFreePaid { get; set; } 
                    
 
                    public string EmailId { get; set; } 
                    
 
                    public string SupplierCode { get; set; } 
                    
 
                    public double ExpectedTotal { get; set; } 
                    
 
                    public Nullable<double> InvoiceTotal { get; set; } 
                    
        }

		
    }
}
		

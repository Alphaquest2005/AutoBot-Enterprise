// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class InventoryItemAliasViewModel_AutoGen : ViewModelBase<InventoryItemAliasViewModel_AutoGen>
	{

       private static readonly InventoryItemAliasViewModel_AutoGen instance;
       static InventoryItemAliasViewModel_AutoGen()
        {
            instance = new InventoryItemAliasViewModel_AutoGen();
        }

       public static InventoryItemAliasViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public InventoryItemAliasViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<InventoryItemAlias>(MessageToken.CurrentInventoryItemAliasChanged, OnCurrentInventoryItemAliasChanged);
            RegisterToReceiveMessages(MessageToken.InventoryItemAliasChanged, OnInventoryItemAliasChanged);
			RegisterToReceiveMessages(MessageToken.InventoryItemAliasFilterExpressionChanged, OnInventoryItemAliasFilterExpressionChanged);

 
			RegisterToReceiveMessages<InventoryItems>(MessageToken.CurrentInventoryItemsChanged, OnCurrentInventoryItemsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			InventoryItemAlias = new VirtualList<InventoryItemAlias>(vloader);
			InventoryItemAlias.LoadingStateChanged += InventoryItemAlias_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(InventoryItemAlias, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<InventoryItemAlias> _InventoryItemAlias = null;
        public VirtualList<InventoryItemAlias> InventoryItemAlias
        {
            get
            {
                return _InventoryItemAlias;
            }
            set
            {
                _InventoryItemAlias = value;
            }
        }

		 private void OnInventoryItemAliasFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			InventoryItemAlias.Refresh();
            SelectedInventoryItemAlias.Clear();
            NotifyPropertyChanged(x => SelectedInventoryItemAlias);
            BeginSendMessage(MessageToken.SelectedInventoryItemAliasChanged, new NotificationEventArgs(MessageToken.SelectedInventoryItemAliasChanged));
        }

		void InventoryItemAlias_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (InventoryItemAlias.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => InventoryItemAlias);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("InventoryItemAlias | Error occured..." + InventoryItemAlias.LastLoadingError.Message);
                    NotifyPropertyChanged(x => InventoryItemAlias);
                    break;
            }
           
        }

		
		public readonly InventoryItemAliasVirturalListLoader vloader = new InventoryItemAliasVirturalListLoader();

		private ObservableCollection<InventoryItemAlias> _selectedInventoryItemAlias = new ObservableCollection<InventoryItemAlias>();
        public ObservableCollection<InventoryItemAlias> SelectedInventoryItemAlias
        {
            get
            {
                return _selectedInventoryItemAlias;
            }
            set
            {
                _selectedInventoryItemAlias = value;
				BeginSendMessage(MessageToken.SelectedInventoryItemAliasChanged,
                                    new NotificationEventArgs(MessageToken.SelectedInventoryItemAliasChanged));
				 NotifyPropertyChanged(x => SelectedInventoryItemAlias);
            }
        }

        internal void OnCurrentInventoryItemAliasChanged(object sender, NotificationEventArgs<InventoryItemAlias> e)
        {
            if(BaseViewModel.Instance.CurrentInventoryItemAlias != null) BaseViewModel.Instance.CurrentInventoryItemAlias.PropertyChanged += CurrentInventoryItemAlias__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentInventoryItemAlias);
        }   

            void CurrentInventoryItemAlias__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddInventoryItems")
                   // {
                   //    if(InventoryItems.Contains(CurrentInventoryItemAlias.InventoryItems) == false) InventoryItems.Add(CurrentInventoryItemAlias.InventoryItems);
                    //}
                 } 
        internal void OnInventoryItemAliasChanged(object sender, NotificationEventArgs e)
        {
            _InventoryItemAlias.Refresh();
			NotifyPropertyChanged(x => this.InventoryItemAlias);
        }   


 	
		 internal void OnCurrentInventoryItemsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItems> e)
			{
			if(ViewCurrentInventoryItems == false) return;
			if (e.Data == null || e.Data.ItemNumber == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				
				vloader.FilterExpression = string.Format("ItemNumber == \"{0}\"", e.Data.ItemNumber.ToString());
                }

				InventoryItemAlias.Refresh();
				NotifyPropertyChanged(x => this.InventoryItemAlias);
                // SendMessage(MessageToken.InventoryItemAliasChanged, new NotificationEventArgs(MessageToken.InventoryItemAliasChanged));
                                          
                BaseViewModel.Instance.CurrentInventoryItemAlias = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentInventoryItems = false;
         public bool ViewCurrentInventoryItems
         {
             get
             {
                 return _viewCurrentInventoryItems;
             }
             set
             {
                 _viewCurrentInventoryItems = value;
                 NotifyPropertyChanged(x => x.ViewCurrentInventoryItems);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_InventoryItemAlias.Refresh();
			NotifyPropertyChanged(x => this.InventoryItemAlias);
		}

		public async Task SelectAll()
        {
            IEnumerable<InventoryItemAlias> lst = null;
            using (var ctx = new InventoryItemAliasRepository())
            {
                lst = await ctx.GetInventoryItemAliasByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedInventoryItemAlias = new ObservableCollection<InventoryItemAlias>(lst);
        }

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _aliasNameFilter;
        public string AliasNameFilter
        {
            get
            {
                return _aliasNameFilter;
            }
            set
            {
                _aliasNameFilter = value;
				NotifyPropertyChanged(x => AliasNameFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			InventoryItemAlias.Refresh();
			NotifyPropertyChanged(x => this.InventoryItemAlias);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(AliasNameFilter) == false)
						res.Append(" && " + string.Format("AliasName.Contains(\"{0}\")",  AliasNameFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<InventoryItemAlias> lst = null;
            using (var ctx = new InventoryItemAliasRepository())
            {
                lst = await ctx.GetInventoryItemAliasByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<InventoryItemAliasExcelLine, List<InventoryItemAliasExcelLine>>
            {
                dataToPrint = lst.Select(x => new InventoryItemAliasExcelLine
                {
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    AliasName = x.AliasName 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class InventoryItemAliasExcelLine
        {
		 
                    public string ItemNumber { get; set; } 
                    
 
                    public string AliasName { get; set; } 
                    
        }

		
    }
}
		

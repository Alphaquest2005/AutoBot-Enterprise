// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class TODO_DeleteDocumentSetViewModel_AutoGen : ViewModelBase<TODO_DeleteDocumentSetViewModel_AutoGen>
	{

       private static readonly TODO_DeleteDocumentSetViewModel_AutoGen instance;
       static TODO_DeleteDocumentSetViewModel_AutoGen()
        {
            instance = new TODO_DeleteDocumentSetViewModel_AutoGen();
        }

       public static TODO_DeleteDocumentSetViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public TODO_DeleteDocumentSetViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<TODO_DeleteDocumentSet>(MessageToken.CurrentTODO_DeleteDocumentSetChanged, OnCurrentTODO_DeleteDocumentSetChanged);
            RegisterToReceiveMessages(MessageToken.TODO_DeleteDocumentSetChanged, OnTODO_DeleteDocumentSetChanged);
			RegisterToReceiveMessages(MessageToken.TODO_DeleteDocumentSetFilterExpressionChanged, OnTODO_DeleteDocumentSetFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			TODO_DeleteDocumentSet = new VirtualList<TODO_DeleteDocumentSet>(vloader);
			TODO_DeleteDocumentSet.LoadingStateChanged += TODO_DeleteDocumentSet_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(TODO_DeleteDocumentSet, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<TODO_DeleteDocumentSet> _TODO_DeleteDocumentSet = null;
        public VirtualList<TODO_DeleteDocumentSet> TODO_DeleteDocumentSet
        {
            get
            {
                return _TODO_DeleteDocumentSet;
            }
            set
            {
                _TODO_DeleteDocumentSet = value;
            }
        }

		 private void OnTODO_DeleteDocumentSetFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			TODO_DeleteDocumentSet.Refresh();
            SelectedTODO_DeleteDocumentSet.Clear();
            NotifyPropertyChanged(x => SelectedTODO_DeleteDocumentSet);
            BeginSendMessage(MessageToken.SelectedTODO_DeleteDocumentSetChanged, new NotificationEventArgs(MessageToken.SelectedTODO_DeleteDocumentSetChanged));
        }

		void TODO_DeleteDocumentSet_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (TODO_DeleteDocumentSet.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => TODO_DeleteDocumentSet);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("TODO_DeleteDocumentSet | Error occured..." + TODO_DeleteDocumentSet.LastLoadingError.Message);
                    NotifyPropertyChanged(x => TODO_DeleteDocumentSet);
                    break;
            }
           
        }

		
		public readonly TODO_DeleteDocumentSetVirturalListLoader vloader = new TODO_DeleteDocumentSetVirturalListLoader();

		private ObservableCollection<TODO_DeleteDocumentSet> _selectedTODO_DeleteDocumentSet = new ObservableCollection<TODO_DeleteDocumentSet>();
        public ObservableCollection<TODO_DeleteDocumentSet> SelectedTODO_DeleteDocumentSet
        {
            get
            {
                return _selectedTODO_DeleteDocumentSet;
            }
            set
            {
                _selectedTODO_DeleteDocumentSet = value;
				BeginSendMessage(MessageToken.SelectedTODO_DeleteDocumentSetChanged,
                                    new NotificationEventArgs(MessageToken.SelectedTODO_DeleteDocumentSetChanged));
				 NotifyPropertyChanged(x => SelectedTODO_DeleteDocumentSet);
            }
        }

        internal void OnCurrentTODO_DeleteDocumentSetChanged(object sender, NotificationEventArgs<TODO_DeleteDocumentSet> e)
        {
            if(BaseViewModel.Instance.CurrentTODO_DeleteDocumentSet != null) BaseViewModel.Instance.CurrentTODO_DeleteDocumentSet.PropertyChanged += CurrentTODO_DeleteDocumentSet__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentTODO_DeleteDocumentSet);
        }   

            void CurrentTODO_DeleteDocumentSet__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal void OnTODO_DeleteDocumentSetChanged(object sender, NotificationEventArgs e)
        {
            _TODO_DeleteDocumentSet.Refresh();
			NotifyPropertyChanged(x => this.TODO_DeleteDocumentSet);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_TODO_DeleteDocumentSet.Refresh();
			NotifyPropertyChanged(x => this.TODO_DeleteDocumentSet);
		}

		public async Task SelectAll()
        {
            IEnumerable<TODO_DeleteDocumentSet> lst = null;
            using (var ctx = new TODO_DeleteDocumentSetRepository())
            {
                lst = await ctx.GetTODO_DeleteDocumentSetByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedTODO_DeleteDocumentSet = new ObservableCollection<TODO_DeleteDocumentSet>(lst);
        }

 

		private string _declarant_Reference_NumberFilter;
        public string Declarant_Reference_NumberFilter
        {
            get
            {
                return _declarant_Reference_NumberFilter;
            }
            set
            {
                _declarant_Reference_NumberFilter = value;
				NotifyPropertyChanged(x => Declarant_Reference_NumberFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			TODO_DeleteDocumentSet.Refresh();
			NotifyPropertyChanged(x => this.TODO_DeleteDocumentSet);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(Declarant_Reference_NumberFilter) == false)
						res.Append(" && " + string.Format("Declarant_Reference_Number.Contains(\"{0}\")",  Declarant_Reference_NumberFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<TODO_DeleteDocumentSet> lst = null;
            using (var ctx = new TODO_DeleteDocumentSetRepository())
            {
                lst = await ctx.GetTODO_DeleteDocumentSetByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<TODO_DeleteDocumentSetExcelLine, List<TODO_DeleteDocumentSetExcelLine>>
            {
                dataToPrint = lst.Select(x => new TODO_DeleteDocumentSetExcelLine
                {
 
                    Declarant_Reference_Number = x.Declarant_Reference_Number 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class TODO_DeleteDocumentSetExcelLine
        {
		 
                    public string Declarant_Reference_Number { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class FileTypeContactsViewModel_AutoGen : ViewModelBase<FileTypeContactsViewModel_AutoGen>
	{

       private static readonly FileTypeContactsViewModel_AutoGen instance;
       static FileTypeContactsViewModel_AutoGen()
        {
            instance = new FileTypeContactsViewModel_AutoGen();
        }

       public static FileTypeContactsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public FileTypeContactsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<FileTypeContacts>(MessageToken.CurrentFileTypeContactsChanged, OnCurrentFileTypeContactsChanged);
            RegisterToReceiveMessages(MessageToken.FileTypeContactsChanged, OnFileTypeContactsChanged);
			RegisterToReceiveMessages(MessageToken.FileTypeContactsFilterExpressionChanged, OnFileTypeContactsFilterExpressionChanged);

 
			RegisterToReceiveMessages<Contacts>(MessageToken.CurrentContactsChanged, OnCurrentContactsChanged);
 
			RegisterToReceiveMessages<FileTypes>(MessageToken.CurrentFileTypesChanged, OnCurrentFileTypesChanged);

 			// Recieve messages for Core Current Entities Changed
 

			FileTypeContacts = new VirtualList<FileTypeContacts>(vloader);
			FileTypeContacts.LoadingStateChanged += FileTypeContacts_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(FileTypeContacts, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<FileTypeContacts> _FileTypeContacts = null;
        public VirtualList<FileTypeContacts> FileTypeContacts
        {
            get
            {
                return _FileTypeContacts;
            }
            set
            {
                _FileTypeContacts = value;
                NotifyPropertyChanged( x => x.FileTypeContacts);
            }
        }

		 private void OnFileTypeContactsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => FileTypeContacts.Refresh()).ConfigureAwait(false);
            SelectedFileTypeContacts.Clear();
            NotifyPropertyChanged(x => SelectedFileTypeContacts);
            BeginSendMessage(MessageToken.SelectedFileTypeContactsChanged, new NotificationEventArgs(MessageToken.SelectedFileTypeContactsChanged));
        }

		void FileTypeContacts_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (FileTypeContacts.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => FileTypeContacts);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("FileTypeContacts | Error occured..." + FileTypeContacts.LastLoadingError.Message);
                    NotifyPropertyChanged(x => FileTypeContacts);
                    break;
            }
           
        }

		
		public readonly FileTypeContactsVirturalListLoader vloader = new FileTypeContactsVirturalListLoader();

		private ObservableCollection<FileTypeContacts> _selectedFileTypeContacts = new ObservableCollection<FileTypeContacts>();
        public ObservableCollection<FileTypeContacts> SelectedFileTypeContacts
        {
            get
            {
                return _selectedFileTypeContacts;
            }
            set
            {
                _selectedFileTypeContacts = value;
				BeginSendMessage(MessageToken.SelectedFileTypeContactsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedFileTypeContactsChanged));
				 NotifyPropertyChanged(x => SelectedFileTypeContacts);
            }
        }

        internal virtual void OnCurrentFileTypeContactsChanged(object sender, NotificationEventArgs<FileTypeContacts> e)
        {
            if(BaseViewModel.Instance.CurrentFileTypeContacts != null) BaseViewModel.Instance.CurrentFileTypeContacts.PropertyChanged += CurrentFileTypeContacts__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentFileTypeContacts);
        }   

            void CurrentFileTypeContacts__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddContacts")
                   // {
                   //    if(Contacts.Contains(CurrentFileTypeContacts.Contacts) == false) Contacts.Add(CurrentFileTypeContacts.Contacts);
                    //}
                    //if (e.PropertyName == "AddFileTypes")
                   // {
                   //    if(FileTypes.Contains(CurrentFileTypeContacts.FileTypes) == false) FileTypes.Add(CurrentFileTypeContacts.FileTypes);
                    //}
                 } 
        internal virtual void OnFileTypeContactsChanged(object sender, NotificationEventArgs e)
        {
            _FileTypeContacts.Refresh();
			NotifyPropertyChanged(x => this.FileTypeContacts);
        }   


 	
		 internal virtual void OnCurrentContactsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Contacts> e)
			{
			if(ViewCurrentContacts == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("ContactId == {0}", e.Data.Id.ToString());
                 }

				FileTypeContacts.Refresh();
				NotifyPropertyChanged(x => this.FileTypeContacts);
                // SendMessage(MessageToken.FileTypeContactsChanged, new NotificationEventArgs(MessageToken.FileTypeContactsChanged));
                                          
                BaseViewModel.Instance.CurrentFileTypeContacts = null;
			}
	
		 internal virtual void OnCurrentFileTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypes> e)
			{
			if(ViewCurrentFileTypes == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("FileTypeId == {0}", e.Data.Id.ToString());
                 }

				FileTypeContacts.Refresh();
				NotifyPropertyChanged(x => this.FileTypeContacts);
                // SendMessage(MessageToken.FileTypeContactsChanged, new NotificationEventArgs(MessageToken.FileTypeContactsChanged));
                                          
                BaseViewModel.Instance.CurrentFileTypeContacts = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentContacts = false;
         public bool ViewCurrentContacts
         {
             get
             {
                 return _viewCurrentContacts;
             }
             set
             {
                 _viewCurrentContacts = value;
                 NotifyPropertyChanged(x => x.ViewCurrentContacts);
                FilterData();
             }
         }
 	
		 bool _viewCurrentFileTypes = false;
         public bool ViewCurrentFileTypes
         {
             get
             {
                 return _viewCurrentFileTypes;
             }
             set
             {
                 _viewCurrentFileTypes = value;
                 NotifyPropertyChanged(x => x.ViewCurrentFileTypes);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_FileTypeContacts.Refresh();
			NotifyPropertyChanged(x => this.FileTypeContacts);
		}

		public async Task SelectAll()
        {
            IEnumerable<FileTypeContacts> lst = null;
            using (var ctx = new FileTypeContactsRepository())
            {
                lst = await ctx.GetFileTypeContactsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedFileTypeContacts = new ObservableCollection<FileTypeContacts>(lst);
        }

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			FileTypeContacts.Refresh();
			NotifyPropertyChanged(x => this.FileTypeContacts);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<FileTypeContacts> lst = null;
            using (var ctx = new FileTypeContactsRepository())
            {
                lst = await ctx.GetFileTypeContactsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<FileTypeContactsExcelLine, List<FileTypeContactsExcelLine>>
            {
                dataToPrint = lst.Select(x => new FileTypeContactsExcelLine
                {
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class FileTypeContactsExcelLine
        {
		        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class AsycudaDocumentItemViewModel_AutoGen : ViewModelBase<AsycudaDocumentItemViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentItemViewModel_AutoGen instance;
       static AsycudaDocumentItemViewModel_AutoGen()
        {
            instance = new AsycudaDocumentItemViewModel_AutoGen();
        }

       public static AsycudaDocumentItemViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentItemViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentItem>(MessageToken.CurrentAsycudaDocumentItemChanged, OnCurrentAsycudaDocumentItemChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentItemsChanged, OnAsycudaDocumentItemsChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentItemsFilterExpressionChanged, OnAsycudaDocumentItemsFilterExpressionChanged);

 
			RegisterToReceiveMessages<AsycudaDocument>(MessageToken.CurrentAsycudaDocumentChanged, OnCurrentAsycudaDocumentChanged);
 
			RegisterToReceiveMessages<InventoryItems>(MessageToken.CurrentInventoryItemsChanged, OnCurrentInventoryItemsChanged);

 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentItems = new VirtualList<AsycudaDocumentItem>(vloader);
			AsycudaDocumentItems.LoadingStateChanged += AsycudaDocumentItems_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentItems, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentItem> _AsycudaDocumentItems = null;
        public VirtualList<AsycudaDocumentItem> AsycudaDocumentItems
        {
            get
            {
                return _AsycudaDocumentItems;
            }
            set
            {
                _AsycudaDocumentItems = value;
            }
        }

		 private void OnAsycudaDocumentItemsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			AsycudaDocumentItems.Refresh();
            SelectedAsycudaDocumentItems.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentItems);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentItemsChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentItemsChanged));
        }

		void AsycudaDocumentItems_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentItems.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentItems);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentItems | Error occured..." + AsycudaDocumentItems.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentItems);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentItemVirturalListLoader vloader = new AsycudaDocumentItemVirturalListLoader();

		private ObservableCollection<AsycudaDocumentItem> _selectedAsycudaDocumentItems = new ObservableCollection<AsycudaDocumentItem>();
        public ObservableCollection<AsycudaDocumentItem> SelectedAsycudaDocumentItems
        {
            get
            {
                return _selectedAsycudaDocumentItems;
            }
            set
            {
                _selectedAsycudaDocumentItems = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentItemsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentItemsChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentItems);
            }
        }

        internal void OnCurrentAsycudaDocumentItemChanged(object sender, NotificationEventArgs<AsycudaDocumentItem> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentItem != null) BaseViewModel.Instance.CurrentAsycudaDocumentItem.PropertyChanged += CurrentAsycudaDocumentItem__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItem);
        }   

            void CurrentAsycudaDocumentItem__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddAsycudaDocument")
                   // {
                   //    if(AsycudaDocuments.Contains(CurrentAsycudaDocumentItem.AsycudaDocument) == false) AsycudaDocuments.Add(CurrentAsycudaDocumentItem.AsycudaDocument);
                    //}
                    //if (e.PropertyName == "AddInventoryItems")
                   // {
                   //    if(InventoryItems.Contains(CurrentAsycudaDocumentItem.InventoryItems) == false) InventoryItems.Add(CurrentAsycudaDocumentItem.InventoryItems);
                    //}
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentAsycudaDocumentItem.ApplicationSettings) == false) ApplicationSettings.Add(CurrentAsycudaDocumentItem.ApplicationSettings);
                    //}
                 } 
        internal void OnAsycudaDocumentItemsChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentItems.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentItems);
        }   


 	
		 internal void OnCurrentAsycudaDocumentChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocument> e)
			{
			if(ViewCurrentAsycudaDocument == false) return;
			if (e.Data == null || e.Data.ASYCUDA_Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("AsycudaDocumentId == {0}", e.Data.ASYCUDA_Id.ToString());
                 }

				AsycudaDocumentItems.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentItems);
                // SendMessage(MessageToken.AsycudaDocumentItemsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentItemsChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocumentItem = null;
			}
	
		 internal void OnCurrentInventoryItemsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItems> e)
			{
			if(ViewCurrentInventoryItems == false) return;
			if (e.Data == null || e.Data.ItemNumber == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				
				vloader.FilterExpression = string.Format("ItemNumber == \"{0}\"", e.Data.ItemNumber.ToString());
                }

				AsycudaDocumentItems.Refresh();
				NotifyPropertyChanged(x => this.AsycudaDocumentItems);
                // SendMessage(MessageToken.AsycudaDocumentItemsChanged, new NotificationEventArgs(MessageToken.AsycudaDocumentItemsChanged));
                                          
                BaseViewModel.Instance.CurrentAsycudaDocumentItem = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    AsycudaDocumentItems.Refresh();
					NotifyPropertyChanged(x => this.AsycudaDocumentItems);
				}
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentAsycudaDocument = false;
         public bool ViewCurrentAsycudaDocument
         {
             get
             {
                 return _viewCurrentAsycudaDocument;
             }
             set
             {
                 _viewCurrentAsycudaDocument = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocument);
                FilterData();
             }
         }
 	
		 bool _viewCurrentInventoryItems = false;
         public bool ViewCurrentInventoryItems
         {
             get
             {
                 return _viewCurrentInventoryItems;
             }
             set
             {
                 _viewCurrentInventoryItems = value;
                 NotifyPropertyChanged(x => x.ViewCurrentInventoryItems);
                FilterData();
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_AsycudaDocumentItems.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentItems);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentItem> lst = null;
            using (var ctx = new AsycudaDocumentItemRepository())
            {
                lst = await ctx.GetAsycudaDocumentItemsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentItems = new ObservableCollection<AsycudaDocumentItem>(lst);
        }

 

		private string _lineNumberFilter;
        public string LineNumberFilter
        {
            get
            {
                return _lineNumberFilter;
            }
            set
            {
                _lineNumberFilter = value;
				NotifyPropertyChanged(x => LineNumberFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isAssessedFilter;
        public Boolean? IsAssessedFilter
        {
            get
            {
                return _isAssessedFilter;
            }
            set
            {
                _isAssessedFilter = value;
				NotifyPropertyChanged(x => IsAssessedFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _doNotAllocateFilter;
        public Boolean? DoNotAllocateFilter
        {
            get
            {
                return _doNotAllocateFilter;
            }
            set
            {
                _doNotAllocateFilter = value;
				NotifyPropertyChanged(x => DoNotAllocateFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _doNotEXFilter;
        public Boolean? DoNotEXFilter
        {
            get
            {
                return _doNotEXFilter;
            }
            set
            {
                _doNotEXFilter = value;
				NotifyPropertyChanged(x => DoNotEXFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _attributeOnlyAllocationFilter;
        public Boolean? AttributeOnlyAllocationFilter
        {
            get
            {
                return _attributeOnlyAllocationFilter;
            }
            set
            {
                _attributeOnlyAllocationFilter = value;
				NotifyPropertyChanged(x => AttributeOnlyAllocationFilter);
                FilterData();
                
            }
        }	

 

		private string _description_of_goodsFilter;
        public string Description_of_goodsFilter
        {
            get
            {
                return _description_of_goodsFilter;
            }
            set
            {
                _description_of_goodsFilter = value;
				NotifyPropertyChanged(x => Description_of_goodsFilter);
                FilterData();
                
            }
        }	

 

		private string _commercial_DescriptionFilter;
        public string Commercial_DescriptionFilter
        {
            get
            {
                return _commercial_DescriptionFilter;
            }
            set
            {
                _commercial_DescriptionFilter = value;
				NotifyPropertyChanged(x => Commercial_DescriptionFilter);
                FilterData();
                
            }
        }	

 

		private Double? _gross_weight_itmFilter;
        public Double? Gross_weight_itmFilter
        {
            get
            {
                return _gross_weight_itmFilter;
            }
            set
            {
                _gross_weight_itmFilter = value;
				NotifyPropertyChanged(x => Gross_weight_itmFilter);
                FilterData();
                
            }
        }	

 

		private Double? _net_weight_itmFilter;
        public Double? Net_weight_itmFilter
        {
            get
            {
                return _net_weight_itmFilter;
            }
            set
            {
                _net_weight_itmFilter = value;
				NotifyPropertyChanged(x => Net_weight_itmFilter);
                FilterData();
                
            }
        }	

 

		private Double? _item_priceFilter;
        public Double? Item_priceFilter
        {
            get
            {
                return _item_priceFilter;
            }
            set
            {
                _item_priceFilter = value;
				NotifyPropertyChanged(x => Item_priceFilter);
                FilterData();
                
            }
        }	

 

		private Double? _itemQuantityFilter;
        public Double? ItemQuantityFilter
        {
            get
            {
                return _itemQuantityFilter;
            }
            set
            {
                _itemQuantityFilter = value;
				NotifyPropertyChanged(x => ItemQuantityFilter);
                FilterData();
                
            }
        }	

 

		private string _suppplementary_unit_codeFilter;
        public string Suppplementary_unit_codeFilter
        {
            get
            {
                return _suppplementary_unit_codeFilter;
            }
            set
            {
                _suppplementary_unit_codeFilter = value;
				NotifyPropertyChanged(x => Suppplementary_unit_codeFilter);
                FilterData();
                
            }
        }	

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _tariffCodeFilter;
        public string TariffCodeFilter
        {
            get
            {
                return _tariffCodeFilter;
            }
            set
            {
                _tariffCodeFilter = value;
				NotifyPropertyChanged(x => TariffCodeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _tariffCodeLicenseRequiredFilter;
        public Boolean? TariffCodeLicenseRequiredFilter
        {
            get
            {
                return _tariffCodeLicenseRequiredFilter;
            }
            set
            {
                _tariffCodeLicenseRequiredFilter = value;
				NotifyPropertyChanged(x => TariffCodeLicenseRequiredFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _tariffCategoryLicenseRequiredFilter;
        public Boolean? TariffCategoryLicenseRequiredFilter
        {
            get
            {
                return _tariffCategoryLicenseRequiredFilter;
            }
            set
            {
                _tariffCategoryLicenseRequiredFilter = value;
				NotifyPropertyChanged(x => TariffCategoryLicenseRequiredFilter);
                FilterData();
                
            }
        }	

 

		private string _tariffCodeDescriptionFilter;
        public string TariffCodeDescriptionFilter
        {
            get
            {
                return _tariffCodeDescriptionFilter;
            }
            set
            {
                _tariffCodeDescriptionFilter = value;
				NotifyPropertyChanged(x => TariffCodeDescriptionFilter);
                FilterData();
                
            }
        }	

 

		private Double? _dutyLiabilityFilter;
        public Double? DutyLiabilityFilter
        {
            get
            {
                return _dutyLiabilityFilter;
            }
            set
            {
                _dutyLiabilityFilter = value;
				NotifyPropertyChanged(x => DutyLiabilityFilter);
                FilterData();
                
            }
        }	

 

		private Double? _total_CIF_itmFilter;
        public Double? Total_CIF_itmFilter
        {
            get
            {
                return _total_CIF_itmFilter;
            }
            set
            {
                _total_CIF_itmFilter = value;
				NotifyPropertyChanged(x => Total_CIF_itmFilter);
                FilterData();
                
            }
        }	

 

		private Double? _freightFilter;
        public Double? FreightFilter
        {
            get
            {
                return _freightFilter;
            }
            set
            {
                _freightFilter = value;
				NotifyPropertyChanged(x => FreightFilter);
                FilterData();
                
            }
        }	

 

		private Double? _statistical_valueFilter;
        public Double? Statistical_valueFilter
        {
            get
            {
                return _statistical_valueFilter;
            }
            set
            {
                _statistical_valueFilter = value;
				NotifyPropertyChanged(x => Statistical_valueFilter);
                FilterData();
                
            }
        }	

 

		private Double? _dPQtyAllocatedFilter;
        public Double? DPQtyAllocatedFilter
        {
            get
            {
                return _dPQtyAllocatedFilter;
            }
            set
            {
                _dPQtyAllocatedFilter = value;
				NotifyPropertyChanged(x => DPQtyAllocatedFilter);
                FilterData();
                
            }
        }	

 

		private Double? _dFQtyAllocatedFilter;
        public Double? DFQtyAllocatedFilter
        {
            get
            {
                return _dFQtyAllocatedFilter;
            }
            set
            {
                _dFQtyAllocatedFilter = value;
				NotifyPropertyChanged(x => DFQtyAllocatedFilter);
                FilterData();
                
            }
        }	

 

		private Double? _piQuantityFilter;
        public Double? PiQuantityFilter
        {
            get
            {
                return _piQuantityFilter;
            }
            set
            {
                _piQuantityFilter = value;
				NotifyPropertyChanged(x => PiQuantityFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _importCompleteFilter;
        public Boolean? ImportCompleteFilter
        {
            get
            {
                return _importCompleteFilter;
            }
            set
            {
                _importCompleteFilter = value;
				NotifyPropertyChanged(x => ImportCompleteFilter);
                FilterData();
                
            }
        }	

 

		private string _cNumberFilter;
        public string CNumberFilter
        {
            get
            {
                return _cNumberFilter;
            }
            set
            {
                _cNumberFilter = value;
				NotifyPropertyChanged(x => CNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartRegistrationDateFilter
        {
            get
            {
                return _startRegistrationDateFilter;
            }
            set
            {
                _startRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndRegistrationDateFilter
        {
            get
            {
                return _endRegistrationDateFilter;
            }
            set
            {
                _endRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _registrationDateFilter;
        public DateTime? RegistrationDateFilter
        {
            get
            {
                return _registrationDateFilter;
            }
            set
            {
                _registrationDateFilter = value;
				NotifyPropertyChanged(x => RegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private Double? _number_of_packagesFilter;
        public Double? Number_of_packagesFilter
        {
            get
            {
                return _number_of_packagesFilter;
            }
            set
            {
                _number_of_packagesFilter = value;
				NotifyPropertyChanged(x => Number_of_packagesFilter);
                FilterData();
                
            }
        }	

 

		private string _country_of_origin_codeFilter;
        public string Country_of_origin_codeFilter
        {
            get
            {
                return _country_of_origin_codeFilter;
            }
            set
            {
                _country_of_origin_codeFilter = value;
				NotifyPropertyChanged(x => Country_of_origin_codeFilter);
                FilterData();
                
            }
        }	

 

		private Double? _piWeightFilter;
        public Double? PiWeightFilter
        {
            get
            {
                return _piWeightFilter;
            }
            set
            {
                _piWeightFilter = value;
				NotifyPropertyChanged(x => PiWeightFilter);
                FilterData();
                
            }
        }	

 

		private Double? _currency_rateFilter;
        public Double? Currency_rateFilter
        {
            get
            {
                return _currency_rateFilter;
            }
            set
            {
                _currency_rateFilter = value;
				NotifyPropertyChanged(x => Currency_rateFilter);
                FilterData();
                
            }
        }	

 

		private string _currency_codeFilter;
        public string Currency_codeFilter
        {
            get
            {
                return _currency_codeFilter;
            }
            set
            {
                _currency_codeFilter = value;
				NotifyPropertyChanged(x => Currency_codeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _invalidHSCodeFilter;
        public Boolean? InvalidHSCodeFilter
        {
            get
            {
                return _invalidHSCodeFilter;
            }
            set
            {
                _invalidHSCodeFilter = value;
				NotifyPropertyChanged(x => InvalidHSCodeFilter);
                FilterData();
                
            }
        }	

 

		private string _warehouseErrorFilter;
        public string WarehouseErrorFilter
        {
            get
            {
                return _warehouseErrorFilter;
            }
            set
            {
                _warehouseErrorFilter = value;
				NotifyPropertyChanged(x => WarehouseErrorFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _cancelledFilter;
        public Boolean? CancelledFilter
        {
            get
            {
                return _cancelledFilter;
            }
            set
            {
                _cancelledFilter = value;
				NotifyPropertyChanged(x => CancelledFilter);
                FilterData();
                
            }
        }	

 

		private Double? _salesFactorFilter;
        public Double? SalesFactorFilter
        {
            get
            {
                return _salesFactorFilter;
            }
            set
            {
                _salesFactorFilter = value;
				NotifyPropertyChanged(x => SalesFactorFilter);
                FilterData();
                
            }
        }	

 

		private string _referenceNumberFilter;
        public string ReferenceNumberFilter
        {
            get
            {
                return _referenceNumberFilter;
            }
            set
            {
                _referenceNumberFilter = value;
				NotifyPropertyChanged(x => ReferenceNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startExpiryDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartExpiryDateFilter
        {
            get
            {
                return _startExpiryDateFilter;
            }
            set
            {
                _startExpiryDateFilter = value;
				NotifyPropertyChanged(x => StartExpiryDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endExpiryDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndExpiryDateFilter
        {
            get
            {
                return _endExpiryDateFilter;
            }
            set
            {
                _endExpiryDateFilter = value;
				NotifyPropertyChanged(x => EndExpiryDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _expiryDateFilter;
        public DateTime? ExpiryDateFilter
        {
            get
            {
                return _expiryDateFilter;
            }
            set
            {
                _expiryDateFilter = value;
				NotifyPropertyChanged(x => ExpiryDateFilter);
                FilterData();
                
            }
        }	

 

		private string _previousInvoiceNumberFilter;
        public string PreviousInvoiceNumberFilter
        {
            get
            {
                return _previousInvoiceNumberFilter;
            }
            set
            {
                _previousInvoiceNumberFilter = value;
				NotifyPropertyChanged(x => PreviousInvoiceNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _previousInvoiceLineNumberFilter;
        public string PreviousInvoiceLineNumberFilter
        {
            get
            {
                return _previousInvoiceLineNumberFilter;
            }
            set
            {
                _previousInvoiceLineNumberFilter = value;
				NotifyPropertyChanged(x => PreviousInvoiceLineNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _previousInvoiceItemNumberFilter;
        public string PreviousInvoiceItemNumberFilter
        {
            get
            {
                return _previousInvoiceItemNumberFilter;
            }
            set
            {
                _previousInvoiceItemNumberFilter = value;
				NotifyPropertyChanged(x => PreviousInvoiceItemNumberFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentItems.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentItems);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(LineNumberFilter) == false)
						res.Append(" && " + string.Format("LineNumber.Contains(\"{0}\")",  LineNumberFilter));						
 

									if(IsAssessedFilter.HasValue)
						res.Append(" && " + string.Format("IsAssessed == {0}",  IsAssessedFilter));						
 

									if(DoNotAllocateFilter.HasValue)
						res.Append(" && " + string.Format("DoNotAllocate == {0}",  DoNotAllocateFilter));						
 

									if(DoNotEXFilter.HasValue)
						res.Append(" && " + string.Format("DoNotEX == {0}",  DoNotEXFilter));						
 

									if(AttributeOnlyAllocationFilter.HasValue)
						res.Append(" && " + string.Format("AttributeOnlyAllocation == {0}",  AttributeOnlyAllocationFilter));						
 

									if(string.IsNullOrEmpty(Description_of_goodsFilter) == false)
						res.Append(" && " + string.Format("Description_of_goods.Contains(\"{0}\")",  Description_of_goodsFilter));						
 

									if(string.IsNullOrEmpty(Commercial_DescriptionFilter) == false)
						res.Append(" && " + string.Format("Commercial_Description.Contains(\"{0}\")",  Commercial_DescriptionFilter));						
 

					if(Gross_weight_itmFilter.HasValue)
						res.Append(" && " + string.Format("Gross_weight_itm == {0}",  Gross_weight_itmFilter.ToString()));				 

					if(Net_weight_itmFilter.HasValue)
						res.Append(" && " + string.Format("Net_weight_itm == {0}",  Net_weight_itmFilter.ToString()));				 

					if(Item_priceFilter.HasValue)
						res.Append(" && " + string.Format("Item_price == {0}",  Item_priceFilter.ToString()));				 

					if(ItemQuantityFilter.HasValue)
						res.Append(" && " + string.Format("ItemQuantity == {0}",  ItemQuantityFilter.ToString()));				 

									if(string.IsNullOrEmpty(Suppplementary_unit_codeFilter) == false)
						res.Append(" && " + string.Format("Suppplementary_unit_code.Contains(\"{0}\")",  Suppplementary_unit_codeFilter));						
 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(TariffCodeFilter) == false)
						res.Append(" && " + string.Format("TariffCode.Contains(\"{0}\")",  TariffCodeFilter));						
 

									if(TariffCodeLicenseRequiredFilter.HasValue)
						res.Append(" && " + string.Format("TariffCodeLicenseRequired == {0}",  TariffCodeLicenseRequiredFilter));						
 

									if(TariffCategoryLicenseRequiredFilter.HasValue)
						res.Append(" && " + string.Format("TariffCategoryLicenseRequired == {0}",  TariffCategoryLicenseRequiredFilter));						
 

									if(string.IsNullOrEmpty(TariffCodeDescriptionFilter) == false)
						res.Append(" && " + string.Format("TariffCodeDescription.Contains(\"{0}\")",  TariffCodeDescriptionFilter));						
 

					if(DutyLiabilityFilter.HasValue)
						res.Append(" && " + string.Format("DutyLiability == {0}",  DutyLiabilityFilter.ToString()));				 

					if(Total_CIF_itmFilter.HasValue)
						res.Append(" && " + string.Format("Total_CIF_itm == {0}",  Total_CIF_itmFilter.ToString()));				 

					if(FreightFilter.HasValue)
						res.Append(" && " + string.Format("Freight == {0}",  FreightFilter.ToString()));				 

					if(Statistical_valueFilter.HasValue)
						res.Append(" && " + string.Format("Statistical_value == {0}",  Statistical_valueFilter.ToString()));				 

					if(DPQtyAllocatedFilter.HasValue)
						res.Append(" && " + string.Format("DPQtyAllocated == {0}",  DPQtyAllocatedFilter.ToString()));				 

					if(DFQtyAllocatedFilter.HasValue)
						res.Append(" && " + string.Format("DFQtyAllocated == {0}",  DFQtyAllocatedFilter.ToString()));				 

					if(PiQuantityFilter.HasValue)
						res.Append(" && " + string.Format("PiQuantity == {0}",  PiQuantityFilter.ToString()));				 

									if(ImportCompleteFilter.HasValue)
						res.Append(" && " + string.Format("ImportComplete == {0}",  ImportCompleteFilter));						
 

									if(string.IsNullOrEmpty(CNumberFilter) == false)
						res.Append(" && " + string.Format("CNumber.Contains(\"{0}\")",  CNumberFilter));						
 

 

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("RegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_registrationDateFilter).Date != DateTime.MinValue)
						{
							if(RegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate == \"{0}\"",  Convert.ToDateTime(RegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(Number_of_packagesFilter.HasValue)
						res.Append(" && " + string.Format("Number_of_packages == {0}",  Number_of_packagesFilter.ToString()));				 

									if(string.IsNullOrEmpty(Country_of_origin_codeFilter) == false)
						res.Append(" && " + string.Format("Country_of_origin_code.Contains(\"{0}\")",  Country_of_origin_codeFilter));						
 

					if(PiWeightFilter.HasValue)
						res.Append(" && " + string.Format("PiWeight == {0}",  PiWeightFilter.ToString()));				 

					if(Currency_rateFilter.HasValue)
						res.Append(" && " + string.Format("Currency_rate == {0}",  Currency_rateFilter.ToString()));				 

									if(string.IsNullOrEmpty(Currency_codeFilter) == false)
						res.Append(" && " + string.Format("Currency_code.Contains(\"{0}\")",  Currency_codeFilter));						
 

									if(InvalidHSCodeFilter.HasValue)
						res.Append(" && " + string.Format("InvalidHSCode == {0}",  InvalidHSCodeFilter));						
 

									if(string.IsNullOrEmpty(WarehouseErrorFilter) == false)
						res.Append(" && " + string.Format("WarehouseError.Contains(\"{0}\")",  WarehouseErrorFilter));						
 

									if(CancelledFilter.HasValue)
						res.Append(" && " + string.Format("Cancelled == {0}",  CancelledFilter));						
 

					if(SalesFactorFilter.HasValue)
						res.Append(" && " + string.Format("SalesFactor == {0}",  SalesFactorFilter.ToString()));				 

									if(string.IsNullOrEmpty(ReferenceNumberFilter) == false)
						res.Append(" && " + string.Format("ReferenceNumber.Contains(\"{0}\")",  ReferenceNumberFilter));						
 

 

				if (Convert.ToDateTime(StartExpiryDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartExpiryDateFilter).Date != DateTime.MinValue)
						{
							if(StartExpiryDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("ExpiryDate >= \"{0}\"",  Convert.ToDateTime(StartExpiryDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue)
						{
							if(EndExpiryDateFilter.HasValue)
								res.Append(" && " + string.Format("ExpiryDate <= \"{0}\"",  Convert.ToDateTime(EndExpiryDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartExpiryDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_expiryDateFilter).Date != DateTime.MinValue)
						{
							if(ExpiryDateFilter.HasValue)
								res.Append(" && " + string.Format("ExpiryDate == \"{0}\"",  Convert.ToDateTime(ExpiryDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(PreviousInvoiceNumberFilter) == false)
						res.Append(" && " + string.Format("PreviousInvoiceNumber.Contains(\"{0}\")",  PreviousInvoiceNumberFilter));						
 

									if(string.IsNullOrEmpty(PreviousInvoiceLineNumberFilter) == false)
						res.Append(" && " + string.Format("PreviousInvoiceLineNumber.Contains(\"{0}\")",  PreviousInvoiceLineNumberFilter));						
 

									if(string.IsNullOrEmpty(PreviousInvoiceItemNumberFilter) == false)
						res.Append(" && " + string.Format("PreviousInvoiceItemNumber.Contains(\"{0}\")",  PreviousInvoiceItemNumberFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentItem> lst = null;
            using (var ctx = new AsycudaDocumentItemRepository())
            {
                lst = await ctx.GetAsycudaDocumentItemsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentItemExcelLine, List<AsycudaDocumentItemExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentItemExcelLine
                {
 
                    LineNumber = x.LineNumber ,
                    
 
                    IsAssessed = x.IsAssessed ,
                    
 
                    DoNotAllocate = x.DoNotAllocate ,
                    
 
                    DoNotEX = x.DoNotEX ,
                    
 
                    AttributeOnlyAllocation = x.AttributeOnlyAllocation ,
                    
 
                    Description_of_goods = x.Description_of_goods ,
                    
 
                    Commercial_Description = x.Commercial_Description ,
                    
 
                    Gross_weight_itm = x.Gross_weight_itm ,
                    
 
                    Net_weight_itm = x.Net_weight_itm ,
                    
 
                    Item_price = x.Item_price ,
                    
 
                    ItemQuantity = x.ItemQuantity ,
                    
 
                    Suppplementary_unit_code = x.Suppplementary_unit_code ,
                    
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    TariffCode = x.TariffCode ,
                    
 
                    TariffCodeLicenseRequired = x.TariffCodeLicenseRequired ,
                    
 
                    TariffCategoryLicenseRequired = x.TariffCategoryLicenseRequired ,
                    
 
                    TariffCodeDescription = x.TariffCodeDescription ,
                    
 
                    DutyLiability = x.DutyLiability ,
                    
 
                    Total_CIF_itm = x.Total_CIF_itm ,
                    
 
                    Freight = x.Freight ,
                    
 
                    Statistical_value = x.Statistical_value ,
                    
 
                    DPQtyAllocated = x.DPQtyAllocated ,
                    
 
                    DFQtyAllocated = x.DFQtyAllocated ,
                    
 
                    PiQuantity = x.PiQuantity ,
                    
 
                    ImportComplete = x.ImportComplete ,
                    
 
                    CNumber = x.CNumber ,
                    
 
                    RegistrationDate = x.RegistrationDate ,
                    
 
                    Number_of_packages = x.Number_of_packages ,
                    
 
                    Country_of_origin_code = x.Country_of_origin_code ,
                    
 
                    PiWeight = x.PiWeight ,
                    
 
                    Currency_rate = x.Currency_rate ,
                    
 
                    Currency_code = x.Currency_code ,
                    
 
                    InvalidHSCode = x.InvalidHSCode ,
                    
 
                    WarehouseError = x.WarehouseError ,
                    
 
                    Cancelled = x.Cancelled ,
                    
 
                    SalesFactor = x.SalesFactor ,
                    
 
                    ReferenceNumber = x.ReferenceNumber ,
                    
 
                    ExpiryDate = x.ExpiryDate ,
                    
 
                    PreviousInvoiceNumber = x.PreviousInvoiceNumber ,
                    
 
                    PreviousInvoiceLineNumber = x.PreviousInvoiceLineNumber ,
                    
 
                    PreviousInvoiceItemNumber = x.PreviousInvoiceItemNumber 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class AsycudaDocumentItemExcelLine
        {
		 
                    public string LineNumber { get; set; } 
                    
 
                    public Nullable<bool> IsAssessed { get; set; } 
                    
 
                    public Nullable<bool> DoNotAllocate { get; set; } 
                    
 
                    public Nullable<bool> DoNotEX { get; set; } 
                    
 
                    public Nullable<bool> AttributeOnlyAllocation { get; set; } 
                    
 
                    public string Description_of_goods { get; set; } 
                    
 
                    public string Commercial_Description { get; set; } 
                    
 
                    public double Gross_weight_itm { get; set; } 
                    
 
                    public double Net_weight_itm { get; set; } 
                    
 
                    public Nullable<double> Item_price { get; set; } 
                    
 
                    public Nullable<double> ItemQuantity { get; set; } 
                    
 
                    public string Suppplementary_unit_code { get; set; } 
                    
 
                    public string ItemNumber { get; set; } 
                    
 
                    public string TariffCode { get; set; } 
                    
 
                    public Nullable<bool> TariffCodeLicenseRequired { get; set; } 
                    
 
                    public Nullable<bool> TariffCategoryLicenseRequired { get; set; } 
                    
 
                    public string TariffCodeDescription { get; set; } 
                    
 
                    public Nullable<double> DutyLiability { get; set; } 
                    
 
                    public Nullable<double> Total_CIF_itm { get; set; } 
                    
 
                    public Nullable<double> Freight { get; set; } 
                    
 
                    public Nullable<double> Statistical_value { get; set; } 
                    
 
                    public Nullable<double> DPQtyAllocated { get; set; } 
                    
 
                    public Nullable<double> DFQtyAllocated { get; set; } 
                    
 
                    public Nullable<double> PiQuantity { get; set; } 
                    
 
                    public Nullable<bool> ImportComplete { get; set; } 
                    
 
                    public string CNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> RegistrationDate { get; set; } 
                    
 
                    public Nullable<double> Number_of_packages { get; set; } 
                    
 
                    public string Country_of_origin_code { get; set; } 
                    
 
                    public Nullable<double> PiWeight { get; set; } 
                    
 
                    public Nullable<double> Currency_rate { get; set; } 
                    
 
                    public string Currency_code { get; set; } 
                    
 
                    public Nullable<bool> InvalidHSCode { get; set; } 
                    
 
                    public string WarehouseError { get; set; } 
                    
 
                    public Nullable<bool> Cancelled { get; set; } 
                    
 
                    public Nullable<double> SalesFactor { get; set; } 
                    
 
                    public string ReferenceNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> ExpiryDate { get; set; } 
                    
 
                    public string PreviousInvoiceNumber { get; set; } 
                    
 
                    public string PreviousInvoiceLineNumber { get; set; } 
                    
 
                    public string PreviousInvoiceItemNumber { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class InventoryItemAliasXViewModel_AutoGen : ViewModelBase<InventoryItemAliasXViewModel_AutoGen>
	{

       private static readonly InventoryItemAliasXViewModel_AutoGen instance;
       static InventoryItemAliasXViewModel_AutoGen()
        {
            instance = new InventoryItemAliasXViewModel_AutoGen();
        }

       public static InventoryItemAliasXViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public InventoryItemAliasXViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<InventoryItemAliasX>(MessageToken.CurrentInventoryItemAliasXChanged, OnCurrentInventoryItemAliasXChanged);
            RegisterToReceiveMessages(MessageToken.InventoryItemAliasXChanged, OnInventoryItemAliasXChanged);
			RegisterToReceiveMessages(MessageToken.InventoryItemAliasXFilterExpressionChanged, OnInventoryItemAliasXFilterExpressionChanged);

 
			RegisterToReceiveMessages<InventoryItemX>(MessageToken.CurrentInventoryItemXChanged, OnCurrentInventoryItemsExChanged);

 			// Recieve messages for Core Current Entities Changed
 

			InventoryItemAliasX = new VirtualList<InventoryItemAliasX>(vloader);
			InventoryItemAliasX.LoadingStateChanged += InventoryItemAliasX_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(InventoryItemAliasX, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<InventoryItemAliasX> _InventoryItemAliasX = null;
        public VirtualList<InventoryItemAliasX> InventoryItemAliasX
        {
            get
            {
                return _InventoryItemAliasX;
            }
            set
            {
                _InventoryItemAliasX = value;
                NotifyPropertyChanged( x => x.InventoryItemAliasX);
            }
        }

		 private void OnInventoryItemAliasXFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => InventoryItemAliasX.Refresh()).ConfigureAwait(false);
            SelectedInventoryItemAliasX.Clear();
            NotifyPropertyChanged(x => SelectedInventoryItemAliasX);
            BeginSendMessage(MessageToken.SelectedInventoryItemAliasXChanged, new NotificationEventArgs(MessageToken.SelectedInventoryItemAliasXChanged));
        }

		void InventoryItemAliasX_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (InventoryItemAliasX.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => InventoryItemAliasX);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("InventoryItemAliasX | Error occured..." + InventoryItemAliasX.LastLoadingError.Message);
                    NotifyPropertyChanged(x => InventoryItemAliasX);
                    break;
            }
           
        }

		
		public readonly InventoryItemAliasXVirturalListLoader vloader = new InventoryItemAliasXVirturalListLoader();

		private ObservableCollection<InventoryItemAliasX> _selectedInventoryItemAliasX = new ObservableCollection<InventoryItemAliasX>();
        public ObservableCollection<InventoryItemAliasX> SelectedInventoryItemAliasX
        {
            get
            {
                return _selectedInventoryItemAliasX;
            }
            set
            {
                _selectedInventoryItemAliasX = value;
				BeginSendMessage(MessageToken.SelectedInventoryItemAliasXChanged,
                                    new NotificationEventArgs(MessageToken.SelectedInventoryItemAliasXChanged));
				 NotifyPropertyChanged(x => SelectedInventoryItemAliasX);
            }
        }

        internal virtual void OnCurrentInventoryItemAliasXChanged(object sender, NotificationEventArgs<InventoryItemAliasX> e)
        {
            if(BaseViewModel.Instance.CurrentInventoryItemAliasX != null) BaseViewModel.Instance.CurrentInventoryItemAliasX.PropertyChanged += CurrentInventoryItemAliasX__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentInventoryItemAliasX);
        }   

            void CurrentInventoryItemAliasX__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddInventoryItemsEx")
                   // {
                   //    if(InventoryItemX.Contains(CurrentInventoryItemAliasX.InventoryItemsEx) == false) InventoryItemX.Add(CurrentInventoryItemAliasX.InventoryItemsEx);
                    //}
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentInventoryItemAliasX.ApplicationSettings) == false) ApplicationSettings.Add(CurrentInventoryItemAliasX.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnInventoryItemAliasXChanged(object sender, NotificationEventArgs e)
        {
            _InventoryItemAliasX.Refresh();
			NotifyPropertyChanged(x => this.InventoryItemAliasX);
        }   


 	
		 internal virtual void OnCurrentInventoryItemsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItemX> e)
			{
			if(ViewCurrentInventoryItemsEx == false) return;
			if (e.Data == null || e.Data.InventoryItemId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("InventoryItemId == {0}", e.Data.InventoryItemId.ToString());
                 }

				InventoryItemAliasX.Refresh();
				NotifyPropertyChanged(x => this.InventoryItemAliasX);
                // SendMessage(MessageToken.InventoryItemAliasXChanged, new NotificationEventArgs(MessageToken.InventoryItemAliasXChanged));
                                          
                BaseViewModel.Instance.CurrentInventoryItemAliasX = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    InventoryItemAliasX.Refresh();
					NotifyPropertyChanged(x => this.InventoryItemAliasX);
				}
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentInventoryItemsEx = false;
         public bool ViewCurrentInventoryItemsEx
         {
             get
             {
                 return _viewCurrentInventoryItemsEx;
             }
             set
             {
                 _viewCurrentInventoryItemsEx = value;
                 NotifyPropertyChanged(x => x.ViewCurrentInventoryItemsEx);
                FilterData();
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_InventoryItemAliasX.Refresh();
			NotifyPropertyChanged(x => this.InventoryItemAliasX);
		}

		public async Task SelectAll()
        {
            IEnumerable<InventoryItemAliasX> lst = null;
            using (var ctx = new InventoryItemAliasXRepository())
            {
                lst = await ctx.GetInventoryItemAliasXByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedInventoryItemAliasX = new ObservableCollection<InventoryItemAliasX>(lst);
        }

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _aliasNameFilter;
        public string AliasNameFilter
        {
            get
            {
                return _aliasNameFilter;
            }
            set
            {
                _aliasNameFilter = value;
				NotifyPropertyChanged(x => AliasNameFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			InventoryItemAliasX.Refresh();
			NotifyPropertyChanged(x => this.InventoryItemAliasX);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(AliasNameFilter) == false)
						res.Append(" && " + string.Format("AliasName.Contains(\"{0}\")",  AliasNameFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<InventoryItemAliasX> lst = null;
            using (var ctx = new InventoryItemAliasXRepository())
            {
                lst = await ctx.GetInventoryItemAliasXByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<InventoryItemAliasXExcelLine, List<InventoryItemAliasXExcelLine>>
            {
                dataToPrint = lst.Select(x => new InventoryItemAliasXExcelLine
                {
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    AliasName = x.AliasName 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class InventoryItemAliasXExcelLine
        {
		 
                    public string ItemNumber { get; set; } 
                    
 
                    public string AliasName { get; set; } 
                    
        }

		
    }
}
		

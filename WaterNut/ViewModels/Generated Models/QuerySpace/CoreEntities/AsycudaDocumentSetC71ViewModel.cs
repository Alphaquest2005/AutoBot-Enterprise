// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class AsycudaDocumentSetC71ViewModel_AutoGen : ViewModelBase<AsycudaDocumentSetC71ViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentSetC71ViewModel_AutoGen instance;
       static AsycudaDocumentSetC71ViewModel_AutoGen()
        {
            instance = new AsycudaDocumentSetC71ViewModel_AutoGen();
        }

       public static AsycudaDocumentSetC71ViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentSetC71ViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentSetC71>(MessageToken.CurrentAsycudaDocumentSetC71Changed, OnCurrentAsycudaDocumentSetC71Changed);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetC71Changed, OnAsycudaDocumentSetC71Changed);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentSetC71FilterExpressionChanged, OnAsycudaDocumentSetC71FilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentSetC71 = new VirtualList<AsycudaDocumentSetC71>(vloader);
			AsycudaDocumentSetC71.LoadingStateChanged += AsycudaDocumentSetC71_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentSetC71, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentSetC71> _AsycudaDocumentSetC71 = null;
        public VirtualList<AsycudaDocumentSetC71> AsycudaDocumentSetC71
        {
            get
            {
                return _AsycudaDocumentSetC71;
            }
            set
            {
                _AsycudaDocumentSetC71 = value;
                NotifyPropertyChanged( x => x.AsycudaDocumentSetC71);
            }
        }

		 private void OnAsycudaDocumentSetC71FilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => AsycudaDocumentSetC71.Refresh()).ConfigureAwait(false);
            SelectedAsycudaDocumentSetC71.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentSetC71);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetC71Changed, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetC71Changed));
        }

		void AsycudaDocumentSetC71_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentSetC71.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentSetC71);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentSetC71 | Error occured..." + AsycudaDocumentSetC71.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentSetC71);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentSetC71VirturalListLoader vloader = new AsycudaDocumentSetC71VirturalListLoader();

		private ObservableCollection<AsycudaDocumentSetC71> _selectedAsycudaDocumentSetC71 = new ObservableCollection<AsycudaDocumentSetC71>();
        public ObservableCollection<AsycudaDocumentSetC71> SelectedAsycudaDocumentSetC71
        {
            get
            {
                return _selectedAsycudaDocumentSetC71;
            }
            set
            {
                _selectedAsycudaDocumentSetC71 = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentSetC71Changed,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentSetC71Changed));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentSetC71);
            }
        }

        internal virtual void OnCurrentAsycudaDocumentSetC71Changed(object sender, NotificationEventArgs<AsycudaDocumentSetC71> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentSetC71 != null) BaseViewModel.Instance.CurrentAsycudaDocumentSetC71.PropertyChanged += CurrentAsycudaDocumentSetC71__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentSetC71);
        }   

            void CurrentAsycudaDocumentSetC71__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal virtual void OnAsycudaDocumentSetC71Changed(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentSetC71.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetC71);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_AsycudaDocumentSetC71.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetC71);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentSetC71> lst = null;
            using (var ctx = new AsycudaDocumentSetC71Repository())
            {
                lst = await ctx.GetAsycudaDocumentSetC71ByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentSetC71 = new ObservableCollection<AsycudaDocumentSetC71>(lst);
        }

 

		private string _addressFilter;
        public string AddressFilter
        {
            get
            {
                return _addressFilter;
            }
            set
            {
                _addressFilter = value;
				NotifyPropertyChanged(x => AddressFilter);
                FilterData();
                
            }
        }	

 

		private Double? _totalFilter;
        public Double? TotalFilter
        {
            get
            {
                return _totalFilter;
            }
            set
            {
                _totalFilter = value;
				NotifyPropertyChanged(x => TotalFilter);
                FilterData();
                
            }
        }	

 

		private string _filePathFilter;
        public string FilePathFilter
        {
            get
            {
                return _filePathFilter;
            }
            set
            {
                _filePathFilter = value;
				NotifyPropertyChanged(x => FilePathFilter);
                FilterData();
                
            }
        }	

 

		private string _regNumberFilter;
        public string RegNumberFilter
        {
            get
            {
                return _regNumberFilter;
            }
            set
            {
                _regNumberFilter = value;
				NotifyPropertyChanged(x => RegNumberFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentSetC71.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentSetC71);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(AddressFilter) == false)
						res.Append(" && " + string.Format("Address.Contains(\"{0}\")",  AddressFilter));						
 

					if(TotalFilter.HasValue)
						res.Append(" && " + string.Format("Total == {0}",  TotalFilter.ToString()));				 

									if(string.IsNullOrEmpty(FilePathFilter) == false)
						res.Append(" && " + string.Format("FilePath.Contains(\"{0}\")",  FilePathFilter));						
 

									if(string.IsNullOrEmpty(RegNumberFilter) == false)
						res.Append(" && " + string.Format("RegNumber.Contains(\"{0}\")",  RegNumberFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentSetC71> lst = null;
            using (var ctx = new AsycudaDocumentSetC71Repository())
            {
                lst = await ctx.GetAsycudaDocumentSetC71ByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentSetC71ExcelLine, List<AsycudaDocumentSetC71ExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentSetC71ExcelLine
                {
 
                    Address = x.Address ,
                    
 
                    Total = x.Total ,
                    
 
                    FilePath = x.FilePath ,
                    
 
                    RegNumber = x.RegNumber 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class AsycudaDocumentSetC71ExcelLine
        {
		 
                    public string Address { get; set; } 
                    
 
                    public Nullable<double> Total { get; set; } 
                    
 
                    public string FilePath { get; set; } 
                    
 
                    public string RegNumber { get; set; } 
                    
        }

		
    }
}
		

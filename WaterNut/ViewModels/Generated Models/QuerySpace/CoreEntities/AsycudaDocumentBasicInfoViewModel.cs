// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class AsycudaDocumentBasicInfoViewModel_AutoGen : ViewModelBase<AsycudaDocumentBasicInfoViewModel_AutoGen>
	{

       private static readonly AsycudaDocumentBasicInfoViewModel_AutoGen instance;
       static AsycudaDocumentBasicInfoViewModel_AutoGen()
        {
            instance = new AsycudaDocumentBasicInfoViewModel_AutoGen();
        }

       public static AsycudaDocumentBasicInfoViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaDocumentBasicInfoViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaDocumentBasicInfo>(MessageToken.CurrentAsycudaDocumentBasicInfoChanged, OnCurrentAsycudaDocumentBasicInfoChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaDocumentBasicInfoChanged, OnAsycudaDocumentBasicInfoChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaDocumentBasicInfoFilterExpressionChanged, OnAsycudaDocumentBasicInfoFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			AsycudaDocumentBasicInfo = new VirtualList<AsycudaDocumentBasicInfo>(vloader);
			AsycudaDocumentBasicInfo.LoadingStateChanged += AsycudaDocumentBasicInfo_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaDocumentBasicInfo, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaDocumentBasicInfo> _AsycudaDocumentBasicInfo = null;
        public VirtualList<AsycudaDocumentBasicInfo> AsycudaDocumentBasicInfo
        {
            get
            {
                return _AsycudaDocumentBasicInfo;
            }
            set
            {
                _AsycudaDocumentBasicInfo = value;
                NotifyPropertyChanged( x => x.AsycudaDocumentBasicInfo);
            }
        }

		 private void OnAsycudaDocumentBasicInfoFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => AsycudaDocumentBasicInfo.Refresh()).ConfigureAwait(false);
            SelectedAsycudaDocumentBasicInfo.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaDocumentBasicInfo);
            BeginSendMessage(MessageToken.SelectedAsycudaDocumentBasicInfoChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentBasicInfoChanged));
        }

		void AsycudaDocumentBasicInfo_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaDocumentBasicInfo.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaDocumentBasicInfo);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaDocumentBasicInfo | Error occured..." + AsycudaDocumentBasicInfo.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaDocumentBasicInfo);
                    break;
            }
           
        }

		
		public readonly AsycudaDocumentBasicInfoVirturalListLoader vloader = new AsycudaDocumentBasicInfoVirturalListLoader();

		private ObservableCollection<AsycudaDocumentBasicInfo> _selectedAsycudaDocumentBasicInfo = new ObservableCollection<AsycudaDocumentBasicInfo>();
        public ObservableCollection<AsycudaDocumentBasicInfo> SelectedAsycudaDocumentBasicInfo
        {
            get
            {
                return _selectedAsycudaDocumentBasicInfo;
            }
            set
            {
                _selectedAsycudaDocumentBasicInfo = value;
				BeginSendMessage(MessageToken.SelectedAsycudaDocumentBasicInfoChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaDocumentBasicInfoChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaDocumentBasicInfo);
            }
        }

        internal virtual void OnCurrentAsycudaDocumentBasicInfoChanged(object sender, NotificationEventArgs<AsycudaDocumentBasicInfo> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaDocumentBasicInfo != null) BaseViewModel.Instance.CurrentAsycudaDocumentBasicInfo.PropertyChanged += CurrentAsycudaDocumentBasicInfo__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaDocumentBasicInfo);
        }   

            void CurrentAsycudaDocumentBasicInfo__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentAsycudaDocumentBasicInfo.ApplicationSettings) == false) ApplicationSettings.Add(CurrentAsycudaDocumentBasicInfo.ApplicationSettings);
                    //}
                    //if (e.PropertyName == "AddCustoms_Procedure")
                   // {
                   //    if(Customs_Procedure.Contains(CurrentAsycudaDocumentBasicInfo.Customs_Procedure) == false) Customs_Procedure.Add(CurrentAsycudaDocumentBasicInfo.Customs_Procedure);
                    //}
                 } 
        internal virtual void OnAsycudaDocumentBasicInfoChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaDocumentBasicInfo.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentBasicInfo);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    AsycudaDocumentBasicInfo.Refresh();
					NotifyPropertyChanged(x => this.AsycudaDocumentBasicInfo);
				}
                internal virtual void OnCurrentCustoms_ProcedureChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<Customs_Procedure> e)
				{
				if (e.Data == null || e.Data.Customs_ProcedureId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("Customs_ProcedureId == {0}", e.Data.Customs_ProcedureId.ToString());
                }
					
                    AsycudaDocumentBasicInfo.Refresh();
					NotifyPropertyChanged(x => this.AsycudaDocumentBasicInfo);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_AsycudaDocumentBasicInfo.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentBasicInfo);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaDocumentBasicInfo> lst = null;
            using (var ctx = new AsycudaDocumentBasicInfoRepository())
            {
                lst = await ctx.GetAsycudaDocumentBasicInfoByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaDocumentBasicInfo = new ObservableCollection<AsycudaDocumentBasicInfo>(lst);
        }

 

		private string _documentTypeFilter;
        public string DocumentTypeFilter
        {
            get
            {
                return _documentTypeFilter;
            }
            set
            {
                _documentTypeFilter = value;
				NotifyPropertyChanged(x => DocumentTypeFilter);
                FilterData();
                
            }
        }	

 

		private string _cNumberFilter;
        public string CNumberFilter
        {
            get
            {
                return _cNumberFilter;
            }
            set
            {
                _cNumberFilter = value;
				NotifyPropertyChanged(x => CNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _extended_customs_procedureFilter;
        public string Extended_customs_procedureFilter
        {
            get
            {
                return _extended_customs_procedureFilter;
            }
            set
            {
                _extended_customs_procedureFilter = value;
				NotifyPropertyChanged(x => Extended_customs_procedureFilter);
                FilterData();
                
            }
        }	

 

		private string _national_customs_procedureFilter;
        public string National_customs_procedureFilter
        {
            get
            {
                return _national_customs_procedureFilter;
            }
            set
            {
                _national_customs_procedureFilter = value;
				NotifyPropertyChanged(x => National_customs_procedureFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartRegistrationDateFilter
        {
            get
            {
                return _startRegistrationDateFilter;
            }
            set
            {
                _startRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndRegistrationDateFilter
        {
            get
            {
                return _endRegistrationDateFilter;
            }
            set
            {
                _endRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _registrationDateFilter;
        public DateTime? RegistrationDateFilter
        {
            get
            {
                return _registrationDateFilter;
            }
            set
            {
                _registrationDateFilter = value;
				NotifyPropertyChanged(x => RegistrationDateFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startAssessmentDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartAssessmentDateFilter
        {
            get
            {
                return _startAssessmentDateFilter;
            }
            set
            {
                _startAssessmentDateFilter = value;
				NotifyPropertyChanged(x => StartAssessmentDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endAssessmentDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndAssessmentDateFilter
        {
            get
            {
                return _endAssessmentDateFilter;
            }
            set
            {
                _endAssessmentDateFilter = value;
				NotifyPropertyChanged(x => EndAssessmentDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _assessmentDateFilter;
        public DateTime? AssessmentDateFilter
        {
            get
            {
                return _assessmentDateFilter;
            }
            set
            {
                _assessmentDateFilter = value;
				NotifyPropertyChanged(x => AssessmentDateFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startExpiryDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartExpiryDateFilter
        {
            get
            {
                return _startExpiryDateFilter;
            }
            set
            {
                _startExpiryDateFilter = value;
				NotifyPropertyChanged(x => StartExpiryDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endExpiryDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndExpiryDateFilter
        {
            get
            {
                return _endExpiryDateFilter;
            }
            set
            {
                _endExpiryDateFilter = value;
				NotifyPropertyChanged(x => EndExpiryDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _expiryDateFilter;
        public DateTime? ExpiryDateFilter
        {
            get
            {
                return _expiryDateFilter;
            }
            set
            {
                _expiryDateFilter = value;
				NotifyPropertyChanged(x => ExpiryDateFilter);
                FilterData();
                
            }
        }	

 

		private string _referenceFilter;
        public string ReferenceFilter
        {
            get
            {
                return _referenceFilter;
            }
            set
            {
                _referenceFilter = value;
				NotifyPropertyChanged(x => ReferenceFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _isManuallyAssessedFilter;
        public Boolean? IsManuallyAssessedFilter
        {
            get
            {
                return _isManuallyAssessedFilter;
            }
            set
            {
                _isManuallyAssessedFilter = value;
				NotifyPropertyChanged(x => IsManuallyAssessedFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _cancelledFilter;
        public Boolean? CancelledFilter
        {
            get
            {
                return _cancelledFilter;
            }
            set
            {
                _cancelledFilter = value;
				NotifyPropertyChanged(x => CancelledFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _doNotAllocateFilter;
        public Boolean? DoNotAllocateFilter
        {
            get
            {
                return _doNotAllocateFilter;
            }
            set
            {
                _doNotAllocateFilter = value;
				NotifyPropertyChanged(x => DoNotAllocateFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _importCompleteFilter;
        public Boolean? ImportCompleteFilter
        {
            get
            {
                return _importCompleteFilter;
            }
            set
            {
                _importCompleteFilter = value;
				NotifyPropertyChanged(x => ImportCompleteFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaDocumentBasicInfo.Refresh();
			NotifyPropertyChanged(x => this.AsycudaDocumentBasicInfo);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(DocumentTypeFilter) == false)
						res.Append(" && " + string.Format("DocumentType.Contains(\"{0}\")",  DocumentTypeFilter));						
 

									if(string.IsNullOrEmpty(CNumberFilter) == false)
						res.Append(" && " + string.Format("CNumber.Contains(\"{0}\")",  CNumberFilter));						
 

									if(string.IsNullOrEmpty(Extended_customs_procedureFilter) == false)
						res.Append(" && " + string.Format("Extended_customs_procedure.Contains(\"{0}\")",  Extended_customs_procedureFilter));						
 

									if(string.IsNullOrEmpty(National_customs_procedureFilter) == false)
						res.Append(" && " + string.Format("National_customs_procedure.Contains(\"{0}\")",  National_customs_procedureFilter));						
 

 

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("RegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_registrationDateFilter).Date != DateTime.MinValue)
						{
							if(RegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("RegistrationDate == \"{0}\"",  Convert.ToDateTime(RegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

 

				if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue)
						{
							if(StartAssessmentDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("AssessmentDate >= \"{0}\"",  Convert.ToDateTime(StartAssessmentDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue)
						{
							if(EndAssessmentDateFilter.HasValue)
								res.Append(" && " + string.Format("AssessmentDate <= \"{0}\"",  Convert.ToDateTime(EndAssessmentDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_assessmentDateFilter).Date != DateTime.MinValue)
						{
							if(AssessmentDateFilter.HasValue)
								res.Append(" && " + string.Format("AssessmentDate == \"{0}\"",  Convert.ToDateTime(AssessmentDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

 

				if (Convert.ToDateTime(StartExpiryDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartExpiryDateFilter).Date != DateTime.MinValue)
						{
							if(StartExpiryDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("ExpiryDate >= \"{0}\"",  Convert.ToDateTime(StartExpiryDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue)
						{
							if(EndExpiryDateFilter.HasValue)
								res.Append(" && " + string.Format("ExpiryDate <= \"{0}\"",  Convert.ToDateTime(EndExpiryDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartExpiryDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndExpiryDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_expiryDateFilter).Date != DateTime.MinValue)
						{
							if(ExpiryDateFilter.HasValue)
								res.Append(" && " + string.Format("ExpiryDate == \"{0}\"",  Convert.ToDateTime(ExpiryDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(ReferenceFilter) == false)
						res.Append(" && " + string.Format("Reference.Contains(\"{0}\")",  ReferenceFilter));						
 

									if(IsManuallyAssessedFilter.HasValue)
						res.Append(" && " + string.Format("IsManuallyAssessed == {0}",  IsManuallyAssessedFilter));						
 

									if(CancelledFilter.HasValue)
						res.Append(" && " + string.Format("Cancelled == {0}",  CancelledFilter));						
 

									if(DoNotAllocateFilter.HasValue)
						res.Append(" && " + string.Format("DoNotAllocate == {0}",  DoNotAllocateFilter));						
 

									if(ImportCompleteFilter.HasValue)
						res.Append(" && " + string.Format("ImportComplete == {0}",  ImportCompleteFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaDocumentBasicInfo> lst = null;
            using (var ctx = new AsycudaDocumentBasicInfoRepository())
            {
                lst = await ctx.GetAsycudaDocumentBasicInfoByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaDocumentBasicInfoExcelLine, List<AsycudaDocumentBasicInfoExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaDocumentBasicInfoExcelLine
                {
 
                    DocumentType = x.DocumentType ,
                    
 
                    CNumber = x.CNumber ,
                    
 
                    Extended_customs_procedure = x.Extended_customs_procedure ,
                    
 
                    National_customs_procedure = x.National_customs_procedure ,
                    
 
                    RegistrationDate = x.RegistrationDate ,
                    
 
                    AssessmentDate = x.AssessmentDate ,
                    
 
                    ExpiryDate = x.ExpiryDate ,
                    
 
                    Reference = x.Reference ,
                    
 
                    IsManuallyAssessed = x.IsManuallyAssessed ,
                    
 
                    Cancelled = x.Cancelled ,
                    
 
                    DoNotAllocate = x.DoNotAllocate ,
                    
 
                    ImportComplete = x.ImportComplete 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class AsycudaDocumentBasicInfoExcelLine
        {
		 
                    public string DocumentType { get; set; } 
                    
 
                    public string CNumber { get; set; } 
                    
 
                    public string Extended_customs_procedure { get; set; } 
                    
 
                    public string National_customs_procedure { get; set; } 
                    
 
                    public Nullable<System.DateTime> RegistrationDate { get; set; } 
                    
 
                    public Nullable<System.DateTime> AssessmentDate { get; set; } 
                    
 
                    public Nullable<System.DateTime> ExpiryDate { get; set; } 
                    
 
                    public string Reference { get; set; } 
                    
 
                    public Nullable<bool> IsManuallyAssessed { get; set; } 
                    
 
                    public Nullable<bool> Cancelled { get; set; } 
                    
 
                    public Nullable<bool> DoNotAllocate { get; set; } 
                    
 
                    public bool ImportComplete { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
using SimpleMvvmToolkit;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class EmailInfoMappingsViewModel_AutoGen : ViewModelBase<EmailInfoMappingsViewModel_AutoGen>
	{

       private static readonly EmailInfoMappingsViewModel_AutoGen instance;
       static EmailInfoMappingsViewModel_AutoGen()
        {
            instance = new EmailInfoMappingsViewModel_AutoGen();
        }

       public static EmailInfoMappingsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public EmailInfoMappingsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<EmailInfoMappings>(MessageToken.CurrentEmailInfoMappingsChanged, OnCurrentEmailInfoMappingsChanged);
            RegisterToReceiveMessages(MessageToken.EmailInfoMappingsChanged, OnEmailInfoMappingsChanged);
			RegisterToReceiveMessages(MessageToken.EmailInfoMappingsFilterExpressionChanged, OnEmailInfoMappingsFilterExpressionChanged);

 
			RegisterToReceiveMessages<EmailMapping>(MessageToken.CurrentEmailMappingChanged, OnCurrentEmailMappingChanged);
 
			RegisterToReceiveMessages<InfoMapping>(MessageToken.CurrentInfoMappingChanged, OnCurrentInfoMappingChanged);

 			// Recieve messages for Core Current Entities Changed
 

			EmailInfoMappings = new VirtualList<EmailInfoMappings>(vloader);
			EmailInfoMappings.LoadingStateChanged += EmailInfoMappings_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(EmailInfoMappings, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<EmailInfoMappings> _EmailInfoMappings = null;
        public VirtualList<EmailInfoMappings> EmailInfoMappings
        {
            get
            {
                return _EmailInfoMappings;
            }
            set
            {
                _EmailInfoMappings = value;
                NotifyPropertyChanged( x => x.EmailInfoMappings);
            }
        }

		 private void OnEmailInfoMappingsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Task.Run(() => EmailInfoMappings.Refresh()).ConfigureAwait(false);
            SelectedEmailInfoMappings.Clear();
            NotifyPropertyChanged(x => SelectedEmailInfoMappings);
            BeginSendMessage(MessageToken.SelectedEmailInfoMappingsChanged, new NotificationEventArgs(MessageToken.SelectedEmailInfoMappingsChanged));
        }

		void EmailInfoMappings_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (EmailInfoMappings.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => EmailInfoMappings);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("EmailInfoMappings | Error occured..." + EmailInfoMappings.LastLoadingError.Message);
                    NotifyPropertyChanged(x => EmailInfoMappings);
                    break;
            }
           
        }

		
		public readonly EmailInfoMappingsVirturalListLoader vloader = new EmailInfoMappingsVirturalListLoader();

		private ObservableCollection<EmailInfoMappings> _selectedEmailInfoMappings = new ObservableCollection<EmailInfoMappings>();
        public ObservableCollection<EmailInfoMappings> SelectedEmailInfoMappings
        {
            get
            {
                return _selectedEmailInfoMappings;
            }
            set
            {
                _selectedEmailInfoMappings = value;
				BeginSendMessage(MessageToken.SelectedEmailInfoMappingsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedEmailInfoMappingsChanged));
				 NotifyPropertyChanged(x => SelectedEmailInfoMappings);
            }
        }

        internal virtual void OnCurrentEmailInfoMappingsChanged(object sender, NotificationEventArgs<EmailInfoMappings> e)
        {
            if(BaseViewModel.Instance.CurrentEmailInfoMappings != null) BaseViewModel.Instance.CurrentEmailInfoMappings.PropertyChanged += CurrentEmailInfoMappings__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentEmailInfoMappings);
        }   

            void CurrentEmailInfoMappings__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddEmailMapping")
                   // {
                   //    if(EmailMapping.Contains(CurrentEmailInfoMappings.EmailMapping) == false) EmailMapping.Add(CurrentEmailInfoMappings.EmailMapping);
                    //}
                    //if (e.PropertyName == "AddInfoMapping")
                   // {
                   //    if(InfoMapping.Contains(CurrentEmailInfoMappings.InfoMapping) == false) InfoMapping.Add(CurrentEmailInfoMappings.InfoMapping);
                    //}
                 } 
        internal virtual void OnEmailInfoMappingsChanged(object sender, NotificationEventArgs e)
        {
            _EmailInfoMappings.Refresh();
			NotifyPropertyChanged(x => this.EmailInfoMappings);
        }   


 	
		 internal virtual void OnCurrentEmailMappingChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<EmailMapping> e)
			{
			if(ViewCurrentEmailMapping == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("EmailMappingId == {0}", e.Data.Id.ToString());
                 }

				EmailInfoMappings.Refresh();
				NotifyPropertyChanged(x => this.EmailInfoMappings);
                // SendMessage(MessageToken.EmailInfoMappingsChanged, new NotificationEventArgs(MessageToken.EmailInfoMappingsChanged));
                                          
                BaseViewModel.Instance.CurrentEmailInfoMappings = null;
			}
	
		 internal virtual void OnCurrentInfoMappingChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InfoMapping> e)
			{
			if(ViewCurrentInfoMapping == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("InfoMappingId == {0}", e.Data.Id.ToString());
                 }

				EmailInfoMappings.Refresh();
				NotifyPropertyChanged(x => this.EmailInfoMappings);
                // SendMessage(MessageToken.EmailInfoMappingsChanged, new NotificationEventArgs(MessageToken.EmailInfoMappingsChanged));
                                          
                BaseViewModel.Instance.CurrentEmailInfoMappings = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentEmailMapping = false;
         public bool ViewCurrentEmailMapping
         {
             get
             {
                 return _viewCurrentEmailMapping;
             }
             set
             {
                 _viewCurrentEmailMapping = value;
                 NotifyPropertyChanged(x => x.ViewCurrentEmailMapping);
                FilterData();
             }
         }
 	
		 bool _viewCurrentInfoMapping = false;
         public bool ViewCurrentInfoMapping
         {
             get
             {
                 return _viewCurrentInfoMapping;
             }
             set
             {
                 _viewCurrentInfoMapping = value;
                 NotifyPropertyChanged(x => x.ViewCurrentInfoMapping);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_EmailInfoMappings.Refresh();
			NotifyPropertyChanged(x => this.EmailInfoMappings);
		}

		public async Task SelectAll()
        {
            IEnumerable<EmailInfoMappings> lst = null;
            using (var ctx = new EmailInfoMappingsRepository())
            {
                lst = await ctx.GetEmailInfoMappingsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedEmailInfoMappings = new ObservableCollection<EmailInfoMappings>(lst);
        }

 

		private Boolean? _updateDatabaseFilter;
        public Boolean? UpdateDatabaseFilter
        {
            get
            {
                return _updateDatabaseFilter;
            }
            set
            {
                _updateDatabaseFilter = value;
				NotifyPropertyChanged(x => UpdateDatabaseFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			EmailInfoMappings.Refresh();
			NotifyPropertyChanged(x => this.EmailInfoMappings);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(UpdateDatabaseFilter.HasValue)
						res.Append(" && " + string.Format("UpdateDatabase == {0}",  UpdateDatabaseFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<EmailInfoMappings> lst = null;
            using (var ctx = new EmailInfoMappingsRepository())
            {
                lst = await ctx.GetEmailInfoMappingsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<EmailInfoMappingsExcelLine, List<EmailInfoMappingsExcelLine>>
            {
                dataToPrint = lst.Select(x => new EmailInfoMappingsExcelLine
                {
 
                    UpdateDatabase = x.UpdateDatabase 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public partial class EmailInfoMappingsExcelLine
        {
		 
                    public Nullable<bool> UpdateDatabase { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using CoreEntities.Client.Entities;
using CoreEntities.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.CoreEntities.ViewModels
{
    
	public partial class ContactsViewModel_AutoGen : ViewModelBase<ContactsViewModel_AutoGen>
	{

       private static readonly ContactsViewModel_AutoGen instance;
       static ContactsViewModel_AutoGen()
        {
            instance = new ContactsViewModel_AutoGen();
        }

       public static ContactsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public ContactsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<Contacts>(MessageToken.CurrentContactsChanged, OnCurrentContactsChanged);
            RegisterToReceiveMessages(MessageToken.ContactsChanged, OnContactsChanged);
			RegisterToReceiveMessages(MessageToken.ContactsFilterExpressionChanged, OnContactsFilterExpressionChanged);

 
			RegisterToReceiveMessages<FileTypes>(MessageToken.CurrentFileTypesChanged, OnCurrentFileTypesChanged);

 			// Recieve messages for Core Current Entities Changed
 

			Contacts = new VirtualList<Contacts>(vloader);
			Contacts.LoadingStateChanged += Contacts_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(Contacts, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<Contacts> _Contacts = null;
        public VirtualList<Contacts> Contacts
        {
            get
            {
                return _Contacts;
            }
            set
            {
                _Contacts = value;
            }
        }

		 private void OnContactsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			Contacts.Refresh();
            SelectedContacts.Clear();
            NotifyPropertyChanged(x => SelectedContacts);
            BeginSendMessage(MessageToken.SelectedContactsChanged, new NotificationEventArgs(MessageToken.SelectedContactsChanged));
        }

		void Contacts_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (Contacts.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => Contacts);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("Contacts | Error occured..." + Contacts.LastLoadingError.Message);
                    NotifyPropertyChanged(x => Contacts);
                    break;
            }
           
        }

		
		public readonly ContactsVirturalListLoader vloader = new ContactsVirturalListLoader();

		private ObservableCollection<Contacts> _selectedContacts = new ObservableCollection<Contacts>();
        public ObservableCollection<Contacts> SelectedContacts
        {
            get
            {
                return _selectedContacts;
            }
            set
            {
                _selectedContacts = value;
				BeginSendMessage(MessageToken.SelectedContactsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedContactsChanged));
				 NotifyPropertyChanged(x => SelectedContacts);
            }
        }

        internal void OnCurrentContactsChanged(object sender, NotificationEventArgs<Contacts> e)
        {
            if(BaseViewModel.Instance.CurrentContacts != null) BaseViewModel.Instance.CurrentContacts.PropertyChanged += CurrentContacts__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentContacts);
        }   

            void CurrentContacts__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddFileTypes")
                   // {
                   //    if(FileTypes.Contains(CurrentContacts.FileTypes) == false) FileTypes.Add(CurrentContacts.FileTypes);
                    //}
                 } 
        internal void OnContactsChanged(object sender, NotificationEventArgs e)
        {
            _Contacts.Refresh();
			NotifyPropertyChanged(x => this.Contacts);
        }   


 	
		 internal void OnCurrentFileTypesChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<FileTypes> e)
			{
			if(ViewCurrentFileTypes == false) return;
			if (e.Data == null || e.Data.Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("FileTypeId == {0}", e.Data.Id.ToString());
                 }

				Contacts.Refresh();
				NotifyPropertyChanged(x => this.Contacts);
                // SendMessage(MessageToken.ContactsChanged, new NotificationEventArgs(MessageToken.ContactsChanged));
                                          
                BaseViewModel.Instance.CurrentContacts = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentFileTypes = false;
         public bool ViewCurrentFileTypes
         {
             get
             {
                 return _viewCurrentFileTypes;
             }
             set
             {
                 _viewCurrentFileTypes = value;
                 NotifyPropertyChanged(x => x.ViewCurrentFileTypes);
                FilterData();
             }
         }
		public void ViewAll()
        {
		vloader.FilterExpression = "All";




			vloader.ClearNavigationExpression();
			_Contacts.Refresh();
			NotifyPropertyChanged(x => this.Contacts);
		}

		public async Task SelectAll()
        {
            IEnumerable<Contacts> lst = null;
            using (var ctx = new ContactsRepository())
            {
                lst = await ctx.GetContactsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedContacts = new ObservableCollection<Contacts>(lst);
        }

 

		private string _roleFilter;
        public string RoleFilter
        {
            get
            {
                return _roleFilter;
            }
            set
            {
                _roleFilter = value;
				NotifyPropertyChanged(x => RoleFilter);
                FilterData();
                
            }
        }	

 

		private string _emailAddressFilter;
        public string EmailAddressFilter
        {
            get
            {
                return _emailAddressFilter;
            }
            set
            {
                _emailAddressFilter = value;
				NotifyPropertyChanged(x => EmailAddressFilter);
                FilterData();
                
            }
        }	

 

		private string _nameFilter;
        public string NameFilter
        {
            get
            {
                return _nameFilter;
            }
            set
            {
                _nameFilter = value;
				NotifyPropertyChanged(x => NameFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			Contacts.Refresh();
			NotifyPropertyChanged(x => this.Contacts);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(RoleFilter) == false)
						res.Append(" && " + string.Format("Role.Contains(\"{0}\")",  RoleFilter));						
 

									if(string.IsNullOrEmpty(EmailAddressFilter) == false)
						res.Append(" && " + string.Format("EmailAddress.Contains(\"{0}\")",  EmailAddressFilter));						
 

									if(string.IsNullOrEmpty(NameFilter) == false)
						res.Append(" && " + string.Format("Name.Contains(\"{0}\")",  NameFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<Contacts> lst = null;
            using (var ctx = new ContactsRepository())
            {
                lst = await ctx.GetContactsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<ContactsExcelLine, List<ContactsExcelLine>>
            {
                dataToPrint = lst.Select(x => new ContactsExcelLine
                {
 
                    Role = x.Role ,
                    
 
                    EmailAddress = x.EmailAddress ,
                    
 
                    Name = x.Name 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class ContactsExcelLine
        {
		 
                    public string Role { get; set; } 
                    
 
                    public string EmailAddress { get; set; } 
                    
 
                    public string Name { get; set; } 
                    
        }

		
    }
}
		

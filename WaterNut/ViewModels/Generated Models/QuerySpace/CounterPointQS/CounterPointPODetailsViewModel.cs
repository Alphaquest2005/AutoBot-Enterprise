// <autogenerated>
//   This file was generated by T4 code generator AllQuerySpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Windows;
using System.Windows.Data;
using Core.Common.Converters;
using Core.Common.UI;
using Core.Common.UI.DataVirtualization;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;
using CounterPointQS.Client.Entities;
using CounterPointQS.Client.Repositories;
using SimpleMvvmToolkit;


namespace WaterNut.QuerySpace.CounterPointQS.ViewModels
{
    
	public partial class CounterPointPODetailsViewModel_AutoGen : ViewModelBase<CounterPointPODetailsViewModel_AutoGen>
	{

       private static readonly CounterPointPODetailsViewModel_AutoGen instance;
       static CounterPointPODetailsViewModel_AutoGen()
        {
            instance = new CounterPointPODetailsViewModel_AutoGen();
        }

       public static CounterPointPODetailsViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public CounterPointPODetailsViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<CounterPointPODetails>(MessageToken.CurrentCounterPointPODetailsChanged, OnCurrentCounterPointPODetailsChanged);
            RegisterToReceiveMessages(MessageToken.CounterPointPODetailsChanged, OnCounterPointPODetailsChanged);
			RegisterToReceiveMessages(MessageToken.CounterPointPODetailsFilterExpressionChanged, OnCounterPointPODetailsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			CounterPointPODetails = new VirtualList<CounterPointPODetails>(vloader);
			CounterPointPODetails.LoadingStateChanged += CounterPointPODetails_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(CounterPointPODetails, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<CounterPointPODetails> _CounterPointPODetails = null;
        public VirtualList<CounterPointPODetails> CounterPointPODetails
        {
            get
            {
                return _CounterPointPODetails;
            }
            set
            {
                _CounterPointPODetails = value;
            }
        }

		 private void OnCounterPointPODetailsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			CounterPointPODetails.Refresh();
            SelectedCounterPointPODetails.Clear();
            NotifyPropertyChanged(x => SelectedCounterPointPODetails);
            BeginSendMessage(MessageToken.SelectedCounterPointPODetailsChanged, new NotificationEventArgs(MessageToken.SelectedCounterPointPODetailsChanged));
        }

		void CounterPointPODetails_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (CounterPointPODetails.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => CounterPointPODetails);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("CounterPointPODetails | Error occured..." + CounterPointPODetails.LastLoadingError.Message);
                    NotifyPropertyChanged(x => CounterPointPODetails);
                    break;
            }
           
        }

		
		public readonly CounterPointPODetailsVirturalListLoader vloader = new CounterPointPODetailsVirturalListLoader();

		private ObservableCollection<CounterPointPODetails> _selectedCounterPointPODetails = new ObservableCollection<CounterPointPODetails>();
        public ObservableCollection<CounterPointPODetails> SelectedCounterPointPODetails
        {
            get
            {
                return _selectedCounterPointPODetails;
            }
            set
            {
                _selectedCounterPointPODetails = value;
				BeginSendMessage(MessageToken.SelectedCounterPointPODetailsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedCounterPointPODetailsChanged));
				 NotifyPropertyChanged(x => SelectedCounterPointPODetails);
            }
        }

        internal void OnCurrentCounterPointPODetailsChanged(object sender, NotificationEventArgs<CounterPointPODetails> e)
        {
            if(BaseViewModel.Instance.CurrentCounterPointPODetails != null) BaseViewModel.Instance.CurrentCounterPointPODetails.PropertyChanged += CurrentCounterPointPODetails__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentCounterPointPODetails);
        }   

            void CurrentCounterPointPODetails__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal void OnCounterPointPODetailsChanged(object sender, NotificationEventArgs e)
        {
            _CounterPointPODetails.Refresh();
			NotifyPropertyChanged(x => this.CounterPointPODetails);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";
			vloader.ClearNavigationExpression();
			_CounterPointPODetails.Refresh();
			NotifyPropertyChanged(x => this.CounterPointPODetails);
		}

		public async Task SelectAll()
        {
            IEnumerable<CounterPointPODetails> lst = null;
            using (var ctx = new CounterPointPODetailsRepository())
            {
                lst = await ctx.GetCounterPointPODetailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedCounterPointPODetails = new ObservableCollection<CounterPointPODetails>(lst);
        }

 

		private string _pO_NOFilter;
        public string PO_NOFilter
        {
            get
            {
                return _pO_NOFilter;
            }
            set
            {
                _pO_NOFilter = value;
				NotifyPropertyChanged(x => PO_NOFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _sEQ_NOFilter;
        public Int32? SEQ_NOFilter
        {
            get
            {
                return _sEQ_NOFilter;
            }
            set
            {
                _sEQ_NOFilter = value;
				NotifyPropertyChanged(x => SEQ_NOFilter);
                FilterData();
                
            }
        }	

 

		private string _iTEM_NOFilter;
        public string ITEM_NOFilter
        {
            get
            {
                return _iTEM_NOFilter;
            }
            set
            {
                _iTEM_NOFilter = value;
				NotifyPropertyChanged(x => ITEM_NOFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _oRD_QTYFilter;
        public Decimal? ORD_QTYFilter
        {
            get
            {
                return _oRD_QTYFilter;
            }
            set
            {
                _oRD_QTYFilter = value;
				NotifyPropertyChanged(x => ORD_QTYFilter);
                FilterData();
                
            }
        }	

 

		private string _oRD_UNITFilter;
        public string ORD_UNITFilter
        {
            get
            {
                return _oRD_UNITFilter;
            }
            set
            {
                _oRD_UNITFilter = value;
				NotifyPropertyChanged(x => ORD_UNITFilter);
                FilterData();
                
            }
        }	

 

		private string _iTEM_DESCRFilter;
        public string ITEM_DESCRFilter
        {
            get
            {
                return _iTEM_DESCRFilter;
            }
            set
            {
                _iTEM_DESCRFilter = value;
				NotifyPropertyChanged(x => ITEM_DESCRFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _oRD_COSTFilter;
        public Decimal? ORD_COSTFilter
        {
            get
            {
                return _oRD_COSTFilter;
            }
            set
            {
                _oRD_COSTFilter = value;
				NotifyPropertyChanged(x => ORD_COSTFilter);
                FilterData();
                
            }
        }	

 

		private Decimal? _uNIT_WEIGHTFilter;
        public Decimal? UNIT_WEIGHTFilter
        {
            get
            {
                return _uNIT_WEIGHTFilter;
            }
            set
            {
                _uNIT_WEIGHTFilter = value;
				NotifyPropertyChanged(x => UNIT_WEIGHTFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			CounterPointPODetails.Refresh();
			NotifyPropertyChanged(x => this.CounterPointPODetails);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

									if(string.IsNullOrEmpty(PO_NOFilter) == false)
						res.Append(" && " + $"PO_NO.Contains(\"{PO_NOFilter}\")");						
 

					if(SEQ_NOFilter.HasValue)
						res.Append(" && " + $"SEQ_NO == {SEQ_NOFilter.ToString()}");				 

									if(string.IsNullOrEmpty(ITEM_NOFilter) == false)
						res.Append(" && " + $"ITEM_NO.Contains(\"{ITEM_NOFilter}\")");						
 

					if(ORD_QTYFilter.HasValue)
						res.Append(" && " + $"ORD_QTY == {ORD_QTYFilter.ToString()}");				 

									if(string.IsNullOrEmpty(ORD_UNITFilter) == false)
						res.Append(" && " + $"ORD_UNIT.Contains(\"{ORD_UNITFilter}\")");						
 

									if(string.IsNullOrEmpty(ITEM_DESCRFilter) == false)
						res.Append(" && " + $"ITEM_DESCR.Contains(\"{ITEM_DESCRFilter}\")");						
 

					if(ORD_COSTFilter.HasValue)
						res.Append(" && " + $"ORD_COST == {ORD_COSTFilter.ToString()}");				 

					if(UNIT_WEIGHTFilter.HasValue)
						res.Append(" && " + $"UNIT_WEIGHT == {UNIT_WEIGHTFilter.ToString()}");							return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<CounterPointPODetails> lst = null;
            using (var ctx = new CounterPointPODetailsRepository())
            {
                lst = await ctx.GetCounterPointPODetailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<CounterPointPODetailsExcelLine, List<CounterPointPODetailsExcelLine>>
            {
                dataToPrint = lst.Select(x => new CounterPointPODetailsExcelLine
                {
 
                    PO_NO = x.PO_NO ,
                    
 
                    SEQ_NO = x.SEQ_NO ,
                    
 
                    ITEM_NO = x.ITEM_NO ,
                    
 
                    ORD_QTY = x.ORD_QTY ,
                    
 
                    ORD_UNIT = x.ORD_UNIT ,
                    
 
                    ITEM_DESCR = x.ITEM_DESCR ,
                    
 
                    ORD_COST = x.ORD_COST ,
                    
 
                    UNIT_WEIGHT = x.UNIT_WEIGHT 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
                await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class CounterPointPODetailsExcelLine
        {
		 
                    public string PO_NO { get; set; } 
                    
 
                    public int SEQ_NO { get; set; } 
                    
 
                    public string ITEM_NO { get; set; } 
                    
 
                    public decimal ORD_QTY { get; set; } 
                    
 
                    public string ORD_UNIT { get; set; } 
                    
 
                    public string ITEM_DESCR { get; set; } 
                    
 
                    public decimal ORD_COST { get; set; } 
                    
 
                    public Nullable<decimal> UNIT_WEIGHT { get; set; } 
                    
        }

		
    }
}
		

// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Threading.Tasks;
using AllocationQS.Client.Entities;
using AllocationQS.Client.Repositories;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
//using WaterNut.Client.Repositories;
using CoreEntities.Client.Entities;
using SimpleMvvmToolkit;



namespace WaterNut.QuerySpace.AllocationQS.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // CoreEntities.ViewModels.BaseViewModel
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static Task InitializationAsync()
        {
            return Task.CompletedTask;
        }

 

        
        class AllocationQSOnCreated: BaseViewModel
        {
           // Load Repository
                public AllocationQSOnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentAdjustmentShortAllocationIDChanged, OnCurrentAdjustmentShortAllocationIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAllocationsTestCasIDChanged, OnCurrentAllocationsTestCasIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaSalesAllocationsExIDChanged, OnCurrentAsycudaSalesAllocationsExIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaSalesAndAdjustmentAllocationsExIDChanged, OnCurrentAsycudaSalesAndAdjustmentAllocationsExIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<AdjustmentShortAllocation>(MessageToken.CurrentAdjustmentShortAllocationChanged, OnCurrentAdjustmentShortAllocationChanged);
                        RegisterToReceiveMessages<AllocationsTestCas>(MessageToken.CurrentAllocationsTestCasChanged, OnCurrentAllocationsTestCasChanged);
                        RegisterToReceiveMessages<AsycudaSalesAllocationsEx>(MessageToken.CurrentAsycudaSalesAllocationsExChanged, OnCurrentAsycudaSalesAllocationsExChanged);
                        RegisterToReceiveMessages<AsycudaSalesAndAdjustmentAllocationsEx>(MessageToken.CurrentAsycudaSalesAndAdjustmentAllocationsExChanged, OnCurrentAsycudaSalesAndAdjustmentAllocationsExChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentAdjustmentShortAllocationIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AdjustmentShortAllocationRepository ctx = new AdjustmentShortAllocationRepository())
                            {
                                CurrentAdjustmentShortAllocation = await ctx.GetAdjustmentShortAllocation(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAdjustmentShortAllocation);
                        }

                        private  string _currentAdjustmentShortAllocationID = "";
                        public string CurrentAdjustmentShortAllocationID
                        {
                            get
                            {
                                return _currentAdjustmentShortAllocationID;
                            }
                            set
                            {
                                if (_currentAdjustmentShortAllocationID != value)
                                {
                                    _currentAdjustmentShortAllocationID = value;
                                    if (!string.IsNullOrEmpty(_currentAdjustmentShortAllocationID)) BeginSendMessage(MessageToken.CurrentAdjustmentShortAllocationIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAdjustmentShortAllocationIDChanged, _currentAdjustmentShortAllocationID));
                                    NotifyPropertyChanged(x => this.CurrentAdjustmentShortAllocationID);  
                                }
                            }
                        }
                        internal async void OnCurrentAllocationsTestCasIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AllocationsTestCasRepository ctx = new AllocationsTestCasRepository())
                            {
                                CurrentAllocationsTestCas = await ctx.GetAllocationsTestCas(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAllocationsTestCas);
                        }

                        private  string _currentAllocationsTestCasID = "";
                        public string CurrentAllocationsTestCasID
                        {
                            get
                            {
                                return _currentAllocationsTestCasID;
                            }
                            set
                            {
                                if (_currentAllocationsTestCasID != value)
                                {
                                    _currentAllocationsTestCasID = value;
                                    if (!string.IsNullOrEmpty(_currentAllocationsTestCasID)) BeginSendMessage(MessageToken.CurrentAllocationsTestCasIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAllocationsTestCasIDChanged, _currentAllocationsTestCasID));
                                    NotifyPropertyChanged(x => this.CurrentAllocationsTestCasID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaSalesAllocationsExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaSalesAllocationsExRepository ctx = new AsycudaSalesAllocationsExRepository())
                            {
                                CurrentAsycudaSalesAllocationsEx = await ctx.GetAsycudaSalesAllocationsEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaSalesAllocationsEx);
                        }

                        private  string _currentAsycudaSalesAllocationsExID = "";
                        public string CurrentAsycudaSalesAllocationsExID
                        {
                            get
                            {
                                return _currentAsycudaSalesAllocationsExID;
                            }
                            set
                            {
                                if (_currentAsycudaSalesAllocationsExID != value)
                                {
                                    _currentAsycudaSalesAllocationsExID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaSalesAllocationsExID)) BeginSendMessage(MessageToken.CurrentAsycudaSalesAllocationsExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaSalesAllocationsExIDChanged, _currentAsycudaSalesAllocationsExID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaSalesAllocationsExID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaSalesAndAdjustmentAllocationsExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaSalesAndAdjustmentAllocationsExRepository ctx = new AsycudaSalesAndAdjustmentAllocationsExRepository())
                            {
                                CurrentAsycudaSalesAndAdjustmentAllocationsEx = await ctx.GetAsycudaSalesAndAdjustmentAllocationsEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaSalesAndAdjustmentAllocationsEx);
                        }

                        private  string _currentAsycudaSalesAndAdjustmentAllocationsExID = "";
                        public string CurrentAsycudaSalesAndAdjustmentAllocationsExID
                        {
                            get
                            {
                                return _currentAsycudaSalesAndAdjustmentAllocationsExID;
                            }
                            set
                            {
                                if (_currentAsycudaSalesAndAdjustmentAllocationsExID != value)
                                {
                                    _currentAsycudaSalesAndAdjustmentAllocationsExID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaSalesAndAdjustmentAllocationsExID)) BeginSendMessage(MessageToken.CurrentAsycudaSalesAndAdjustmentAllocationsExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaSalesAndAdjustmentAllocationsExIDChanged, _currentAsycudaSalesAndAdjustmentAllocationsExID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaSalesAndAdjustmentAllocationsExID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentAdjustmentShortAllocationChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AdjustmentShortAllocation> e)
        {
            //CurrentAdjustmentShortAllocation = e.Data;
            NotifyPropertyChanged(m => this.CurrentAdjustmentShortAllocation);
        }

        private  AdjustmentShortAllocation _currentAdjustmentShortAllocation;
        public AdjustmentShortAllocation CurrentAdjustmentShortAllocation
        {
            get
            {
                return _currentAdjustmentShortAllocation;
            }
            set
            {
                if (_currentAdjustmentShortAllocation != value)
                {
                    _currentAdjustmentShortAllocation = value;
                    BeginSendMessage(MessageToken.CurrentAdjustmentShortAllocationChanged,
                                                     new NotificationEventArgs<AdjustmentShortAllocation>(MessageToken.CurrentAdjustmentShortAllocationChanged, _currentAdjustmentShortAllocation)); 
                    NotifyPropertyChanged(x => this.CurrentAdjustmentShortAllocation);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AdjustmentShortAllocation> _vcurrentAdjustmentShortAllocation;
        public VirtualListItem<AdjustmentShortAllocation> VCurrentAdjustmentShortAllocation
        {
            get
            {
                return _vcurrentAdjustmentShortAllocation;
            }
            set
            {
                if (_vcurrentAdjustmentShortAllocation != value)
                {
                    _vcurrentAdjustmentShortAllocation = value;
					if(_vcurrentAdjustmentShortAllocation != null) CurrentAdjustmentShortAllocation = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAdjustmentShortAllocation);                    
                }
            }
        }



                     
       

        internal void OnCurrentAllocationsTestCasChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AllocationsTestCas> e)
        {
            //CurrentAllocationsTestCas = e.Data;
            NotifyPropertyChanged(m => this.CurrentAllocationsTestCas);
        }

        private  AllocationsTestCas _currentAllocationsTestCas;
        public AllocationsTestCas CurrentAllocationsTestCas
        {
            get
            {
                return _currentAllocationsTestCas;
            }
            set
            {
                if (_currentAllocationsTestCas != value)
                {
                    _currentAllocationsTestCas = value;
                    BeginSendMessage(MessageToken.CurrentAllocationsTestCasChanged,
                                                     new NotificationEventArgs<AllocationsTestCas>(MessageToken.CurrentAllocationsTestCasChanged, _currentAllocationsTestCas)); 
                    NotifyPropertyChanged(x => this.CurrentAllocationsTestCas);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AllocationsTestCas> _vcurrentAllocationsTestCas;
        public VirtualListItem<AllocationsTestCas> VCurrentAllocationsTestCas
        {
            get
            {
                return _vcurrentAllocationsTestCas;
            }
            set
            {
                if (_vcurrentAllocationsTestCas != value)
                {
                    _vcurrentAllocationsTestCas = value;
					if(_vcurrentAllocationsTestCas != null) CurrentAllocationsTestCas = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAllocationsTestCas);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaSalesAllocationsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaSalesAllocationsEx> e)
        {
            //CurrentAsycudaSalesAllocationsEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaSalesAllocationsEx);
        }

        private  AsycudaSalesAllocationsEx _currentAsycudaSalesAllocationsEx;
        public AsycudaSalesAllocationsEx CurrentAsycudaSalesAllocationsEx
        {
            get
            {
                return _currentAsycudaSalesAllocationsEx;
            }
            set
            {
                if (_currentAsycudaSalesAllocationsEx != value)
                {
                    _currentAsycudaSalesAllocationsEx = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaSalesAllocationsExChanged,
                                                     new NotificationEventArgs<AsycudaSalesAllocationsEx>(MessageToken.CurrentAsycudaSalesAllocationsExChanged, _currentAsycudaSalesAllocationsEx)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaSalesAllocationsEx);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaSalesAllocationsEx> _vcurrentAsycudaSalesAllocationsEx;
        public VirtualListItem<AsycudaSalesAllocationsEx> VCurrentAsycudaSalesAllocationsEx
        {
            get
            {
                return _vcurrentAsycudaSalesAllocationsEx;
            }
            set
            {
                if (_vcurrentAsycudaSalesAllocationsEx != value)
                {
                    _vcurrentAsycudaSalesAllocationsEx = value;
					if(_vcurrentAsycudaSalesAllocationsEx != null) CurrentAsycudaSalesAllocationsEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaSalesAllocationsEx);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaSalesAndAdjustmentAllocationsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaSalesAndAdjustmentAllocationsEx> e)
        {
            //CurrentAsycudaSalesAndAdjustmentAllocationsEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaSalesAndAdjustmentAllocationsEx);
        }

        private  AsycudaSalesAndAdjustmentAllocationsEx _currentAsycudaSalesAndAdjustmentAllocationsEx;
        public AsycudaSalesAndAdjustmentAllocationsEx CurrentAsycudaSalesAndAdjustmentAllocationsEx
        {
            get
            {
                return _currentAsycudaSalesAndAdjustmentAllocationsEx;
            }
            set
            {
                if (_currentAsycudaSalesAndAdjustmentAllocationsEx != value)
                {
                    _currentAsycudaSalesAndAdjustmentAllocationsEx = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaSalesAndAdjustmentAllocationsExChanged,
                                                     new NotificationEventArgs<AsycudaSalesAndAdjustmentAllocationsEx>(MessageToken.CurrentAsycudaSalesAndAdjustmentAllocationsExChanged, _currentAsycudaSalesAndAdjustmentAllocationsEx)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaSalesAndAdjustmentAllocationsEx);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaSalesAndAdjustmentAllocationsEx> _vcurrentAsycudaSalesAndAdjustmentAllocationsEx;
        public VirtualListItem<AsycudaSalesAndAdjustmentAllocationsEx> VCurrentAsycudaSalesAndAdjustmentAllocationsEx
        {
            get
            {
                return _vcurrentAsycudaSalesAndAdjustmentAllocationsEx;
            }
            set
            {
                if (_vcurrentAsycudaSalesAndAdjustmentAllocationsEx != value)
                {
                    _vcurrentAsycudaSalesAndAdjustmentAllocationsEx = value;
					if(_vcurrentAsycudaSalesAndAdjustmentAllocationsEx != null) CurrentAsycudaSalesAndAdjustmentAllocationsEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaSalesAndAdjustmentAllocationsEx);                    
                }
            }
        }






        static AllocationQSOnCreated newAllocationQSOnCreated = new AllocationQSOnCreated();
    }		
}

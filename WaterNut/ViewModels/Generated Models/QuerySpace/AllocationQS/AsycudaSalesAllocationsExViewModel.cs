// <autogenerated>
//   This file was generated by T4 code generator AllViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using AllocationQS.Client.Entities;
using AllocationQS.Client.Repositories;
//using WaterNut.Client.Repositories;
        
using CoreEntities.Client.Entities;


namespace WaterNut.QuerySpace.AllocationQS.ViewModels
{
    
	public partial class AsycudaSalesAllocationsExViewModel_AutoGen : ViewModelBase<AsycudaSalesAllocationsExViewModel_AutoGen>
	{

       private static readonly AsycudaSalesAllocationsExViewModel_AutoGen instance;
       static AsycudaSalesAllocationsExViewModel_AutoGen()
        {
            instance = new AsycudaSalesAllocationsExViewModel_AutoGen();
        }

       public static AsycudaSalesAllocationsExViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public AsycudaSalesAllocationsExViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<AsycudaSalesAllocationsEx>(MessageToken.CurrentAsycudaSalesAllocationsExChanged, OnCurrentAsycudaSalesAllocationsExChanged);
            RegisterToReceiveMessages(MessageToken.AsycudaSalesAllocationsExsChanged, OnAsycudaSalesAllocationsExsChanged);
			RegisterToReceiveMessages(MessageToken.AsycudaSalesAllocationsExsFilterExpressionChanged, OnAsycudaSalesAllocationsExsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
                        RegisterToReceiveMessages<ApplicationSettings>(CoreEntities.MessageToken.CurrentApplicationSettingsChanged, OnCurrentApplicationSettingsChanged);
 

			AsycudaSalesAllocationsExs = new VirtualList<AsycudaSalesAllocationsEx>(vloader);
			AsycudaSalesAllocationsExs.LoadingStateChanged += AsycudaSalesAllocationsExs_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(AsycudaSalesAllocationsExs, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<AsycudaSalesAllocationsEx> _AsycudaSalesAllocationsExs = null;
        public VirtualList<AsycudaSalesAllocationsEx> AsycudaSalesAllocationsExs
        {
            get
            {
                return _AsycudaSalesAllocationsExs;
            }
            set
            {
                _AsycudaSalesAllocationsExs = value;
            }
        }

		 private void OnAsycudaSalesAllocationsExsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			AsycudaSalesAllocationsExs.Refresh();
            SelectedAsycudaSalesAllocationsExs.Clear();
            NotifyPropertyChanged(x => SelectedAsycudaSalesAllocationsExs);
            BeginSendMessage(MessageToken.SelectedAsycudaSalesAllocationsExsChanged, new NotificationEventArgs(MessageToken.SelectedAsycudaSalesAllocationsExsChanged));
        }

		void AsycudaSalesAllocationsExs_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (AsycudaSalesAllocationsExs.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => AsycudaSalesAllocationsExs);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("AsycudaSalesAllocationsExs | Error occured..." + AsycudaSalesAllocationsExs.LastLoadingError.Message);
                    NotifyPropertyChanged(x => AsycudaSalesAllocationsExs);
                    break;
            }
           
        }

		
		public readonly AsycudaSalesAllocationsExVirturalListLoader vloader = new AsycudaSalesAllocationsExVirturalListLoader();

		private ObservableCollection<AsycudaSalesAllocationsEx> _selectedAsycudaSalesAllocationsExs = new ObservableCollection<AsycudaSalesAllocationsEx>();
        public ObservableCollection<AsycudaSalesAllocationsEx> SelectedAsycudaSalesAllocationsExs
        {
            get
            {
                return _selectedAsycudaSalesAllocationsExs;
            }
            set
            {
                _selectedAsycudaSalesAllocationsExs = value;
				BeginSendMessage(MessageToken.SelectedAsycudaSalesAllocationsExsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedAsycudaSalesAllocationsExsChanged));
				 NotifyPropertyChanged(x => SelectedAsycudaSalesAllocationsExs);
            }
        }

        internal virtual void OnCurrentAsycudaSalesAllocationsExChanged(object sender, NotificationEventArgs<AsycudaSalesAllocationsEx> e)
        {
            if(BaseViewModel.Instance.CurrentAsycudaSalesAllocationsEx != null) BaseViewModel.Instance.CurrentAsycudaSalesAllocationsEx.PropertyChanged += CurrentAsycudaSalesAllocationsEx__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentAsycudaSalesAllocationsEx);
        }   

            void CurrentAsycudaSalesAllocationsEx__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddApplicationSettings")
                   // {
                   //    if(ApplicationSettings.Contains(CurrentAsycudaSalesAllocationsEx.ApplicationSettings) == false) ApplicationSettings.Add(CurrentAsycudaSalesAllocationsEx.ApplicationSettings);
                    //}
                 } 
        internal virtual void OnAsycudaSalesAllocationsExsChanged(object sender, NotificationEventArgs e)
        {
            _AsycudaSalesAllocationsExs.Refresh();
			NotifyPropertyChanged(x => this.AsycudaSalesAllocationsExs);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
                internal virtual void OnCurrentApplicationSettingsChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<ApplicationSettings> e)
				{
				if (e.Data == null || e.Data.ApplicationSettingsId == null)
                {
                    vloader.FilterExpression = null;
                }
                else
                {
                    vloader.FilterExpression = string.Format("ApplicationSettingsId == {0}", e.Data.ApplicationSettingsId.ToString());
                }
					
                    AsycudaSalesAllocationsExs.Refresh();
					NotifyPropertyChanged(x => this.AsycudaSalesAllocationsExs);
				}
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = $"ApplicationSettingsId == {CoreEntities.ViewModels.BaseViewModel.Instance.CurrentApplicationSettings.ApplicationSettingsId}";




			vloader.ClearNavigationExpression();
			_AsycudaSalesAllocationsExs.Refresh();
			NotifyPropertyChanged(x => this.AsycudaSalesAllocationsExs);
		}

		public async Task SelectAll()
        {
            IEnumerable<AsycudaSalesAllocationsEx> lst = null;
            using (var ctx = new AsycudaSalesAllocationsExRepository())
            {
                lst = await ctx.GetAsycudaSalesAllocationsExsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedAsycudaSalesAllocationsExs = new ObservableCollection<AsycudaSalesAllocationsEx>(lst);
        }

 

		private Double? _totalValueFilter;
        public Double? TotalValueFilter
        {
            get
            {
                return _totalValueFilter;
            }
            set
            {
                _totalValueFilter = value;
				NotifyPropertyChanged(x => TotalValueFilter);
                FilterData();
                
            }
        }	

 

		private Double? _allocatedValueFilter;
        public Double? AllocatedValueFilter
        {
            get
            {
                return _allocatedValueFilter;
            }
            set
            {
                _allocatedValueFilter = value;
				NotifyPropertyChanged(x => AllocatedValueFilter);
                FilterData();
                
            }
        }	

 

		private string _statusFilter;
        public string StatusFilter
        {
            get
            {
                return _statusFilter;
            }
            set
            {
                _statusFilter = value;
				NotifyPropertyChanged(x => StatusFilter);
                FilterData();
                
            }
        }	

 

		private Double? _qtyAllocatedFilter;
        public Double? QtyAllocatedFilter
        {
            get
            {
                return _qtyAllocatedFilter;
            }
            set
            {
                _qtyAllocatedFilter = value;
				NotifyPropertyChanged(x => QtyAllocatedFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _xLineNumberFilter;
        public Int32? xLineNumberFilter
        {
            get
            {
                return _xLineNumberFilter;
            }
            set
            {
                _xLineNumberFilter = value;
				NotifyPropertyChanged(x => xLineNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startInvoiceDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartInvoiceDateFilter
        {
            get
            {
                return _startInvoiceDateFilter;
            }
            set
            {
                _startInvoiceDateFilter = value;
				NotifyPropertyChanged(x => StartInvoiceDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endInvoiceDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndInvoiceDateFilter
        {
            get
            {
                return _endInvoiceDateFilter;
            }
            set
            {
                _endInvoiceDateFilter = value;
				NotifyPropertyChanged(x => EndInvoiceDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _invoiceDateFilter;
        public DateTime? InvoiceDateFilter
        {
            get
            {
                return _invoiceDateFilter;
            }
            set
            {
                _invoiceDateFilter = value;
				NotifyPropertyChanged(x => InvoiceDateFilter);
                FilterData();
                
            }
        }	

 

		private Double? _salesQuantityFilter;
        public Double? SalesQuantityFilter
        {
            get
            {
                return _salesQuantityFilter;
            }
            set
            {
                _salesQuantityFilter = value;
				NotifyPropertyChanged(x => SalesQuantityFilter);
                FilterData();
                
            }
        }	

 

		private Double? _salesQtyAllocatedFilter;
        public Double? SalesQtyAllocatedFilter
        {
            get
            {
                return _salesQtyAllocatedFilter;
            }
            set
            {
                _salesQtyAllocatedFilter = value;
				NotifyPropertyChanged(x => SalesQtyAllocatedFilter);
                FilterData();
                
            }
        }	

 

		private string _invoiceNoFilter;
        public string InvoiceNoFilter
        {
            get
            {
                return _invoiceNoFilter;
            }
            set
            {
                _invoiceNoFilter = value;
				NotifyPropertyChanged(x => InvoiceNoFilter);
                FilterData();
                
            }
        }	

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _itemDescriptionFilter;
        public string ItemDescriptionFilter
        {
            get
            {
                return _itemDescriptionFilter;
            }
            set
            {
                _itemDescriptionFilter = value;
				NotifyPropertyChanged(x => ItemDescriptionFilter);
                FilterData();
                
            }
        }	

 

		private string _dutyFreePaidFilter;
        public string DutyFreePaidFilter
        {
            get
            {
                return _dutyFreePaidFilter;
            }
            set
            {
                _dutyFreePaidFilter = value;
				NotifyPropertyChanged(x => DutyFreePaidFilter);
                FilterData();
                
            }
        }	

 

		private string _pCNumberFilter;
        public string pCNumberFilter
        {
            get
            {
                return _pCNumberFilter;
            }
            set
            {
                _pCNumberFilter = value;
				NotifyPropertyChanged(x => pCNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startpRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartpRegistrationDateFilter
        {
            get
            {
                return _startpRegistrationDateFilter;
            }
            set
            {
                _startpRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartpRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endpRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndpRegistrationDateFilter
        {
            get
            {
                return _endpRegistrationDateFilter;
            }
            set
            {
                _endpRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndpRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _pRegistrationDateFilter;
        public DateTime? pRegistrationDateFilter
        {
            get
            {
                return _pRegistrationDateFilter;
            }
            set
            {
                _pRegistrationDateFilter = value;
				NotifyPropertyChanged(x => pRegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private Double? _pQuantityFilter;
        public Double? pQuantityFilter
        {
            get
            {
                return _pQuantityFilter;
            }
            set
            {
                _pQuantityFilter = value;
				NotifyPropertyChanged(x => pQuantityFilter);
                FilterData();
                
            }
        }	

 

		private Double? _pQtyAllocatedFilter;
        public Double? pQtyAllocatedFilter
        {
            get
            {
                return _pQtyAllocatedFilter;
            }
            set
            {
                _pQtyAllocatedFilter = value;
				NotifyPropertyChanged(x => pQtyAllocatedFilter);
                FilterData();
                
            }
        }	

 

		private Double? _piQuantityFilter;
        public Double? PiQuantityFilter
        {
            get
            {
                return _piQuantityFilter;
            }
            set
            {
                _piQuantityFilter = value;
				NotifyPropertyChanged(x => PiQuantityFilter);
                FilterData();
                
            }
        }	

 

		private string _xCNumberFilter;
        public string xCNumberFilter
        {
            get
            {
                return _xCNumberFilter;
            }
            set
            {
                _xCNumberFilter = value;
				NotifyPropertyChanged(x => xCNumberFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startxRegistrationDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartxRegistrationDateFilter
        {
            get
            {
                return _startxRegistrationDateFilter;
            }
            set
            {
                _startxRegistrationDateFilter = value;
				NotifyPropertyChanged(x => StartxRegistrationDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endxRegistrationDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndxRegistrationDateFilter
        {
            get
            {
                return _endxRegistrationDateFilter;
            }
            set
            {
                _endxRegistrationDateFilter = value;
				NotifyPropertyChanged(x => EndxRegistrationDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _xRegistrationDateFilter;
        public DateTime? xRegistrationDateFilter
        {
            get
            {
                return _xRegistrationDateFilter;
            }
            set
            {
                _xRegistrationDateFilter = value;
				NotifyPropertyChanged(x => xRegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _pLineNumberFilter;
        public Int32? pLineNumberFilter
        {
            get
            {
                return _pLineNumberFilter;
            }
            set
            {
                _pLineNumberFilter = value;
				NotifyPropertyChanged(x => pLineNumberFilter);
                FilterData();
                
            }
        }	

 

		private Double? _costFilter;
        public Double? CostFilter
        {
            get
            {
                return _costFilter;
            }
            set
            {
                _costFilter = value;
				NotifyPropertyChanged(x => CostFilter);
                FilterData();
                
            }
        }	

 

		private Double? _total_CIF_itmFilter;
        public Double? Total_CIF_itmFilter
        {
            get
            {
                return _total_CIF_itmFilter;
            }
            set
            {
                _total_CIF_itmFilter = value;
				NotifyPropertyChanged(x => Total_CIF_itmFilter);
                FilterData();
                
            }
        }	

 

		private Double? _dutyLiabilityFilter;
        public Double? DutyLiabilityFilter
        {
            get
            {
                return _dutyLiabilityFilter;
            }
            set
            {
                _dutyLiabilityFilter = value;
				NotifyPropertyChanged(x => DutyLiabilityFilter);
                FilterData();
                
            }
        }	

 

		private Double? _taxAmountFilter;
        public Double? TaxAmountFilter
        {
            get
            {
                return _taxAmountFilter;
            }
            set
            {
                _taxAmountFilter = value;
				NotifyPropertyChanged(x => TaxAmountFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _pIsAssessedFilter;
        public Boolean? pIsAssessedFilter
        {
            get
            {
                return _pIsAssessedFilter;
            }
            set
            {
                _pIsAssessedFilter = value;
				NotifyPropertyChanged(x => pIsAssessedFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _doNotAllocateSalesFilter;
        public Boolean? DoNotAllocateSalesFilter
        {
            get
            {
                return _doNotAllocateSalesFilter;
            }
            set
            {
                _doNotAllocateSalesFilter = value;
				NotifyPropertyChanged(x => DoNotAllocateSalesFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _doNotAllocatePreviousEntryFilter;
        public Boolean? DoNotAllocatePreviousEntryFilter
        {
            get
            {
                return _doNotAllocatePreviousEntryFilter;
            }
            set
            {
                _doNotAllocatePreviousEntryFilter = value;
				NotifyPropertyChanged(x => DoNotAllocatePreviousEntryFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _sANumberFilter;
        public Int32? SANumberFilter
        {
            get
            {
                return _sANumberFilter;
            }
            set
            {
                _sANumberFilter = value;
				NotifyPropertyChanged(x => SANumberFilter);
                FilterData();
                
            }
        }	

 

		private string _pReferenceNumberFilter;
        public string pReferenceNumberFilter
        {
            get
            {
                return _pReferenceNumberFilter;
            }
            set
            {
                _pReferenceNumberFilter = value;
				NotifyPropertyChanged(x => pReferenceNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _xReferenceNumberFilter;
        public string xReferenceNumberFilter
        {
            get
            {
                return _xReferenceNumberFilter;
            }
            set
            {
                _xReferenceNumberFilter = value;
				NotifyPropertyChanged(x => xReferenceNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _tariffCodeFilter;
        public string TariffCodeFilter
        {
            get
            {
                return _tariffCodeFilter;
            }
            set
            {
                _tariffCodeFilter = value;
				NotifyPropertyChanged(x => TariffCodeFilter);
                FilterData();
                
            }
        }	

 

		private Boolean? _invalidFilter;
        public Boolean? InvalidFilter
        {
            get
            {
                return _invalidFilter;
            }
            set
            {
                _invalidFilter = value;
				NotifyPropertyChanged(x => InvalidFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startpExpiryDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartpExpiryDateFilter
        {
            get
            {
                return _startpExpiryDateFilter;
            }
            set
            {
                _startpExpiryDateFilter = value;
				NotifyPropertyChanged(x => StartpExpiryDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endpExpiryDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndpExpiryDateFilter
        {
            get
            {
                return _endpExpiryDateFilter;
            }
            set
            {
                _endpExpiryDateFilter = value;
				NotifyPropertyChanged(x => EndpExpiryDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _pExpiryDateFilter;
        public DateTime? pExpiryDateFilter
        {
            get
            {
                return _pExpiryDateFilter;
            }
            set
            {
                _pExpiryDateFilter = value;
				NotifyPropertyChanged(x => pExpiryDateFilter);
                FilterData();
                
            }
        }	

 

		private string _customerNameFilter;
        public string CustomerNameFilter
        {
            get
            {
                return _customerNameFilter;
            }
            set
            {
                _customerNameFilter = value;
				NotifyPropertyChanged(x => CustomerNameFilter);
                FilterData();
                
            }
        }	

 

		private string _pTariffCodeFilter;
        public string pTariffCodeFilter
        {
            get
            {
                return _pTariffCodeFilter;
            }
            set
            {
                _pTariffCodeFilter = value;
				NotifyPropertyChanged(x => pTariffCodeFilter);
                FilterData();
                
            }
        }	

 

		private string _pItemNumberFilter;
        public string pItemNumberFilter
        {
            get
            {
                return _pItemNumberFilter;
            }
            set
            {
                _pItemNumberFilter = value;
				NotifyPropertyChanged(x => pItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private Double? _xQuantityFilter;
        public Double? xQuantityFilter
        {
            get
            {
                return _xQuantityFilter;
            }
            set
            {
                _xQuantityFilter = value;
				NotifyPropertyChanged(x => xQuantityFilter);
                FilterData();
                
            }
        }	

 

		private Double? _salesFactorFilter;
        public Double? SalesFactorFilter
        {
            get
            {
                return _salesFactorFilter;
            }
            set
            {
                _salesFactorFilter = value;
				NotifyPropertyChanged(x => SalesFactorFilter);
                FilterData();
                
            }
        }	

 

		private string _warehouseErrorFilter;
        public string WarehouseErrorFilter
        {
            get
            {
                return _warehouseErrorFilter;
            }
            set
            {
                _warehouseErrorFilter = value;
				NotifyPropertyChanged(x => WarehouseErrorFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startAssessmentDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartAssessmentDateFilter
        {
            get
            {
                return _startAssessmentDateFilter;
            }
            set
            {
                _startAssessmentDateFilter = value;
				NotifyPropertyChanged(x => StartAssessmentDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endAssessmentDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndAssessmentDateFilter
        {
            get
            {
                return _endAssessmentDateFilter;
            }
            set
            {
                _endAssessmentDateFilter = value;
				NotifyPropertyChanged(x => EndAssessmentDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _assessmentDateFilter;
        public DateTime? AssessmentDateFilter
        {
            get
            {
                return _assessmentDateFilter;
            }
            set
            {
                _assessmentDateFilter = value;
				NotifyPropertyChanged(x => AssessmentDateFilter);
                FilterData();
                
            }
        }	

 

		private string _xStatusFilter;
        public string xStatusFilter
        {
            get
            {
                return _xStatusFilter;
            }
            set
            {
                _xStatusFilter = value;
				NotifyPropertyChanged(x => xStatusFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			AsycudaSalesAllocationsExs.Refresh();
			NotifyPropertyChanged(x => this.AsycudaSalesAllocationsExs);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

					if(TotalValueFilter.HasValue)
						res.Append(" && " + string.Format("TotalValue == {0}",  TotalValueFilter.ToString()));				 

					if(AllocatedValueFilter.HasValue)
						res.Append(" && " + string.Format("AllocatedValue == {0}",  AllocatedValueFilter.ToString()));				 

									if(string.IsNullOrEmpty(StatusFilter) == false)
						res.Append(" && " + string.Format("Status.Contains(\"{0}\")",  StatusFilter));						
 

					if(QtyAllocatedFilter.HasValue)
						res.Append(" && " + string.Format("QtyAllocated == {0}",  QtyAllocatedFilter.ToString()));				 

					if(xLineNumberFilter.HasValue)
						res.Append(" && " + string.Format("xLineNumber == {0}",  xLineNumberFilter.ToString()));				 

 

				if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue)
						{
							if(StartInvoiceDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("InvoiceDate >= \"{0}\"",  Convert.ToDateTime(StartInvoiceDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue)
						{
							if(EndInvoiceDateFilter.HasValue)
								res.Append(" && " + string.Format("InvoiceDate <= \"{0}\"",  Convert.ToDateTime(EndInvoiceDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_invoiceDateFilter).Date != DateTime.MinValue)
						{
							if(InvoiceDateFilter.HasValue)
								res.Append(" && " + string.Format("InvoiceDate == \"{0}\"",  Convert.ToDateTime(InvoiceDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(SalesQuantityFilter.HasValue)
						res.Append(" && " + string.Format("SalesQuantity == {0}",  SalesQuantityFilter.ToString()));				 

					if(SalesQtyAllocatedFilter.HasValue)
						res.Append(" && " + string.Format("SalesQtyAllocated == {0}",  SalesQtyAllocatedFilter.ToString()));				 

									if(string.IsNullOrEmpty(InvoiceNoFilter) == false)
						res.Append(" && " + string.Format("InvoiceNo.Contains(\"{0}\")",  InvoiceNoFilter));						
 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(ItemDescriptionFilter) == false)
						res.Append(" && " + string.Format("ItemDescription.Contains(\"{0}\")",  ItemDescriptionFilter));						
 

									if(string.IsNullOrEmpty(DutyFreePaidFilter) == false)
						res.Append(" && " + string.Format("DutyFreePaid.Contains(\"{0}\")",  DutyFreePaidFilter));						
 

									if(string.IsNullOrEmpty(pCNumberFilter) == false)
						res.Append(" && " + string.Format("pCNumber.Contains(\"{0}\")",  pCNumberFilter));						
 

 

				if (Convert.ToDateTime(StartpRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndpRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartpRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartpRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndpRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("pRegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartpRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndpRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndpRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("pRegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndpRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartpRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndpRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_pRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(pRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("pRegistrationDate == \"{0}\"",  Convert.ToDateTime(pRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(pQuantityFilter.HasValue)
						res.Append(" && " + string.Format("pQuantity == {0}",  pQuantityFilter.ToString()));				 

					if(pQtyAllocatedFilter.HasValue)
						res.Append(" && " + string.Format("pQtyAllocated == {0}",  pQtyAllocatedFilter.ToString()));				 

					if(PiQuantityFilter.HasValue)
						res.Append(" && " + string.Format("PiQuantity == {0}",  PiQuantityFilter.ToString()));				 

									if(string.IsNullOrEmpty(xCNumberFilter) == false)
						res.Append(" && " + string.Format("xCNumber.Contains(\"{0}\")",  xCNumberFilter));						
 

 

				if (Convert.ToDateTime(StartxRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndxRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartxRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(StartxRegistrationDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndxRegistrationDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("xRegistrationDate >= \"{0}\"",  Convert.ToDateTime(StartxRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndxRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(EndxRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("xRegistrationDate <= \"{0}\"",  Convert.ToDateTime(EndxRegistrationDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartxRegistrationDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndxRegistrationDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_xRegistrationDateFilter).Date != DateTime.MinValue)
						{
							if(xRegistrationDateFilter.HasValue)
								res.Append(" && " + string.Format("xRegistrationDate == \"{0}\"",  Convert.ToDateTime(xRegistrationDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

					if(pLineNumberFilter.HasValue)
						res.Append(" && " + string.Format("pLineNumber == {0}",  pLineNumberFilter.ToString()));				 

					if(CostFilter.HasValue)
						res.Append(" && " + string.Format("Cost == {0}",  CostFilter.ToString()));				 

					if(Total_CIF_itmFilter.HasValue)
						res.Append(" && " + string.Format("Total_CIF_itm == {0}",  Total_CIF_itmFilter.ToString()));				 

					if(DutyLiabilityFilter.HasValue)
						res.Append(" && " + string.Format("DutyLiability == {0}",  DutyLiabilityFilter.ToString()));				 

					if(TaxAmountFilter.HasValue)
						res.Append(" && " + string.Format("TaxAmount == {0}",  TaxAmountFilter.ToString()));				 

									if(pIsAssessedFilter.HasValue)
						res.Append(" && " + string.Format("pIsAssessed == {0}",  pIsAssessedFilter));						
 

									if(DoNotAllocateSalesFilter.HasValue)
						res.Append(" && " + string.Format("DoNotAllocateSales == {0}",  DoNotAllocateSalesFilter));						
 

									if(DoNotAllocatePreviousEntryFilter.HasValue)
						res.Append(" && " + string.Format("DoNotAllocatePreviousEntry == {0}",  DoNotAllocatePreviousEntryFilter));						
 

					if(SANumberFilter.HasValue)
						res.Append(" && " + string.Format("SANumber == {0}",  SANumberFilter.ToString()));				 

									if(string.IsNullOrEmpty(pReferenceNumberFilter) == false)
						res.Append(" && " + string.Format("pReferenceNumber.Contains(\"{0}\")",  pReferenceNumberFilter));						
 

									if(string.IsNullOrEmpty(xReferenceNumberFilter) == false)
						res.Append(" && " + string.Format("xReferenceNumber.Contains(\"{0}\")",  xReferenceNumberFilter));						
 

									if(string.IsNullOrEmpty(TariffCodeFilter) == false)
						res.Append(" && " + string.Format("TariffCode.Contains(\"{0}\")",  TariffCodeFilter));						
 

									if(InvalidFilter.HasValue)
						res.Append(" && " + string.Format("Invalid == {0}",  InvalidFilter));						
 

 

				if (Convert.ToDateTime(StartpExpiryDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndpExpiryDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartpExpiryDateFilter).Date != DateTime.MinValue)
						{
							if(StartpExpiryDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndpExpiryDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("pExpiryDate >= \"{0}\"",  Convert.ToDateTime(StartpExpiryDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndpExpiryDateFilter).Date != DateTime.MinValue)
						{
							if(EndpExpiryDateFilter.HasValue)
								res.Append(" && " + string.Format("pExpiryDate <= \"{0}\"",  Convert.ToDateTime(EndpExpiryDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartpExpiryDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndpExpiryDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_pExpiryDateFilter).Date != DateTime.MinValue)
						{
							if(pExpiryDateFilter.HasValue)
								res.Append(" && " + string.Format("pExpiryDate == \"{0}\"",  Convert.ToDateTime(pExpiryDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(CustomerNameFilter) == false)
						res.Append(" && " + string.Format("CustomerName.Contains(\"{0}\")",  CustomerNameFilter));						
 

									if(string.IsNullOrEmpty(pTariffCodeFilter) == false)
						res.Append(" && " + string.Format("pTariffCode.Contains(\"{0}\")",  pTariffCodeFilter));						
 

									if(string.IsNullOrEmpty(pItemNumberFilter) == false)
						res.Append(" && " + string.Format("pItemNumber.Contains(\"{0}\")",  pItemNumberFilter));						
 

					if(xQuantityFilter.HasValue)
						res.Append(" && " + string.Format("xQuantity == {0}",  xQuantityFilter.ToString()));				 

					if(SalesFactorFilter.HasValue)
						res.Append(" && " + string.Format("SalesFactor == {0}",  SalesFactorFilter.ToString()));				 

									if(string.IsNullOrEmpty(WarehouseErrorFilter) == false)
						res.Append(" && " + string.Format("WarehouseError.Contains(\"{0}\")",  WarehouseErrorFilter));						
 

 

				if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue)
						{
							if(StartAssessmentDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("AssessmentDate >= \"{0}\"",  Convert.ToDateTime(StartAssessmentDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue)
						{
							if(EndAssessmentDateFilter.HasValue)
								res.Append(" && " + string.Format("AssessmentDate <= \"{0}\"",  Convert.ToDateTime(EndAssessmentDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy HH:mm:ss")));
						}

				if (Convert.ToDateTime(StartAssessmentDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndAssessmentDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_assessmentDateFilter).Date != DateTime.MinValue)
						{
							if(AssessmentDateFilter.HasValue)
								res.Append(" && " + string.Format("AssessmentDate == \"{0}\"",  Convert.ToDateTime(AssessmentDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(xStatusFilter) == false)
						res.Append(" && " + string.Format("xStatus.Contains(\"{0}\")",  xStatusFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<AsycudaSalesAllocationsEx> lst = null;
            using (var ctx = new AsycudaSalesAllocationsExRepository())
            {
                lst = await ctx.GetAsycudaSalesAllocationsExsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToCSV<AsycudaSalesAllocationsExExcelLine, List<AsycudaSalesAllocationsExExcelLine>>
            {
                dataToPrint = lst.Select(x => new AsycudaSalesAllocationsExExcelLine
                {
 
                    TotalValue = x.TotalValue ,
                    
 
                    AllocatedValue = x.AllocatedValue ,
                    
 
                    Status = x.Status ,
                    
 
                    QtyAllocated = x.QtyAllocated ,
                    
 
                    xLineNumber = x.xLineNumber ,
                    
 
                    InvoiceDate = x.InvoiceDate ,
                    
 
                    SalesQuantity = x.SalesQuantity ,
                    
 
                    SalesQtyAllocated = x.SalesQtyAllocated ,
                    
 
                    InvoiceNo = x.InvoiceNo ,
                    
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    ItemDescription = x.ItemDescription ,
                    
 
                    DutyFreePaid = x.DutyFreePaid ,
                    
 
                    pCNumber = x.pCNumber ,
                    
 
                    pRegistrationDate = x.pRegistrationDate ,
                    
 
                    pQuantity = x.pQuantity ,
                    
 
                    pQtyAllocated = x.pQtyAllocated ,
                    
 
                    PiQuantity = x.PiQuantity ,
                    
 
                    xCNumber = x.xCNumber ,
                    
 
                    xRegistrationDate = x.xRegistrationDate ,
                    
 
                    pLineNumber = x.pLineNumber ,
                    
 
                    Cost = x.Cost ,
                    
 
                    Total_CIF_itm = x.Total_CIF_itm ,
                    
 
                    DutyLiability = x.DutyLiability ,
                    
 
                    TaxAmount = x.TaxAmount ,
                    
 
                    pIsAssessed = x.pIsAssessed ,
                    
 
                    DoNotAllocateSales = x.DoNotAllocateSales ,
                    
 
                    DoNotAllocatePreviousEntry = x.DoNotAllocatePreviousEntry ,
                    
 
                    SANumber = x.SANumber ,
                    
 
                    pReferenceNumber = x.pReferenceNumber ,
                    
 
                    xReferenceNumber = x.xReferenceNumber ,
                    
 
                    TariffCode = x.TariffCode ,
                    
 
                    Invalid = x.Invalid ,
                    
 
                    pExpiryDate = x.pExpiryDate ,
                    
 
                    CustomerName = x.CustomerName ,
                    
 
                    pTariffCode = x.pTariffCode ,
                    
 
                    pItemNumber = x.pItemNumber ,
                    
 
                    xQuantity = x.xQuantity ,
                    
 
                    SalesFactor = x.SalesFactor ,
                    
 
                    WarehouseError = x.WarehouseError ,
                    
 
                    AssessmentDate = x.AssessmentDate ,
                    
 
                    xStatus = x.xStatus 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
               await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class AsycudaSalesAllocationsExExcelLine
        {
		 
                    public Nullable<double> TotalValue { get; set; } 
                    
 
                    public Nullable<double> AllocatedValue { get; set; } 
                    
 
                    public string Status { get; set; } 
                    
 
                    public Nullable<double> QtyAllocated { get; set; } 
                    
 
                    public Nullable<int> xLineNumber { get; set; } 
                    
 
                    public System.DateTime InvoiceDate { get; set; } 
                    
 
                    public Nullable<double> SalesQuantity { get; set; } 
                    
 
                    public Nullable<double> SalesQtyAllocated { get; set; } 
                    
 
                    public string InvoiceNo { get; set; } 
                    
 
                    public string ItemNumber { get; set; } 
                    
 
                    public string ItemDescription { get; set; } 
                    
 
                    public string DutyFreePaid { get; set; } 
                    
 
                    public string pCNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> pRegistrationDate { get; set; } 
                    
 
                    public Nullable<double> pQuantity { get; set; } 
                    
 
                    public Nullable<double> pQtyAllocated { get; set; } 
                    
 
                    public Nullable<double> PiQuantity { get; set; } 
                    
 
                    public string xCNumber { get; set; } 
                    
 
                    public Nullable<System.DateTime> xRegistrationDate { get; set; } 
                    
 
                    public Nullable<int> pLineNumber { get; set; } 
                    
 
                    public Nullable<double> Cost { get; set; } 
                    
 
                    public Nullable<double> Total_CIF_itm { get; set; } 
                    
 
                    public Nullable<double> DutyLiability { get; set; } 
                    
 
                    public double TaxAmount { get; set; } 
                    
 
                    public Nullable<bool> pIsAssessed { get; set; } 
                    
 
                    public Nullable<bool> DoNotAllocateSales { get; set; } 
                    
 
                    public Nullable<bool> DoNotAllocatePreviousEntry { get; set; } 
                    
 
                    public Nullable<int> SANumber { get; set; } 
                    
 
                    public string pReferenceNumber { get; set; } 
                    
 
                    public string xReferenceNumber { get; set; } 
                    
 
                    public string TariffCode { get; set; } 
                    
 
                    public Nullable<bool> Invalid { get; set; } 
                    
 
                    public Nullable<System.DateTime> pExpiryDate { get; set; } 
                    
 
                    public string CustomerName { get; set; } 
                    
 
                    public string pTariffCode { get; set; } 
                    
 
                    public string pItemNumber { get; set; } 
                    
 
                    public Nullable<double> xQuantity { get; set; } 
                    
 
                    public Nullable<double> SalesFactor { get; set; } 
                    
 
                    public string WarehouseError { get; set; } 
                    
 
                    public Nullable<System.DateTime> AssessmentDate { get; set; } 
                    
 
                    public string xStatus { get; set; } 
                    
        }

		
    }
}
		

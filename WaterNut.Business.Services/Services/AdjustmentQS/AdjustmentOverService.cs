// <autogenerated>
//   This file was generated by T4 code generator AllServices.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core;
using System.Data.SqlClient;
using System.Diagnostics;
using System.ServiceModel;
using System.Threading.Tasks;
//using System.Transactions;


using System.Linq.Dynamic;
using System.ComponentModel.Composition;
using AdjustmentQS.Business.Entities;
using Core.Common.Contracts;
using Core.Common.Business.Services;
using Core.Common.UI;

using System.Data.Entity;
using System.Linq;
using TrackableEntities;
using TrackableEntities.Common;
using TrackableEntities.EF6;
using WaterNut.Interfaces;

namespace AdjustmentQS.Business.Services
{
   [Export (typeof(IAdjustmentOverService))]
   [Export(typeof(IBusinessService))]
   [PartCreationPolicy(CreationPolicy.NonShared)]
   [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall,
                    ConcurrencyMode = ConcurrencyMode.Multiple)]
   
    public partial class AdjustmentOverService : IAdjustmentOverService, IDisposable
    {
        //private readonly AdjustmentQSContext dbContext;

        public bool StartTracking { get; set; }

        public AdjustmentOverService()
        {
            try
            {
                // dbContext = new AdjustmentQSContext(){StartTracking = StartTracking};
                StartTracking = false;
             }
            catch (Exception updateEx)
            {
                    System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault, new FaultReason(fault.Message));
            }
        }

        public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOvers(List<string> includesLst = null, bool tracking = true)
        {
            try
            {
            //using (var scope = new TransactionScope(TransactionScopeOption.Required,
                                   //new TransactionOptions() {IsolationLevel = IsolationLevel.ReadUncommitted}))
               // {
                  using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                  {
				    var set = AddIncludes(includesLst, dbContext);
                    IEnumerable<AdjustmentOver> entities = set.AsNoTracking().ToList();
                           //scope.Complete();
                            if(tracking) entities.AsParallel(new ParallelLinqOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount }).ForAll(x => x.StartTracking());
                            return entities;
                   }
                //}
             }
            catch (Exception updateEx)
            {
                    System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }


        public async Task<AdjustmentOver> GetAdjustmentOverByKey(string EntryDataDetailsId, List<string> includesLst = null, bool tracking = true)
        {
            try
            {
			   if(string.IsNullOrEmpty(EntryDataDetailsId))return null; 
              using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                var i = Convert.ToInt32(EntryDataDetailsId);
				var set = AddIncludes(includesLst, dbContext);
                AdjustmentOver entity = set.AsNoTracking().SingleOrDefault(x => x.EntryDataDetailsId == i);
                if(tracking && entity != null) entity.StartTracking();
                return entity;
              }
             }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }


		 public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOversByExpression(string exp, List<string> includesLst = null, bool tracking = true)
        {
            try
            {
                using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                {
                    dbContext.Database.CommandTimeout = 0;
					if (string.IsNullOrEmpty(exp) || exp == "None") return new List<AdjustmentOver>();
					var set = AddIncludes(includesLst, dbContext);
                    if (exp == "All")
                    {
						var entities = set.AsNoTracking().ToList();

                        if(tracking) entities.AsParallel(new ParallelLinqOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount }).ForAll(x => x.StartTracking());
                        return entities; 
                    }
					else
					{
						var entities = set.AsNoTracking().Where(exp)
											.ToList();
                        if(tracking) entities.AsParallel(new ParallelLinqOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount }).ForAll(x => x.StartTracking());
                        return entities; 
											
					}
					
                }
            }
            catch (Exception updateEx)
            {
                    System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }

		 public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOversByExpressionLst(List<string> expLst, List<string> includesLst = null, bool tracking = true)
        {
            try
            {
                using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                {
                    dbContext.Database.CommandTimeout = 0;
					if (expLst.Count == 0 || expLst.FirstOrDefault() == "None") return new List<AdjustmentOver>();
					var set = AddIncludes(includesLst, dbContext);
                    if (expLst.FirstOrDefault() == "All")
                    {
						var entities = set.AsNoTracking().ToList(); 
                        if(tracking) entities.AsParallel(new ParallelLinqOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount }).ForAll(x => x.StartTracking());
                        return entities; 
                    }
					else
					{
						set = AddWheres(expLst, set);
						var entities = set.AsNoTracking().ToList();
                        if(tracking) entities.AsParallel(new ParallelLinqOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount }).ForAll(x => x.StartTracking());
                        return entities; 
											
					}
					
                }
            }
            catch (Exception updateEx)
            {
                    System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }

		public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOversByExpressionNav(string exp,
																							  Dictionary<string, string> navExp,
																							  List<string> includesLst = null, bool tracking = true)
        {
            try
            {
                using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                {
                    dbContext.Database.CommandTimeout = 0;
                    if (string.IsNullOrEmpty(exp) || exp == "None") return new List<AdjustmentOver>();

                    if (exp == "All" && navExp.Count == 0)
                    {
                        var aentities = AddIncludes(includesLst, dbContext)
												.ToList();
                        if(tracking) aentities.AsParallel(new ParallelLinqOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount }).ForAll(x => x.StartTracking());
                        return aentities; 
                    }
                    foreach (var itm in navExp)
                    {
                        switch (itm.Key)
                        {
                            case "AdjustmentEx":
                                return
                                    await
                                        GetWhere<AdjustmentEx>(dbContext, exp, itm.Value, "AdjustmentOvers", "SelectMany", includesLst)
										.ConfigureAwait(continueOnCapturedContext: false);

                            case "AsycudaDocumentItemEntryDataDetails":
                                return
                                    await
                                        GetWhere<AsycudaDocumentItemEntryDataDetail>(dbContext, exp, itm.Value, "AdjustmentOver", "Select", includesLst)
										.ConfigureAwait(continueOnCapturedContext: false);

                            case "AdjustmentDetail":
                                return
                                    await
                                        GetWhere<AdjustmentDetail>(dbContext, exp, itm.Value, "AdjustmentOvers", "SelectMany", includesLst)
										.ConfigureAwait(continueOnCapturedContext: false);

                            case "InventoryItemsEx":
                                return
                                    await
                                        GetWhere<InventoryItemsEx>(dbContext, exp, itm.Value, "AdjustmentOvers", "SelectMany", includesLst)
										.ConfigureAwait(continueOnCapturedContext: false);

                        }

                    }
					var set = AddIncludes(includesLst, dbContext);
                    var entities = set.AsNoTracking().Where(exp)
									.ToList();
                    if(tracking) entities.AsParallel(new ParallelLinqOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount }).ForAll(x => x.StartTracking());
                        return entities; 

                }
            }
            catch (Exception updateEx)
            {
                    System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }

        public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOversByBatch(string exp,
            int totalrow, List<string> includesLst = null, bool tracking = true)
        {
            try
            {

                var res = new ConcurrentQueue<List<AdjustmentOver>>();



                if (string.IsNullOrEmpty(exp) || exp == "None") return new List<AdjustmentOver>();


                var batchSize = 500;
                var batches = Convert.ToInt32(totalrow / batchSize);

                if (totalrow % batchSize > 0) batches += 1;
                var exceptions = new ConcurrentQueue<Exception>();
                Parallel.For(0, batches,
                   new ParallelOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount * 2 },
                    bat =>
                    //  for (int bat = 0; bat < batches; bat++)
                    {
                        try
                        {
                            using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                            {
                                dbContext.Database.CommandTimeout = 0;
                                dbContext.Configuration.AutoDetectChangesEnabled = false;
                                //dbContext.Configuration.LazyLoadingEnabled = true;
                                var set = AddIncludes(includesLst, dbContext);
                                IQueryable<AdjustmentOver> dset;
                                if (exp == "All")
                                {
                                    dset = set.OrderBy(x => x.EntryDataDetailsId);
                                }
                                else
                                {
                                    dset = set.OrderBy(x => x.EntryDataDetailsId).Where(exp);
                                }

                                var lst = dset.AsNoTracking()
                                    .Skip(bat * batchSize)
                                    .Take(batchSize)
                                    .ToList();
                                res.Enqueue(lst);
                            }

                        }
                        catch (Exception ex)
                        {
                            exceptions.Enqueue(ex);
                        }
                    }
                    );
                if (exceptions.Count > 0) throw new AggregateException(exceptions);
    
                var entities = res.SelectMany(x => x.ToList());
                if(tracking) entities.AsParallel(new ParallelLinqOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount }).ForAll(x => x.StartTracking());
                return entities; 

            }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                var fault = new ValidationFault
                {
                    Result = false,
                    Message = updateEx.Message,
                    Description = updateEx.StackTrace
                };
                throw new FaultException<ValidationFault>(fault);
            }
        }
        public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOversByBatchExpressionLst(List<string> expLst,
            int totalrow, List<string> includesLst = null, bool tracking = true)
        {
            try
            {

                var res = new ConcurrentQueue<List<AdjustmentOver>>();



                if (expLst.Count == 0 || expLst.FirstOrDefault() == "None") return new List<AdjustmentOver>();


                var batchSize = 500;
                var batches = Convert.ToInt32(totalrow / batchSize);

                if (totalrow % batchSize > 0) batches += 1;
                var exceptions = new ConcurrentQueue<Exception>();
                Parallel.For(0, batches,
                   new ParallelOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount * 2 },
                    bat =>
                    //  for (int bat = 0; bat < batches; bat++)
                    {
                        try
                        {
                            using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                            {
                                dbContext.Database.CommandTimeout = 0;
                                dbContext.Configuration.AutoDetectChangesEnabled = false;
                                //dbContext.Configuration.LazyLoadingEnabled = true;
                                var set = AddIncludes(includesLst, dbContext);
                                IQueryable<AdjustmentOver> dset;
                                if (expLst.FirstOrDefault() == "All")
                                {
                                    dset = set.OrderBy(x => x.EntryDataDetailsId);
                                }
                                else
                                {
                                    set = AddWheres(expLst, set);
                                    dset = set.OrderBy(x => x.EntryDataDetailsId);
                                }

                                var lst = dset.AsNoTracking()
                                    .Skip(bat * batchSize)
                                    .Take(batchSize)
                                    .ToList();
                                res.Enqueue(lst);
                            }

                        }
                        catch (Exception ex)
                        {
                            exceptions.Enqueue(ex);
                        }
                    }
                    );
                if (exceptions.Count > 0) throw new AggregateException(exceptions);
                var entities = res.SelectMany(x => x.ToList());
                if(tracking) entities.AsParallel(new ParallelLinqOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount }).ForAll(x => x.StartTracking());
                return entities; 
            }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                var fault = new ValidationFault
                {
                    Result = false,
                    Message = updateEx.Message,
                    Description = updateEx.StackTrace
                };
                throw new FaultException<ValidationFault>(fault);
            }
        }


        public async Task<AdjustmentOver> UpdateAdjustmentOver(AdjustmentOver entity)
        { 
            using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                try
                {   
                     var res = (AdjustmentOver) entity;
                    if(res.TrackingState == TrackingState.Unchanged) res.TrackingState = TrackingState.Modified;                              
                    
                    dbContext.ApplyChanges(res);
                    dbContext.SaveChanges();
                    res.AcceptChanges();
                    return res;      
      
                }
                catch (DbUpdateConcurrencyException dce)
                {
                    // Get failed entry
                    foreach (var itm in dce.Entries)
                    {
                        if(itm.State != EntityState.Added)
                         {
                            var dv = itm.GetDatabaseValues();
                            if(dv != null) itm.OriginalValues.SetValues(dv);
                        }
                    }
                }
                catch (OptimisticConcurrencyException oce)
                {
                    var context = ((IObjectContextAdapter)dbContext).ObjectContext;

                    foreach (var entry in oce.StateEntries)
                    {
                        context.Refresh(System.Data.Entity.Core.Objects.RefreshMode.StoreWins, entry.Entity);
                    }
                }   
                catch (DbUpdateException e)
                {
                    
                   // Debugger.Break();
                    SqlException s = e.InnerException.InnerException as SqlException;
                    if (s != null && s.Number == 2627)
                    {
                         
                    }
                    else
                    {
                        Debugger.Break();
                        throw;
                    }
                }             
                catch (Exception updateEx)
                {
                    if (
                        updateEx.Message.Contains(
                            "The changes to the database were committed successfully, " +
                            "but an error occurred while updating the object context"))
                        return entity;

                    System.Diagnostics.Debugger.Break();
                    //throw new FaultException(updateEx.Message);
                        var fault = new ValidationFault
                                    {
                                        Result = false,
                                        Message = updateEx.Message,
                                        Description = updateEx.StackTrace
                                    };
                        throw new FaultException<ValidationFault>(fault);
                }
            }
           return entity;
        }

        public async Task<AdjustmentOver> CreateAdjustmentOver(AdjustmentOver entity)
        {
            try
            {
                var res = (AdjustmentOver) entity;
              using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                dbContext.AdjustmentOvers.Add(res);
                dbContext.SaveChanges();
                res.AcceptChanges();
                return res;
              }
            }
            catch (Exception updateEx)
            {
                    System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }

        public async Task<bool> DeleteAdjustmentOver(string EntryDataDetailsId)
        {
            try
            {
              using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                var i = Convert.ToInt32(EntryDataDetailsId);
                AdjustmentOver entity = dbContext.AdjustmentOvers
													.SingleOrDefault(x => x.EntryDataDetailsId == i);
                if (entity == null)
                    return false;

                    dbContext.AdjustmentOvers.Attach(entity);
                    dbContext.AdjustmentOvers.Remove(entity);
                    dbContext.SaveChanges();
                    return true;
              }
            }
            catch (Exception updateEx)
            {
                    System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }

        public async Task<bool> RemoveSelectedAdjustmentOver(IEnumerable<string> lst)
        {
            try
            {
                StatusModel.StartStatusUpdate("Removing AdjustmentOver", lst.Count());
                var t = Task.Run(() =>
                {
                    using (var ctx = new AdjustmentOverService())
                    {
                        foreach (var item in lst.ToList())
                        {

                            ctx.DeleteAdjustmentOver(item).Wait();
                            StatusModel.StatusUpdate();
                        }
                    }
                });
                await t.ConfigureAwait(false);
                return true;
            }
            catch (Exception updateEx)
            {
                    System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
            

               
        }

		// Virtural list Implementation

         public async Task<int> CountByExpressionLst(List<string> expLst)
        {
            try
            {
                using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                {
                    dbContext.Database.CommandTimeout = 0;
                    if (expLst.Count == 0 || expLst.FirstOrDefault() == "None") return 0;
                    var set = (IQueryable<AdjustmentOver>)dbContext.AdjustmentOvers; 
                    if (expLst.FirstOrDefault() == "All")
                    {
                        return set.AsNoTracking().Count();
                    }
                    else
                    {
                        set = AddWheres(expLst, set);
                        return set.AsNoTracking().Count();
                    }
                    
                }
            }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                var fault = new ValidationFault
                {
                    Result = false,
                    Message = updateEx.Message,
                    Description = updateEx.StackTrace
                };
                throw new FaultException<ValidationFault>(fault);
            }
        }

		public async Task<int> Count(string exp)
        {
            try
            {
                using (AdjustmentQSContext dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                {
                    if (string.IsNullOrEmpty(exp) || exp == "None") return 0;
                    if (exp == "All")
                    {
                        return dbContext.AdjustmentOvers
                                    .AsNoTracking()
									.Count();
                    }
                    else
                    {
                        
                        return dbContext.AdjustmentOvers
									.AsNoTracking()
                                    .Where(exp)
									.Count();
                    }
                }
            }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }
        
        public async Task<IEnumerable<AdjustmentOver>> LoadRange(int startIndex, int count, string exp)
        {
            try
            {
                using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                {
                    dbContext.Database.CommandTimeout = 0;
                    if (string.IsNullOrEmpty(exp) || exp == "None") return new List<AdjustmentOver>();
                    if (exp == "All")
                    {
                        return dbContext.AdjustmentOvers
										.AsNoTracking()
                                        .OrderBy(y => y.EntryDataDetailsId)
										.Skip(startIndex)
										.Take(count)
										.ToList();
                    }
                    else
                    {
                        
                        return dbContext.AdjustmentOvers
										.AsNoTracking()
                                        .Where(exp)
										.OrderBy(y => y.EntryDataDetailsId)
										.Skip(startIndex)
										.Take(count)
										.ToList();
                    }
                }
            }
            catch (Exception updateEx)
            {
                    System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }

		public async Task<int> CountNav(string exp, Dictionary<string, string> navExp)
        {
            try
            {
                if (string.IsNullOrEmpty(exp) || exp == "None") return 0;
                using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                {
                    dbContext.Database.CommandTimeout = 0;
                    if (exp == "All" && navExp.Count == 0)
                    {
                        return dbContext.AdjustmentOvers
										.AsNoTracking()
                                        .Count();
                    }
                    foreach (var itm in navExp)
                    {
                        switch (itm.Key)
                        {
                            case "AdjustmentEx":
                                return await CountWhere<AdjustmentEx>(dbContext, exp, itm.Value, "AdjustmentOvers", "SelectMany")
											.ConfigureAwait(continueOnCapturedContext: false);
                            case "AsycudaDocumentItemEntryDataDetails":
                                return await CountWhere<AsycudaDocumentItemEntryDataDetail>(dbContext, exp, itm.Value, "AdjustmentOver", "Select")
											.ConfigureAwait(continueOnCapturedContext: false);
                            case "AdjustmentDetail":
                                return await CountWhere<AdjustmentDetail>(dbContext, exp, itm.Value, "AdjustmentOvers", "SelectMany")
											.ConfigureAwait(continueOnCapturedContext: false);
                            case "InventoryItemsEx":
                                return await CountWhere<InventoryItemsEx>(dbContext, exp, itm.Value, "AdjustmentOvers", "SelectMany")
											.ConfigureAwait(continueOnCapturedContext: false);
						}
                    }
                    return dbContext.AdjustmentOvers.Where(exp == "All" || exp == null ? "EntryDataDetailsId != null" : exp)
											.AsNoTracking()
                                            .Count();
                }
                
            }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                var fault = new ValidationFault
                {
                    Result = false,
                    Message = updateEx.Message,
                    Description = updateEx.StackTrace
                };
                throw new FaultException<ValidationFault>(fault);
            }
        }

		private static async Task<int> CountWhere<T>(AdjustmentQSContext dbContext, string exp, string navExp, string navProp, string rel) where T : class
        {
              switch (rel)
		    {
		        case "SelectMany":
                    return await CountWhereSelectMany<T>(dbContext, exp, navExp, navProp)
									.ConfigureAwait(continueOnCapturedContext: false);
		            
                default:
                    return await CountWhereSelect<T>(dbContext, exp, navExp, navProp)
									.ConfigureAwait(continueOnCapturedContext: false);
		    }
        }

		private static async Task<int> CountWhereSelectMany<T>(AdjustmentQSContext dbContext, string exp, string navExp, string navProp) where T : class
        {
			try
			{
            return dbContext.Set<T>()
				.AsNoTracking()
                .Where(navExp)
                .SelectMany(navProp).OfType<AdjustmentOver>()
                .Where(exp == "All" || exp == null ? "EntryDataDetailsId != null" : exp)
                .Distinct()
                .OrderBy("EntryDataDetailsId")
                .Count();
			}
			catch (Exception)
			{
				Debugger.Break();
				throw;
			}
        }

		private static async Task<int> CountWhereSelect<T>(AdjustmentQSContext dbContext, string exp, string navExp, string navProp) where T : class
        {
			try
			{
            return dbContext.Set<T>()
				.AsNoTracking()
                .Where(navExp)
                .Select(navProp).OfType<AdjustmentOver>()
                .Where(exp == "All" || exp == null ? "EntryDataDetailsId != null" : exp)
                .Distinct()
                .OrderBy("EntryDataDetailsId")
                .Count();
			}
			catch (Exception)
			{
				Debugger.Break();
				throw;
			}
        }

		  public async Task<IEnumerable<AdjustmentOver>> LoadRangeNav(int startIndex, int count, string exp,
                                                                                 Dictionary<string, string> navExp, IEnumerable<string> includeLst = null)
        {
            try
            {
                using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                {
                    dbContext.Database.CommandTimeout = 0;
                    if ((string.IsNullOrEmpty(exp) && navExp.Count == 0) || exp == "None") return new List<AdjustmentOver>();
                    var set = AddIncludes(includeLst, dbContext);

                    if (exp == "All" && navExp.Count == 0)
                    {
                       
                        return set
									.AsNoTracking()
                                    .OrderBy(y => y.EntryDataDetailsId)
 
                                    .Skip(startIndex)
                                    .Take(count)
									.ToList();
                    }
                    foreach (var itm in navExp)
                    {
                        switch (itm.Key)
                        {
                            case "AdjustmentEx":
                                return
                                    await
                                        LoadRangeWhere<AdjustmentEx>(startIndex, count, dbContext, exp, itm.Value, "AdjustmentOvers", "SelectMany")
													.ConfigureAwait(continueOnCapturedContext: false);

                            case "AsycudaDocumentItemEntryDataDetails":
                                return
                                    await
                                        LoadRangeWhere<AsycudaDocumentItemEntryDataDetail>(startIndex, count, dbContext, exp, itm.Value, "AdjustmentOver", "Select")
													.ConfigureAwait(continueOnCapturedContext: false);

                            case "AdjustmentDetail":
                                return
                                    await
                                        LoadRangeWhere<AdjustmentDetail>(startIndex, count, dbContext, exp, itm.Value, "AdjustmentOvers", "SelectMany")
													.ConfigureAwait(continueOnCapturedContext: false);

                            case "InventoryItemsEx":
                                return
                                    await
                                        LoadRangeWhere<InventoryItemsEx>(startIndex, count, dbContext, exp, itm.Value, "AdjustmentOvers", "SelectMany")
													.ConfigureAwait(continueOnCapturedContext: false);

                          
							default:
                                throw new ArgumentException("No Navigation property found for " + itm.Key);
						}

                    }
                    return set//dbContext.AdjustmentOvers
								.AsNoTracking()
                                .Where(exp == "All" || exp == null ? "EntryDataDetailsId != null" : exp)
								.OrderBy(y => y.EntryDataDetailsId)
 
                                .Skip(startIndex)
                                .Take(count)
								.ToList();


                }
            }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }

		private static async Task<IEnumerable<AdjustmentOver>> LoadRangeWhere<T>(int startIndex, int count,
            AdjustmentQSContext dbContext, string exp, string navExp, string navProp, string rel, IEnumerable<string> includeLst = null) where T : class
        {
             switch (rel)
		    {
		        case "SelectMany":
                    return await LoadRangeSelectMany<T>(startIndex, count, dbContext, exp, navExp, navProp, includeLst)
									.ConfigureAwait(continueOnCapturedContext: false);
		            
                default:
                    return await LoadRangeSelect<T>(startIndex, count, dbContext, exp, navExp, navProp, includeLst)
									.ConfigureAwait(continueOnCapturedContext: false);
		    }
        }

		private static async Task<IEnumerable<AdjustmentOver>> LoadRangeSelectMany<T>(int startIndex, int count,
            AdjustmentQSContext dbContext, string exp, string navExp, string navProp, IEnumerable<string> includeLst = null) where T : class
        {
			try
			{
            var set = dbContext.Set<T>()
				.AsNoTracking()
                .Where(navExp)
                .SelectMany(navProp).OfType<AdjustmentOver>();
    
            if (includeLst != null) set = includeLst.Aggregate(set, (current, itm) => current.Include(itm));            

            return set
                .Where(exp == "All" || exp == null ? "EntryDataDetailsId != null" : exp)
                .Distinct()
                .OrderBy(y => y.EntryDataDetailsId)
 
                .Skip(startIndex)
                .Take(count)
                .ToList();
			}
			catch (Exception)
			{
				Debugger.Break();
				throw;
			}
        }

		private static async Task<IEnumerable<AdjustmentOver>> LoadRangeSelect<T>(int startIndex, int count,
            AdjustmentQSContext dbContext, string exp, string navExp, string navProp, IEnumerable<string> includeLst = null) where T : class
        {
			try
			{
              var set = dbContext.Set<T>()
				.AsNoTracking()
                .Where(navExp)
                .Select(navProp).OfType<AdjustmentOver>();

               if (includeLst != null) set = includeLst.Aggregate(set, (current, itm) => current.Include(itm)); 
                
               return set
                .Where(exp == "All" || exp == null ? "EntryDataDetailsId != null" : exp)
                .Distinct()
                .OrderBy(y => y.EntryDataDetailsId)
 
                .Skip(startIndex)
                .Take(count)
                .ToList();
							 }
			catch (Exception)
			{
				Debugger.Break();
				throw;
			}
        }

        private static async Task<IEnumerable<AdjustmentOver>> GetWhere<T>(AdjustmentQSContext dbContext,
            string exp, string navExp, string navProp, string rel, List<string> includesLst = null) where T : class
        {
			try
			{
			    switch (rel)
				{
					case "SelectMany":
						return await GetWhereSelectMany<T>(dbContext, exp, navExp, navProp, includesLst)
										.ConfigureAwait(continueOnCapturedContext: false);
						
					default:
						return await GetWhereSelect<T>(dbContext, exp, navExp, navProp, includesLst)
										.ConfigureAwait(continueOnCapturedContext: false);
				}
			
			}
			catch (Exception)
			{
				Debugger.Break();
				throw;
			}
        }

		private static async Task<IEnumerable<AdjustmentOver>> GetWhereSelectMany<T>(AdjustmentQSContext dbContext,
            string exp, string navExp, string navProp, List<string> includesLst = null) where T : class
        {
			try
			{

			if (includesLst == null)
			{
				return dbContext.Set<T>()
							.AsNoTracking()
                            .Where(navExp)
							.SelectMany(navProp).OfType<AdjustmentOver>()
							.Where(exp == "All" || exp == null?"EntryDataDetailsId != null":exp)
							.Distinct()
							.ToList();
			}

			var set = (DbQuery<AdjustmentOver>)dbContext.Set<T>()
				.AsNoTracking()
                .Where(navExp)
                .SelectMany(navProp).OfType<AdjustmentOver>()
                .Where(exp == "All" || exp == null?"EntryDataDetailsId != null":exp)
                .Distinct();

			set = includesLst.Aggregate(set, (current, itm) => current.Include(itm));

            return set.ToList();
			}
			catch (Exception)
			{
				Debugger.Break();
				throw;
			}
        }

		private static async Task<IEnumerable<AdjustmentOver>> GetWhereSelect<T>(AdjustmentQSContext dbContext,
            string exp, string navExp, string navProp, List<string> includesLst = null) where T : class
        {
			try
			{

			if (includesLst == null)
			{
				return dbContext.Set<T>()
							.AsNoTracking()
                            .Where(navExp)
							.Select(navProp).OfType<AdjustmentOver>()
							.Where(exp == "All" || exp == null?"EntryDataDetailsId != null":exp)
							.Distinct()
							.ToList();
			}

			var set = (DbQuery<AdjustmentOver>)dbContext.Set<T>()
				.AsNoTracking()
                .Where(navExp)
                .Select(navProp).OfType<AdjustmentOver>()
                .Where(exp == "All" || exp == null?"EntryDataDetailsId != null":exp)
                .Distinct();

			set = includesLst.Aggregate(set, (current, itm) => current.Include(itm));

            return set.ToList();
			}
			catch (Exception)
			{
				Debugger.Break();
				throw;
			}
        }

			        public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOverByEntryDataId(string EntryDataId, List<string> includesLst = null)
        {
            try
            {
                using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                var i = EntryDataId;
                var set = AddIncludes(includesLst, dbContext);
                IEnumerable<AdjustmentOver> entities = set//dbContext.AdjustmentOvers
                                                    // .Include(x => x.AsycudaDocumentItemEntryDataDetails)									  
                                      .AsNoTracking()
                                        .Where(x => x.EntryDataId.ToString() == EntryDataId.ToString())
										.ToList();
                return entities;
              }
             }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }
 	        public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOverByAsycudaDocumentSetId(string AsycudaDocumentSetId, List<string> includesLst = null)
        {
            try
            {
                using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                var i = Convert.ToInt32(AsycudaDocumentSetId);
                var set = AddIncludes(includesLst, dbContext);
                IEnumerable<AdjustmentOver> entities = set//dbContext.AdjustmentOvers
                                                    // .Include(x => x.AsycudaDocumentItemEntryDataDetails)									  
                                      .AsNoTracking()
                                        .Where(x => x.AsycudaDocumentSetId.ToString() == AsycudaDocumentSetId.ToString())
										.ToList();
                return entities;
              }
             }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }
 	        public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOverByApplicationSettingsId(string ApplicationSettingsId, List<string> includesLst = null)
        {
            try
            {
                using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                var i = Convert.ToInt32(ApplicationSettingsId);
                var set = AddIncludes(includesLst, dbContext);
                IEnumerable<AdjustmentOver> entities = set//dbContext.AdjustmentOvers
                                                    // .Include(x => x.AsycudaDocumentItemEntryDataDetails)									  
                                      .AsNoTracking()
                                        .Where(x => x.ApplicationSettingsId.ToString() == ApplicationSettingsId.ToString())
										.ToList();
                return entities;
              }
             }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }
 	        public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOverByEmailId(string EmailId, List<string> includesLst = null)
        {
            try
            {
                using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                var i = EmailId;
                var set = AddIncludes(includesLst, dbContext);
                IEnumerable<AdjustmentOver> entities = set//dbContext.AdjustmentOvers
                                                    // .Include(x => x.AsycudaDocumentItemEntryDataDetails)									  
                                      .AsNoTracking()
                                        .Where(x => x.EmailId.ToString() == EmailId.ToString())
										.ToList();
                return entities;
              }
             }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }
 	        public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOverByFileTypeId(string FileTypeId, List<string> includesLst = null)
        {
            try
            {
                using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                var i = Convert.ToInt32(FileTypeId);
                var set = AddIncludes(includesLst, dbContext);
                IEnumerable<AdjustmentOver> entities = set//dbContext.AdjustmentOvers
                                                    // .Include(x => x.AsycudaDocumentItemEntryDataDetails)									  
                                      .AsNoTracking()
                                        .Where(x => x.FileTypeId.ToString() == FileTypeId.ToString())
										.ToList();
                return entities;
              }
             }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }
 	        public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOverByEntryData_Id(string EntryData_Id, List<string> includesLst = null)
        {
            try
            {
                using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                var i = Convert.ToInt32(EntryData_Id);
                var set = AddIncludes(includesLst, dbContext);
                IEnumerable<AdjustmentOver> entities = set//dbContext.AdjustmentOvers
                                                    // .Include(x => x.AsycudaDocumentItemEntryDataDetails)									  
                                      .AsNoTracking()
                                        .Where(x => x.EntryData_Id.ToString() == EntryData_Id.ToString())
										.ToList();
                return entities;
              }
             }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }
 	        public async Task<IEnumerable<AdjustmentOver>> GetAdjustmentOverByInventoryItemId(string InventoryItemId, List<string> includesLst = null)
        {
            try
            {
                using ( var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
              {
                var i = Convert.ToInt32(InventoryItemId);
                var set = AddIncludes(includesLst, dbContext);
                IEnumerable<AdjustmentOver> entities = set//dbContext.AdjustmentOvers
                                                    // .Include(x => x.AsycudaDocumentItemEntryDataDetails)									  
                                      .AsNoTracking()
                                        .Where(x => x.InventoryItemId.ToString() == InventoryItemId.ToString())
										.ToList();
                return entities;
              }
             }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }
        }
 
		public decimal SumField(string whereExp, string field)
         {
             try
             {
                 using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                 {
                    dbContext.Database.CommandTimeout = 0;
					decimal res = 0;
                     if (string.IsNullOrEmpty(whereExp) || whereExp == "None") return 0;
                     if (whereExp == "All")
                     {
                          res = Convert.ToDecimal(dbContext.AdjustmentOvers.AsNoTracking().Sum(field));
                     }
                     else
                     {
                         res = Convert.ToDecimal(dbContext.AdjustmentOvers.AsNoTracking().Where(whereExp).Sum(field));
                     }
                     
                     return res;
                 }
             }
             catch (Exception updateEx)
             {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
             }
         }

        public async Task<decimal> SumNav( string exp, Dictionary<string, string> navExp, string field)
        {
            try
            {
                if (string.IsNullOrEmpty(exp) || exp == "None") return 0;
                using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                {
                    dbContext.Database.CommandTimeout = 0;
                    if (!dbContext.AdjustmentOvers.Any()) return 0;
                    if (exp == "All" && navExp.Count == 0)
                    {
                        return Convert.ToDecimal(dbContext.AdjustmentOvers
										.AsNoTracking()
                                        .Sum(field)??0);
                    }
                    foreach (var itm in navExp)
                    {
                        switch (itm.Key)
                        {
                            case "AdjustmentEx":
                                return await SumWhere<AdjustmentEx>(dbContext, exp, itm.Value, "AdjustmentOvers", field, "SelectMany")
											.ConfigureAwait(continueOnCapturedContext: false);
                            case "AsycudaDocumentItemEntryDataDetails":
                                return await SumWhere<AsycudaDocumentItemEntryDataDetail>(dbContext, exp, itm.Value, "AdjustmentOver", field, "Select")
											.ConfigureAwait(continueOnCapturedContext: false);
                            case "AdjustmentDetail":
                                return await SumWhere<AdjustmentDetail>(dbContext, exp, itm.Value, "AdjustmentOvers", field, "SelectMany")
											.ConfigureAwait(continueOnCapturedContext: false);
                            case "InventoryItemsEx":
                                return await SumWhere<InventoryItemsEx>(dbContext, exp, itm.Value, "AdjustmentOvers", field, "SelectMany")
											.ConfigureAwait(continueOnCapturedContext: false);
						}
                    }
                    return Convert.ToDecimal(dbContext.AdjustmentOvers.Where(exp == "All" || exp == null ? "EntryDataDetailsId != null" : exp)
											.AsNoTracking()
                                            .Sum(field)??0);
                }
                
            }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                var fault = new ValidationFault
                {
                    Result = false,
                    Message = updateEx.Message,
                    Description = updateEx.StackTrace
                };
                throw new FaultException<ValidationFault>(fault);
            }
        }

		private static async Task<decimal> SumWhere<T>(AdjustmentQSContext dbContext, string exp, string navExp, string navProp, string field, string rel) where T : class
        {
              switch (rel)
		    {
		        case "SelectMany":
                    return await SumWhereSelectMany<T>(dbContext, exp, navExp, navProp, field)
									.ConfigureAwait(continueOnCapturedContext: false);
		        default:
                    return await SumWhereSelect<T>(dbContext, exp, navExp, navProp, field)
									.ConfigureAwait(continueOnCapturedContext: false);
		    }
        }

		private static async Task<decimal> SumWhereSelectMany<T>(AdjustmentQSContext dbContext, string exp, string navExp, string navProp, string field) where T : class
        {
			try
			{
            return Convert.ToDecimal(dbContext.Set<T>()
				.AsNoTracking()
                .Where(navExp)
                .SelectMany(navProp).OfType<AdjustmentOver>()
                .Where(exp == "All" || exp == null ? "EntryDataDetailsId != null" : exp)
                .Distinct()
                .OrderBy("EntryDataDetailsId")
                .Sum(field));
			}
			catch (Exception)
			{
				Debugger.Break();
				throw;
			}
        }

		private static async Task<decimal> SumWhereSelect<T>(AdjustmentQSContext dbContext, string exp, string navExp, string navProp, string field) where T : class
        {
			try
			{
            return Convert.ToDecimal(dbContext.Set<T>()
				.AsNoTracking()
                .Where(navExp)
                .Select(navProp).OfType<AdjustmentOver>()
                .Where(exp == "All" || exp == null ? "EntryDataDetailsId != null" : exp)
                .Distinct()
                .OrderBy("EntryDataDetailsId")
                .Sum(field));
			}
			catch (Exception)
			{
				Debugger.Break();
				throw;
			}
        }



		 public string MinField(string whereExp, string field)
         {
             try
             {
                 using (var dbContext = new AdjustmentQSContext(){StartTracking = StartTracking})
                 {
                    dbContext.Database.CommandTimeout = 0;
					string res = "";
                     if (string.IsNullOrEmpty(whereExp) || whereExp == "None") return res;
                     if (whereExp == "All")
                     {
                          res = Convert.ToString(dbContext.AdjustmentOvers.AsNoTracking().Min(field));
                     }
                     else
                     {
                         res = Convert.ToString(dbContext.AdjustmentOvers.AsNoTracking().Where(whereExp).Min(field));
                     }
                     
                     return res;
                 }
             }
             catch (Exception updateEx)
             {
                    System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
             }
         }

		 
		private static IQueryable<AdjustmentOver> AddIncludes(IEnumerable<string> includesLst, AdjustmentQSContext dbContext)
       {
		 try
			{
			   if (includesLst == null) includesLst = new List<string>();
			   var set =(DbQuery<AdjustmentOver>) dbContext.AdjustmentOvers; 
			   set = includesLst.Where(x => !string.IsNullOrEmpty(x))
                                .Aggregate(set, (current, itm) => current.Include(itm));
			   return set;
			 }
			catch (Exception)
			{
				Debugger.Break();
				throw;
			}
       }
	   private IQueryable<AdjustmentOver> AddWheres(List<string> expLst, IQueryable<AdjustmentOver> set)
        {
            try
            {
                return expLst.Where(x => !string.IsNullOrEmpty(x))
                             .Aggregate(set, (current, itm) => current.Where(itm));
            }
            catch (Exception)
            {
                Debugger.Break();
                throw;
            }
          
        }

        public void Dispose()
        {
            try
            {
               // var dispose = dbContext as IDisposable;
             ////   if (dispose != null)
            //    {
           //         dbContext.Dispose();
           //     }
            }
            catch (Exception updateEx)
            {
                System.Diagnostics.Debugger.Break();
                //throw new FaultException(updateEx.Message);
                    var fault = new ValidationFault
                                {
                                    Result = false,
                                    Message = updateEx.Message,
                                    Description = updateEx.StackTrace
                                };
                    throw new FaultException<ValidationFault>(fault);
            }

        }

    }
}




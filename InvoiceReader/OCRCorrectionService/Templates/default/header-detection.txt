OBJECT-ORIENTED INVOICE ANALYSIS (V14.0 - Universal Framework):

**CONTEXT:**
You are analyzing a structured business document with defined object schemas. Apply systematic analysis to identify missing or incorrectly formatted field values.

**1. EXTRACTED FIELDS:**
{{invoiceJson}}

**2. CONTEXT & COMPONENTS:**
{{annotatedContext}}

**3. BALANCE CHECK:**
{{balanceCheckContext}}

**4. COMPLETE OCR TEXT:**
{{fileText}}

**üéØ V14.0 MANDATORY COMPLETION REQUIREMENTS:**

**üö® CRITICAL**: FOR EVERY ERROR YOU REPORT, YOU MUST PROVIDE ALL OF THE FOLLOWING:

1. ‚úÖ **field**: The exact field name (NEVER null)
2. ‚úÖ **correct_value**: The actual value from the OCR text (NEVER null)  
3. ‚úÖ **error_type**: "omission" or "format_correction" or "multi_field_omission" (NEVER null)
4. ‚úÖ **line_number**: The actual line number where the value appears (NEVER 0 or null)
5. ‚úÖ **line_text**: The complete text of that line from the OCR (NEVER null)
6. ‚úÖ **suggested_regex**: A working regex pattern that captures the value (NEVER null)
7. ‚úÖ **reasoning**: Explain why this value was missed (NEVER null)

**‚ùå ABSOLUTELY FORBIDDEN**: 
   - "Reasoning": null
   - "LineNumber": 0
   - "LineText": null
   - "SuggestedRegex": null

**üö® CRITICAL REGEX REQUIREMENTS FOR PRODUCTION:**
‚ö†Ô∏è **MANDATORY**: ALL regex patterns MUST use named capture groups: (?<FieldName>pattern)
‚ö†Ô∏è **FORBIDDEN**: Never use numbered capture groups: (pattern) - these will fail in production

**ANALYSIS APPROACH:**
1. **Field Verification**: Compare each extracted field against OCR text
2. **Balance Analysis**: Identify missing components using mathematical verification
3. **Pattern Recognition**: Construct reliable extraction patterns
4. **Error Classification**: Categorize each issue appropriately

If you find no new omissions or corrections, return an empty errors array with detailed explanation.

**üö® CRITICAL TOKEN MANAGEMENT (Universal API Constraint):**
- **Maximum Response Size**: Structure your response to fit within token limits (typically 8,000-8,192 tokens)
- **Token Efficiency**: Prioritize the most critical errors if response becomes lengthy
- **Response Strategy**: Provide complete error objects for priority items, then conclude if space limits reached
- **Graceful Termination**: If nearing limits, end with: "Additional errors detected but response truncated due to token constraints"

**MANDATORY RESPONSE FORMAT:**
- **If errors found**: { "errors": [error objects] }
- **If NO errors found**: { "errors": [], "explanation": "Detailed explanation of why no corrections are needed" }

**OPTIMIZATION NOTES:**
- Balance thoroughness with efficient token utilization
- Prioritize errors with highest impact on data accuracy
- Ensure complete JSON structure even if truncating error list
// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace EntryDataQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class EntryData : BaseEntity<EntryData>, ITrackable, IEquatable<EntryData>
    {
        [DataMember]
        public string EntryDataId
		{ 
		    get { return _EntryDataId; }
			set
			{
			    if (value == _EntryDataId) return;
				_EntryDataId = value;
				NotifyPropertyChanged();//m => this.EntryDataId
			}
		}
        private string _EntryDataId;

        [DataMember]
        public System.DateTime EntryDataDate
		{ 
		    get { return _EntryDataDate; }
			set
			{
			    if (value == _EntryDataDate) return;
				_EntryDataDate = value;
				NotifyPropertyChanged();//m => this.EntryDataDate
			}
		}
        private System.DateTime _EntryDataDate;

        [DataMember]
        public Nullable<double> ImportedTotal
		{ 
		    get { return _ImportedTotal; }
			set
			{
			    if (value == _ImportedTotal) return;
				_ImportedTotal = value;
				NotifyPropertyChanged();//m => this.ImportedTotal
			}
		}
        private Nullable<double> _ImportedTotal;

        [DataMember]
        public Nullable<int> ImportedLines
		{ 
		    get { return _ImportedLines; }
			set
			{
			    if (value == _ImportedLines) return;
				_ImportedLines = value;
				NotifyPropertyChanged();//m => this.ImportedLines
			}
		}
        private Nullable<int> _ImportedLines;

        [DataMember]
        public Nullable<int> SupplierId
		{ 
		    get { return _SupplierId; }
			set
			{
			    if (value == _SupplierId) return;
				_SupplierId = value;
				NotifyPropertyChanged();//m => this.SupplierId
			}
		}
        private Nullable<int> _SupplierId;

        [DataMember]
        public Nullable<double> TotalFreight
		{ 
		    get { return _TotalFreight; }
			set
			{
			    if (value == _TotalFreight) return;
				_TotalFreight = value;
				NotifyPropertyChanged();//m => this.TotalFreight
			}
		}
        private Nullable<double> _TotalFreight;

        [DataMember]
        public Nullable<double> TotalInternalFreight
		{ 
		    get { return _TotalInternalFreight; }
			set
			{
			    if (value == _TotalInternalFreight) return;
				_TotalInternalFreight = value;
				NotifyPropertyChanged();//m => this.TotalInternalFreight
			}
		}
        private Nullable<double> _TotalInternalFreight;

        [DataMember]
        public Nullable<double> TotalWeight
		{ 
		    get { return _TotalWeight; }
			set
			{
			    if (value == _TotalWeight) return;
				_TotalWeight = value;
				NotifyPropertyChanged();//m => this.TotalWeight
			}
		}
        private Nullable<double> _TotalWeight;

        [DataMember]
        public string Currency
		{ 
		    get { return _Currency; }
			set
			{
			    if (value == _Currency) return;
				_Currency = value;
				NotifyPropertyChanged();//m => this.Currency
			}
		}
        private string _Currency;

        [DataMember]
        public int ApplicationSettingsId
		{ 
		    get { return _ApplicationSettingsId; }
			set
			{
			    if (value == _ApplicationSettingsId) return;
				_ApplicationSettingsId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingsId
			}
		}
        private int _ApplicationSettingsId;

        [DataMember]
        public Nullable<int> EmailId
		{ 
		    get { return _EmailId; }
			set
			{
			    if (value == _EmailId) return;
				_EmailId = value;
				NotifyPropertyChanged();//m => this.EmailId
			}
		}
        private Nullable<int> _EmailId;

        [DataMember]
        public Nullable<int> FileTypeId
		{ 
		    get { return _FileTypeId; }
			set
			{
			    if (value == _FileTypeId) return;
				_FileTypeId = value;
				NotifyPropertyChanged();//m => this.FileTypeId
			}
		}
        private Nullable<int> _FileTypeId;

       
        [DataMember]
        public ChangeTrackingCollection<AsycudaDocumentEntryData> AsycudaDocumentEntryDatas
		{
		    get { return _AsycudaDocumentEntryDatas; }
			set
			{
			    if (Equals(value, _AsycudaDocumentEntryDatas)) return;
				_AsycudaDocumentEntryDatas = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentEntryDatas
			}
		}
        private ChangeTrackingCollection<AsycudaDocumentEntryData> _AsycudaDocumentEntryDatas = new ChangeTrackingCollection<AsycudaDocumentEntryData>();

        [DataMember]
        public ChangeTrackingCollection<AsycudaDocumentSetEntryData> AsycudaDocumentSetEntryDatas
		{
		    get { return _AsycudaDocumentSetEntryDatas; }
			set
			{
			    if (Equals(value, _AsycudaDocumentSetEntryDatas)) return;
				_AsycudaDocumentSetEntryDatas = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentSetEntryDatas
			}
		}
        private ChangeTrackingCollection<AsycudaDocumentSetEntryData> _AsycudaDocumentSetEntryDatas = new ChangeTrackingCollection<AsycudaDocumentSetEntryData>();

        [DataMember]
        public ChangeTrackingCollection<ContainerEntryData> ContainerEntryDatas
		{
		    get { return _ContainerEntryDatas; }
			set
			{
			    if (Equals(value, _ContainerEntryDatas)) return;
				_ContainerEntryDatas = value;
				NotifyPropertyChanged();//m => this.ContainerEntryDatas
			}
		}
        private ChangeTrackingCollection<ContainerEntryData> _ContainerEntryDatas = new ChangeTrackingCollection<ContainerEntryData>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<EntryData>.Equals(EntryData other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace EntryDataQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class ContainerEx : BaseEntity<ContainerEx>, ITrackable, IEquatable<ContainerEx>
    {
        [DataMember]
        public string Container_identity
		{ 
		    get { return _Container_identity; }
			set
			{
			    if (value == _Container_identity) return;
				_Container_identity = value;
				NotifyPropertyChanged();//m => this.Container_identity
			}
		}
        private string _Container_identity;

        [DataMember]
        public string Container_type
		{ 
		    get { return _Container_type; }
			set
			{
			    if (value == _Container_type) return;
				_Container_type = value;
				NotifyPropertyChanged();//m => this.Container_type
			}
		}
        private string _Container_type;

        [DataMember]
        public string Empty_full_indicator
		{ 
		    get { return _Empty_full_indicator; }
			set
			{
			    if (value == _Empty_full_indicator) return;
				_Empty_full_indicator = value;
				NotifyPropertyChanged();//m => this.Empty_full_indicator
			}
		}
        private string _Empty_full_indicator;

        [DataMember]
        public double Gross_weight
		{ 
		    get { return _Gross_weight; }
			set
			{
			    if (value == _Gross_weight) return;
				_Gross_weight = value;
				NotifyPropertyChanged();//m => this.Gross_weight
			}
		}
        private double _Gross_weight;

        [DataMember]
        public string Goods_description
		{ 
		    get { return _Goods_description; }
			set
			{
			    if (value == _Goods_description) return;
				_Goods_description = value;
				NotifyPropertyChanged();//m => this.Goods_description
			}
		}
        private string _Goods_description;

        [DataMember]
        public string Packages_number
		{ 
		    get { return _Packages_number; }
			set
			{
			    if (value == _Packages_number) return;
				_Packages_number = value;
				NotifyPropertyChanged();//m => this.Packages_number
			}
		}
        private string _Packages_number;

        [DataMember]
        public string Packages_type
		{ 
		    get { return _Packages_type; }
			set
			{
			    if (value == _Packages_type) return;
				_Packages_type = value;
				NotifyPropertyChanged();//m => this.Packages_type
			}
		}
        private string _Packages_type;

        [DataMember]
        public double Packages_weight
		{ 
		    get { return _Packages_weight; }
			set
			{
			    if (value == _Packages_weight) return;
				_Packages_weight = value;
				NotifyPropertyChanged();//m => this.Packages_weight
			}
		}
        private double _Packages_weight;

        [DataMember]
        public int Container_Id
		{ 
		    get { return _Container_Id; }
			set
			{
			    if (value == _Container_Id) return;
				_Container_Id = value;
				NotifyPropertyChanged();//m => this.Container_Id
			}
		}
        private int _Container_Id;

        [DataMember]
        public Nullable<double> TotalValue
		{ 
		    get { return _TotalValue; }
			set
			{
			    if (value == _TotalValue) return;
				_TotalValue = value;
				NotifyPropertyChanged();//m => this.TotalValue
			}
		}
        private Nullable<double> _TotalValue;

        [DataMember]
        public Nullable<System.DateTime> ShipDate
		{ 
		    get { return _ShipDate; }
			set
			{
			    if (value == _ShipDate) return;
				_ShipDate = value;
				NotifyPropertyChanged();//m => this.ShipDate
			}
		}
        private Nullable<System.DateTime> _ShipDate;

        [DataMember]
        public Nullable<System.DateTime> DeliveryDate
		{ 
		    get { return _DeliveryDate; }
			set
			{
			    if (value == _DeliveryDate) return;
				_DeliveryDate = value;
				NotifyPropertyChanged();//m => this.DeliveryDate
			}
		}
        private Nullable<System.DateTime> _DeliveryDate;

        [DataMember]
        public string Seal
		{ 
		    get { return _Seal; }
			set
			{
			    if (value == _Seal) return;
				_Seal = value;
				NotifyPropertyChanged();//m => this.Seal
			}
		}
        private string _Seal;

        [DataMember]
        public Nullable<int> AsycudaDocumentSetId
		{ 
		    get { return _AsycudaDocumentSetId; }
			set
			{
			    if (value == _AsycudaDocumentSetId) return;
				_AsycudaDocumentSetId = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentSetId
			}
		}
        private Nullable<int> _AsycudaDocumentSetId;

        [DataMember]
        public string EntryDataId
		{ 
		    get { return _EntryDataId; }
			set
			{
			    if (value == _EntryDataId) return;
				_EntryDataId = value;
				NotifyPropertyChanged();//m => this.EntryDataId
			}
		}
        private string _EntryDataId;

        [DataMember]
        public string PackageDescription
		{ 
		    get { return _PackageDescription; }
			set
			{
			    if (value == _PackageDescription) return;
				_PackageDescription = value;
				NotifyPropertyChanged();//m => this.PackageDescription
			}
		}
        private string _PackageDescription;

        [DataMember]
        public string ContainerTypeDescription
		{ 
		    get { return _ContainerTypeDescription; }
			set
			{
			    if (value == _ContainerTypeDescription) return;
				_ContainerTypeDescription = value;
				NotifyPropertyChanged();//m => this.ContainerTypeDescription
			}
		}
        private string _ContainerTypeDescription;

       
        [DataMember]
        public ChangeTrackingCollection<ContainerEntryData> ContainerEntryDatas
		{
		    get { return _ContainerEntryDatas; }
			set
			{
			    if (Equals(value, _ContainerEntryDatas)) return;
				_ContainerEntryDatas = value;
				NotifyPropertyChanged();//m => this.ContainerEntryDatas
			}
		}
        private ChangeTrackingCollection<ContainerEntryData> _ContainerEntryDatas = new ChangeTrackingCollection<ContainerEntryData>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<ContainerEx>.Equals(ContainerEx other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




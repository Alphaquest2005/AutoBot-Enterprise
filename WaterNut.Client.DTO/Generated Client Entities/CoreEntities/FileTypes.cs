// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class FileTypes : BaseEntity<FileTypes>, ITrackable, IEquatable<FileTypes>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int ApplicationSettingsId
		{ 
		    get { return _ApplicationSettingsId; }
			set
			{
			    if (value == _ApplicationSettingsId) return;
				_ApplicationSettingsId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingsId
			}
		}
        private int _ApplicationSettingsId;

        [DataMember]
        public string FilePattern
		{ 
		    get { return _FilePattern; }
			set
			{
			    if (value == _FilePattern) return;
				_FilePattern = value;
				NotifyPropertyChanged();//m => this.FilePattern
			}
		}
        private string _FilePattern;

        [DataMember]
        public string Type
		{ 
		    get { return _Type; }
			set
			{
			    if (value == _Type) return;
				_Type = value;
				NotifyPropertyChanged();//m => this.Type
			}
		}
        private string _Type;

        [DataMember]
        public int AsycudaDocumentSetId
		{ 
		    get { return _AsycudaDocumentSetId; }
			set
			{
			    if (value == _AsycudaDocumentSetId) return;
				_AsycudaDocumentSetId = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentSetId
			}
		}
        private int _AsycudaDocumentSetId;

        [DataMember]
        public bool CreateDocumentSet
		{ 
		    get { return _CreateDocumentSet; }
			set
			{
			    if (value == _CreateDocumentSet) return;
				_CreateDocumentSet = value;
				NotifyPropertyChanged();//m => this.CreateDocumentSet
			}
		}
        private bool _CreateDocumentSet;

        [DataMember]
        public bool DocumentSpecific
		{ 
		    get { return _DocumentSpecific; }
			set
			{
			    if (value == _DocumentSpecific) return;
				_DocumentSpecific = value;
				NotifyPropertyChanged();//m => this.DocumentSpecific
			}
		}
        private bool _DocumentSpecific;

        [DataMember]
        public string DocumentCode
		{ 
		    get { return _DocumentCode; }
			set
			{
			    if (value == _DocumentCode) return;
				_DocumentCode = value;
				NotifyPropertyChanged();//m => this.DocumentCode
			}
		}
        private string _DocumentCode;

        [DataMember]
        public bool ReplyToMail
		{ 
		    get { return _ReplyToMail; }
			set
			{
			    if (value == _ReplyToMail) return;
				_ReplyToMail = value;
				NotifyPropertyChanged();//m => this.ReplyToMail
			}
		}
        private bool _ReplyToMail;

        [DataMember]
        public Nullable<int> FileGroupId
		{ 
		    get { return _FileGroupId; }
			set
			{
			    if (value == _FileGroupId) return;
				_FileGroupId = value;
				NotifyPropertyChanged();//m => this.FileGroupId
			}
		}
        private Nullable<int> _FileGroupId;

        [DataMember]
        public bool MergeEmails
		{ 
		    get { return _MergeEmails; }
			set
			{
			    if (value == _MergeEmails) return;
				_MergeEmails = value;
				NotifyPropertyChanged();//m => this.MergeEmails
			}
		}
        private bool _MergeEmails;

        [DataMember]
        public bool CopyEntryData
		{ 
		    get { return _CopyEntryData; }
			set
			{
			    if (value == _CopyEntryData) return;
				_CopyEntryData = value;
				NotifyPropertyChanged();//m => this.CopyEntryData
			}
		}
        private bool _CopyEntryData;

        [DataMember]
        public Nullable<int> ParentFileTypeId
		{ 
		    get { return _ParentFileTypeId; }
			set
			{
			    if (value == _ParentFileTypeId) return;
				_ParentFileTypeId = value;
				NotifyPropertyChanged();//m => this.ParentFileTypeId
			}
		}
        private Nullable<int> _ParentFileTypeId;

        [DataMember]
        public Nullable<bool> OverwriteFiles
		{ 
		    get { return _OverwriteFiles; }
			set
			{
			    if (value == _OverwriteFiles) return;
				_OverwriteFiles = value;
				NotifyPropertyChanged();//m => this.OverwriteFiles
			}
		}
        private Nullable<bool> _OverwriteFiles;

        [DataMember]
        public Nullable<bool> HasFiles
		{ 
		    get { return _HasFiles; }
			set
			{
			    if (value == _HasFiles) return;
				_HasFiles = value;
				NotifyPropertyChanged();//m => this.HasFiles
			}
		}
        private Nullable<bool> _HasFiles;

        [DataMember]
        public Nullable<int> OldFileTypeId
		{ 
		    get { return _OldFileTypeId; }
			set
			{
			    if (value == _OldFileTypeId) return;
				_OldFileTypeId = value;
				NotifyPropertyChanged();//m => this.OldFileTypeId
			}
		}
        private Nullable<int> _OldFileTypeId;

       
        [DataMember]
        public ApplicationSettings ApplicationSettings
		{
		    get { return _ApplicationSettings; }
			set
			{
			    if (value == _ApplicationSettings) return;
				_ApplicationSettings = value;
                ApplicationSettingsChangeTracker = _ApplicationSettings == null ? null
                    : new ChangeTrackingCollection<ApplicationSettings> { _ApplicationSettings };
				NotifyPropertyChanged();//m => this.ApplicationSettings
			}
		}
        private ApplicationSettings _ApplicationSettings;
        private ChangeTrackingCollection<ApplicationSettings> ApplicationSettingsChangeTracker { get; set; }

        [DataMember]
        public AsycudaDocumentSetEx AsycudaDocumentSetEx
		{
		    get { return _AsycudaDocumentSetEx; }
			set
			{
			    if (value == _AsycudaDocumentSetEx) return;
				_AsycudaDocumentSetEx = value;
                AsycudaDocumentSetExChangeTracker = _AsycudaDocumentSetEx == null ? null
                    : new ChangeTrackingCollection<AsycudaDocumentSetEx> { _AsycudaDocumentSetEx };
				NotifyPropertyChanged();//m => this.AsycudaDocumentSetEx
			}
		}
        private AsycudaDocumentSetEx _AsycudaDocumentSetEx;
        private ChangeTrackingCollection<AsycudaDocumentSetEx> AsycudaDocumentSetExChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<FileTypeMappings> FileTypeMappings
		{
		    get { return _FileTypeMappings; }
			set
			{
			    if (Equals(value, _FileTypeMappings)) return;
				_FileTypeMappings = value;
				NotifyPropertyChanged();//m => this.FileTypeMappings
			}
		}
        private ChangeTrackingCollection<FileTypeMappings> _FileTypeMappings = new ChangeTrackingCollection<FileTypeMappings>();

        [DataMember]
        public ChangeTrackingCollection<FileTypeActions> FileTypeActions
		{
		    get { return _FileTypeActions; }
			set
			{
			    if (Equals(value, _FileTypeActions)) return;
				_FileTypeActions = value;
				NotifyPropertyChanged();//m => this.FileTypeActions
			}
		}
        private ChangeTrackingCollection<FileTypeActions> _FileTypeActions = new ChangeTrackingCollection<FileTypeActions>();

        [DataMember]
        public ChangeTrackingCollection<FileTypeContacts> FileTypeContacts
		{
		    get { return _FileTypeContacts; }
			set
			{
			    if (Equals(value, _FileTypeContacts)) return;
				_FileTypeContacts = value;
				NotifyPropertyChanged();//m => this.FileTypeContacts
			}
		}
        private ChangeTrackingCollection<FileTypeContacts> _FileTypeContacts = new ChangeTrackingCollection<FileTypeContacts>();

        [DataMember]
        public ChangeTrackingCollection<AsycudaDocumentSet_Attachments> AsycudaDocumentSet_Attachments
		{
		    get { return _AsycudaDocumentSet_Attachments; }
			set
			{
			    if (Equals(value, _AsycudaDocumentSet_Attachments)) return;
				_AsycudaDocumentSet_Attachments = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentSet_Attachments
			}
		}
        private ChangeTrackingCollection<AsycudaDocumentSet_Attachments> _AsycudaDocumentSet_Attachments = new ChangeTrackingCollection<AsycudaDocumentSet_Attachments>();

        [DataMember]
        public FileGroups FileGroups
		{
		    get { return _FileGroups; }
			set
			{
			    if (value == _FileGroups) return;
				_FileGroups = value;
                FileGroupsChangeTracker = _FileGroups == null ? null
                    : new ChangeTrackingCollection<FileGroups> { _FileGroups };
				NotifyPropertyChanged();//m => this.FileGroups
			}
		}
        private FileGroups _FileGroups;
        private ChangeTrackingCollection<FileGroups> FileGroupsChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<FileTypes> ChildFileTypes
		{
		    get { return _ChildFileTypes; }
			set
			{
			    if (Equals(value, _ChildFileTypes)) return;
				_ChildFileTypes = value;
				NotifyPropertyChanged();//m => this.ChildFileTypes
			}
		}
        private ChangeTrackingCollection<FileTypes> _ChildFileTypes = new ChangeTrackingCollection<FileTypes>();

        [DataMember]
        public FileTypes ParentFileTypes
		{
		    get { return _ParentFileTypes; }
			set
			{
			    if (value == _ParentFileTypes) return;
				_ParentFileTypes = value;
                ParentFileTypesChangeTracker = _ParentFileTypes == null ? null
                    : new ChangeTrackingCollection<FileTypes> { _ParentFileTypes };
				NotifyPropertyChanged();//m => this.ParentFileTypes
			}
		}
        private FileTypes _ParentFileTypes;
        private ChangeTrackingCollection<FileTypes> ParentFileTypesChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<EmailFileTypes> EmailFileTypes
		{
		    get { return _EmailFileTypes; }
			set
			{
			    if (Equals(value, _EmailFileTypes)) return;
				_EmailFileTypes = value;
				NotifyPropertyChanged();//m => this.EmailFileTypes
			}
		}
        private ChangeTrackingCollection<EmailFileTypes> _EmailFileTypes = new ChangeTrackingCollection<EmailFileTypes>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<FileTypes>.Equals(FileTypes other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class ParameterSetParameters : BaseEntity<ParameterSetParameters>, ITrackable, IEquatable<ParameterSetParameters>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int ParameterSetId
		{ 
		    get { return _ParameterSetId; }
			set
			{
			    if (value == _ParameterSetId) return;
				_ParameterSetId = value;
				NotifyPropertyChanged();//m => this.ParameterSetId
			}
		}
        private int _ParameterSetId;

        [DataMember]
        public int ParameterId
		{ 
		    get { return _ParameterId; }
			set
			{
			    if (value == _ParameterId) return;
				_ParameterId = value;
				NotifyPropertyChanged();//m => this.ParameterId
			}
		}
        private int _ParameterId;

       
        [DataMember]
        public Parameters Parameters
		{
		    get { return _Parameters; }
			set
			{
			    if (value == _Parameters) return;
				_Parameters = value;
                ParametersChangeTracker = _Parameters == null ? null
                    : new ChangeTrackingCollection<Parameters> { _Parameters };
				NotifyPropertyChanged();//m => this.Parameters
			}
		}
        private Parameters _Parameters;
        private ChangeTrackingCollection<Parameters> ParametersChangeTracker { get; set; }

        [DataMember]
        public ParameterSet ParameterSet
		{
		    get { return _ParameterSet; }
			set
			{
			    if (value == _ParameterSet) return;
				_ParameterSet = value;
                ParameterSetChangeTracker = _ParameterSet == null ? null
                    : new ChangeTrackingCollection<ParameterSet> { _ParameterSet };
				NotifyPropertyChanged();//m => this.ParameterSet
			}
		}
        private ParameterSet _ParameterSet;
        private ChangeTrackingCollection<ParameterSet> ParameterSetChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<ParameterSetParameters>.Equals(ParameterSetParameters other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




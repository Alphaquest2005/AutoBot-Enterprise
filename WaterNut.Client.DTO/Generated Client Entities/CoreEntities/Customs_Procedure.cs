// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class Customs_Procedure : BaseEntity<Customs_Procedure>, ITrackable, IEquatable<Customs_Procedure>
    {
        [DataMember]
        public int Document_TypeId
		{ 
		    get { return _Document_TypeId; }
			set
			{
			    if (value == _Document_TypeId) return;
				_Document_TypeId = value;
				NotifyPropertyChanged();//m => this.Document_TypeId
			}
		}
        private int _Document_TypeId;

        [DataMember]
        public int Customs_ProcedureId
		{ 
		    get { return _Customs_ProcedureId; }
			set
			{
			    if (value == _Customs_ProcedureId) return;
				_Customs_ProcedureId = value;
				NotifyPropertyChanged();//m => this.Customs_ProcedureId
			}
		}
        private int _Customs_ProcedureId;

        [DataMember]
        public string Extended_customs_procedure
		{ 
		    get { return _Extended_customs_procedure; }
			set
			{
			    if (value == _Extended_customs_procedure) return;
				_Extended_customs_procedure = value;
				NotifyPropertyChanged();//m => this.Extended_customs_procedure
			}
		}
        private string _Extended_customs_procedure;

        [DataMember]
        public string National_customs_procedure
		{ 
		    get { return _National_customs_procedure; }
			set
			{
			    if (value == _National_customs_procedure) return;
				_National_customs_procedure = value;
				NotifyPropertyChanged();//m => this.National_customs_procedure
			}
		}
        private string _National_customs_procedure;

        [DataMember]
        public Nullable<bool> IsDefault
		{ 
		    get { return _IsDefault; }
			set
			{
			    if (value == _IsDefault) return;
				_IsDefault = value;
				NotifyPropertyChanged();//m => this.IsDefault
			}
		}
        private Nullable<bool> _IsDefault;

       
        [DataMember]
        public Document_Type Document_Type
		{
		    get { return _Document_Type; }
			set
			{
			    if (value == _Document_Type) return;
				_Document_Type = value;
                Document_TypeChangeTracker = _Document_Type == null ? null
                    : new ChangeTrackingCollection<Document_Type> { _Document_Type };
				NotifyPropertyChanged();//m => this.Document_Type
			}
		}
        private Document_Type _Document_Type;
        private ChangeTrackingCollection<Document_Type> Document_TypeChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<Customs_Procedure>.Equals(Customs_Procedure other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




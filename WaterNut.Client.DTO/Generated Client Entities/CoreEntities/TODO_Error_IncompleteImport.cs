// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class TODO_Error_IncompleteImport : BaseEntity<TODO_Error_IncompleteImport>, ITrackable, IEquatable<TODO_Error_IncompleteImport>
    {
        [DataMember]
        public int ASYCUDA_Id
		{ 
		    get { return _ASYCUDA_Id; }
			set
			{
			    if (value == _ASYCUDA_Id) return;
				_ASYCUDA_Id = value;
				NotifyPropertyChanged();//m => this.ASYCUDA_Id
			}
		}
        private int _ASYCUDA_Id;

        [DataMember]
        public Nullable<bool> ImportComplete
		{ 
		    get { return _ImportComplete; }
			set
			{
			    if (value == _ImportComplete) return;
				_ImportComplete = value;
				NotifyPropertyChanged();//m => this.ImportComplete
			}
		}
        private Nullable<bool> _ImportComplete;

        [DataMember]
        public string Type
		{ 
		    get { return _Type; }
			set
			{
			    if (value == _Type) return;
				_Type = value;
				NotifyPropertyChanged();//m => this.Type
			}
		}
        private string _Type;

        [DataMember]
        public string ExpectedLines
		{ 
		    get { return _ExpectedLines; }
			set
			{
			    if (value == _ExpectedLines) return;
				_ExpectedLines = value;
				NotifyPropertyChanged();//m => this.ExpectedLines
			}
		}
        private string _ExpectedLines;

        [DataMember]
        public Nullable<int> ImportedLines
		{ 
		    get { return _ImportedLines; }
			set
			{
			    if (value == _ImportedLines) return;
				_ImportedLines = value;
				NotifyPropertyChanged();//m => this.ImportedLines
			}
		}
        private Nullable<int> _ImportedLines;

        [DataMember]
        public string CNumber
		{ 
		    get { return _CNumber; }
			set
			{
			    if (value == _CNumber) return;
				_CNumber = value;
				NotifyPropertyChanged();//m => this.CNumber
			}
		}
        private string _CNumber;

        [DataMember]
        public Nullable<System.DateTime> RegistrationDate
		{ 
		    get { return _RegistrationDate; }
			set
			{
			    if (value == _RegistrationDate) return;
				_RegistrationDate = value;
				NotifyPropertyChanged();//m => this.RegistrationDate
			}
		}
        private Nullable<System.DateTime> _RegistrationDate;

        [DataMember]
        public string ReferenceNumber
		{ 
		    get { return _ReferenceNumber; }
			set
			{
			    if (value == _ReferenceNumber) return;
				_ReferenceNumber = value;
				NotifyPropertyChanged();//m => this.ReferenceNumber
			}
		}
        private string _ReferenceNumber;

        [DataMember]
        public Nullable<int> ApplicationSettingsId
		{ 
		    get { return _ApplicationSettingsId; }
			set
			{
			    if (value == _ApplicationSettingsId) return;
				_ApplicationSettingsId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingsId
			}
		}
        private Nullable<int> _ApplicationSettingsId;

        [DataMember]
        public string DocumentType
		{ 
		    get { return _DocumentType; }
			set
			{
			    if (value == _DocumentType) return;
				_DocumentType = value;
				NotifyPropertyChanged();//m => this.DocumentType
			}
		}
        private string _DocumentType;

       
   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<TODO_Error_IncompleteImport>.Equals(TODO_Error_IncompleteImport other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class AsycudaDocumentBasicInfo : BaseEntity<AsycudaDocumentBasicInfo>, ITrackable, IEquatable<AsycudaDocumentBasicInfo>
    {
        [DataMember]
        public int AsycudaDocumentSetId
		{ 
		    get { return _AsycudaDocumentSetId; }
			set
			{
			    if (value == _AsycudaDocumentSetId) return;
				_AsycudaDocumentSetId = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentSetId
			}
		}
        private int _AsycudaDocumentSetId;

        [DataMember]
        public int ASYCUDA_Id
		{ 
		    get { return _ASYCUDA_Id; }
			set
			{
			    if (value == _ASYCUDA_Id) return;
				_ASYCUDA_Id = value;
				NotifyPropertyChanged();//m => this.ASYCUDA_Id
			}
		}
        private int _ASYCUDA_Id;

        [DataMember]
        public string DocumentType
		{ 
		    get { return _DocumentType; }
			set
			{
			    if (value == _DocumentType) return;
				_DocumentType = value;
				NotifyPropertyChanged();//m => this.DocumentType
			}
		}
        private string _DocumentType;

        [DataMember]
        public string CNumber
		{ 
		    get { return _CNumber; }
			set
			{
			    if (value == _CNumber) return;
				_CNumber = value;
				NotifyPropertyChanged();//m => this.CNumber
			}
		}
        private string _CNumber;

        [DataMember]
        public string Extended_customs_procedure
		{ 
		    get { return _Extended_customs_procedure; }
			set
			{
			    if (value == _Extended_customs_procedure) return;
				_Extended_customs_procedure = value;
				NotifyPropertyChanged();//m => this.Extended_customs_procedure
			}
		}
        private string _Extended_customs_procedure;

        [DataMember]
        public string National_customs_procedure
		{ 
		    get { return _National_customs_procedure; }
			set
			{
			    if (value == _National_customs_procedure) return;
				_National_customs_procedure = value;
				NotifyPropertyChanged();//m => this.National_customs_procedure
			}
		}
        private string _National_customs_procedure;

        [DataMember]
        public Nullable<System.DateTime> RegistrationDate
		{ 
		    get { return _RegistrationDate; }
			set
			{
			    if (value == _RegistrationDate) return;
				_RegistrationDate = value;
				NotifyPropertyChanged();//m => this.RegistrationDate
			}
		}
        private Nullable<System.DateTime> _RegistrationDate;

        [DataMember]
        public Nullable<System.DateTime> AssessmentDate
		{ 
		    get { return _AssessmentDate; }
			set
			{
			    if (value == _AssessmentDate) return;
				_AssessmentDate = value;
				NotifyPropertyChanged();//m => this.AssessmentDate
			}
		}
        private Nullable<System.DateTime> _AssessmentDate;

        [DataMember]
        public Nullable<System.DateTime> ExpiryDate
		{ 
		    get { return _ExpiryDate; }
			set
			{
			    if (value == _ExpiryDate) return;
				_ExpiryDate = value;
				NotifyPropertyChanged();//m => this.ExpiryDate
			}
		}
        private Nullable<System.DateTime> _ExpiryDate;

        [DataMember]
        public string Reference
		{ 
		    get { return _Reference; }
			set
			{
			    if (value == _Reference) return;
				_Reference = value;
				NotifyPropertyChanged();//m => this.Reference
			}
		}
        private string _Reference;

        [DataMember]
        public Nullable<bool> IsManuallyAssessed
		{ 
		    get { return _IsManuallyAssessed; }
			set
			{
			    if (value == _IsManuallyAssessed) return;
				_IsManuallyAssessed = value;
				NotifyPropertyChanged();//m => this.IsManuallyAssessed
			}
		}
        private Nullable<bool> _IsManuallyAssessed;

        [DataMember]
        public Nullable<bool> Cancelled
		{ 
		    get { return _Cancelled; }
			set
			{
			    if (value == _Cancelled) return;
				_Cancelled = value;
				NotifyPropertyChanged();//m => this.Cancelled
			}
		}
        private Nullable<bool> _Cancelled;

        [DataMember]
        public Nullable<bool> DoNotAllocate
		{ 
		    get { return _DoNotAllocate; }
			set
			{
			    if (value == _DoNotAllocate) return;
				_DoNotAllocate = value;
				NotifyPropertyChanged();//m => this.DoNotAllocate
			}
		}
        private Nullable<bool> _DoNotAllocate;

        [DataMember]
        public int ApplicationSettingsId
		{ 
		    get { return _ApplicationSettingsId; }
			set
			{
			    if (value == _ApplicationSettingsId) return;
				_ApplicationSettingsId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingsId
			}
		}
        private int _ApplicationSettingsId;

        [DataMember]
        public bool ImportComplete
		{ 
		    get { return _ImportComplete; }
			set
			{
			    if (value == _ImportComplete) return;
				_ImportComplete = value;
				NotifyPropertyChanged();//m => this.ImportComplete
			}
		}
        private bool _ImportComplete;

        [DataMember]
        public int Customs_ProcedureId
		{ 
		    get { return _Customs_ProcedureId; }
			set
			{
			    if (value == _Customs_ProcedureId) return;
				_Customs_ProcedureId = value;
				NotifyPropertyChanged();//m => this.Customs_ProcedureId
			}
		}
        private int _Customs_ProcedureId;

       
   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<AsycudaDocumentBasicInfo>.Equals(AsycudaDocumentBasicInfo other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




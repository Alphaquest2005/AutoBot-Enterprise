// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class TODO_LicenceAvailableQty : BaseEntity<TODO_LicenceAvailableQty>, ITrackable, IEquatable<TODO_LicenceAvailableQty>
    {
        [DataMember]
        public string RegistrationNumber
		{ 
		    get { return _RegistrationNumber; }
			set
			{
			    if (value == _RegistrationNumber) return;
				_RegistrationNumber = value;
				NotifyPropertyChanged();//m => this.RegistrationNumber
			}
		}
        private string _RegistrationNumber;

        [DataMember]
        public int ApplicationSettingsId
		{ 
		    get { return _ApplicationSettingsId; }
			set
			{
			    if (value == _ApplicationSettingsId) return;
				_ApplicationSettingsId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingsId
			}
		}
        private int _ApplicationSettingsId;

        [DataMember]
        public string TariffCode
		{ 
		    get { return _TariffCode; }
			set
			{
			    if (value == _TariffCode) return;
				_TariffCode = value;
				NotifyPropertyChanged();//m => this.TariffCode
			}
		}
        private string _TariffCode;

        [DataMember]
        public string Origin
		{ 
		    get { return _Origin; }
			set
			{
			    if (value == _Origin) return;
				_Origin = value;
				NotifyPropertyChanged();//m => this.Origin
			}
		}
        private string _Origin;

        [DataMember]
        public double Quantity_to_approve
		{ 
		    get { return _Quantity_to_approve; }
			set
			{
			    if (value == _Quantity_to_approve) return;
				_Quantity_to_approve = value;
				NotifyPropertyChanged();//m => this.Quantity_to_approve
			}
		}
        private double _Quantity_to_approve;

        [DataMember]
        public Nullable<System.DateTime> Application_date
		{ 
		    get { return _Application_date; }
			set
			{
			    if (value == _Application_date) return;
				_Application_date = value;
				NotifyPropertyChanged();//m => this.Application_date
			}
		}
        private Nullable<System.DateTime> _Application_date;

        [DataMember]
        public Nullable<System.DateTime> Importation_date
		{ 
		    get { return _Importation_date; }
			set
			{
			    if (value == _Importation_date) return;
				_Importation_date = value;
				NotifyPropertyChanged();//m => this.Importation_date
			}
		}
        private Nullable<System.DateTime> _Importation_date;

        [DataMember]
        public string Key
		{ 
		    get { return _Key; }
			set
			{
			    if (value == _Key) return;
				_Key = value;
				NotifyPropertyChanged();//m => this.Key
			}
		}
        private string _Key;

        [DataMember]
        public int Balance
		{ 
		    get { return _Balance; }
			set
			{
			    if (value == _Balance) return;
				_Balance = value;
				NotifyPropertyChanged();//m => this.Balance
			}
		}
        private int _Balance;

        [DataMember]
        public int LicenseId
		{ 
		    get { return _LicenseId; }
			set
			{
			    if (value == _LicenseId) return;
				_LicenseId = value;
				NotifyPropertyChanged();//m => this.LicenseId
			}
		}
        private int _LicenseId;

        [DataMember]
        public string SourceFile
		{ 
		    get { return _SourceFile; }
			set
			{
			    if (value == _SourceFile) return;
				_SourceFile = value;
				NotifyPropertyChanged();//m => this.SourceFile
			}
		}
        private string _SourceFile;

        [DataMember]
        public string DocumentReference
		{ 
		    get { return _DocumentReference; }
			set
			{
			    if (value == _DocumentReference) return;
				_DocumentReference = value;
				NotifyPropertyChanged();//m => this.DocumentReference
			}
		}
        private string _DocumentReference;

        [DataMember]
        public int SegmentId
		{ 
		    get { return _SegmentId; }
			set
			{
			    if (value == _SegmentId) return;
				_SegmentId = value;
				NotifyPropertyChanged();//m => this.SegmentId
			}
		}
        private int _SegmentId;

       
   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<TODO_LicenceAvailableQty>.Equals(TODO_LicenceAvailableQty other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




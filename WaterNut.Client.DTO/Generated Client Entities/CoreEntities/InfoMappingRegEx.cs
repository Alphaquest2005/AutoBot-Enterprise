// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class InfoMappingRegEx : BaseEntity<InfoMappingRegEx>, ITrackable, IEquatable<InfoMappingRegEx>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int InfoMappingId
		{ 
		    get { return _InfoMappingId; }
			set
			{
			    if (value == _InfoMappingId) return;
				_InfoMappingId = value;
				NotifyPropertyChanged();//m => this.InfoMappingId
			}
		}
        private int _InfoMappingId;

        [DataMember]
        public string KeyRegX
		{ 
		    get { return _KeyRegX; }
			set
			{
			    if (value == _KeyRegX) return;
				_KeyRegX = value;
				NotifyPropertyChanged();//m => this.KeyRegX
			}
		}
        private string _KeyRegX;

        [DataMember]
        public string FieldRx
		{ 
		    get { return _FieldRx; }
			set
			{
			    if (value == _FieldRx) return;
				_FieldRx = value;
				NotifyPropertyChanged();//m => this.FieldRx
			}
		}
        private string _FieldRx;

        [DataMember]
        public string KeyReplaceRx
		{ 
		    get { return _KeyReplaceRx; }
			set
			{
			    if (value == _KeyReplaceRx) return;
				_KeyReplaceRx = value;
				NotifyPropertyChanged();//m => this.KeyReplaceRx
			}
		}
        private string _KeyReplaceRx;

        [DataMember]
        public string FieldReplaceRx
		{ 
		    get { return _FieldReplaceRx; }
			set
			{
			    if (value == _FieldReplaceRx) return;
				_FieldReplaceRx = value;
				NotifyPropertyChanged();//m => this.FieldReplaceRx
			}
		}
        private string _FieldReplaceRx;

       
        [DataMember]
        public InfoMapping InfoMapping
		{
		    get { return _InfoMapping; }
			set
			{
			    if (value == _InfoMapping) return;
				_InfoMapping = value;
                InfoMappingChangeTracker = _InfoMapping == null ? null
                    : new ChangeTrackingCollection<InfoMapping> { _InfoMapping };
				NotifyPropertyChanged();//m => this.InfoMapping
			}
		}
        private InfoMapping _InfoMapping;
        private ChangeTrackingCollection<InfoMapping> InfoMappingChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<InfoMappingRegEx>.Equals(InfoMappingRegEx other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class SessionSchedule : BaseEntity<SessionSchedule>, ITrackable, IEquatable<SessionSchedule>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int SesseionId
		{ 
		    get { return _SesseionId; }
			set
			{
			    if (value == _SesseionId) return;
				_SesseionId = value;
				NotifyPropertyChanged();//m => this.SesseionId
			}
		}
        private int _SesseionId;

        [DataMember]
        public System.DateTime RunDateTime
		{ 
		    get { return _RunDateTime; }
			set
			{
			    if (value == _RunDateTime) return;
				_RunDateTime = value;
				NotifyPropertyChanged();//m => this.RunDateTime
			}
		}
        private System.DateTime _RunDateTime;

        [DataMember]
        public Nullable<int> ApplicationSettingId
		{ 
		    get { return _ApplicationSettingId; }
			set
			{
			    if (value == _ApplicationSettingId) return;
				_ApplicationSettingId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingId
			}
		}
        private Nullable<int> _ApplicationSettingId;

        [DataMember]
        public Nullable<int> ActionId
		{ 
		    get { return _ActionId; }
			set
			{
			    if (value == _ActionId) return;
				_ActionId = value;
				NotifyPropertyChanged();//m => this.ActionId
			}
		}
        private Nullable<int> _ActionId;

        [DataMember]
        public Nullable<int> ParameterSetId
		{ 
		    get { return _ParameterSetId; }
			set
			{
			    if (value == _ParameterSetId) return;
				_ParameterSetId = value;
				NotifyPropertyChanged();//m => this.ParameterSetId
			}
		}
        private Nullable<int> _ParameterSetId;

       
        [DataMember]
        public Sessions Sessions
		{
		    get { return _Sessions; }
			set
			{
			    if (value == _Sessions) return;
				_Sessions = value;
                SessionsChangeTracker = _Sessions == null ? null
                    : new ChangeTrackingCollection<Sessions> { _Sessions };
				NotifyPropertyChanged();//m => this.Sessions
			}
		}
        private Sessions _Sessions;
        private ChangeTrackingCollection<Sessions> SessionsChangeTracker { get; set; }

        [DataMember]
        public ParameterSet ParameterSet
		{
		    get { return _ParameterSet; }
			set
			{
			    if (value == _ParameterSet) return;
				_ParameterSet = value;
                ParameterSetChangeTracker = _ParameterSet == null ? null
                    : new ChangeTrackingCollection<ParameterSet> { _ParameterSet };
				NotifyPropertyChanged();//m => this.ParameterSet
			}
		}
        private ParameterSet _ParameterSet;
        private ChangeTrackingCollection<ParameterSet> ParameterSetChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<SessionSchedule>.Equals(SessionSchedule other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




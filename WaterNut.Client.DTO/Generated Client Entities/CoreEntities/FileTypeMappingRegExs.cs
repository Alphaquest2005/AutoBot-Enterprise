// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class FileTypeMappingRegExs : BaseEntity<FileTypeMappingRegExs>, ITrackable, IEquatable<FileTypeMappingRegExs>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int FileTypeMappingId
		{ 
		    get { return _FileTypeMappingId; }
			set
			{
			    if (value == _FileTypeMappingId) return;
				_FileTypeMappingId = value;
				NotifyPropertyChanged();//m => this.FileTypeMappingId
			}
		}
        private int _FileTypeMappingId;

        [DataMember]
        public string ReplacementRegex
		{ 
		    get { return _ReplacementRegex; }
			set
			{
			    if (value == _ReplacementRegex) return;
				_ReplacementRegex = value;
				NotifyPropertyChanged();//m => this.ReplacementRegex
			}
		}
        private string _ReplacementRegex;

        [DataMember]
        public string ReplacementValue
		{ 
		    get { return _ReplacementValue; }
			set
			{
			    if (value == _ReplacementValue) return;
				_ReplacementValue = value;
				NotifyPropertyChanged();//m => this.ReplacementValue
			}
		}
        private string _ReplacementValue;

       
        [DataMember]
        public FileTypeMappings FileTypeMappings
		{
		    get { return _FileTypeMappings; }
			set
			{
			    if (value == _FileTypeMappings) return;
				_FileTypeMappings = value;
                FileTypeMappingsChangeTracker = _FileTypeMappings == null ? null
                    : new ChangeTrackingCollection<FileTypeMappings> { _FileTypeMappings };
				NotifyPropertyChanged();//m => this.FileTypeMappings
			}
		}
        private FileTypeMappings _FileTypeMappings;
        private ChangeTrackingCollection<FileTypeMappings> FileTypeMappingsChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<FileTypeMappingRegExs>.Equals(FileTypeMappingRegExs other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




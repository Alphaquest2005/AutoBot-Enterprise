// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class LicenceSummary : BaseEntity<LicenceSummary>, ITrackable, IEquatable<LicenceSummary>
    {
        [DataMember]
        public string TariffCode
		{ 
		    get { return _TariffCode; }
			set
			{
			    if (value == _TariffCode) return;
				_TariffCode = value;
				NotifyPropertyChanged();//m => this.TariffCode
			}
		}
        private string _TariffCode;

        [DataMember]
        public Nullable<double> Quantity
		{ 
		    get { return _Quantity; }
			set
			{
			    if (value == _Quantity) return;
				_Quantity = value;
				NotifyPropertyChanged();//m => this.Quantity
			}
		}
        private Nullable<double> _Quantity;

        [DataMember]
        public Nullable<double> Total
		{ 
		    get { return _Total; }
			set
			{
			    if (value == _Total) return;
				_Total = value;
				NotifyPropertyChanged();//m => this.Total
			}
		}
        private Nullable<double> _Total;

        [DataMember]
        public string TariffCodeDescription
		{ 
		    get { return _TariffCodeDescription; }
			set
			{
			    if (value == _TariffCodeDescription) return;
				_TariffCodeDescription = value;
				NotifyPropertyChanged();//m => this.TariffCodeDescription
			}
		}
        private string _TariffCodeDescription;

        [DataMember]
        public int AsycudaDocumentSetId
		{ 
		    get { return _AsycudaDocumentSetId; }
			set
			{
			    if (value == _AsycudaDocumentSetId) return;
				_AsycudaDocumentSetId = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentSetId
			}
		}
        private int _AsycudaDocumentSetId;

        [DataMember]
        public long RowNumber
		{ 
		    get { return _RowNumber; }
			set
			{
			    if (value == _RowNumber) return;
				_RowNumber = value;
				NotifyPropertyChanged();//m => this.RowNumber
			}
		}
        private long _RowNumber;

       
        [DataMember]
        public AsycudaDocumentSetEx AsycudaDocumentSetEx
		{
		    get { return _AsycudaDocumentSetEx; }
			set
			{
			    if (value == _AsycudaDocumentSetEx) return;
				_AsycudaDocumentSetEx = value;
                AsycudaDocumentSetExChangeTracker = _AsycudaDocumentSetEx == null ? null
                    : new ChangeTrackingCollection<AsycudaDocumentSetEx> { _AsycudaDocumentSetEx };
				NotifyPropertyChanged();//m => this.AsycudaDocumentSetEx
			}
		}
        private AsycudaDocumentSetEx _AsycudaDocumentSetEx;
        private ChangeTrackingCollection<AsycudaDocumentSetEx> AsycudaDocumentSetExChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<LicenceSummary>.Equals(LicenceSummary other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace CoreEntities.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class FileTypeActions : BaseEntity<FileTypeActions>, ITrackable, IEquatable<FileTypeActions>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int FileTypeId
		{ 
		    get { return _FileTypeId; }
			set
			{
			    if (value == _FileTypeId) return;
				_FileTypeId = value;
				NotifyPropertyChanged();//m => this.FileTypeId
			}
		}
        private int _FileTypeId;

        [DataMember]
        public int ActionId
		{ 
		    get { return _ActionId; }
			set
			{
			    if (value == _ActionId) return;
				_ActionId = value;
				NotifyPropertyChanged();//m => this.ActionId
			}
		}
        private int _ActionId;

        [DataMember]
        public int Priority
		{ 
		    get { return _Priority; }
			set
			{
			    if (value == _Priority) return;
				_Priority = value;
				NotifyPropertyChanged();//m => this.Priority
			}
		}
        private int _Priority;

       
        [DataMember]
        public Actions Actions
		{
		    get { return _Actions; }
			set
			{
			    if (value == _Actions) return;
				_Actions = value;
                ActionsChangeTracker = _Actions == null ? null
                    : new ChangeTrackingCollection<Actions> { _Actions };
				NotifyPropertyChanged();//m => this.Actions
			}
		}
        private Actions _Actions;
        private ChangeTrackingCollection<Actions> ActionsChangeTracker { get; set; }

        [DataMember]
        public FileTypes FileTypes
		{
		    get { return _FileTypes; }
			set
			{
			    if (value == _FileTypes) return;
				_FileTypes = value;
                FileTypesChangeTracker = _FileTypes == null ? null
                    : new ChangeTrackingCollection<FileTypes> { _FileTypes };
				NotifyPropertyChanged();//m => this.FileTypes
			}
		}
        private FileTypes _FileTypes;
        private ChangeTrackingCollection<FileTypes> FileTypesChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<FileTypeActions>.Equals(FileTypeActions other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace InventoryQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class TariffCodes : BaseEntity<TariffCodes>, ITrackable, IEquatable<TariffCodes>
    {
        [DataMember]
        public string TariffCode
		{ 
		    get { return _TariffCode; }
			set
			{
			    if (value == _TariffCode) return;
				_TariffCode = value;
				NotifyPropertyChanged();//m => this.TariffCode
			}
		}
        private string _TariffCode;

        [DataMember]
        public string Description
		{ 
		    get { return _Description; }
			set
			{
			    if (value == _Description) return;
				_Description = value;
				NotifyPropertyChanged();//m => this.Description
			}
		}
        private string _Description;

        [DataMember]
        public string RateofDuty
		{ 
		    get { return _RateofDuty; }
			set
			{
			    if (value == _RateofDuty) return;
				_RateofDuty = value;
				NotifyPropertyChanged();//m => this.RateofDuty
			}
		}
        private string _RateofDuty;

        [DataMember]
        public string EnvironmentalLevy
		{ 
		    get { return _EnvironmentalLevy; }
			set
			{
			    if (value == _EnvironmentalLevy) return;
				_EnvironmentalLevy = value;
				NotifyPropertyChanged();//m => this.EnvironmentalLevy
			}
		}
        private string _EnvironmentalLevy;

        [DataMember]
        public string CustomsServiceCharge
		{ 
		    get { return _CustomsServiceCharge; }
			set
			{
			    if (value == _CustomsServiceCharge) return;
				_CustomsServiceCharge = value;
				NotifyPropertyChanged();//m => this.CustomsServiceCharge
			}
		}
        private string _CustomsServiceCharge;

        [DataMember]
        public string ExciseTax
		{ 
		    get { return _ExciseTax; }
			set
			{
			    if (value == _ExciseTax) return;
				_ExciseTax = value;
				NotifyPropertyChanged();//m => this.ExciseTax
			}
		}
        private string _ExciseTax;

        [DataMember]
        public string VatRate
		{ 
		    get { return _VatRate; }
			set
			{
			    if (value == _VatRate) return;
				_VatRate = value;
				NotifyPropertyChanged();//m => this.VatRate
			}
		}
        private string _VatRate;

        [DataMember]
        public string PetrolTax
		{ 
		    get { return _PetrolTax; }
			set
			{
			    if (value == _PetrolTax) return;
				_PetrolTax = value;
				NotifyPropertyChanged();//m => this.PetrolTax
			}
		}
        private string _PetrolTax;

        [DataMember]
        public string Units
		{ 
		    get { return _Units; }
			set
			{
			    if (value == _Units) return;
				_Units = value;
				NotifyPropertyChanged();//m => this.Units
			}
		}
        private string _Units;

        [DataMember]
        public string SiteRev3
		{ 
		    get { return _SiteRev3; }
			set
			{
			    if (value == _SiteRev3) return;
				_SiteRev3 = value;
				NotifyPropertyChanged();//m => this.SiteRev3
			}
		}
        private string _SiteRev3;

        [DataMember]
        public string TariffCategoryCode
		{ 
		    get { return _TariffCategoryCode; }
			set
			{
			    if (value == _TariffCategoryCode) return;
				_TariffCategoryCode = value;
				NotifyPropertyChanged();//m => this.TariffCategoryCode
			}
		}
        private string _TariffCategoryCode;

        [DataMember]
        public Nullable<bool> LicenseRequired
		{ 
		    get { return _LicenseRequired; }
			set
			{
			    if (value == _LicenseRequired) return;
				_LicenseRequired = value;
				NotifyPropertyChanged();//m => this.LicenseRequired
			}
		}
        private Nullable<bool> _LicenseRequired;

        [DataMember]
        public Nullable<bool> Invalid
		{ 
		    get { return _Invalid; }
			set
			{
			    if (value == _Invalid) return;
				_Invalid = value;
				NotifyPropertyChanged();//m => this.Invalid
			}
		}
        private Nullable<bool> _Invalid;

       
        [DataMember]
        public TariffCategory TariffCategory
		{
		    get { return _TariffCategory; }
			set
			{
			    if (value == _TariffCategory) return;
				_TariffCategory = value;
                TariffCategoryChangeTracker = _TariffCategory == null ? null
                    : new ChangeTrackingCollection<TariffCategory> { _TariffCategory };
				NotifyPropertyChanged();//m => this.TariffCategory
			}
		}
        private TariffCategory _TariffCategory;
        private ChangeTrackingCollection<TariffCategory> TariffCategoryChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<InventoryItemsEx> InventoryItemsEx
		{
		    get { return _InventoryItemsEx; }
			set
			{
			    if (Equals(value, _InventoryItemsEx)) return;
				_InventoryItemsEx = value;
				NotifyPropertyChanged();//m => this.InventoryItemsEx
			}
		}
        private ChangeTrackingCollection<InventoryItemsEx> _InventoryItemsEx = new ChangeTrackingCollection<InventoryItemsEx>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<TariffCodes>.Equals(TariffCodes other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




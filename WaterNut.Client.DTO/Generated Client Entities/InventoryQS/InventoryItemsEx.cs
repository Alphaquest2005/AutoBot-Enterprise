// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace InventoryQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class InventoryItemsEx : BaseEntity<InventoryItemsEx>, ITrackable, IEquatable<InventoryItemsEx>
    {
        [DataMember]
        public string ItemNumber
		{ 
		    get { return _ItemNumber; }
			set
			{
			    if (value == _ItemNumber) return;
				_ItemNumber = value;
				NotifyPropertyChanged();//m => this.ItemNumber
			}
		}
        private string _ItemNumber;

        [DataMember]
        public string Description
		{ 
		    get { return _Description; }
			set
			{
			    if (value == _Description) return;
				_Description = value;
				NotifyPropertyChanged();//m => this.Description
			}
		}
        private string _Description;

        [DataMember]
        public string Category
		{ 
		    get { return _Category; }
			set
			{
			    if (value == _Category) return;
				_Category = value;
				NotifyPropertyChanged();//m => this.Category
			}
		}
        private string _Category;

        [DataMember]
        public string TariffCode
		{ 
		    get { return _TariffCode; }
			set
			{
			    if (value == _TariffCode) return;
				_TariffCode = value;
				NotifyPropertyChanged();//m => this.TariffCode
			}
		}
        private string _TariffCode;

        [DataMember]
        public string SuppUnitCode2
		{ 
		    get { return _SuppUnitCode2; }
			set
			{
			    if (value == _SuppUnitCode2) return;
				_SuppUnitCode2 = value;
				NotifyPropertyChanged();//m => this.SuppUnitCode2
			}
		}
        private string _SuppUnitCode2;

        [DataMember]
        public Nullable<double> SuppQty
		{ 
		    get { return _SuppQty; }
			set
			{
			    if (value == _SuppQty) return;
				_SuppQty = value;
				NotifyPropertyChanged();//m => this.SuppQty
			}
		}
        private Nullable<double> _SuppQty;

        [DataMember]
        public Nullable<System.DateTime> EntryTimeStamp
		{ 
		    get { return _EntryTimeStamp; }
			set
			{
			    if (value == _EntryTimeStamp) return;
				_EntryTimeStamp = value;
				NotifyPropertyChanged();//m => this.EntryTimeStamp
			}
		}
        private Nullable<System.DateTime> _EntryTimeStamp;

        [DataMember]
        public int ApplicationSettingsId
		{ 
		    get { return _ApplicationSettingsId; }
			set
			{
			    if (value == _ApplicationSettingsId) return;
				_ApplicationSettingsId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingsId
			}
		}
        private int _ApplicationSettingsId;

        [DataMember]
        public int InventoryItemId
		{ 
		    get { return _InventoryItemId; }
			set
			{
			    if (value == _InventoryItemId) return;
				_InventoryItemId = value;
				NotifyPropertyChanged();//m => this.InventoryItemId
			}
		}
        private int _InventoryItemId;

       
        [DataMember]
        public TariffCodes TariffCodes
		{
		    get { return _TariffCodes; }
			set
			{
			    if (value == _TariffCodes) return;
				_TariffCodes = value;
                TariffCodesChangeTracker = _TariffCodes == null ? null
                    : new ChangeTrackingCollection<TariffCodes> { _TariffCodes };
				NotifyPropertyChanged();//m => this.TariffCodes
			}
		}
        private TariffCodes _TariffCodes;
        private ChangeTrackingCollection<TariffCodes> TariffCodesChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<EntryDataDetailsEx> EntryDataDetailsEx
		{
		    get { return _EntryDataDetailsEx; }
			set
			{
			    if (Equals(value, _EntryDataDetailsEx)) return;
				_EntryDataDetailsEx = value;
				NotifyPropertyChanged();//m => this.EntryDataDetailsEx
			}
		}
        private ChangeTrackingCollection<EntryDataDetailsEx> _EntryDataDetailsEx = new ChangeTrackingCollection<EntryDataDetailsEx>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<InventoryItemsEx>.Equals(InventoryItemsEx other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class Line : BaseEntity<Line>, ITrackable, IEquatable<Line>
    {
        [DataMember]
        public string Invoice
		{ 
		    get { return _Invoice; }
			set
			{
			    if (value == _Invoice) return;
				_Invoice = value;
				NotifyPropertyChanged();//m => this.Invoice
			}
		}
        private string _Invoice;

        [DataMember]
        public string PartName
		{ 
		    get { return _PartName; }
			set
			{
			    if (value == _PartName) return;
				_PartName = value;
				NotifyPropertyChanged();//m => this.PartName
			}
		}
        private string _PartName;

        [DataMember]
        public string Name
		{ 
		    get { return _Name; }
			set
			{
			    if (value == _Name) return;
				_Name = value;
				NotifyPropertyChanged();//m => this.Name
			}
		}
        private string _Name;

        [DataMember]
        public Nullable<bool> MultiLine
		{ 
		    get { return _MultiLine; }
			set
			{
			    if (value == _MultiLine) return;
				_MultiLine = value;
				NotifyPropertyChanged();//m => this.MultiLine
			}
		}
        private Nullable<bool> _MultiLine;

        [DataMember]
        public string RegEx
		{ 
		    get { return _RegEx; }
			set
			{
			    if (value == _RegEx) return;
				_RegEx = value;
				NotifyPropertyChanged();//m => this.RegEx
			}
		}
        private string _RegEx;

        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public Nullable<int> RegExId
		{ 
		    get { return _RegExId; }
			set
			{
			    if (value == _RegExId) return;
				_RegExId = value;
				NotifyPropertyChanged();//m => this.RegExId
			}
		}
        private Nullable<int> _RegExId;

        [DataMember]
        public Nullable<int> ParentId
		{ 
		    get { return _ParentId; }
			set
			{
			    if (value == _ParentId) return;
				_ParentId = value;
				NotifyPropertyChanged();//m => this.ParentId
			}
		}
        private Nullable<int> _ParentId;

        [DataMember]
        public Nullable<int> PartId
		{ 
		    get { return _PartId; }
			set
			{
			    if (value == _PartId) return;
				_PartId = value;
				NotifyPropertyChanged();//m => this.PartId
			}
		}
        private Nullable<int> _PartId;

       
        [DataMember]
        public Part Part
		{
		    get { return _Part; }
			set
			{
			    if (value == _Part) return;
				_Part = value;
                PartChangeTracker = _Part == null ? null
                    : new ChangeTrackingCollection<Part> { _Part };
				NotifyPropertyChanged();//m => this.Part
			}
		}
        private Part _Part;
        private ChangeTrackingCollection<Part> PartChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<Line>.Equals(Line other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class Lines : BaseEntity<Lines>, ITrackable, IEquatable<Lines>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int PartId
		{ 
		    get { return _PartId; }
			set
			{
			    if (value == _PartId) return;
				_PartId = value;
				NotifyPropertyChanged();//m => this.PartId
			}
		}
        private int _PartId;

        [DataMember]
        public int RegExChainId
		{ 
		    get { return _RegExChainId; }
			set
			{
			    if (value == _RegExChainId) return;
				_RegExChainId = value;
				NotifyPropertyChanged();//m => this.RegExChainId
			}
		}
        private int _RegExChainId;

        [DataMember]
        public string Name
		{ 
		    get { return _Name; }
			set
			{
			    if (value == _Name) return;
				_Name = value;
				NotifyPropertyChanged();//m => this.Name
			}
		}
        private string _Name;

       
        [DataMember]
        public ChangeTrackingCollection<Fields> Fields
		{
		    get { return _Fields; }
			set
			{
			    if (Equals(value, _Fields)) return;
				_Fields = value;
				NotifyPropertyChanged();//m => this.Fields
			}
		}
        private ChangeTrackingCollection<Fields> _Fields = new ChangeTrackingCollection<Fields>();

        [DataMember]
        public Parts Parts
		{
		    get { return _Parts; }
			set
			{
			    if (value == _Parts) return;
				_Parts = value;
                PartsChangeTracker = _Parts == null ? null
                    : new ChangeTrackingCollection<Parts> { _Parts };
				NotifyPropertyChanged();//m => this.Parts
			}
		}
        private Parts _Parts;
        private ChangeTrackingCollection<Parts> PartsChangeTracker { get; set; }

        [DataMember]
        public RegExChain RegExChain
		{
		    get { return _RegExChain; }
			set
			{
			    if (value == _RegExChain) return;
				_RegExChain = value;
                RegExChainChangeTracker = _RegExChain == null ? null
                    : new ChangeTrackingCollection<RegExChain> { _RegExChain };
				NotifyPropertyChanged();//m => this.RegExChain
			}
		}
        private RegExChain _RegExChain;
        private ChangeTrackingCollection<RegExChain> RegExChainChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<Lines>.Equals(Lines other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




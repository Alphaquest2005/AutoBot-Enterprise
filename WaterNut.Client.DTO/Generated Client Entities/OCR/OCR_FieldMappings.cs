// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class OCR_FieldMappings : BaseEntity<OCR_FieldMappings>, ITrackable, IEquatable<OCR_FieldMappings>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public string Key
		{ 
		    get { return _Key; }
			set
			{
			    if (value == _Key) return;
				_Key = value;
				NotifyPropertyChanged();//m => this.Key
			}
		}
        private string _Key;

        [DataMember]
        public string Field
		{ 
		    get { return _Field; }
			set
			{
			    if (value == _Field) return;
				_Field = value;
				NotifyPropertyChanged();//m => this.Field
			}
		}
        private string _Field;

        [DataMember]
        public string EntityType
		{ 
		    get { return _EntityType; }
			set
			{
			    if (value == _EntityType) return;
				_EntityType = value;
				NotifyPropertyChanged();//m => this.EntityType
			}
		}
        private string _EntityType;

        [DataMember]
        public bool IsRequired
		{ 
		    get { return _IsRequired; }
			set
			{
			    if (value == _IsRequired) return;
				_IsRequired = value;
				NotifyPropertyChanged();//m => this.IsRequired
			}
		}
        private bool _IsRequired;

        [DataMember]
        public string DataType
		{ 
		    get { return _DataType; }
			set
			{
			    if (value == _DataType) return;
				_DataType = value;
				NotifyPropertyChanged();//m => this.DataType
			}
		}
        private string _DataType;

        [DataMember]
        public Nullable<bool> AppendValues
		{ 
		    get { return _AppendValues; }
			set
			{
			    if (value == _AppendValues) return;
				_AppendValues = value;
				NotifyPropertyChanged();//m => this.AppendValues
			}
		}
        private Nullable<bool> _AppendValues;

        [DataMember]
        public int FileTypeId
		{ 
		    get { return _FileTypeId; }
			set
			{
			    if (value == _FileTypeId) return;
				_FileTypeId = value;
				NotifyPropertyChanged();//m => this.FileTypeId
			}
		}
        private int _FileTypeId;

       
   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<OCR_FieldMappings>.Equals(OCR_FieldMappings other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




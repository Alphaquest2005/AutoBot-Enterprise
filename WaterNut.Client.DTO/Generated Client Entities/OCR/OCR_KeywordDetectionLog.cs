// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class OCR_KeywordDetectionLog : BaseEntity<OCR_KeywordDetectionLog>, ITrackable, IEquatable<OCR_KeywordDetectionLog>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public string DocumentPath
		{ 
		    get { return _DocumentPath; }
			set
			{
			    if (value == _DocumentPath) return;
				_DocumentPath = value;
				NotifyPropertyChanged();//m => this.DocumentPath
			}
		}
        private string _DocumentPath;

        [DataMember]
        public string DocumentContent
		{ 
		    get { return _DocumentContent; }
			set
			{
			    if (value == _DocumentContent) return;
				_DocumentContent = value;
				NotifyPropertyChanged();//m => this.DocumentContent
			}
		}
        private string _DocumentContent;

        [DataMember]
        public Nullable<int> DetectedMappingId
		{ 
		    get { return _DetectedMappingId; }
			set
			{
			    if (value == _DetectedMappingId) return;
				_DetectedMappingId = value;
				NotifyPropertyChanged();//m => this.DetectedMappingId
			}
		}
        private Nullable<int> _DetectedMappingId;

        [DataMember]
        public string KeywordMatches
		{ 
		    get { return _KeywordMatches; }
			set
			{
			    if (value == _KeywordMatches) return;
				_KeywordMatches = value;
				NotifyPropertyChanged();//m => this.KeywordMatches
			}
		}
        private string _KeywordMatches;

        [DataMember]
        public Nullable<decimal> MatchScore
		{ 
		    get { return _MatchScore; }
			set
			{
			    if (value == _MatchScore) return;
				_MatchScore = value;
				NotifyPropertyChanged();//m => this.MatchScore
			}
		}
        private Nullable<decimal> _MatchScore;

        [DataMember]
        public Nullable<int> ProcessingTimeMs
		{ 
		    get { return _ProcessingTimeMs; }
			set
			{
			    if (value == _ProcessingTimeMs) return;
				_ProcessingTimeMs = value;
				NotifyPropertyChanged();//m => this.ProcessingTimeMs
			}
		}
        private Nullable<int> _ProcessingTimeMs;

        [DataMember]
        public bool Success
		{ 
		    get { return _Success; }
			set
			{
			    if (value == _Success) return;
				_Success = value;
				NotifyPropertyChanged();//m => this.Success
			}
		}
        private bool _Success;

        [DataMember]
        public string ErrorMessage
		{ 
		    get { return _ErrorMessage; }
			set
			{
			    if (value == _ErrorMessage) return;
				_ErrorMessage = value;
				NotifyPropertyChanged();//m => this.ErrorMessage
			}
		}
        private string _ErrorMessage;

        [DataMember]
        public System.DateTime CreatedDate
		{ 
		    get { return _CreatedDate; }
			set
			{
			    if (value == _CreatedDate) return;
				_CreatedDate = value;
				NotifyPropertyChanged();//m => this.CreatedDate
			}
		}
        private System.DateTime _CreatedDate;

       
        [DataMember]
        public OCR_TemplateTableMapping OCR_TemplateTableMapping
		{
		    get { return _OCR_TemplateTableMapping; }
			set
			{
			    if (value == _OCR_TemplateTableMapping) return;
				_OCR_TemplateTableMapping = value;
                OCR_TemplateTableMappingChangeTracker = _OCR_TemplateTableMapping == null ? null
                    : new ChangeTrackingCollection<OCR_TemplateTableMapping> { _OCR_TemplateTableMapping };
				NotifyPropertyChanged();//m => this.OCR_TemplateTableMapping
			}
		}
        private OCR_TemplateTableMapping _OCR_TemplateTableMapping;
        private ChangeTrackingCollection<OCR_TemplateTableMapping> OCR_TemplateTableMappingChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<OCR_KeywordDetectionLog>.Equals(OCR_KeywordDetectionLog other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




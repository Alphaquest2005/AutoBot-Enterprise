// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class OCR_TemplateTableMapping : BaseEntity<OCR_TemplateTableMapping>, ITrackable, IEquatable<OCR_TemplateTableMapping>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public string DocumentType
		{ 
		    get { return _DocumentType; }
			set
			{
			    if (value == _DocumentType) return;
				_DocumentType = value;
				NotifyPropertyChanged();//m => this.DocumentType
			}
		}
        private string _DocumentType;

        [DataMember]
        public string TargetTable
		{ 
		    get { return _TargetTable; }
			set
			{
			    if (value == _TargetTable) return;
				_TargetTable = value;
				NotifyPropertyChanged();//m => this.TargetTable
			}
		}
        private string _TargetTable;

        [DataMember]
        public Nullable<int> ParentId
		{ 
		    get { return _ParentId; }
			set
			{
			    if (value == _ParentId) return;
				_ParentId = value;
				NotifyPropertyChanged();//m => this.ParentId
			}
		}
        private Nullable<int> _ParentId;

        [DataMember]
        public string Keywords
		{ 
		    get { return _Keywords; }
			set
			{
			    if (value == _Keywords) return;
				_Keywords = value;
				NotifyPropertyChanged();//m => this.Keywords
			}
		}
        private string _Keywords;

        [DataMember]
        public string RequiredFields
		{ 
		    get { return _RequiredFields; }
			set
			{
			    if (value == _RequiredFields) return;
				_RequiredFields = value;
				NotifyPropertyChanged();//m => this.RequiredFields
			}
		}
        private string _RequiredFields;

        [DataMember]
        public string TemplatePrefix
		{ 
		    get { return _TemplatePrefix; }
			set
			{
			    if (value == _TemplatePrefix) return;
				_TemplatePrefix = value;
				NotifyPropertyChanged();//m => this.TemplatePrefix
			}
		}
        private string _TemplatePrefix;

        [DataMember]
        public int Priority
		{ 
		    get { return _Priority; }
			set
			{
			    if (value == _Priority) return;
				_Priority = value;
				NotifyPropertyChanged();//m => this.Priority
			}
		}
        private int _Priority;

        [DataMember]
        public bool IsActive
		{ 
		    get { return _IsActive; }
			set
			{
			    if (value == _IsActive) return;
				_IsActive = value;
				NotifyPropertyChanged();//m => this.IsActive
			}
		}
        private bool _IsActive;

        [DataMember]
        public string Description
		{ 
		    get { return _Description; }
			set
			{
			    if (value == _Description) return;
				_Description = value;
				NotifyPropertyChanged();//m => this.Description
			}
		}
        private string _Description;

        [DataMember]
        public Nullable<int> ParentTemplateTableId
		{ 
		    get { return _ParentTemplateTableId; }
			set
			{
			    if (value == _ParentTemplateTableId) return;
				_ParentTemplateTableId = value;
				NotifyPropertyChanged();//m => this.ParentTemplateTableId
			}
		}
        private Nullable<int> _ParentTemplateTableId;

        [DataMember]
        public string OptionalFields
		{ 
		    get { return _OptionalFields; }
			set
			{
			    if (value == _OptionalFields) return;
				_OptionalFields = value;
				NotifyPropertyChanged();//m => this.OptionalFields
			}
		}
        private string _OptionalFields;

        [DataMember]
        public decimal MatchThreshold
		{ 
		    get { return _MatchThreshold; }
			set
			{
			    if (value == _MatchThreshold) return;
				_MatchThreshold = value;
				NotifyPropertyChanged();//m => this.MatchThreshold
			}
		}
        private decimal _MatchThreshold;

        [DataMember]
        public bool IsSystemEntity
		{ 
		    get { return _IsSystemEntity; }
			set
			{
			    if (value == _IsSystemEntity) return;
				_IsSystemEntity = value;
				NotifyPropertyChanged();//m => this.IsSystemEntity
			}
		}
        private bool _IsSystemEntity;

        [DataMember]
        public System.DateTime CreatedDate
		{ 
		    get { return _CreatedDate; }
			set
			{
			    if (value == _CreatedDate) return;
				_CreatedDate = value;
				NotifyPropertyChanged();//m => this.CreatedDate
			}
		}
        private System.DateTime _CreatedDate;

        [DataMember]
        public System.DateTime LastUpdated
		{ 
		    get { return _LastUpdated; }
			set
			{
			    if (value == _LastUpdated) return;
				_LastUpdated = value;
				NotifyPropertyChanged();//m => this.LastUpdated
			}
		}
        private System.DateTime _LastUpdated;

        [DataMember]
        public string CreatedBy
		{ 
		    get { return _CreatedBy; }
			set
			{
			    if (value == _CreatedBy) return;
				_CreatedBy = value;
				NotifyPropertyChanged();//m => this.CreatedBy
			}
		}
        private string _CreatedBy;

        [DataMember]
        public string ProcessingNotes
		{ 
		    get { return _ProcessingNotes; }
			set
			{
			    if (value == _ProcessingNotes) return;
				_ProcessingNotes = value;
				NotifyPropertyChanged();//m => this.ProcessingNotes
			}
		}
        private string _ProcessingNotes;

        [DataMember]
        public Nullable<int> FileTypeId
		{ 
		    get { return _FileTypeId; }
			set
			{
			    if (value == _FileTypeId) return;
				_FileTypeId = value;
				NotifyPropertyChanged();//m => this.FileTypeId
			}
		}
        private Nullable<int> _FileTypeId;

       
        [DataMember]
        public ChangeTrackingCollection<OCR_KeywordDetectionLog> OCR_KeywordDetectionLog
		{
		    get { return _OCR_KeywordDetectionLog; }
			set
			{
			    if (Equals(value, _OCR_KeywordDetectionLog)) return;
				_OCR_KeywordDetectionLog = value;
				NotifyPropertyChanged();//m => this.OCR_KeywordDetectionLog
			}
		}
        private ChangeTrackingCollection<OCR_KeywordDetectionLog> _OCR_KeywordDetectionLog = new ChangeTrackingCollection<OCR_KeywordDetectionLog>();

        [DataMember]
        public ChangeTrackingCollection<OCR_TemplateTableMapping> OCR_TemplateTableMapping1
		{
		    get { return _OCR_TemplateTableMapping1; }
			set
			{
			    if (Equals(value, _OCR_TemplateTableMapping1)) return;
				_OCR_TemplateTableMapping1 = value;
				NotifyPropertyChanged();//m => this.OCR_TemplateTableMapping1
			}
		}
        private ChangeTrackingCollection<OCR_TemplateTableMapping> _OCR_TemplateTableMapping1 = new ChangeTrackingCollection<OCR_TemplateTableMapping>();

        [DataMember]
        public OCR_TemplateTableMapping OCR_TemplateTableMapping2
		{
		    get { return _OCR_TemplateTableMapping2; }
			set
			{
			    if (value == _OCR_TemplateTableMapping2) return;
				_OCR_TemplateTableMapping2 = value;
                OCR_TemplateTableMapping2ChangeTracker = _OCR_TemplateTableMapping2 == null ? null
                    : new ChangeTrackingCollection<OCR_TemplateTableMapping> { _OCR_TemplateTableMapping2 };
				NotifyPropertyChanged();//m => this.OCR_TemplateTableMapping2
			}
		}
        private OCR_TemplateTableMapping _OCR_TemplateTableMapping2;
        private ChangeTrackingCollection<OCR_TemplateTableMapping> OCR_TemplateTableMapping2ChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<OCR_TemplateTableMapping>.Equals(OCR_TemplateTableMapping other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




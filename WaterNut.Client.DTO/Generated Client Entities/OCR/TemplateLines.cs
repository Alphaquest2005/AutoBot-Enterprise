// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class TemplateLines : BaseEntity<TemplateLines>, ITrackable, IEquatable<TemplateLines>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int TemplateId
		{ 
		    get { return _TemplateId; }
			set
			{
			    if (value == _TemplateId) return;
				_TemplateId = value;
				NotifyPropertyChanged();//m => this.TemplateId
			}
		}
        private int _TemplateId;

        [DataMember]
        public int TypeId
		{ 
		    get { return _TypeId; }
			set
			{
			    if (value == _TypeId) return;
				_TypeId = value;
				NotifyPropertyChanged();//m => this.TypeId
			}
		}
        private int _TypeId;

       
        [DataMember]
        public LineTypes LineTypes
		{
		    get { return _LineTypes; }
			set
			{
			    if (value == _LineTypes) return;
				_LineTypes = value;
                LineTypesChangeTracker = _LineTypes == null ? null
                    : new ChangeTrackingCollection<LineTypes> { _LineTypes };
				NotifyPropertyChanged();//m => this.LineTypes
			}
		}
        private LineTypes _LineTypes;
        private ChangeTrackingCollection<LineTypes> LineTypesChangeTracker { get; set; }

        [DataMember]
        public Templates Templates
		{
		    get { return _Templates; }
			set
			{
			    if (value == _Templates) return;
				_Templates = value;
                TemplatesChangeTracker = _Templates == null ? null
                    : new ChangeTrackingCollection<Templates> { _Templates };
				NotifyPropertyChanged();//m => this.Templates
			}
		}
        private Templates _Templates;
        private ChangeTrackingCollection<Templates> TemplatesChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<TemplateLinesRegularExpressions> TemplateLinesRegularExpressions
		{
		    get { return _TemplateLinesRegularExpressions; }
			set
			{
			    if (Equals(value, _TemplateLinesRegularExpressions)) return;
				_TemplateLinesRegularExpressions = value;
				NotifyPropertyChanged();//m => this.TemplateLinesRegularExpressions
			}
		}
        private ChangeTrackingCollection<TemplateLinesRegularExpressions> _TemplateLinesRegularExpressions = new ChangeTrackingCollection<TemplateLinesRegularExpressions>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<TemplateLines>.Equals(TemplateLines other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




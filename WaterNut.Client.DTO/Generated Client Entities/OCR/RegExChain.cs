// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class RegExChain : BaseEntity<RegExChain>, ITrackable, IEquatable<RegExChain>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public int RegExId
		{ 
		    get { return _RegExId; }
			set
			{
			    if (value == _RegExId) return;
				_RegExId = value;
				NotifyPropertyChanged();//m => this.RegExId
			}
		}
        private int _RegExId;

        [DataMember]
        public Nullable<int> PreviousRegExId
		{ 
		    get { return _PreviousRegExId; }
			set
			{
			    if (value == _PreviousRegExId) return;
				_PreviousRegExId = value;
				NotifyPropertyChanged();//m => this.PreviousRegExId
			}
		}
        private Nullable<int> _PreviousRegExId;

       
        [DataMember]
        public ChangeTrackingCollection<RegExChain> RegExChain1
		{
		    get { return _RegExChain1; }
			set
			{
			    if (Equals(value, _RegExChain1)) return;
				_RegExChain1 = value;
				NotifyPropertyChanged();//m => this.RegExChain1
			}
		}
        private ChangeTrackingCollection<RegExChain> _RegExChain1 = new ChangeTrackingCollection<RegExChain>();

        [DataMember]
        public RegExChain RegExChain2
		{
		    get { return _RegExChain2; }
			set
			{
			    if (value == _RegExChain2) return;
				_RegExChain2 = value;
                RegExChain2ChangeTracker = _RegExChain2 == null ? null
                    : new ChangeTrackingCollection<RegExChain> { _RegExChain2 };
				NotifyPropertyChanged();//m => this.RegExChain2
			}
		}
        private RegExChain _RegExChain2;
        private ChangeTrackingCollection<RegExChain> RegExChain2ChangeTracker { get; set; }

        [DataMember]
        public RegularExpressions RegularExpressions
		{
		    get { return _RegularExpressions; }
			set
			{
			    if (value == _RegularExpressions) return;
				_RegularExpressions = value;
                RegularExpressionsChangeTracker = _RegularExpressions == null ? null
                    : new ChangeTrackingCollection<RegularExpressions> { _RegularExpressions };
				NotifyPropertyChanged();//m => this.RegularExpressions
			}
		}
        private RegularExpressions _RegularExpressions;
        private ChangeTrackingCollection<RegularExpressions> RegularExpressionsChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<TemplateLinesRegularExpressions> TemplateLinesRegularExpressions
		{
		    get { return _TemplateLinesRegularExpressions; }
			set
			{
			    if (Equals(value, _TemplateLinesRegularExpressions)) return;
				_TemplateLinesRegularExpressions = value;
				NotifyPropertyChanged();//m => this.TemplateLinesRegularExpressions
			}
		}
        private ChangeTrackingCollection<TemplateLinesRegularExpressions> _TemplateLinesRegularExpressions = new ChangeTrackingCollection<TemplateLinesRegularExpressions>();

        [DataMember]
        public ChangeTrackingCollection<TemplateRegularExpressions> TemplateRegularExpressions
		{
		    get { return _TemplateRegularExpressions; }
			set
			{
			    if (Equals(value, _TemplateRegularExpressions)) return;
				_TemplateRegularExpressions = value;
				NotifyPropertyChanged();//m => this.TemplateRegularExpressions
			}
		}
        private ChangeTrackingCollection<TemplateRegularExpressions> _TemplateRegularExpressions = new ChangeTrackingCollection<TemplateRegularExpressions>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<RegExChain>.Equals(RegExChain other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




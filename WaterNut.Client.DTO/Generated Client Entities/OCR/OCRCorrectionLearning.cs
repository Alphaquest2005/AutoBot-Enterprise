// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class OCRCorrectionLearning : BaseEntity<OCRCorrectionLearning>, ITrackable, IEquatable<OCRCorrectionLearning>
    {
        [DataMember]
        public int Id
		{ 
		    get { return _Id; }
			set
			{
			    if (value == _Id) return;
				_Id = value;
				NotifyPropertyChanged();//m => this.Id
			}
		}
        private int _Id;

        [DataMember]
        public string FieldName
		{ 
		    get { return _FieldName; }
			set
			{
			    if (value == _FieldName) return;
				_FieldName = value;
				NotifyPropertyChanged();//m => this.FieldName
			}
		}
        private string _FieldName;

        [DataMember]
        public string OriginalError
		{ 
		    get { return _OriginalError; }
			set
			{
			    if (value == _OriginalError) return;
				_OriginalError = value;
				NotifyPropertyChanged();//m => this.OriginalError
			}
		}
        private string _OriginalError;

        [DataMember]
        public string CorrectValue
		{ 
		    get { return _CorrectValue; }
			set
			{
			    if (value == _CorrectValue) return;
				_CorrectValue = value;
				NotifyPropertyChanged();//m => this.CorrectValue
			}
		}
        private string _CorrectValue;

        [DataMember]
        public Nullable<int> LineNumber
		{ 
		    get { return _LineNumber; }
			set
			{
			    if (value == _LineNumber) return;
				_LineNumber = value;
				NotifyPropertyChanged();//m => this.LineNumber
			}
		}
        private Nullable<int> _LineNumber;

        [DataMember]
        public string LineText
		{ 
		    get { return _LineText; }
			set
			{
			    if (value == _LineText) return;
				_LineText = value;
				NotifyPropertyChanged();//m => this.LineText
			}
		}
        private string _LineText;

        [DataMember]
        public string WindowText
		{ 
		    get { return _WindowText; }
			set
			{
			    if (value == _WindowText) return;
				_WindowText = value;
				NotifyPropertyChanged();//m => this.WindowText
			}
		}
        private string _WindowText;

        [DataMember]
        public string CorrectionType
		{ 
		    get { return _CorrectionType; }
			set
			{
			    if (value == _CorrectionType) return;
				_CorrectionType = value;
				NotifyPropertyChanged();//m => this.CorrectionType
			}
		}
        private string _CorrectionType;

        [DataMember]
        public string DeepSeekReasoning
		{ 
		    get { return _DeepSeekReasoning; }
			set
			{
			    if (value == _DeepSeekReasoning) return;
				_DeepSeekReasoning = value;
				NotifyPropertyChanged();//m => this.DeepSeekReasoning
			}
		}
        private string _DeepSeekReasoning;

        [DataMember]
        public Nullable<double> Confidence
		{ 
		    get { return _Confidence; }
			set
			{
			    if (value == _Confidence) return;
				_Confidence = value;
				NotifyPropertyChanged();//m => this.Confidence
			}
		}
        private Nullable<double> _Confidence;

        [DataMember]
        public string InvoiceType
		{ 
		    get { return _InvoiceType; }
			set
			{
			    if (value == _InvoiceType) return;
				_InvoiceType = value;
				NotifyPropertyChanged();//m => this.InvoiceType
			}
		}
        private string _InvoiceType;

        [DataMember]
        public string FilePath
		{ 
		    get { return _FilePath; }
			set
			{
			    if (value == _FilePath) return;
				_FilePath = value;
				NotifyPropertyChanged();//m => this.FilePath
			}
		}
        private string _FilePath;

        [DataMember]
        public bool Success
		{ 
		    get { return _Success; }
			set
			{
			    if (value == _Success) return;
				_Success = value;
				NotifyPropertyChanged();//m => this.Success
			}
		}
        private bool _Success;

        [DataMember]
        public string ErrorMessage
		{ 
		    get { return _ErrorMessage; }
			set
			{
			    if (value == _ErrorMessage) return;
				_ErrorMessage = value;
				NotifyPropertyChanged();//m => this.ErrorMessage
			}
		}
        private string _ErrorMessage;

        [DataMember]
        public System.DateTime CreatedDate
		{ 
		    get { return _CreatedDate; }
			set
			{
			    if (value == _CreatedDate) return;
				_CreatedDate = value;
				NotifyPropertyChanged();//m => this.CreatedDate
			}
		}
        private System.DateTime _CreatedDate;

        [DataMember]
        public string CreatedBy
		{ 
		    get { return _CreatedBy; }
			set
			{
			    if (value == _CreatedBy) return;
				_CreatedBy = value;
				NotifyPropertyChanged();//m => this.CreatedBy
			}
		}
        private string _CreatedBy;

        [DataMember]
        public Nullable<bool> RequiresMultilineRegex
		{ 
		    get { return _RequiresMultilineRegex; }
			set
			{
			    if (value == _RequiresMultilineRegex) return;
				_RequiresMultilineRegex = value;
				NotifyPropertyChanged();//m => this.RequiresMultilineRegex
			}
		}
        private Nullable<bool> _RequiresMultilineRegex;

        [DataMember]
        public string ContextLinesBefore
		{ 
		    get { return _ContextLinesBefore; }
			set
			{
			    if (value == _ContextLinesBefore) return;
				_ContextLinesBefore = value;
				NotifyPropertyChanged();//m => this.ContextLinesBefore
			}
		}
        private string _ContextLinesBefore;

        [DataMember]
        public string ContextLinesAfter
		{ 
		    get { return _ContextLinesAfter; }
			set
			{
			    if (value == _ContextLinesAfter) return;
				_ContextLinesAfter = value;
				NotifyPropertyChanged();//m => this.ContextLinesAfter
			}
		}
        private string _ContextLinesAfter;

        [DataMember]
        public Nullable<int> LineId
		{ 
		    get { return _LineId; }
			set
			{
			    if (value == _LineId) return;
				_LineId = value;
				NotifyPropertyChanged();//m => this.LineId
			}
		}
        private Nullable<int> _LineId;

        [DataMember]
        public Nullable<int> PartId
		{ 
		    get { return _PartId; }
			set
			{
			    if (value == _PartId) return;
				_PartId = value;
				NotifyPropertyChanged();//m => this.PartId
			}
		}
        private Nullable<int> _PartId;

        [DataMember]
        public Nullable<int> RegexId
		{ 
		    get { return _RegexId; }
			set
			{
			    if (value == _RegexId) return;
				_RegexId = value;
				NotifyPropertyChanged();//m => this.RegexId
			}
		}
        private Nullable<int> _RegexId;

       
   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<OCRCorrectionLearning>.Equals(OCRCorrectionLearning other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




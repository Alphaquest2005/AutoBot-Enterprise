// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class vw_OCRCorrectionAnalysis : BaseEntity<vw_OCRCorrectionAnalysis>, ITrackable, IEquatable<vw_OCRCorrectionAnalysis>
    {
        [DataMember]
        public string FieldName
		{ 
		    get { return _FieldName; }
			set
			{
			    if (value == _FieldName) return;
				_FieldName = value;
				NotifyPropertyChanged();//m => this.FieldName
			}
		}
        private string _FieldName;

        [DataMember]
        public string CorrectionType
		{ 
		    get { return _CorrectionType; }
			set
			{
			    if (value == _CorrectionType) return;
				_CorrectionType = value;
				NotifyPropertyChanged();//m => this.CorrectionType
			}
		}
        private string _CorrectionType;

        [DataMember]
        public Nullable<int> TotalCorrections
		{ 
		    get { return _TotalCorrections; }
			set
			{
			    if (value == _TotalCorrections) return;
				_TotalCorrections = value;
				NotifyPropertyChanged();//m => this.TotalCorrections
			}
		}
        private Nullable<int> _TotalCorrections;

        [DataMember]
        public Nullable<decimal> AvgConfidence
		{ 
		    get { return _AvgConfidence; }
			set
			{
			    if (value == _AvgConfidence) return;
				_AvgConfidence = value;
				NotifyPropertyChanged();//m => this.AvgConfidence
			}
		}
        private Nullable<decimal> _AvgConfidence;

        [DataMember]
        public Nullable<int> SuccessfulCorrections
		{ 
		    get { return _SuccessfulCorrections; }
			set
			{
			    if (value == _SuccessfulCorrections) return;
				_SuccessfulCorrections = value;
				NotifyPropertyChanged();//m => this.SuccessfulCorrections
			}
		}
        private Nullable<int> _SuccessfulCorrections;

        [DataMember]
        public Nullable<int> FailedCorrections
		{ 
		    get { return _FailedCorrections; }
			set
			{
			    if (value == _FailedCorrections) return;
				_FailedCorrections = value;
				NotifyPropertyChanged();//m => this.FailedCorrections
			}
		}
        private Nullable<int> _FailedCorrections;

        [DataMember]
        public Nullable<decimal> SuccessRate
		{ 
		    get { return _SuccessRate; }
			set
			{
			    if (value == _SuccessRate) return;
				_SuccessRate = value;
				NotifyPropertyChanged();//m => this.SuccessRate
			}
		}
        private Nullable<decimal> _SuccessRate;

        [DataMember]
        public Nullable<System.DateTime> FirstCorrection
		{ 
		    get { return _FirstCorrection; }
			set
			{
			    if (value == _FirstCorrection) return;
				_FirstCorrection = value;
				NotifyPropertyChanged();//m => this.FirstCorrection
			}
		}
        private Nullable<System.DateTime> _FirstCorrection;

        [DataMember]
        public Nullable<System.DateTime> LastCorrection
		{ 
		    get { return _LastCorrection; }
			set
			{
			    if (value == _LastCorrection) return;
				_LastCorrection = value;
				NotifyPropertyChanged();//m => this.LastCorrection
			}
		}
        private Nullable<System.DateTime> _LastCorrection;

       
   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<vw_OCRCorrectionAnalysis>.Equals(vw_OCRCorrectionAnalysis other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace OCR.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class OCRFileTypes : BaseEntity<OCRFileTypes>, ITrackable, IEquatable<OCRFileTypes>
    {
        [DataMember]
        public int OCRInvoiceId
		{ 
		    get { return _OCRInvoiceId; }
			set
			{
			    if (value == _OCRInvoiceId) return;
				_OCRInvoiceId = value;
				NotifyPropertyChanged();//m => this.OCRInvoiceId
			}
		}
        private int _OCRInvoiceId;

        [DataMember]
        public int FileTypeId
		{ 
		    get { return _FileTypeId; }
			set
			{
			    if (value == _FileTypeId) return;
				_FileTypeId = value;
				NotifyPropertyChanged();//m => this.FileTypeId
			}
		}
        private int _FileTypeId;

       
        [DataMember]
        public Invoices Invoices
		{
		    get { return _Invoices; }
			set
			{
			    if (value == _Invoices) return;
				_Invoices = value;
                InvoicesChangeTracker = _Invoices == null ? null
                    : new ChangeTrackingCollection<Invoices> { _Invoices };
				NotifyPropertyChanged();//m => this.Invoices
			}
		}
        private Invoices _Invoices;
        private ChangeTrackingCollection<Invoices> InvoicesChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<OCRFileTypes>.Equals(OCRFileTypes other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace PreviousDocumentQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class PreviousDocumentItem : BaseEntity<PreviousDocumentItem>, ITrackable, IEquatable<PreviousDocumentItem>
    {
        [DataMember]
        public string Amount_deducted_from_licence
		{ 
		    get { return _Amount_deducted_from_licence; }
			set
			{
			    if (value == _Amount_deducted_from_licence) return;
				_Amount_deducted_from_licence = value;
				NotifyPropertyChanged();//m => this.Amount_deducted_from_licence
			}
		}
        private string _Amount_deducted_from_licence;

        [DataMember]
        public int Item_Id
		{ 
		    get { return _Item_Id; }
			set
			{
			    if (value == _Item_Id) return;
				_Item_Id = value;
				NotifyPropertyChanged();//m => this.Item_Id
			}
		}
        private int _Item_Id;

        [DataMember]
        public int ASYCUDA_Id
		{ 
		    get { return _ASYCUDA_Id; }
			set
			{
			    if (value == _ASYCUDA_Id) return;
				_ASYCUDA_Id = value;
				NotifyPropertyChanged();//m => this.ASYCUDA_Id
			}
		}
        private int _ASYCUDA_Id;

        [DataMember]
        public string Licence_number
		{ 
		    get { return _Licence_number; }
			set
			{
			    if (value == _Licence_number) return;
				_Licence_number = value;
				NotifyPropertyChanged();//m => this.Licence_number
			}
		}
        private string _Licence_number;

        [DataMember]
        public string Free_text_1
		{ 
		    get { return _Free_text_1; }
			set
			{
			    if (value == _Free_text_1) return;
				_Free_text_1 = value;
				NotifyPropertyChanged();//m => this.Free_text_1
			}
		}
        private string _Free_text_1;

        [DataMember]
        public string Free_text_2
		{ 
		    get { return _Free_text_2; }
			set
			{
			    if (value == _Free_text_2) return;
				_Free_text_2 = value;
				NotifyPropertyChanged();//m => this.Free_text_2
			}
		}
        private string _Free_text_2;

        [DataMember]
        public Nullable<int> EntryDataDetailsId
		{ 
		    get { return _EntryDataDetailsId; }
			set
			{
			    if (value == _EntryDataDetailsId) return;
				_EntryDataDetailsId = value;
				NotifyPropertyChanged();//m => this.EntryDataDetailsId
			}
		}
        private Nullable<int> _EntryDataDetailsId;

        [DataMember]
        public int LineNumber
		{ 
		    get { return _LineNumber; }
			set
			{
			    if (value == _LineNumber) return;
				_LineNumber = value;
				NotifyPropertyChanged();//m => this.LineNumber
			}
		}
        private int _LineNumber;

        [DataMember]
        public Nullable<bool> IsAssessed
		{ 
		    get { return _IsAssessed; }
			set
			{
			    if (value == _IsAssessed) return;
				_IsAssessed = value;
				NotifyPropertyChanged();//m => this.IsAssessed
			}
		}
        private Nullable<bool> _IsAssessed;

        [DataMember]
        public double DPQtyAllocated
		{ 
		    get { return _DPQtyAllocated; }
			set
			{
			    if (value == _DPQtyAllocated) return;
				_DPQtyAllocated = value;
				NotifyPropertyChanged();//m => this.DPQtyAllocated
			}
		}
        private double _DPQtyAllocated;

        [DataMember]
        public double DFQtyAllocated
		{ 
		    get { return _DFQtyAllocated; }
			set
			{
			    if (value == _DFQtyAllocated) return;
				_DFQtyAllocated = value;
				NotifyPropertyChanged();//m => this.DFQtyAllocated
			}
		}
        private double _DFQtyAllocated;

        [DataMember]
        public Nullable<System.DateTime> EntryTimeStamp
		{ 
		    get { return _EntryTimeStamp; }
			set
			{
			    if (value == _EntryTimeStamp) return;
				_EntryTimeStamp = value;
				NotifyPropertyChanged();//m => this.EntryTimeStamp
			}
		}
        private Nullable<System.DateTime> _EntryTimeStamp;

        [DataMember]
        public Nullable<bool> AttributeOnlyAllocation
		{ 
		    get { return _AttributeOnlyAllocation; }
			set
			{
			    if (value == _AttributeOnlyAllocation) return;
				_AttributeOnlyAllocation = value;
				NotifyPropertyChanged();//m => this.AttributeOnlyAllocation
			}
		}
        private Nullable<bool> _AttributeOnlyAllocation;

        [DataMember]
        public Nullable<bool> DoNotAllocate
		{ 
		    get { return _DoNotAllocate; }
			set
			{
			    if (value == _DoNotAllocate) return;
				_DoNotAllocate = value;
				NotifyPropertyChanged();//m => this.DoNotAllocate
			}
		}
        private Nullable<bool> _DoNotAllocate;

        [DataMember]
        public Nullable<bool> DoNotEX
		{ 
		    get { return _DoNotEX; }
			set
			{
			    if (value == _DoNotEX) return;
				_DoNotEX = value;
				NotifyPropertyChanged();//m => this.DoNotEX
			}
		}
        private Nullable<bool> _DoNotEX;

        [DataMember]
        public Nullable<double> Item_price
		{ 
		    get { return _Item_price; }
			set
			{
			    if (value == _Item_price) return;
				_Item_price = value;
				NotifyPropertyChanged();//m => this.Item_price
			}
		}
        private Nullable<double> _Item_price;

        [DataMember]
        public string ItemNumber
		{ 
		    get { return _ItemNumber; }
			set
			{
			    if (value == _ItemNumber) return;
				_ItemNumber = value;
				NotifyPropertyChanged();//m => this.ItemNumber
			}
		}
        private string _ItemNumber;

        [DataMember]
        public string TariffCode
		{ 
		    get { return _TariffCode; }
			set
			{
			    if (value == _TariffCode) return;
				_TariffCode = value;
				NotifyPropertyChanged();//m => this.TariffCode
			}
		}
        private string _TariffCode;

        [DataMember]
        public Nullable<double> DutyLiability
		{ 
		    get { return _DutyLiability; }
			set
			{
			    if (value == _DutyLiability) return;
				_DutyLiability = value;
				NotifyPropertyChanged();//m => this.DutyLiability
			}
		}
        private Nullable<double> _DutyLiability;

        [DataMember]
        public Nullable<double> Total_CIF_itm
		{ 
		    get { return _Total_CIF_itm; }
			set
			{
			    if (value == _Total_CIF_itm) return;
				_Total_CIF_itm = value;
				NotifyPropertyChanged();//m => this.Total_CIF_itm
			}
		}
        private Nullable<double> _Total_CIF_itm;

        [DataMember]
        public Nullable<double> Freight
		{ 
		    get { return _Freight; }
			set
			{
			    if (value == _Freight) return;
				_Freight = value;
				NotifyPropertyChanged();//m => this.Freight
			}
		}
        private Nullable<double> _Freight;

        [DataMember]
        public Nullable<double> Statistical_value
		{ 
		    get { return _Statistical_value; }
			set
			{
			    if (value == _Statistical_value) return;
				_Statistical_value = value;
				NotifyPropertyChanged();//m => this.Statistical_value
			}
		}
        private Nullable<double> _Statistical_value;

        [DataMember]
        public Nullable<double> PiQuantity
		{ 
		    get { return _PiQuantity; }
			set
			{
			    if (value == _PiQuantity) return;
				_PiQuantity = value;
				NotifyPropertyChanged();//m => this.PiQuantity
			}
		}
        private Nullable<double> _PiQuantity;

        [DataMember]
        public string Description_of_goods
		{ 
		    get { return _Description_of_goods; }
			set
			{
			    if (value == _Description_of_goods) return;
				_Description_of_goods = value;
				NotifyPropertyChanged();//m => this.Description_of_goods
			}
		}
        private string _Description_of_goods;

        [DataMember]
        public string Commercial_Description
		{ 
		    get { return _Commercial_Description; }
			set
			{
			    if (value == _Commercial_Description) return;
				_Commercial_Description = value;
				NotifyPropertyChanged();//m => this.Commercial_Description
			}
		}
        private string _Commercial_Description;

        [DataMember]
        public string Suppplementary_unit_code
		{ 
		    get { return _Suppplementary_unit_code; }
			set
			{
			    if (value == _Suppplementary_unit_code) return;
				_Suppplementary_unit_code = value;
				NotifyPropertyChanged();//m => this.Suppplementary_unit_code
			}
		}
        private string _Suppplementary_unit_code;

        [DataMember]
        public Nullable<double> ItemQuantity
		{ 
		    get { return _ItemQuantity; }
			set
			{
			    if (value == _ItemQuantity) return;
				_ItemQuantity = value;
				NotifyPropertyChanged();//m => this.ItemQuantity
			}
		}
        private Nullable<double> _ItemQuantity;

        [DataMember]
        public string DocumentType
		{ 
		    get { return _DocumentType; }
			set
			{
			    if (value == _DocumentType) return;
				_DocumentType = value;
				NotifyPropertyChanged();//m => this.DocumentType
			}
		}
        private string _DocumentType;

        [DataMember]
        public string CNumber
		{ 
		    get { return _CNumber; }
			set
			{
			    if (value == _CNumber) return;
				_CNumber = value;
				NotifyPropertyChanged();//m => this.CNumber
			}
		}
        private string _CNumber;

        [DataMember]
        public Nullable<System.DateTime> AssessmentDate
		{ 
		    get { return _AssessmentDate; }
			set
			{
			    if (value == _AssessmentDate) return;
				_AssessmentDate = value;
				NotifyPropertyChanged();//m => this.AssessmentDate
			}
		}
        private Nullable<System.DateTime> _AssessmentDate;

        [DataMember]
        public int ApplicationSettingsId
		{ 
		    get { return _ApplicationSettingsId; }
			set
			{
			    if (value == _ApplicationSettingsId) return;
				_ApplicationSettingsId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingsId
			}
		}
        private int _ApplicationSettingsId;

       
        [DataMember]
        public PreviousDocument PreviousDocument
		{
		    get { return _PreviousDocument; }
			set
			{
			    if (value == _PreviousDocument) return;
				_PreviousDocument = value;
                PreviousDocumentChangeTracker = _PreviousDocument == null ? null
                    : new ChangeTrackingCollection<PreviousDocument> { _PreviousDocument };
				NotifyPropertyChanged();//m => this.PreviousDocument
			}
		}
        private PreviousDocument _PreviousDocument;
        private ChangeTrackingCollection<PreviousDocument> PreviousDocumentChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<PreviousItemsEx> PreviousItemsExes
		{
		    get { return _PreviousItemsExes; }
			set
			{
			    if (Equals(value, _PreviousItemsExes)) return;
				_PreviousItemsExes = value;
				NotifyPropertyChanged();//m => this.PreviousItemsExes
			}
		}
        private ChangeTrackingCollection<PreviousItemsEx> _PreviousItemsExes = new ChangeTrackingCollection<PreviousItemsEx>();

        [DataMember]
        public ChangeTrackingCollection<PreviousItemsEx> PreviousItemsExes1
		{
		    get { return _PreviousItemsExes1; }
			set
			{
			    if (Equals(value, _PreviousItemsExes1)) return;
				_PreviousItemsExes1 = value;
				NotifyPropertyChanged();//m => this.PreviousItemsExes1
			}
		}
        private ChangeTrackingCollection<PreviousItemsEx> _PreviousItemsExes1 = new ChangeTrackingCollection<PreviousItemsEx>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<PreviousDocumentItem>.Equals(PreviousDocumentItem other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




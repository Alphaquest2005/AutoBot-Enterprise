// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace SalesDataQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class SalesData : BaseEntity<SalesData>, ITrackable, IEquatable<SalesData>
    {
        [DataMember]
        public string EntryDataId
		{ 
		    get { return _EntryDataId; }
			set
			{
			    if (value == _EntryDataId) return;
				_EntryDataId = value;
				NotifyPropertyChanged();//m => this.EntryDataId
			}
		}
        private string _EntryDataId;

        [DataMember]
        public System.DateTime EntryDataDate
		{ 
		    get { return _EntryDataDate; }
			set
			{
			    if (value == _EntryDataDate) return;
				_EntryDataDate = value;
				NotifyPropertyChanged();//m => this.EntryDataDate
			}
		}
        private System.DateTime _EntryDataDate;

        [DataMember]
        public string Type
		{ 
		    get { return _Type; }
			set
			{
			    if (value == _Type) return;
				_Type = value;
				NotifyPropertyChanged();//m => this.Type
			}
		}
        private string _Type;

        [DataMember]
        public Nullable<double> TaxAmount
		{ 
		    get { return _TaxAmount; }
			set
			{
			    if (value == _TaxAmount) return;
				_TaxAmount = value;
				NotifyPropertyChanged();//m => this.TaxAmount
			}
		}
        private Nullable<double> _TaxAmount;

        [DataMember]
        public string CustomerName
		{ 
		    get { return _CustomerName; }
			set
			{
			    if (value == _CustomerName) return;
				_CustomerName = value;
				NotifyPropertyChanged();//m => this.CustomerName
			}
		}
        private string _CustomerName;

        [DataMember]
        public Nullable<double> Total
		{ 
		    get { return _Total; }
			set
			{
			    if (value == _Total) return;
				_Total = value;
				NotifyPropertyChanged();//m => this.Total
			}
		}
        private Nullable<double> _Total;

        [DataMember]
        public Nullable<double> AllocatedTotal
		{ 
		    get { return _AllocatedTotal; }
			set
			{
			    if (value == _AllocatedTotal) return;
				_AllocatedTotal = value;
				NotifyPropertyChanged();//m => this.AllocatedTotal
			}
		}
        private Nullable<double> _AllocatedTotal;

        [DataMember]
        public Nullable<int> AsycudaDocumentSetId
		{ 
		    get { return _AsycudaDocumentSetId; }
			set
			{
			    if (value == _AsycudaDocumentSetId) return;
				_AsycudaDocumentSetId = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentSetId
			}
		}
        private Nullable<int> _AsycudaDocumentSetId;

        [DataMember]
        public Nullable<int> AsycudaDocumentId
		{ 
		    get { return _AsycudaDocumentId; }
			set
			{
			    if (value == _AsycudaDocumentId) return;
				_AsycudaDocumentId = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentId
			}
		}
        private Nullable<int> _AsycudaDocumentId;

        [DataMember]
        public int ApplicationSettingsId
		{ 
		    get { return _ApplicationSettingsId; }
			set
			{
			    if (value == _ApplicationSettingsId) return;
				_ApplicationSettingsId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingsId
			}
		}
        private int _ApplicationSettingsId;

       
        [DataMember]
        public ChangeTrackingCollection<SalesDataDetail> SalesDataDetails
		{
		    get { return _SalesDataDetails; }
			set
			{
			    if (Equals(value, _SalesDataDetails)) return;
				_SalesDataDetails = value;
				NotifyPropertyChanged();//m => this.SalesDataDetails
			}
		}
        private ChangeTrackingCollection<SalesDataDetail> _SalesDataDetails = new ChangeTrackingCollection<SalesDataDetail>();

        [DataMember]
        public ChangeTrackingCollection<AsycudaDocumentSetEntryData> AsycudaDocumentSets
		{
		    get { return _AsycudaDocumentSets; }
			set
			{
			    if (Equals(value, _AsycudaDocumentSets)) return;
				_AsycudaDocumentSets = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentSets
			}
		}
        private ChangeTrackingCollection<AsycudaDocumentSetEntryData> _AsycudaDocumentSets = new ChangeTrackingCollection<AsycudaDocumentSetEntryData>();

        [DataMember]
        public ChangeTrackingCollection<SalesDataAllocations> SalesDataAllocations
		{
		    get { return _SalesDataAllocations; }
			set
			{
			    if (Equals(value, _SalesDataAllocations)) return;
				_SalesDataAllocations = value;
				NotifyPropertyChanged();//m => this.SalesDataAllocations
			}
		}
        private ChangeTrackingCollection<SalesDataAllocations> _SalesDataAllocations = new ChangeTrackingCollection<SalesDataAllocations>();

        [DataMember]
        public ChangeTrackingCollection<AsycudaDocumentEntryData> AsycudaDocuments
		{
		    get { return _AsycudaDocuments; }
			set
			{
			    if (Equals(value, _AsycudaDocuments)) return;
				_AsycudaDocuments = value;
				NotifyPropertyChanged();//m => this.AsycudaDocuments
			}
		}
        private ChangeTrackingCollection<AsycudaDocumentEntryData> _AsycudaDocuments = new ChangeTrackingCollection<AsycudaDocumentEntryData>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<SalesData>.Equals(SalesData other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace SalesDataQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class SalesDataDetail : BaseEntity<SalesDataDetail>, ITrackable, IEquatable<SalesDataDetail>
    {
        [DataMember]
        public int EntryDataDetailsId
		{ 
		    get { return _EntryDataDetailsId; }
			set
			{
			    if (value == _EntryDataDetailsId) return;
				_EntryDataDetailsId = value;
				NotifyPropertyChanged();//m => this.EntryDataDetailsId
			}
		}
        private int _EntryDataDetailsId;

        [DataMember]
        public string EntryDataId
		{ 
		    get { return _EntryDataId; }
			set
			{
			    if (value == _EntryDataId) return;
				_EntryDataId = value;
				NotifyPropertyChanged();//m => this.EntryDataId
			}
		}
        private string _EntryDataId;

        [DataMember]
        public Nullable<int> LineNumber
		{ 
		    get { return _LineNumber; }
			set
			{
			    if (value == _LineNumber) return;
				_LineNumber = value;
				NotifyPropertyChanged();//m => this.LineNumber
			}
		}
        private Nullable<int> _LineNumber;

        [DataMember]
        public string ItemNumber
		{ 
		    get { return _ItemNumber; }
			set
			{
			    if (value == _ItemNumber) return;
				_ItemNumber = value;
				NotifyPropertyChanged();//m => this.ItemNumber
			}
		}
        private string _ItemNumber;

        [DataMember]
        public double Quantity
		{ 
		    get { return _Quantity; }
			set
			{
			    if (value == _Quantity) return;
				_Quantity = value;
				NotifyPropertyChanged();//m => this.Quantity
			}
		}
        private double _Quantity;

        [DataMember]
        public string Units
		{ 
		    get { return _Units; }
			set
			{
			    if (value == _Units) return;
				_Units = value;
				NotifyPropertyChanged();//m => this.Units
			}
		}
        private string _Units;

        [DataMember]
        public string ItemDescription
		{ 
		    get { return _ItemDescription; }
			set
			{
			    if (value == _ItemDescription) return;
				_ItemDescription = value;
				NotifyPropertyChanged();//m => this.ItemDescription
			}
		}
        private string _ItemDescription;

        [DataMember]
        public double Cost
		{ 
		    get { return _Cost; }
			set
			{
			    if (value == _Cost) return;
				_Cost = value;
				NotifyPropertyChanged();//m => this.Cost
			}
		}
        private double _Cost;

        [DataMember]
        public double QtyAllocated
		{ 
		    get { return _QtyAllocated; }
			set
			{
			    if (value == _QtyAllocated) return;
				_QtyAllocated = value;
				NotifyPropertyChanged();//m => this.QtyAllocated
			}
		}
        private double _QtyAllocated;

        [DataMember]
        public double UnitWeight
		{ 
		    get { return _UnitWeight; }
			set
			{
			    if (value == _UnitWeight) return;
				_UnitWeight = value;
				NotifyPropertyChanged();//m => this.UnitWeight
			}
		}
        private double _UnitWeight;

        [DataMember]
        public Nullable<bool> DoNotAllocate
		{ 
		    get { return _DoNotAllocate; }
			set
			{
			    if (value == _DoNotAllocate) return;
				_DoNotAllocate = value;
				NotifyPropertyChanged();//m => this.DoNotAllocate
			}
		}
        private Nullable<bool> _DoNotAllocate;

        [DataMember]
        public string TariffCode
		{ 
		    get { return _TariffCode; }
			set
			{
			    if (value == _TariffCode) return;
				_TariffCode = value;
				NotifyPropertyChanged();//m => this.TariffCode
			}
		}
        private string _TariffCode;

        [DataMember]
        public string CNumber
		{ 
		    get { return _CNumber; }
			set
			{
			    if (value == _CNumber) return;
				_CNumber = value;
				NotifyPropertyChanged();//m => this.CNumber
			}
		}
        private string _CNumber;

        [DataMember]
        public Nullable<int> CLineNumber
		{ 
		    get { return _CLineNumber; }
			set
			{
			    if (value == _CLineNumber) return;
				_CLineNumber = value;
				NotifyPropertyChanged();//m => this.CLineNumber
			}
		}
        private Nullable<int> _CLineNumber;

        [DataMember]
        public Nullable<bool> Downloaded
		{ 
		    get { return _Downloaded; }
			set
			{
			    if (value == _Downloaded) return;
				_Downloaded = value;
				NotifyPropertyChanged();//m => this.Downloaded
			}
		}
        private Nullable<bool> _Downloaded;

        [DataMember]
        public Nullable<int> ASYCUDA_Id
		{ 
		    get { return _ASYCUDA_Id; }
			set
			{
			    if (value == _ASYCUDA_Id) return;
				_ASYCUDA_Id = value;
				NotifyPropertyChanged();//m => this.ASYCUDA_Id
			}
		}
        private Nullable<int> _ASYCUDA_Id;

        [DataMember]
        public double SalesValue
		{ 
		    get { return _SalesValue; }
			set
			{
			    if (value == _SalesValue) return;
				_SalesValue = value;
				NotifyPropertyChanged();//m => this.SalesValue
			}
		}
        private double _SalesValue;

        [DataMember]
        public System.DateTime EntryDataDate
		{ 
		    get { return _EntryDataDate; }
			set
			{
			    if (value == _EntryDataDate) return;
				_EntryDataDate = value;
				NotifyPropertyChanged();//m => this.EntryDataDate
			}
		}
        private System.DateTime _EntryDataDate;

        [DataMember]
        public int ApplicationSettingsId
		{ 
		    get { return _ApplicationSettingsId; }
			set
			{
			    if (value == _ApplicationSettingsId) return;
				_ApplicationSettingsId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingsId
			}
		}
        private int _ApplicationSettingsId;

       
        [DataMember]
        public SalesData SalesData
		{
		    get { return _SalesData; }
			set
			{
			    if (value == _SalesData) return;
				_SalesData = value;
                SalesDataChangeTracker = _SalesData == null ? null
                    : new ChangeTrackingCollection<SalesData> { _SalesData };
				NotifyPropertyChanged();//m => this.SalesData
			}
		}
        private SalesData _SalesData;
        private ChangeTrackingCollection<SalesData> SalesDataChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<AsycudaDocumentSetEntryDataDetails> AsycudaDocumentSets
		{
		    get { return _AsycudaDocumentSets; }
			set
			{
			    if (Equals(value, _AsycudaDocumentSets)) return;
				_AsycudaDocumentSets = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentSets
			}
		}
        private ChangeTrackingCollection<AsycudaDocumentSetEntryDataDetails> _AsycudaDocumentSets = new ChangeTrackingCollection<AsycudaDocumentSetEntryDataDetails>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<SalesDataDetail>.Equals(SalesDataDetail other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




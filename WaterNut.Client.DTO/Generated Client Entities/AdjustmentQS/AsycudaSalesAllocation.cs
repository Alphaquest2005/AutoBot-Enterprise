// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace AdjustmentQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class AsycudaSalesAllocation : BaseEntity<AsycudaSalesAllocation>, ITrackable, IEquatable<AsycudaSalesAllocation>
    {
        [DataMember]
        public int AllocationId
		{ 
		    get { return _AllocationId; }
			set
			{
			    if (value == _AllocationId) return;
				_AllocationId = value;
				NotifyPropertyChanged();//m => this.AllocationId
			}
		}
        private int _AllocationId;

        [DataMember]
        public Nullable<int> EntryDataDetailsId
		{ 
		    get { return _EntryDataDetailsId; }
			set
			{
			    if (value == _EntryDataDetailsId) return;
				_EntryDataDetailsId = value;
				NotifyPropertyChanged();//m => this.EntryDataDetailsId
			}
		}
        private Nullable<int> _EntryDataDetailsId;

        [DataMember]
        public Nullable<int> PreviousItem_Id
		{ 
		    get { return _PreviousItem_Id; }
			set
			{
			    if (value == _PreviousItem_Id) return;
				_PreviousItem_Id = value;
				NotifyPropertyChanged();//m => this.PreviousItem_Id
			}
		}
        private Nullable<int> _PreviousItem_Id;

        [DataMember]
        public string Status
		{ 
		    get { return _Status; }
			set
			{
			    if (value == _Status) return;
				_Status = value;
				NotifyPropertyChanged();//m => this.Status
			}
		}
        private string _Status;

        [DataMember]
        public double QtyAllocated
		{ 
		    get { return _QtyAllocated; }
			set
			{
			    if (value == _QtyAllocated) return;
				_QtyAllocated = value;
				NotifyPropertyChanged();//m => this.QtyAllocated
			}
		}
        private double _QtyAllocated;

        [DataMember]
        public Nullable<System.DateTime> EntryTimeStamp
		{ 
		    get { return _EntryTimeStamp; }
			set
			{
			    if (value == _EntryTimeStamp) return;
				_EntryTimeStamp = value;
				NotifyPropertyChanged();//m => this.EntryTimeStamp
			}
		}
        private Nullable<System.DateTime> _EntryTimeStamp;

        [DataMember]
        public int EANumber
		{ 
		    get { return _EANumber; }
			set
			{
			    if (value == _EANumber) return;
				_EANumber = value;
				NotifyPropertyChanged();//m => this.EANumber
			}
		}
        private int _EANumber;

        [DataMember]
        public int SANumber
		{ 
		    get { return _SANumber; }
			set
			{
			    if (value == _SANumber) return;
				_SANumber = value;
				NotifyPropertyChanged();//m => this.SANumber
			}
		}
        private int _SANumber;

        [DataMember]
        public Nullable<int> xEntryItem_Id
		{ 
		    get { return _xEntryItem_Id; }
			set
			{
			    if (value == _xEntryItem_Id) return;
				_xEntryItem_Id = value;
				NotifyPropertyChanged();//m => this.xEntryItem_Id
			}
		}
        private Nullable<int> _xEntryItem_Id;

       
        [DataMember]
        public EntryDataDetail EntryDataDetail
		{
		    get { return _EntryDataDetail; }
			set
			{
			    if (value == _EntryDataDetail) return;
				_EntryDataDetail = value;
                EntryDataDetailChangeTracker = _EntryDataDetail == null ? null
                    : new ChangeTrackingCollection<EntryDataDetail> { _EntryDataDetail };
				NotifyPropertyChanged();//m => this.EntryDataDetail
			}
		}
        private EntryDataDetail _EntryDataDetail;
        private ChangeTrackingCollection<EntryDataDetail> EntryDataDetailChangeTracker { get; set; }

        [DataMember]
        public xcuda_Item xcuda_Item
		{
		    get { return _xcuda_Item; }
			set
			{
			    if (value == _xcuda_Item) return;
				_xcuda_Item = value;
                xcuda_ItemChangeTracker = _xcuda_Item == null ? null
                    : new ChangeTrackingCollection<xcuda_Item> { _xcuda_Item };
				NotifyPropertyChanged();//m => this.xcuda_Item
			}
		}
        private xcuda_Item _xcuda_Item;
        private ChangeTrackingCollection<xcuda_Item> xcuda_ItemChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<AsycudaSalesAllocation>.Equals(AsycudaSalesAllocation other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




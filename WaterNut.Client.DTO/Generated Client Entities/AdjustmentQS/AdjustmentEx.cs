// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace AdjustmentQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class AdjustmentEx : BaseEntity<AdjustmentEx>, ITrackable, IEquatable<AdjustmentEx>
    {
        [DataMember]
        public System.DateTime InvoiceDate
		{ 
		    get { return _InvoiceDate; }
			set
			{
			    if (value == _InvoiceDate) return;
				_InvoiceDate = value;
				NotifyPropertyChanged();//m => this.InvoiceDate
			}
		}
        private System.DateTime _InvoiceDate;

        [DataMember]
        public string Type
		{ 
		    get { return _Type; }
			set
			{
			    if (value == _Type) return;
				_Type = value;
				NotifyPropertyChanged();//m => this.Type
			}
		}
        private string _Type;

        [DataMember]
        public string DutyFreePaid
		{ 
		    get { return _DutyFreePaid; }
			set
			{
			    if (value == _DutyFreePaid) return;
				_DutyFreePaid = value;
				NotifyPropertyChanged();//m => this.DutyFreePaid
			}
		}
        private string _DutyFreePaid;

        [DataMember]
        public string InvoiceNo
		{ 
		    get { return _InvoiceNo; }
			set
			{
			    if (value == _InvoiceNo) return;
				_InvoiceNo = value;
				NotifyPropertyChanged();//m => this.InvoiceNo
			}
		}
        private string _InvoiceNo;

        [DataMember]
        public Nullable<int> ImportedLines
		{ 
		    get { return _ImportedLines; }
			set
			{
			    if (value == _ImportedLines) return;
				_ImportedLines = value;
				NotifyPropertyChanged();//m => this.ImportedLines
			}
		}
        private Nullable<int> _ImportedLines;

        [DataMember]
        public Nullable<int> TotalLines
		{ 
		    get { return _TotalLines; }
			set
			{
			    if (value == _TotalLines) return;
				_TotalLines = value;
				NotifyPropertyChanged();//m => this.TotalLines
			}
		}
        private Nullable<int> _TotalLines;

        [DataMember]
        public string Currency
		{ 
		    get { return _Currency; }
			set
			{
			    if (value == _Currency) return;
				_Currency = value;
				NotifyPropertyChanged();//m => this.Currency
			}
		}
        private string _Currency;

        [DataMember]
        public int ApplicationSettingsId
		{ 
		    get { return _ApplicationSettingsId; }
			set
			{
			    if (value == _ApplicationSettingsId) return;
				_ApplicationSettingsId = value;
				NotifyPropertyChanged();//m => this.ApplicationSettingsId
			}
		}
        private int _ApplicationSettingsId;

        [DataMember]
        public string EmailId
		{ 
		    get { return _EmailId; }
			set
			{
			    if (value == _EmailId) return;
				_EmailId = value;
				NotifyPropertyChanged();//m => this.EmailId
			}
		}
        private string _EmailId;

        [DataMember]
        public Nullable<int> FileTypeId
		{ 
		    get { return _FileTypeId; }
			set
			{
			    if (value == _FileTypeId) return;
				_FileTypeId = value;
				NotifyPropertyChanged();//m => this.FileTypeId
			}
		}
        private Nullable<int> _FileTypeId;

        [DataMember]
        public Nullable<double> InvoiceTotal
		{ 
		    get { return _InvoiceTotal; }
			set
			{
			    if (value == _InvoiceTotal) return;
				_InvoiceTotal = value;
				NotifyPropertyChanged();//m => this.InvoiceTotal
			}
		}
        private Nullable<double> _InvoiceTotal;

        [DataMember]
        public Nullable<double> ImportedTotal
		{ 
		    get { return _ImportedTotal; }
			set
			{
			    if (value == _ImportedTotal) return;
				_ImportedTotal = value;
				NotifyPropertyChanged();//m => this.ImportedTotal
			}
		}
        private Nullable<double> _ImportedTotal;

        [DataMember]
        public int EntryData_Id
		{ 
		    get { return _EntryData_Id; }
			set
			{
			    if (value == _EntryData_Id) return;
				_EntryData_Id = value;
				NotifyPropertyChanged();//m => this.EntryData_Id
			}
		}
        private int _EntryData_Id;

        [DataMember]
        public Nullable<System.DateTime> EffectiveDate
		{ 
		    get { return _EffectiveDate; }
			set
			{
			    if (value == _EffectiveDate) return;
				_EffectiveDate = value;
				NotifyPropertyChanged();//m => this.EffectiveDate
			}
		}
        private Nullable<System.DateTime> _EffectiveDate;

       
        [DataMember]
        public ChangeTrackingCollection<AsycudaDocumentSetEntryData> AsycudaDocumentSets
		{
		    get { return _AsycudaDocumentSets; }
			set
			{
			    if (Equals(value, _AsycudaDocumentSets)) return;
				_AsycudaDocumentSets = value;
				NotifyPropertyChanged();//m => this.AsycudaDocumentSets
			}
		}
        private ChangeTrackingCollection<AsycudaDocumentSetEntryData> _AsycudaDocumentSets = new ChangeTrackingCollection<AsycudaDocumentSetEntryData>();

        [DataMember]
        public ChangeTrackingCollection<AsycudaDocumentEntryData> AsycudaDocuments
		{
		    get { return _AsycudaDocuments; }
			set
			{
			    if (Equals(value, _AsycudaDocuments)) return;
				_AsycudaDocuments = value;
				NotifyPropertyChanged();//m => this.AsycudaDocuments
			}
		}
        private ChangeTrackingCollection<AsycudaDocumentEntryData> _AsycudaDocuments = new ChangeTrackingCollection<AsycudaDocumentEntryData>();

        [DataMember]
        public ChangeTrackingCollection<AdjustmentOver> AdjustmentOvers
		{
		    get { return _AdjustmentOvers; }
			set
			{
			    if (Equals(value, _AdjustmentOvers)) return;
				_AdjustmentOvers = value;
				NotifyPropertyChanged();//m => this.AdjustmentOvers
			}
		}
        private ChangeTrackingCollection<AdjustmentOver> _AdjustmentOvers = new ChangeTrackingCollection<AdjustmentOver>();

        [DataMember]
        public ChangeTrackingCollection<AdjustmentShort> AdjustmentShorts
		{
		    get { return _AdjustmentShorts; }
			set
			{
			    if (Equals(value, _AdjustmentShorts)) return;
				_AdjustmentShorts = value;
				NotifyPropertyChanged();//m => this.AdjustmentShorts
			}
		}
        private ChangeTrackingCollection<AdjustmentShort> _AdjustmentShorts = new ChangeTrackingCollection<AdjustmentShort>();

        [DataMember]
        public ChangeTrackingCollection<AdjustmentDetail> AdjustmentDetails
		{
		    get { return _AdjustmentDetails; }
			set
			{
			    if (Equals(value, _AdjustmentDetails)) return;
				_AdjustmentDetails = value;
				NotifyPropertyChanged();//m => this.AdjustmentDetails
			}
		}
        private ChangeTrackingCollection<AdjustmentDetail> _AdjustmentDetails = new ChangeTrackingCollection<AdjustmentDetail>();

        [DataMember]
        public ChangeTrackingCollection<EntryDataDetail> EntryDataDetails
		{
		    get { return _EntryDataDetails; }
			set
			{
			    if (Equals(value, _EntryDataDetails)) return;
				_EntryDataDetails = value;
				NotifyPropertyChanged();//m => this.EntryDataDetails
			}
		}
        private ChangeTrackingCollection<EntryDataDetail> _EntryDataDetails = new ChangeTrackingCollection<EntryDataDetail>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<AdjustmentEx>.Equals(AdjustmentEx other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;


using Core.Common.Client.DTO;
using TrackableEntities;
using TrackableEntities.Client;

namespace AdjustmentQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class xcuda_Item : BaseEntity<xcuda_Item>, ITrackable, IEquatable<xcuda_Item>
    {
        [DataMember]
        public string Amount_deducted_from_licence
		{ 
		    get { return _Amount_deducted_from_licence; }
			set
			{
			    if (value == _Amount_deducted_from_licence) return;
				_Amount_deducted_from_licence = value;
				NotifyPropertyChanged();//m => this.Amount_deducted_from_licence
			}
		}
        private string _Amount_deducted_from_licence;

        [DataMember]
        public string Quantity_deducted_from_licence
		{ 
		    get { return _Quantity_deducted_from_licence; }
			set
			{
			    if (value == _Quantity_deducted_from_licence) return;
				_Quantity_deducted_from_licence = value;
				NotifyPropertyChanged();//m => this.Quantity_deducted_from_licence
			}
		}
        private string _Quantity_deducted_from_licence;

        [DataMember]
        public int Item_Id
		{ 
		    get { return _Item_Id; }
			set
			{
			    if (value == _Item_Id) return;
				_Item_Id = value;
				NotifyPropertyChanged();//m => this.Item_Id
			}
		}
        private int _Item_Id;

        [DataMember]
        public int ASYCUDA_Id
		{ 
		    get { return _ASYCUDA_Id; }
			set
			{
			    if (value == _ASYCUDA_Id) return;
				_ASYCUDA_Id = value;
				NotifyPropertyChanged();//m => this.ASYCUDA_Id
			}
		}
        private int _ASYCUDA_Id;

        [DataMember]
        public string Licence_number
		{ 
		    get { return _Licence_number; }
			set
			{
			    if (value == _Licence_number) return;
				_Licence_number = value;
				NotifyPropertyChanged();//m => this.Licence_number
			}
		}
        private string _Licence_number;

        [DataMember]
        public string Free_text_1
		{ 
		    get { return _Free_text_1; }
			set
			{
			    if (value == _Free_text_1) return;
				_Free_text_1 = value;
				NotifyPropertyChanged();//m => this.Free_text_1
			}
		}
        private string _Free_text_1;

        [DataMember]
        public string Free_text_2
		{ 
		    get { return _Free_text_2; }
			set
			{
			    if (value == _Free_text_2) return;
				_Free_text_2 = value;
				NotifyPropertyChanged();//m => this.Free_text_2
			}
		}
        private string _Free_text_2;

        [DataMember]
        public Nullable<int> EntryDataDetailsId
		{ 
		    get { return _EntryDataDetailsId; }
			set
			{
			    if (value == _EntryDataDetailsId) return;
				_EntryDataDetailsId = value;
				NotifyPropertyChanged();//m => this.EntryDataDetailsId
			}
		}
        private Nullable<int> _EntryDataDetailsId;

        [DataMember]
        public int LineNumber
		{ 
		    get { return _LineNumber; }
			set
			{
			    if (value == _LineNumber) return;
				_LineNumber = value;
				NotifyPropertyChanged();//m => this.LineNumber
			}
		}
        private int _LineNumber;

        [DataMember]
        public Nullable<bool> IsAssessed
		{ 
		    get { return _IsAssessed; }
			set
			{
			    if (value == _IsAssessed) return;
				_IsAssessed = value;
				NotifyPropertyChanged();//m => this.IsAssessed
			}
		}
        private Nullable<bool> _IsAssessed;

        [DataMember]
        public double DPQtyAllocated
		{ 
		    get { return _DPQtyAllocated; }
			set
			{
			    if (value == _DPQtyAllocated) return;
				_DPQtyAllocated = value;
				NotifyPropertyChanged();//m => this.DPQtyAllocated
			}
		}
        private double _DPQtyAllocated;

        [DataMember]
        public double DFQtyAllocated
		{ 
		    get { return _DFQtyAllocated; }
			set
			{
			    if (value == _DFQtyAllocated) return;
				_DFQtyAllocated = value;
				NotifyPropertyChanged();//m => this.DFQtyAllocated
			}
		}
        private double _DFQtyAllocated;

        [DataMember]
        public Nullable<System.DateTime> EntryTimeStamp
		{ 
		    get { return _EntryTimeStamp; }
			set
			{
			    if (value == _EntryTimeStamp) return;
				_EntryTimeStamp = value;
				NotifyPropertyChanged();//m => this.EntryTimeStamp
			}
		}
        private Nullable<System.DateTime> _EntryTimeStamp;

        [DataMember]
        public Nullable<bool> AttributeOnlyAllocation
		{ 
		    get { return _AttributeOnlyAllocation; }
			set
			{
			    if (value == _AttributeOnlyAllocation) return;
				_AttributeOnlyAllocation = value;
				NotifyPropertyChanged();//m => this.AttributeOnlyAllocation
			}
		}
        private Nullable<bool> _AttributeOnlyAllocation;

        [DataMember]
        public Nullable<bool> DoNotAllocate
		{ 
		    get { return _DoNotAllocate; }
			set
			{
			    if (value == _DoNotAllocate) return;
				_DoNotAllocate = value;
				NotifyPropertyChanged();//m => this.DoNotAllocate
			}
		}
        private Nullable<bool> _DoNotAllocate;

        [DataMember]
        public Nullable<bool> DoNotEX
		{ 
		    get { return _DoNotEX; }
			set
			{
			    if (value == _DoNotEX) return;
				_DoNotEX = value;
				NotifyPropertyChanged();//m => this.DoNotEX
			}
		}
        private Nullable<bool> _DoNotEX;

        [DataMember]
        public bool ImportComplete
		{ 
		    get { return _ImportComplete; }
			set
			{
			    if (value == _ImportComplete) return;
				_ImportComplete = value;
				NotifyPropertyChanged();//m => this.ImportComplete
			}
		}
        private bool _ImportComplete;

        [DataMember]
        public string WarehouseError
		{ 
		    get { return _WarehouseError; }
			set
			{
			    if (value == _WarehouseError) return;
				_WarehouseError = value;
				NotifyPropertyChanged();//m => this.WarehouseError
			}
		}
        private string _WarehouseError;

        [DataMember]
        public double SalesFactor
		{ 
		    get { return _SalesFactor; }
			set
			{
			    if (value == _SalesFactor) return;
				_SalesFactor = value;
				NotifyPropertyChanged();//m => this.SalesFactor
			}
		}
        private double _SalesFactor;

        [DataMember]
        public string PreviousInvoiceNumber
		{ 
		    get { return _PreviousInvoiceNumber; }
			set
			{
			    if (value == _PreviousInvoiceNumber) return;
				_PreviousInvoiceNumber = value;
				NotifyPropertyChanged();//m => this.PreviousInvoiceNumber
			}
		}
        private string _PreviousInvoiceNumber;

        [DataMember]
        public string PreviousInvoiceLineNumber
		{ 
		    get { return _PreviousInvoiceLineNumber; }
			set
			{
			    if (value == _PreviousInvoiceLineNumber) return;
				_PreviousInvoiceLineNumber = value;
				NotifyPropertyChanged();//m => this.PreviousInvoiceLineNumber
			}
		}
        private string _PreviousInvoiceLineNumber;

        [DataMember]
        public string PreviousInvoiceItemNumber
		{ 
		    get { return _PreviousInvoiceItemNumber; }
			set
			{
			    if (value == _PreviousInvoiceItemNumber) return;
				_PreviousInvoiceItemNumber = value;
				NotifyPropertyChanged();//m => this.PreviousInvoiceItemNumber
			}
		}
        private string _PreviousInvoiceItemNumber;

        [DataMember]
        public string EntryDataType
		{ 
		    get { return _EntryDataType; }
			set
			{
			    if (value == _EntryDataType) return;
				_EntryDataType = value;
				NotifyPropertyChanged();//m => this.EntryDataType
			}
		}
        private string _EntryDataType;

        [DataMember]
        public Nullable<int> UpgradeKey
		{ 
		    get { return _UpgradeKey; }
			set
			{
			    if (value == _UpgradeKey) return;
				_UpgradeKey = value;
				NotifyPropertyChanged();//m => this.UpgradeKey
			}
		}
        private Nullable<int> _UpgradeKey;

       
        [DataMember]
        public ChangeTrackingCollection<AsycudaSalesAllocation> AsycudaSalesAllocations
		{
		    get { return _AsycudaSalesAllocations; }
			set
			{
			    if (Equals(value, _AsycudaSalesAllocations)) return;
				_AsycudaSalesAllocations = value;
				NotifyPropertyChanged();//m => this.AsycudaSalesAllocations
			}
		}
        private ChangeTrackingCollection<AsycudaSalesAllocation> _AsycudaSalesAllocations = new ChangeTrackingCollection<AsycudaSalesAllocation>();

        [DataMember]
        public ChangeTrackingCollection<AdjustmentOversAllocation> AdjustmentOversAllocations
		{
		    get { return _AdjustmentOversAllocations; }
			set
			{
			    if (Equals(value, _AdjustmentOversAllocations)) return;
				_AdjustmentOversAllocations = value;
				NotifyPropertyChanged();//m => this.AdjustmentOversAllocations
			}
		}
        private ChangeTrackingCollection<AdjustmentOversAllocation> _AdjustmentOversAllocations = new ChangeTrackingCollection<AdjustmentOversAllocation>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<xcuda_Item>.Equals(xcuda_Item other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}




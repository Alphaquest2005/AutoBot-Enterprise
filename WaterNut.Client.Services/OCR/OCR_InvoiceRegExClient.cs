// <autogenerated>
//   This file was generated by T4 code generator AllServices.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Collections.Generic;
using System.ServiceModel;
using System.Threading.Tasks;
using OCR.Client.DTO;
using OCR.Client.Contracts;
using Core.Common.Client.Services;


using Core.Common.Contracts;
using System.ComponentModel.Composition;


namespace OCR.Client.Services
{
    [Export (typeof(OCR_InvoiceRegExClient))]
    [Export (typeof(IOCR_InvoiceRegExService))]
    [Export(typeof(IClientService))]
    [PartCreationPolicy(CreationPolicy.NonShared)]
    public partial class OCR_InvoiceRegExClient :  ClientService<IOCR_InvoiceRegExService>, IOCR_InvoiceRegExService, IDisposable
    {
        
        public async Task<IEnumerable<OCR_InvoiceRegEx>> GetOCR_InvoiceRegEx(List<string> includesLst = null)
        {
            return await Channel.GetOCR_InvoiceRegEx(includesLst).ConfigureAwait(false);
        }

        public async Task<OCR_InvoiceRegEx> GetOCR_InvoiceRegExByKey(string id, List<string> includesLst = null)
        {
            return await Channel.GetOCR_InvoiceRegExByKey(id, includesLst).ConfigureAwait(false);
        }

		public async Task<IEnumerable<OCR_InvoiceRegEx>> GetOCR_InvoiceRegExByExpression(string exp, List<string> includesLst = null)
        {
            return await Channel.GetOCR_InvoiceRegExByExpression(exp, includesLst).ConfigureAwait(false);
        }

		public async Task<IEnumerable<OCR_InvoiceRegEx>> GetOCR_InvoiceRegExByExpressionLst(List<string> expLst, List<string> includesLst = null)
        {
            return await Channel.GetOCR_InvoiceRegExByExpressionLst(expLst, includesLst).ConfigureAwait(false);
        }

		public async Task<IEnumerable<OCR_InvoiceRegEx>> GetOCR_InvoiceRegExByExpressionNav(string exp,
															 Dictionary<string, string> navExp, List<string> includesLst = null)
		{
			return await Channel.GetOCR_InvoiceRegExByExpressionNav(exp, navExp, includesLst).ConfigureAwait(false);
		}

        public async Task<IEnumerable<OCR_InvoiceRegEx>> GetOCR_InvoiceRegExByBatch(string exp,
                                                                        int totalrow, List<string> includesLst = null)
        {
            return await Channel.GetOCR_InvoiceRegExByBatch(exp, totalrow, includesLst).ConfigureAwait(false);
        }

        public async Task<IEnumerable<OCR_InvoiceRegEx>> GetOCR_InvoiceRegExByBatchExpressionLst(List<string> expLst,
                                                                        int totalrow, List<string> includesLst = null)
        {
            return await Channel.GetOCR_InvoiceRegExByBatchExpressionLst(expLst, totalrow, includesLst).ConfigureAwait(false);
        }

        public async Task<OCR_InvoiceRegEx> UpdateOCR_InvoiceRegEx(OCR_InvoiceRegEx entity)
        {
           return await Channel.UpdateOCR_InvoiceRegEx(entity).ConfigureAwait(false);
        }

        public async Task<OCR_InvoiceRegEx> CreateOCR_InvoiceRegEx(OCR_InvoiceRegEx entity)
        {
           return await Channel.CreateOCR_InvoiceRegEx(entity).ConfigureAwait(false);
        }

        public async Task<bool> DeleteOCR_InvoiceRegEx(string id)
        {
            return await Channel.DeleteOCR_InvoiceRegEx(id).ConfigureAwait(false);
        }

        public async Task<bool> RemoveSelectedOCR_InvoiceRegEx(IEnumerable<string> selectedOCR_InvoiceRegEx)
        {
           return await Channel.RemoveSelectedOCR_InvoiceRegEx(selectedOCR_InvoiceRegEx).ConfigureAwait(false);
        }

       // Virtural List implementation

        public async Task<int> CountByExpressionLst(List<string> expLst)
        {
            return await Channel.CountByExpressionLst(expLst).ConfigureAwait(continueOnCapturedContext: false);
        }
        
	    public async Task<int> Count(string exp)
        {
            return await Channel.Count(exp).ConfigureAwait(continueOnCapturedContext: false);
        }

		public async Task<int> CountNav(string exp, Dictionary<string, string> navExp)
        {
           return await Channel.CountNav(exp, navExp).ConfigureAwait(false);
        }

        public async Task<IEnumerable<OCR_InvoiceRegEx>> LoadRange(int startIndex, int count, string exp)
        {
            return await Channel.LoadRange(startIndex,count,exp).ConfigureAwait(false);
        }

		public async Task<IEnumerable<OCR_InvoiceRegEx>>  LoadRangeNav(int startIndex, int count, string exp,
                                                                                 Dictionary<string, string> navExp, IEnumerable<string> includeLst = null)
        {
            return await Channel.LoadRangeNav(startIndex,count,exp, navExp, includeLst).ConfigureAwait(false);
        }
		public async Task<IEnumerable<OCR_InvoiceRegEx>> GetOCR_InvoiceRegExByInvoiceId(string InvoiceId, List<string> includesLst = null)
        {
            return  await Channel.GetOCR_InvoiceRegExByInvoiceId(InvoiceId, includesLst).ConfigureAwait(false);
        }
			 
  		public async Task<IEnumerable<OCR_InvoiceRegEx>> GetOCR_InvoiceRegExByRegExId(string RegExId, List<string> includesLst = null)
        {
            return  await Channel.GetOCR_InvoiceRegExByRegExId(RegExId, includesLst).ConfigureAwait(false);
        }
			 
  		public async Task<IEnumerable<OCR_InvoiceRegEx>> GetOCR_InvoiceRegExByReplacementRegExId(string ReplacementRegExId, List<string> includesLst = null)
        {
            return  await Channel.GetOCR_InvoiceRegExByReplacementRegExId(ReplacementRegExId, includesLst).ConfigureAwait(false);
        }
			 
          public decimal SumField(string whereExp, string sumExp)
		{
			return Channel.SumField(whereExp,sumExp);
		}

        public async Task<decimal> SumNav( string exp, Dictionary<string, string> navExp, string field)
        {
            return await Channel.SumNav(exp,navExp,field);
        }

		public string MinField(string whereExp, string sumExp)
		{
			return Channel.MinField(whereExp,sumExp);
		}

		#region IDisposable implementation

            /// <summary>
            /// IDisposable.Dispose implementation, calls Dispose(true).
            /// </summary>
            void IDisposable.Dispose()
            {
                Dispose(true);
            }

            /// <summary>
            /// Dispose worker method. Handles graceful shutdown of the
            /// client even if it is an faulted state.
            /// </summary>
            /// <param name="disposing">Are we disposing (alternative
            /// is to be finalizing)</param>
            protected new void Dispose(bool disposing)
            {
                if (disposing)
                {
                    try
                    {
                        if (State != CommunicationState.Faulted)
                        {
                            Close();
                        }
                    }
                    finally
                    {
                        if (State != CommunicationState.Closed)
                        {
                            Abort();
                        }
                        GC.SuppressFinalize(this);
                    }
                }
            }



            #endregion
    }
}

